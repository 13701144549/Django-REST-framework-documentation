{
    "docs": [
        {
            "location": "/",
            "text": "Django REST framework \u4e2d\u6587\u6587\u6863\n\n\n\u5982\u679c\u672c\u6587\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u8bf7\u5728\ngithub\n\u4e0a \nstar\n \u8be5\u9879\u76ee\u3002\n\n\n\u5f53\u7136\u6211\u4e5f\u5341\u5206\u6b22\u8fce\u4f60\u52a0\u5165\u8be5\u9879\u76ee\u5e76\u63a8\u9001\u4f60\u7684\u7ffb\u8bd1\u3002\n\n\nDjango REST framework \u6280\u672f\u4ea4\u6d41QQ\u7fa4\n\n\nQQ\u7fa4\u53f7\uff1a930578836\n\n\n>>>\u70b9\u6211\u67e5\u770b\u5feb\u901f\u5165\u95e8\u89c6\u9891\u6559\u7a0b\n\n\n\u7248\u672c\u76f8\u5173\n\n\n\u8fd9\u662fDjango REST framework v3 \u7248\u672c\u7684\u4e2d\u6587\u7ffb\u8bd1\u6587\u6863\u3002\n\n\n\n\n\n\ndjango-rest-framework\u7248\u672c\uff1a\n\n\n\n\nv3.6.3\n\n\n\n\n\n\n\n\ndjango\u7248\u672c\uff1a\n\n\n\n\nv1.10.4\n\n\n\n\n\n\n\n\n\u7ffb\u8bd1\u4eba\u5458\n\n\n\n\nQ1mi\n\n\n\n\n\u4ee5\u4e0b\u7ae0\u8282\u5df2\u5b8c\u6210\u7ffb\u8bd1\n\n\n\u6559\u7a0b\n\n\n\n\nQuickstart\n\n\n1-Serialization\n\n\n2-requests-and-responses\n\n\n3-class-based-views\n\n\n4-authentication-and-permissions\n\n\n5-relationships-and-hyperlinked-apis\n\n\n6-viewsets-and-routers\n\n\n7-schemas-and-client-libraries\n\n\n\n\nAPI\u6307\u5357\n\n\n\n\nRequests\n\n\nResponses\n\n\nViews\n\n\nGeneric Views\n\n\nViewets\n\n\nRouters\n\n\nParsers\n\n\nRenderers\n\n\nSerializers\n\n\nFiltering\n\n\nAuthentication\n\n\nPermissions\n\n\nVersioning\n\n\n\n\n\u4e3b\u9898\n\n\n\n\najax-csrf-cors",
            "title": "\u4e3b\u9875"
        },
        {
            "location": "/#django-rest-framework",
            "text": "\u5982\u679c\u672c\u6587\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u8bf7\u5728 github \u4e0a  star  \u8be5\u9879\u76ee\u3002  \u5f53\u7136\u6211\u4e5f\u5341\u5206\u6b22\u8fce\u4f60\u52a0\u5165\u8be5\u9879\u76ee\u5e76\u63a8\u9001\u4f60\u7684\u7ffb\u8bd1\u3002",
            "title": "Django REST framework \u4e2d\u6587\u6587\u6863"
        },
        {
            "location": "/#django-rest-framework-qq",
            "text": "QQ\u7fa4\u53f7\uff1a930578836  >>>\u70b9\u6211\u67e5\u770b\u5feb\u901f\u5165\u95e8\u89c6\u9891\u6559\u7a0b",
            "title": "Django REST framework \u6280\u672f\u4ea4\u6d41QQ\u7fa4"
        },
        {
            "location": "/#_1",
            "text": "\u8fd9\u662fDjango REST framework v3 \u7248\u672c\u7684\u4e2d\u6587\u7ffb\u8bd1\u6587\u6863\u3002    django-rest-framework\u7248\u672c\uff1a   v3.6.3     django\u7248\u672c\uff1a   v1.10.4",
            "title": "\u7248\u672c\u76f8\u5173"
        },
        {
            "location": "/#_2",
            "text": "Q1mi",
            "title": "\u7ffb\u8bd1\u4eba\u5458"
        },
        {
            "location": "/#_3",
            "text": "",
            "title": "\u4ee5\u4e0b\u7ae0\u8282\u5df2\u5b8c\u6210\u7ffb\u8bd1"
        },
        {
            "location": "/#_4",
            "text": "Quickstart  1-Serialization  2-requests-and-responses  3-class-based-views  4-authentication-and-permissions  5-relationships-and-hyperlinked-apis  6-viewsets-and-routers  7-schemas-and-client-libraries",
            "title": "\u6559\u7a0b"
        },
        {
            "location": "/#api",
            "text": "Requests  Responses  Views  Generic Views  Viewets  Routers  Parsers  Renderers  Serializers  Filtering  Authentication  Permissions  Versioning",
            "title": "API\u6307\u5357"
        },
        {
            "location": "/#_5",
            "text": "ajax-csrf-cors",
            "title": "\u4e3b\u9898"
        },
        {
            "location": "/tutorial/quickstart_zh/",
            "text": "\u5feb\u901f\u5165\u95e8\n\n\n\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5141\u8bb8\u7ba1\u7406\u5458\u7528\u6237\u67e5\u770b\u548c\u7f16\u8f91\u7cfb\u7edf\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7684API\u3002\n\n\n\u9879\u76ee\u8bbe\u7f6e\n\n\n\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a \ntutorial\n \u7684\u65b0django\u9879\u76ee\uff0c\u7136\u540e\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a \nquickstart\n \u7684\u65b0app\u3002\n\n\n# \u521b\u5efa\u9879\u76ee\u76ee\u5f55\nmkdir tutorial\ncd tutorial\n\n# \u521b\u5efa\u4e00\u4e2avirtualenv\u6765\u9694\u79bb\u6211\u4eec\u672c\u5730\u7684\u5305\u4f9d\u8d56\u5173\u7cfb\nvirtualenv env\nsource env/bin/activate  # \u5728Windows\u4e0b\u4f7f\u7528 `env\\Scripts\\activate`\n\n# \u5728\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5 Django \u548c Django REST framework\npip install django\npip install djangorestframework\n\n# \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u548c\u4e00\u4e2a\u5355\u4e2a\u5e94\u7528\ndjango-admin.py startproject tutorial .  # \u6ce8\u610f\u7ed3\u5c3e\u7684'.'\u7b26\u53f7\ncd tutorial\ndjango-admin.py startapp quickstart\ncd ..\n\n\n\n\u73b0\u5728\u7b2c\u4e00\u6b21\u540c\u6b65\u4f60\u7684\u6570\u636e\u5e93\uff1a\n\n\npython manage.py migrate\n\n\n\n\u6211\u4eec\u8fd8\u8981\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a \nadmin\n \u7684\u521d\u59cb\u7528\u6237\uff0c\u5bc6\u7801\u4e3a \npassword123\n\u3002\u6211\u4eec\u7a0d\u540e\u5c06\u5728\u8be5\u793a\u4f8b\u4e2d\u9a8c\u8bc1\u8be5\u7528\u6237\u3002\n\n\npython manage.py createsuperuser\n\n\n\n\u7b49\u4f60\u5efa\u7acb\u597d\u4e00\u4e2a\u6570\u636e\u5e93\u548c\u521d\u59cb\u7528\u6237\uff0c\u5e76\u51c6\u5907\u597d\u5f00\u59cb\u3002\u6253\u5f00\u5e94\u7528\u7a0b\u5e8f\u7684\u76ee\u5f55\uff0c\u6211\u4eec\u5c31\u8981\u5f00\u59cb\u7f16\u7801\u4e86...\n\n\nSerializers\n\n\n\u9996\u5148\u6211\u4eec\u8981\u5b9a\u4e49\u4e00\u4e9b\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a \ntutorial/quickstart/serializers.py\n\u7684\u6587\u4ef6\uff0c\u6765\u7528\u4f5c\u6211\u4eec\u7684\u6570\u636e\u8868\u793a\u3002\n\n\nfrom django.contrib.auth.models import User, Group\nfrom rest_framework import serializers\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ('url', 'username', 'email', 'groups')\n\n\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ('url', 'name')\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u7528\u5230\u4e86\u8d85\u94fe\u63a5\u5173\u7cfb\uff0c\u4f7f\u7528 \nHyperlinkedModelSerializer\n\u3002\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e3b\u952e\u548c\u5404\u79cd\u5176\u4ed6\u5173\u7cfb\uff0c\u4f46\u8d85\u94fe\u63a5\u662f\u597d\u7684RESTful\u8bbe\u8ba1\u3002\n\n\nViews\n\n\n\u597d\u4e86\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u5199\u4e00\u4e9b\u89c6\u56fe\u3002\u6253\u5f00 \ntutorial/quickstart/views.py\n \u6587\u4ef6\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002\n\n\nfrom django.contrib.auth.models import User, Group\nfrom rest_framework import viewsets\nfrom tutorial.quickstart.serializers import UserSerializer, GroupSerializer\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u5141\u8bb8\u7528\u6237\u67e5\u770b\u6216\u7f16\u8f91\u7684API\u8def\u5f84\u3002\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n\n\nclass GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u5141\u8bb8\u7ec4\u67e5\u770b\u6216\u7f16\u8f91\u7684API\u8def\u5f84\u3002\n    \"\"\"\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\n\n\n\n\u4e0d\u518d\u5199\u591a\u4e2a\u89c6\u56fe\uff0c\u6211\u4eec\u5c06\u6240\u6709\u5e38\u89c1\u884c\u4e3a\u5206\u7ec4\u5199\u5230\u53eb \nViewSets\n \u7684\u7c7b\u4e2d\u3002\n\n\n\u5982\u679c\u6211\u4eec\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8fd9\u4e9b\u7ec6\u8282\u5206\u89e3\u4e3a\u5355\u4e2a\u89c6\u56fe\uff0c\u4f46\u662f\u4f7f\u7528viewsets\u53ef\u4ee5\u4f7f\u89c6\u56fe\u903b\u8f91\u7ec4\u7ec7\u826f\u597d\uff0c\u5e76\u4e14\u975e\u5e38\u7b80\u6d01\u3002\n\n\nURLs\n\n\n\u597d\u7684\uff0c\u73b0\u5728\u6211\u4eec\u5728\ntutorial/urls.py\n\u4e2d\u5f00\u59cb\u5199\u8fde\u63a5API\u7684URLs\u3002\n\n\nfrom django.conf.urls import url, include\nfrom rest_framework import routers\nfrom tutorial.quickstart import views\n\nrouter = routers.DefaultRouter()\nrouter.register(r'users', views.UserViewSet)\nrouter.register(r'groups', views.GroupViewSet)\n\n# \u4f7f\u7528\u81ea\u52a8URL\u8def\u7531\u8fde\u63a5\u6211\u4eec\u7684API\u3002\n# \u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u5305\u62ec\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8API\u7684\u767b\u5f55URL\u3002\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\n\n\n\n\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662fviewsets\u800c\u4e0d\u662fviews\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u4f7f\u7528\u8def\u7531\u5668\u7c7b\u6ce8\u518c\u89c6\u56fe\u6765\u81ea\u52a8\u751f\u6210API\u7684URL conf\u3002\n\n\n\u518d\u6b21\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u5bf9API URL\u8fdb\u884c\u66f4\u591a\u7684\u63a7\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u5176\u62c9\u51fa\u6765\u4f7f\u7528\u5e38\u89c4\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5e76\u660e\u786e\u5730\u7f16\u5199URL conf\u3002\n\n\n\u6700\u540e\uff0c\u6211\u4eec\u5c06\u5305\u62ec\u7528\u4e8e\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\u7684\u9ed8\u8ba4\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\u3002\u8fd9\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5982\u679c\u60a8\u7684API\u9700\u8981\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e14\u4f60\u60f3\u8981\u4f7f\u7528\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\uff0c\u90a3\u4e48\u5b83\u4eec\u5f88\u6709\u7528\u3002\n\n\nSettings\n\n\n\u6211\u4eec\u4e5f\u60f3\u8bbe\u7f6e\u4e00\u4e9b\u5168\u5c40\u8bbe\u7f6e\u3002\u6211\u4eec\u60f3\u6253\u5f00\u5206\u9875\uff0c\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684API\u53ea\u80fd\u7531\u7ba1\u7406\u5458\u4f7f\u7528\u3002\u8bbe\u7f6e\u6a21\u5757\u90fd\u5728 \ntutorial/settings.py\n \u4e2d\u3002\n\n\nINSTALLED_APPS = (\n    ...\n    'rest_framework',\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAdminUser',\n    ],\n    'PAGE_SIZE': 10\n}\n\n\n\n\u597d\u4e86\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\u3002\n\n\n\n\n\u6d4b\u8bd5\u6211\u4eec\u7684API\n\n\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u6d4b\u8bd5\u6211\u4eec\u6784\u5efa\u7684API\u3002\u6211\u4eec\u4ece\u547d\u4ee4\u884c\u542f\u52a8\u670d\u52a1\u5668\u3002\n\n\npython manage.py runserver\n\n\n\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u8bbf\u95ee\u6211\u4eec\u7684API\uff0c\u4f7f\u7528\u8bf8\u5982 \ncurl\n ...\n\n\nbash: curl -H 'Accept: application/json; indent=4' -u admin:password123 http://127.0.0.1:8000/users/\n{\n    \"count\": 2,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"email\": \"admin@example.com\",\n            \"groups\": [],\n            \"url\": \"http://127.0.0.1:8000/users/1/\",\n            \"username\": \"admin\"\n        },\n        {\n            \"email\": \"tom@example.com\",\n            \"groups\": [                ],\n            \"url\": \"http://127.0.0.1:8000/users/2/\",\n            \"username\": \"tom\"\n        }\n    ]\n}\n\n\n\n\u6216\u8005\u4f7f\u7528 \nhttpie\n\uff0c\u547d\u4ee4\u884c\u5de5\u5177...\n\n\nbash: http -a admin:password123 http://127.0.0.1:8000/users/\n\nHTTP/1.1 200 OK\n...\n{\n    \"count\": 2,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"email\": \"admin@example.com\",\n            \"groups\": [],\n            \"url\": \"http://localhost:8000/users/1/\",\n            \"username\": \"paul\"\n        },\n        {\n            \"email\": \"tom@example.com\",\n            \"groups\": [                ],\n            \"url\": \"http://127.0.0.1:8000/users/2/\",\n            \"username\": \"tom\"\n        }\n    ]\n}\n\n\n\n\u6216\u76f4\u63a5\u901a\u8fc7\u6d4f\u89c8\u5668\uff0c\u8f6c\u5230URL \nhttp://127.0.0.1:8000/users/\n...\n\n\n\n\n\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u6d4f\u89c8\u5668\uff0c\u8bf7\u786e\u4fdd\u4f7f\u7528\u53f3\u4e0a\u89d2\u8fdb\u884c\u767b\u5f55\u3002\n\n\n\u975e\u5e38\u68d2\uff01\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff01\n\n\n\u5982\u679c\u60a8\u60f3\u66f4\u6df1\u5165\u5730\u4e86\u89e3REST framework\u5404\u90e8\u5206\u662f\u5982\u4f55\u914d\u5408\u5728\u4e00\u8d77\u7684\uff0c\u8bf7\u524d\u5f80\n\u6559\u7a0b\n\uff0c\u6216\u8005\u5f00\u59cb\u6d4f\u89c8 \nAPI\u6307\u5357\n\u3002",
            "title": "Quickstart"
        },
        {
            "location": "/tutorial/quickstart_zh/#_1",
            "text": "\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5141\u8bb8\u7ba1\u7406\u5458\u7528\u6237\u67e5\u770b\u548c\u7f16\u8f91\u7cfb\u7edf\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7684API\u3002",
            "title": "\u5feb\u901f\u5165\u95e8"
        },
        {
            "location": "/tutorial/quickstart_zh/#_2",
            "text": "\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a  tutorial  \u7684\u65b0django\u9879\u76ee\uff0c\u7136\u540e\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a  quickstart  \u7684\u65b0app\u3002  # \u521b\u5efa\u9879\u76ee\u76ee\u5f55\nmkdir tutorial\ncd tutorial\n\n# \u521b\u5efa\u4e00\u4e2avirtualenv\u6765\u9694\u79bb\u6211\u4eec\u672c\u5730\u7684\u5305\u4f9d\u8d56\u5173\u7cfb\nvirtualenv env\nsource env/bin/activate  # \u5728Windows\u4e0b\u4f7f\u7528 `env\\Scripts\\activate`\n\n# \u5728\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5 Django \u548c Django REST framework\npip install django\npip install djangorestframework\n\n# \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u548c\u4e00\u4e2a\u5355\u4e2a\u5e94\u7528\ndjango-admin.py startproject tutorial .  # \u6ce8\u610f\u7ed3\u5c3e\u7684'.'\u7b26\u53f7\ncd tutorial\ndjango-admin.py startapp quickstart\ncd ..  \u73b0\u5728\u7b2c\u4e00\u6b21\u540c\u6b65\u4f60\u7684\u6570\u636e\u5e93\uff1a  python manage.py migrate  \u6211\u4eec\u8fd8\u8981\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a  admin  \u7684\u521d\u59cb\u7528\u6237\uff0c\u5bc6\u7801\u4e3a  password123 \u3002\u6211\u4eec\u7a0d\u540e\u5c06\u5728\u8be5\u793a\u4f8b\u4e2d\u9a8c\u8bc1\u8be5\u7528\u6237\u3002  python manage.py createsuperuser  \u7b49\u4f60\u5efa\u7acb\u597d\u4e00\u4e2a\u6570\u636e\u5e93\u548c\u521d\u59cb\u7528\u6237\uff0c\u5e76\u51c6\u5907\u597d\u5f00\u59cb\u3002\u6253\u5f00\u5e94\u7528\u7a0b\u5e8f\u7684\u76ee\u5f55\uff0c\u6211\u4eec\u5c31\u8981\u5f00\u59cb\u7f16\u7801\u4e86...",
            "title": "\u9879\u76ee\u8bbe\u7f6e"
        },
        {
            "location": "/tutorial/quickstart_zh/#serializers",
            "text": "\u9996\u5148\u6211\u4eec\u8981\u5b9a\u4e49\u4e00\u4e9b\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a  tutorial/quickstart/serializers.py \u7684\u6587\u4ef6\uff0c\u6765\u7528\u4f5c\u6211\u4eec\u7684\u6570\u636e\u8868\u793a\u3002  from django.contrib.auth.models import User, Group\nfrom rest_framework import serializers\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ('url', 'username', 'email', 'groups')\n\n\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ('url', 'name')  \u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u7528\u5230\u4e86\u8d85\u94fe\u63a5\u5173\u7cfb\uff0c\u4f7f\u7528  HyperlinkedModelSerializer \u3002\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e3b\u952e\u548c\u5404\u79cd\u5176\u4ed6\u5173\u7cfb\uff0c\u4f46\u8d85\u94fe\u63a5\u662f\u597d\u7684RESTful\u8bbe\u8ba1\u3002",
            "title": "Serializers"
        },
        {
            "location": "/tutorial/quickstart_zh/#views",
            "text": "\u597d\u4e86\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u5199\u4e00\u4e9b\u89c6\u56fe\u3002\u6253\u5f00  tutorial/quickstart/views.py  \u6587\u4ef6\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002  from django.contrib.auth.models import User, Group\nfrom rest_framework import viewsets\nfrom tutorial.quickstart.serializers import UserSerializer, GroupSerializer\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u5141\u8bb8\u7528\u6237\u67e5\u770b\u6216\u7f16\u8f91\u7684API\u8def\u5f84\u3002\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n\n\nclass GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u5141\u8bb8\u7ec4\u67e5\u770b\u6216\u7f16\u8f91\u7684API\u8def\u5f84\u3002\n    \"\"\"\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer  \u4e0d\u518d\u5199\u591a\u4e2a\u89c6\u56fe\uff0c\u6211\u4eec\u5c06\u6240\u6709\u5e38\u89c1\u884c\u4e3a\u5206\u7ec4\u5199\u5230\u53eb  ViewSets  \u7684\u7c7b\u4e2d\u3002  \u5982\u679c\u6211\u4eec\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8fd9\u4e9b\u7ec6\u8282\u5206\u89e3\u4e3a\u5355\u4e2a\u89c6\u56fe\uff0c\u4f46\u662f\u4f7f\u7528viewsets\u53ef\u4ee5\u4f7f\u89c6\u56fe\u903b\u8f91\u7ec4\u7ec7\u826f\u597d\uff0c\u5e76\u4e14\u975e\u5e38\u7b80\u6d01\u3002",
            "title": "Views"
        },
        {
            "location": "/tutorial/quickstart_zh/#urls",
            "text": "\u597d\u7684\uff0c\u73b0\u5728\u6211\u4eec\u5728 tutorial/urls.py \u4e2d\u5f00\u59cb\u5199\u8fde\u63a5API\u7684URLs\u3002  from django.conf.urls import url, include\nfrom rest_framework import routers\nfrom tutorial.quickstart import views\n\nrouter = routers.DefaultRouter()\nrouter.register(r'users', views.UserViewSet)\nrouter.register(r'groups', views.GroupViewSet)\n\n# \u4f7f\u7528\u81ea\u52a8URL\u8def\u7531\u8fde\u63a5\u6211\u4eec\u7684API\u3002\n# \u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u5305\u62ec\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8API\u7684\u767b\u5f55URL\u3002\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]  \u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662fviewsets\u800c\u4e0d\u662fviews\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u4f7f\u7528\u8def\u7531\u5668\u7c7b\u6ce8\u518c\u89c6\u56fe\u6765\u81ea\u52a8\u751f\u6210API\u7684URL conf\u3002  \u518d\u6b21\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u5bf9API URL\u8fdb\u884c\u66f4\u591a\u7684\u63a7\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u5176\u62c9\u51fa\u6765\u4f7f\u7528\u5e38\u89c4\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5e76\u660e\u786e\u5730\u7f16\u5199URL conf\u3002  \u6700\u540e\uff0c\u6211\u4eec\u5c06\u5305\u62ec\u7528\u4e8e\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\u7684\u9ed8\u8ba4\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\u3002\u8fd9\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5982\u679c\u60a8\u7684API\u9700\u8981\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e14\u4f60\u60f3\u8981\u4f7f\u7528\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\uff0c\u90a3\u4e48\u5b83\u4eec\u5f88\u6709\u7528\u3002",
            "title": "URLs"
        },
        {
            "location": "/tutorial/quickstart_zh/#settings",
            "text": "\u6211\u4eec\u4e5f\u60f3\u8bbe\u7f6e\u4e00\u4e9b\u5168\u5c40\u8bbe\u7f6e\u3002\u6211\u4eec\u60f3\u6253\u5f00\u5206\u9875\uff0c\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684API\u53ea\u80fd\u7531\u7ba1\u7406\u5458\u4f7f\u7528\u3002\u8bbe\u7f6e\u6a21\u5757\u90fd\u5728  tutorial/settings.py  \u4e2d\u3002  INSTALLED_APPS = (\n    ...\n    'rest_framework',\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAdminUser',\n    ],\n    'PAGE_SIZE': 10\n}  \u597d\u4e86\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\u3002",
            "title": "Settings"
        },
        {
            "location": "/tutorial/quickstart_zh/#api",
            "text": "\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u6d4b\u8bd5\u6211\u4eec\u6784\u5efa\u7684API\u3002\u6211\u4eec\u4ece\u547d\u4ee4\u884c\u542f\u52a8\u670d\u52a1\u5668\u3002  python manage.py runserver  \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u8bbf\u95ee\u6211\u4eec\u7684API\uff0c\u4f7f\u7528\u8bf8\u5982  curl  ...  bash: curl -H 'Accept: application/json; indent=4' -u admin:password123 http://127.0.0.1:8000/users/\n{\n    \"count\": 2,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"email\": \"admin@example.com\",\n            \"groups\": [],\n            \"url\": \"http://127.0.0.1:8000/users/1/\",\n            \"username\": \"admin\"\n        },\n        {\n            \"email\": \"tom@example.com\",\n            \"groups\": [                ],\n            \"url\": \"http://127.0.0.1:8000/users/2/\",\n            \"username\": \"tom\"\n        }\n    ]\n}  \u6216\u8005\u4f7f\u7528  httpie \uff0c\u547d\u4ee4\u884c\u5de5\u5177...  bash: http -a admin:password123 http://127.0.0.1:8000/users/\n\nHTTP/1.1 200 OK\n...\n{\n    \"count\": 2,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"email\": \"admin@example.com\",\n            \"groups\": [],\n            \"url\": \"http://localhost:8000/users/1/\",\n            \"username\": \"paul\"\n        },\n        {\n            \"email\": \"tom@example.com\",\n            \"groups\": [                ],\n            \"url\": \"http://127.0.0.1:8000/users/2/\",\n            \"username\": \"tom\"\n        }\n    ]\n}  \u6216\u76f4\u63a5\u901a\u8fc7\u6d4f\u89c8\u5668\uff0c\u8f6c\u5230URL  http://127.0.0.1:8000/users/ ...   \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u6d4f\u89c8\u5668\uff0c\u8bf7\u786e\u4fdd\u4f7f\u7528\u53f3\u4e0a\u89d2\u8fdb\u884c\u767b\u5f55\u3002  \u975e\u5e38\u68d2\uff01\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff01  \u5982\u679c\u60a8\u60f3\u66f4\u6df1\u5165\u5730\u4e86\u89e3REST framework\u5404\u90e8\u5206\u662f\u5982\u4f55\u914d\u5408\u5728\u4e00\u8d77\u7684\uff0c\u8bf7\u524d\u5f80 \u6559\u7a0b \uff0c\u6216\u8005\u5f00\u59cb\u6d4f\u89c8  API\u6307\u5357 \u3002",
            "title": "\u6d4b\u8bd5\u6211\u4eec\u7684API"
        },
        {
            "location": "/tutorial/1-serialization_zh/",
            "text": "Tutorial 1: \u5e8f\u5217\u5316\n\n\n\u4ecb\u7ecd\n\n\n\u672c\u6559\u7a0b\u5c06\u4ecb\u7ecd\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6536\u5f55\u4ee3\u7801\u9ad8\u4eae\u5c55\u793a\u7684Web API\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d, \u5c06\u4f1a\u4ecb\u7ecd\u7ec4\u6210Rest\u6846\u67b6\u7684\u5404\u4e2a\u7ec4\u4ef6\uff0c\u5e76\u8ba9\u4f60\u5168\u9762\u4e86\u89e3\u5404\u4e2a\u7ec4\u4ef6\u662f\u5982\u4f55\u4e00\u8d77\u5de5\u4f5c\u7684\u3002\n\n\n\u8fd9\u4e2a\u6559\u7a0b\u662f\u76f8\u5f53\u6df1\u5165\u7684\uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u5728\u5f00\u59cb\u4e4b\u524d\u51c6\u5907\u4e9b\u5564\u9152\u548c\u82b1\u751f\u6bdb\u8c46\u4ec0\u4e48\u7684\u3002\u5982\u679c\u4f60\u53ea\u662f\u60f3\u6765\u4e2a\u5feb\u901f\u9884\u89c8\uff0c\u90a3\u4f60\u5e94\u8be5\u67e5\u770b\nquickstart\n\u6587\u6863\u3002\n\n\n\n\n\u6ce8\u610f\n\uff1a\u672c\u6559\u7a0b\u7684\u4ee3\u7801\u53ef\u4ee5\u5728Github\u7684\ntomchristie/rest-framework-tutorial\n\u5e93\u4e2d\u627e\u5230\u3002\u5b8c\u6574\u7684\u5b9e\u73b0\u7248\u672c\u53ef\u4ee5\n\u5728\u7ebf\n\u67e5\u770b\u4f5c\u4e3a\u4e00\u4e2a\u6c99\u76d2\u7248\u672c\u8fdb\u884c\u6d4b\u8bd5\u3002\n\n\n\n\n\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883\n\n\n\u5728\u505a\u5176\u4ed6\u4e8b\u60c5\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u7528\nvirtualenv\n\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u73af\u5883\u3002\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u6211\u4eec\u7684\u5305\u914d\u7f6e\u4e0e\u6211\u4eec\u6b63\u5728\u5f00\u5c55\u7684\u4efb\u4f55\u5176\u4ed6\u9879\u76ee\u4fdd\u6301\u826f\u597d\u7684\u9694\u79bb\u3002\n\n\nvirtualenv env\nsource env/bin/activate\n\n\n\n\u73b0\u5728\u6211\u4eec\u5728\u4e00\u4e2avirtualenv\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u88c5\u6211\u4eec\u9700\u8981\u7684\u5305\u4e86\u3002\n\n\npip install django\npip install djangorestframework\npip install pygments  # \u4ee3\u7801\u9ad8\u4eae\u63d2\u4ef6\n\n\n\n\u6ce8\u610f\uff1a\n \u8981\u968f\u65f6\u9000\u51favirtualenv\u73af\u5883\uff0c\u53ea\u9700\u8f93\u5165\ndeactivate\n\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\nvirtualenv documentation\n\u6587\u6863\u3002\n\n\n\u6b63\u5f0f\u5f00\u59cb\n\n\n\u597d\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u8981\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u3002\n\n\ncd ~\ndjango-admin.py startproject tutorial\ncd tutorial\n\n\n\n\u5b8c\u6210\u4e0a\u9762\u7684\u6b65\u9aa4\u4ee5\u540e\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u7b80\u5355Web API\u7684app\u3002\n\n\npython manage.py startapp snippets\n\n\n\n\u6211\u4eec\u9700\u8981\u5c06\u65b0\u5efa\u7684\nsnippets\napp\u548c\nrest_framework\napp\u6dfb\u52a0\u5230\nINSTALLED_APPS\n\u3002\u8ba9\u6211\u4eec\u7f16\u8f91\ntutorial/settings.py\n\u6587\u4ef6\uff1a\n\n\nINSTALLED_APPS = (\n    ...\n    'rest_framework',\n    'snippets.apps.SnippetsConfig',\n)\n\n\n\n\u8bf7\u6ce8\u610f\u5982\u679c\u4f60\u4f7f\u7528\u7684Django\u7248\u672c\u4f4e\u4e8e1.9\uff0c\u4f60\u9700\u8981\u4f7f\u7528\nsnippets.apps.SnippetsConfig\n\u66ff\u6362\nsnippets\n\u3002\n\n\n\u597d\u4e86\uff0c\u6211\u4eec\u7684\u51c6\u5907\u5de5\u4f5c\u505a\u5b8c\u4e86\u3002\n\n\n\u521b\u5efa\u4e00\u4e2amodel\n\n\n\u4e3a\u4e86\u5b9e\u73b0\u672c\u6559\u7a0b\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7247\u6bb5\u7684\u7b80\u5355\u7684\nSnippet\n model\u3002\u7136\u540e\u7ee7\u7eed\u7f16\u8f91\nsnippets/models.py\n\u6587\u4ef6\u3002\u6ce8\u610f\uff1a\u4f18\u79c0\u7684\u7f16\u7a0b\u5b9e\u8df5\u90fd\u4f1a\u6dfb\u52a0\u6ce8\u91ca\u3002\u867d\u7136\u4f60\u5c06\u5728\u672c\u6559\u7a0b\u4ee3\u7801\u7684\u5b58\u50a8\u5e93\u7248\u672c\u4e2d\u627e\u5230\u5b83\u4eec\uff0c\u4f46\u6211\u4eec\u5728\u6b64\u5ffd\u7565\u4e86\u5b83\u4eec\uff0c\u4e13\u6ce8\u4e8e\u4ee3\u7801\u672c\u8eab\u3002\n\n\nfrom django.db import models\nfrom pygments.lexers import get_all_lexers\nfrom pygments.styles import get_all_styles\n\nLEXERS = [item for item in get_all_lexers() if item[1]]\nLANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])\nSTYLE_CHOICES = sorted((item, item) for item in get_all_styles())\n\n\nclass Snippet(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    title = models.CharField(max_length=100, blank=True, default='')\n    code = models.TextField()\n    linenos = models.BooleanField(default=False)\n    language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)\n    style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)\n\n    class Meta:\n        ordering = ('created',)\n\n\n\n\u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6211\u4eec\u7684\u4ee3\u7801\u6bb5\u6a21\u578b\u521b\u5efa\u521d\u59cb\u8fc1\u79fb\uff08initial migration\uff09\uff0c\u5e76\u9996\u6b21\u540c\u6b65\u6570\u636e\u5e93\uff08migrate\uff09\u3002\n\n\npython manage.py makemigrations snippets\npython manage.py migrate\n\n\n\n\u521b\u5efa\u4e00\u4e2a\u5e8f\u5217\u5316\u7c7b\n\n\n\u5f00\u53d1\u6211\u4eec\u7684Web API\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u4e3a\u6211\u4eec\u7684Web API\u63d0\u4f9b\u4e00\u79cd\u5c06\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e3a\u8bf8\u5982\njson\n\u4e4b\u7c7b\u7684\u8868\u793a\u5f62\u5f0f\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango forms\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\uff08serializers\uff09\u6765\u5b9e\u73b0\u3002 \u5728\nsnippets\n\u7684\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\nserializers.py\n\u6587\u4ef6\uff0c\u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002\n\n\nfrom rest_framework import serializers\nfrom snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES\n\n\nclass SnippetSerializer(serializers.Serializer):\n    id = serializers.IntegerField(read_only=True)\n    title = serializers.CharField(required=False, allow_blank=True, max_length=100)\n    code = serializers.CharField(style={'base_template': 'textarea.html'})\n    linenos = serializers.BooleanField(required=False)\n    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python')\n    style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly')\n\n    def create(self, validated_data):\n        \"\"\"\n        \u6839\u636e\u63d0\u4f9b\u7684\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684`Snippet`\u5b9e\u4f8b\u3002\n        \"\"\"\n        return Snippet.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        \"\"\"\n        \u6839\u636e\u63d0\u4f9b\u7684\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u66f4\u65b0\u548c\u8fd4\u56de\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684`Snippet`\u5b9e\u4f8b\u3002\n        \"\"\"\n        instance.title = validated_data.get('title', instance.title)\n        instance.code = validated_data.get('code', instance.code)\n        instance.linenos = validated_data.get('linenos', instance.linenos)\n        instance.language = validated_data.get('language', instance.language)\n        instance.style = validated_data.get('style', instance.style)\n        instance.save()\n        return instance\n\n\n\n\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u7b2c\u4e00\u90e8\u5206\u5b9a\u4e49\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002\ncreate()\n\u548c\nupdate()\n\u65b9\u6cd5\u5b9a\u4e49\u4e86\u5728\u8c03\u7528\nserializer.save()\n\u65f6\u5982\u4f55\u521b\u5efa\u548c\u4fee\u6539\u5b8c\u6574\u7684\u5b9e\u4f8b\u3002\n\n\n\u5e8f\u5217\u5316\u5668\u7c7b\u4e0eDjango \nForm\n\u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u5e76\u5728\u5404\u79cd\u5b57\u6bb5\u4e2d\u5305\u542b\u7c7b\u4f3c\u7684\u9a8c\u8bc1\u6807\u5fd7\uff0c\u4f8b\u5982\nrequired\n\uff0c\nmax_length\n\u548c\ndefault\n\u3002\n\n\n\u5b57\u6bb5\u6807\u5fd7\u8fd8\u53ef\u4ee5\u63a7\u5236serializer\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5982\u4f55\u663e\u793a\uff0c\u6bd4\u5982\u6e32\u67d3HTML\u7684\u65f6\u5019\u3002\u4e0a\u9762\u7684\n{'base_template': 'textarea.html'}\n\u6807\u5fd7\u7b49\u540c\u4e8e\u5728Django \nForm\n\u7c7b\u4e2d\u4f7f\u7528\nwidget=widgets.Textarea\n\u3002\u8fd9\u5bf9\u4e8e\u63a7\u5236\u5982\u4f55\u663e\u793a\u53ef\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\u7279\u522b\u6709\u7528\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u540e\u9762\u770b\u5230\u3002\n\n\n\u6211\u4eec\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\nModelSerializer\n\u7c7b\u6765\u8282\u7701\u65f6\u95f4\uff0c\u5c31\u50cf\u6211\u4eec\u540e\u9762\u4f1a\u7528\u5230\u7684\u90a3\u6837\u3002\u4f46\u662f\u73b0\u5728\u6211\u4eec\u8fd8\u7ee7\u7eed\u4f7f\u7528\u6211\u4eec\u660e\u786e\u5b9a\u4e49\u7684serializer\u3002\n\n\n\u4f7f\u7528\u5e8f\u5217\u5316\u7c7b\n\n\n\u5728\u6211\u4eec\u8fdb\u4e00\u6b65\u4e86\u89e3\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u719f\u6089\u4f7f\u7528\u6211\u4eec\u65b0\u7684Serializer\u7c7b\u3002\u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\u8fdb\u5165Django shell\u3002\n\n\npython manage.py shell\n\n\n\n\u597d\u7684\uff0c\u50cf\u4e0b\u9762\u4e00\u6837\u5bfc\u5165\u51e0\u4e2a\u6a21\u5757\uff0c\u7136\u540e\u5f00\u59cb\u521b\u5efa\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\u6765\u5904\u7406\u3002\n\n\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.parsers import JSONParser\n\nsnippet = Snippet(code='foo = \"bar\"\\n')\nsnippet.save()\n\nsnippet = Snippet(code='print \"hello, world\"\\n')\nsnippet.save()\n\n\n\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u51e0\u4e2a\u7247\u6bb5\u5b9e\u4f8b\u4e86\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5c06\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u5e8f\u5217\u5316\u3002\n\n\nserializer = SnippetSerializer(snippet)\nserializer.data\n# {'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'}\n\n\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u539f\u751f\u6570\u636e\u7c7b\u578b\u3002\u8981\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8f6c\u6362\u6210\njson\n\u3002\n\n\ncontent = JSONRenderer().render(serializer.data)\ncontent\n# '{\"id\": 2, \"title\": \"\", \"code\": \"print \\\\\"hello, world\\\\\"\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}'\n\n\n\n\u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\u6211\u4eec\u5c06\u4e00\u4e2a\u6d41\uff08stream\uff09\u89e3\u6790\u4e3aPython\u539f\u751f\u6570\u636e\u7c7b\u578b...\n\n\nfrom django.utils.six import BytesIO\n\nstream = BytesIO(content)\ndata = JSONParser().parse(stream)\n\n\n\n...\u7136\u540e\u6211\u4eec\u8981\u5c06Python\u539f\u751f\u6570\u636e\u7c7b\u578b\u6062\u590d\u6210\u6b63\u5e38\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002\n\n\nserializer = SnippetSerializer(data=data)\nserializer.is_valid()\n# True\nserializer.validated_data\n# OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])\nserializer.save()\n# <Snippet: Snippet object>\n\n\n\n\u53ef\u4ee5\u770b\u5230API\u548c\u8868\u5355(forms)\u662f\u591a\u4e48\u76f8\u4f3c\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7c7b\u7f16\u5199\u89c6\u56fe\u7684\u65f6\u5019\uff0c\u76f8\u4f3c\u6027\u4f1a\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002\n\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u5e8f\u5217\u5316\u67e5\u8be2\u7ed3\u679c\u96c6\uff08querysets\uff09\u800c\u4e0d\u662f\u6a21\u578b\u5b9e\u4f8b\u3002\u6211\u4eec\u53ea\u9700\u8981\u4e3aserializer\u6dfb\u52a0\u4e00\u4e2a\nmany=True\n\u6807\u5fd7\u3002\n\n\nserializer = SnippetSerializer(Snippet.objects.all(), many=True)\nserializer.data\n# [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]\n\n\n\n\u4f7f\u7528ModelSerializers\n\n\n\u6211\u4eec\u7684\nSnippetSerializer\n\u7c7b\u4e2d\u91cd\u590d\u4e86\u5f88\u591a\u5305\u542b\u5728\nSnippet\n\u6a21\u578b\u7c7b\uff08model\uff09\u4e2d\u7684\u4fe1\u606f\u3002\u5982\u679c\u80fd\u4fdd\u8bc1\u6211\u4eec\u7684\u4ee3\u7801\u6574\u6d01\uff0c\u90a3\u5c31\u66f4\u597d\u4e86\u3002\n\n\n\u5c31\u50cfDjango\u63d0\u4f9b\u4e86\nForm\n\u7c7b\u548c\nModelForm\n\u7c7b\u4e00\u6837\uff0cREST framework\u5305\u62ec\nSerializer\n\u7c7b\u548c\nModelSerializer\n\u7c7b\u3002\n\n\n\u6211\u4eec\u6765\u770b\u770b\u4f7f\u7528\nModelSerializer\n\u7c7b\u91cd\u6784\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7c7b\u3002\u518d\u6b21\u6253\u5f00\nsnippets/serializers.py\n\u6587\u4ef6\uff0c\u5e76\u5c06\nSnippetSerializer\n\u7c7b\u66ff\u6362\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u3002\n\n\nclass SnippetSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Snippet\n        fields = ('id', 'title', 'code', 'linenos', 'language', 'style')\n\n\n\n\u5e8f\u5217\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u5c5e\u6027\u5c31\u662f\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u5e8f\u5217\u5316\u5668\u7c7b\u5b9e\u4f8b\u7684\u7ed3\u6784(representation)\u67e5\u770b\u5b83\u7684\u6240\u6709\u5b57\u6bb5\u3002\n\n\nfrom snippets.serializers import SnippetSerializer\nserializer = SnippetSerializer()\nprint(repr(serializer))\n# SnippetSerializer():\n#    id = IntegerField(label='ID', read_only=True)\n#    title = CharField(allow_blank=True, max_length=100, required=False)\n#    code = CharField(style={'base_template': 'textarea.html'})\n#    linenos = BooleanField(required=False)\n#    language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')...\n#    style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')...\n\n\n\n\u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0c\nModelSerializer\n\u7c7b\u5e76\u4e0d\u4f1a\u505a\u4efb\u4f55\u7279\u522b\u795e\u5947\u7684\u4e8b\u60c5\uff0c\u5b83\u4eec\u53ea\u662f\u521b\u5efa\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u5feb\u6377\u65b9\u5f0f\uff1a\n\n\n\n\n\u4e00\u7ec4\u81ea\u52a8\u786e\u5b9a\u7684\u5b57\u6bb5\u3002\n\n\n\u9ed8\u8ba4\u7b80\u5355\u5b9e\u73b0\u7684\ncreate()\n\u548c\nupdate()\n\u65b9\u6cd5\u3002\n\n\n\n\n\u4f7f\u7528\u6211\u4eec\u7684\u5e8f\u5217\u5316\uff08Serializer\uff09\u6765\u7f16\u5199\u5e38\u89c4\u7684Django\u89c6\u56fe\uff08views\uff09\n\n\n\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u65b0\u7684Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u89c6\u56fe\u4f5c\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u7f16\u5199\u3002\n\n\n\u7f16\u8f91\nsnippets/views.py\n\u6587\u4ef6\uff0c\u5e76\u4e14\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002\n\n\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.parsers import JSONParser\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n\nclass JSONResponse(HttpResponse):\n    \"\"\"\n    An HttpResponse that renders its content into JSON.\n    \"\"\"\n    def __init__(self, data, **kwargs):\n        content = JSONRenderer().render(data)\n        kwargs['content_type'] = 'application/json'\n        super(JSONResponse, self).__init__(content, **kwargs)\n\n\n\n\u6211\u4eecAPI\u7684\u6839\u89c6\u56fe\u652f\u6301\u5217\u51fa\u6240\u6709\u73b0\u6709\u7684snippet\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002\n\n\n@csrf_exempt\ndef snippet_list(request):\n    \"\"\"\n    \u5217\u51fa\u6240\u6709\u7684code snippet\uff0c\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002\n    \"\"\"\n    if request.method == 'GET':\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return JSONResponse(serializer.data)\n\n    elif request.method == 'POST':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JSONResponse(serializer.data, status=201)\n        return JSONResponse(serializer.errors, status=400)\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ece\u4e0d\u5177\u6709CSRF\u4ee4\u724c\u7684\u5ba2\u6237\u7aef\u5bf9\u6b64\u89c6\u56fe\u8fdb\u884cPOST\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u89c6\u56fe\u6807\u8bb0\u4e3a\ncsrf_exempt\n\u3002\u8fd9\u4e0d\u662f\u4f60\u901a\u5e38\u60f3\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u5e76\u4e14REST\u6846\u67b6\u89c6\u56fe\u5b9e\u9645\u4e0a\u6bd4\u8fd9\u66f4\u5b9e\u7528\u7684\u884c\u4e3a\uff0c\u4f46\u5b83\u73b0\u5728\u8db3\u591f\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\u3002\n\n\n\u6211\u4eec\u4e5f\u9700\u8981\u4e00\u4e2a\u4e0e\u5355\u4e2asnippet\u5bf9\u8c61\u76f8\u5e94\u7684\u89c6\u56fe\uff0c\u5e76\u4e14\u7528\u4e8e\u83b7\u53d6\uff0c\u66f4\u65b0\u548c\u5220\u9664\u8fd9\u4e2asnippet\u3002\n\n\n@csrf_exempt\ndef snippet_detail(request, pk):\n    \"\"\"\n    \u83b7\u53d6\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2a code snippet\u3002\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return HttpResponse(status=404)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return JSONResponse(serializer.data)\n\n    elif request.method == 'PUT':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(snippet, data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JSONResponse(serializer.data)\n        return JSONResponse(serializer.errors, status=400)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return HttpResponse(status=204)\n\n\n\n\u6700\u7ec8\uff0c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e9b\u89c6\u56fe\u8fde\u8d77\u6765\u3002\u521b\u5efa\u4e00\u4e2a\nsnippets/urls.py\n\u6587\u4ef6\uff1a\n\n\nfrom django.conf.urls import url\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', views.snippet_detail),\n]\n\n\n\n\u6211\u4eec\u4e5f\u9700\u8981\u5728\u6839URL\u914d\u7f6e\ntutorial/urls.py\n\u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u6211\u4eec\u7684snippet\u5e94\u7528\u7684URL\u3002\n\n\nfrom django.conf.urls import url, include\n\nurlpatterns = [\n    url(r'^', include('snippets.urls')),\n]\n\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u76ee\u524d\u6211\u4eec\u8fd8\u6ca1\u6709\u6b63\u786e\u5904\u7406\u597d\u51e0\u4e2a\u8fb9\u7f18\u4e8b\u9879\u3002\u5982\u679c\u6211\u4eec\u53d1\u9001\u683c\u5f0f\u9519\u8bef\u7684\njson\n\uff0c\u6216\u8005\u5982\u679c\u4f7f\u7528\u89c6\u56fe\u4e0d\u5904\u7406\u7684\u65b9\u6cd5\u53d1\u51fa\u8bf7\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u4f1a\u51fa\u73b0\u4e00\u4e2a500\u201c\u670d\u52a1\u5668\u9519\u8bef\u201d\u54cd\u5e94\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u8fd9\u6837\u505a\u3002\n\n\n\u6d4b\u8bd5\u5728\u6211\u4eecWeb API\u8fdb\u884c\u7b2c\u4e00\u6b21\u5c1d\u8bd5\n\n\n\u73b0\u5728\u4e3a\u6211\u4eec\u7684snippets\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u3002\n\n\n\u9000\u51fa\u6240\u6709\u7684shell...\n\n\nquit()\n\n\n\n...\u542f\u52a8Django\u7684\u5f00\u53d1\u670d\u52a1\u5668\u3002\n\n\npython manage.py runserver\n\nValidating models...\n\n0 errors found\nDjango version 1.8.3, using settings 'tutorial.settings'\nDevelopment server is running at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\n\n\n\u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u670d\u52a1\u5668\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\ncurl\n\u6216\nhttpie\n\u6d4b\u8bd5\u6211\u4eec\u7684\u670d\u52a1\u5668\u3002Httpie\u662f\u7528Python\u7f16\u5199\u7684\u7528\u6237\u53cb\u597d\u7684http\u5ba2\u6237\u7aef\uff0c\u6211\u4eec\u5b89\u88c5\u5b83\u3002\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528pip\u6765\u5b89\u88c5httpie\uff1a\n\n\npip install httpie\n\n\n\n\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6240\u6709snippet\u7684\u5217\u8868\uff1a\n\n\nhttp http://127.0.0.1:8000/snippets/\n\nHTTP/1.1 200 OK\n...\n[\n  {\n    \"id\": 1,\n    \"title\": \"\",\n    \"code\": \"foo = \\\"bar\\\"\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"\",\n    \"code\": \"print \\\"hello, world\\\"\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  }\n]\n\n\n\n\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5176id\u6765\u83b7\u53d6\u7279\u5b9a\u7684snippet\uff1a\n\n\nhttp http://127.0.0.1:8000/snippets/2/\n\nHTTP/1.1 200 OK\n...\n{\n  \"id\": 2,\n  \"title\": \"\",\n  \"code\": \"print \\\"hello, world\\\"\\n\",\n  \"linenos\": false,\n  \"language\": \"python\",\n  \"style\": \"friendly\"\n}\n\n\n\n\u540c\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u8fd9\u4e9bURL\u6765\u663e\u793a\u76f8\u540c\u200b\u200b\u7684json\u3002\n\n\n\u6211\u4eec\u73b0\u5728\u7684\u4f4d\u7f6e\n\n\n\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u505a\u5f97\u4e0d\u9519\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e0eDjango\u7684Forms API\u975e\u5e38\u76f8\u4f3c\u5e8f\u5217\u5316API\uff0c\u548c\u4e00\u4e9b\u5e38\u89c4\u7684Django\u89c6\u56fe\u3002\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u7684API\u89c6\u56fe\u9664\u4e86\u670d\u52a1\njson\n\u54cd\u5e94\u5916\uff0c\u4e0d\u4f1a\u505a\u4efb\u4f55\u5176\u4ed6\u7279\u522b\u7684\u4e1c\u897f\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u9519\u8bef\u6211\u4eec\u4ecd\u7136\u9700\u8981\u6e05\u5904\u7406\uff0c\u4f46\u662f\u5b83\u4ecd\u662f\u4e00\u4e2a\u53ef\u7528\u7684Web API\u3002\n\n\n\u6211\u4eec\u5c06\u5728\n\u672c\u6559\u7a0b\u7684\u7b2c2\u90e8\u5206\n\u6765\u5b8c\u5584\u8fd9\u4e9b\u4e1c\u897f\u3002",
            "title": "1 - Serialization"
        },
        {
            "location": "/tutorial/1-serialization_zh/#tutorial-1",
            "text": "",
            "title": "Tutorial 1: \u5e8f\u5217\u5316"
        },
        {
            "location": "/tutorial/1-serialization_zh/#_1",
            "text": "\u672c\u6559\u7a0b\u5c06\u4ecb\u7ecd\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6536\u5f55\u4ee3\u7801\u9ad8\u4eae\u5c55\u793a\u7684Web API\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d, \u5c06\u4f1a\u4ecb\u7ecd\u7ec4\u6210Rest\u6846\u67b6\u7684\u5404\u4e2a\u7ec4\u4ef6\uff0c\u5e76\u8ba9\u4f60\u5168\u9762\u4e86\u89e3\u5404\u4e2a\u7ec4\u4ef6\u662f\u5982\u4f55\u4e00\u8d77\u5de5\u4f5c\u7684\u3002  \u8fd9\u4e2a\u6559\u7a0b\u662f\u76f8\u5f53\u6df1\u5165\u7684\uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u5728\u5f00\u59cb\u4e4b\u524d\u51c6\u5907\u4e9b\u5564\u9152\u548c\u82b1\u751f\u6bdb\u8c46\u4ec0\u4e48\u7684\u3002\u5982\u679c\u4f60\u53ea\u662f\u60f3\u6765\u4e2a\u5feb\u901f\u9884\u89c8\uff0c\u90a3\u4f60\u5e94\u8be5\u67e5\u770b quickstart \u6587\u6863\u3002   \u6ce8\u610f \uff1a\u672c\u6559\u7a0b\u7684\u4ee3\u7801\u53ef\u4ee5\u5728Github\u7684 tomchristie/rest-framework-tutorial \u5e93\u4e2d\u627e\u5230\u3002\u5b8c\u6574\u7684\u5b9e\u73b0\u7248\u672c\u53ef\u4ee5 \u5728\u7ebf \u67e5\u770b\u4f5c\u4e3a\u4e00\u4e2a\u6c99\u76d2\u7248\u672c\u8fdb\u884c\u6d4b\u8bd5\u3002",
            "title": "\u4ecb\u7ecd"
        },
        {
            "location": "/tutorial/1-serialization_zh/#_2",
            "text": "\u5728\u505a\u5176\u4ed6\u4e8b\u60c5\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u7528 virtualenv \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u73af\u5883\u3002\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u6211\u4eec\u7684\u5305\u914d\u7f6e\u4e0e\u6211\u4eec\u6b63\u5728\u5f00\u5c55\u7684\u4efb\u4f55\u5176\u4ed6\u9879\u76ee\u4fdd\u6301\u826f\u597d\u7684\u9694\u79bb\u3002  virtualenv env\nsource env/bin/activate  \u73b0\u5728\u6211\u4eec\u5728\u4e00\u4e2avirtualenv\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u88c5\u6211\u4eec\u9700\u8981\u7684\u5305\u4e86\u3002  pip install django\npip install djangorestframework\npip install pygments  # \u4ee3\u7801\u9ad8\u4eae\u63d2\u4ef6  \u6ce8\u610f\uff1a  \u8981\u968f\u65f6\u9000\u51favirtualenv\u73af\u5883\uff0c\u53ea\u9700\u8f93\u5165 deactivate \u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 virtualenv documentation \u6587\u6863\u3002",
            "title": "\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883"
        },
        {
            "location": "/tutorial/1-serialization_zh/#_3",
            "text": "\u597d\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u8981\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u3002  cd ~\ndjango-admin.py startproject tutorial\ncd tutorial  \u5b8c\u6210\u4e0a\u9762\u7684\u6b65\u9aa4\u4ee5\u540e\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u7b80\u5355Web API\u7684app\u3002  python manage.py startapp snippets  \u6211\u4eec\u9700\u8981\u5c06\u65b0\u5efa\u7684 snippets app\u548c rest_framework app\u6dfb\u52a0\u5230 INSTALLED_APPS \u3002\u8ba9\u6211\u4eec\u7f16\u8f91 tutorial/settings.py \u6587\u4ef6\uff1a  INSTALLED_APPS = (\n    ...\n    'rest_framework',\n    'snippets.apps.SnippetsConfig',\n)  \u8bf7\u6ce8\u610f\u5982\u679c\u4f60\u4f7f\u7528\u7684Django\u7248\u672c\u4f4e\u4e8e1.9\uff0c\u4f60\u9700\u8981\u4f7f\u7528 snippets.apps.SnippetsConfig \u66ff\u6362 snippets \u3002  \u597d\u4e86\uff0c\u6211\u4eec\u7684\u51c6\u5907\u5de5\u4f5c\u505a\u5b8c\u4e86\u3002",
            "title": "\u6b63\u5f0f\u5f00\u59cb"
        },
        {
            "location": "/tutorial/1-serialization_zh/#model",
            "text": "\u4e3a\u4e86\u5b9e\u73b0\u672c\u6559\u7a0b\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7247\u6bb5\u7684\u7b80\u5355\u7684 Snippet  model\u3002\u7136\u540e\u7ee7\u7eed\u7f16\u8f91 snippets/models.py \u6587\u4ef6\u3002\u6ce8\u610f\uff1a\u4f18\u79c0\u7684\u7f16\u7a0b\u5b9e\u8df5\u90fd\u4f1a\u6dfb\u52a0\u6ce8\u91ca\u3002\u867d\u7136\u4f60\u5c06\u5728\u672c\u6559\u7a0b\u4ee3\u7801\u7684\u5b58\u50a8\u5e93\u7248\u672c\u4e2d\u627e\u5230\u5b83\u4eec\uff0c\u4f46\u6211\u4eec\u5728\u6b64\u5ffd\u7565\u4e86\u5b83\u4eec\uff0c\u4e13\u6ce8\u4e8e\u4ee3\u7801\u672c\u8eab\u3002  from django.db import models\nfrom pygments.lexers import get_all_lexers\nfrom pygments.styles import get_all_styles\n\nLEXERS = [item for item in get_all_lexers() if item[1]]\nLANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])\nSTYLE_CHOICES = sorted((item, item) for item in get_all_styles())\n\n\nclass Snippet(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    title = models.CharField(max_length=100, blank=True, default='')\n    code = models.TextField()\n    linenos = models.BooleanField(default=False)\n    language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)\n    style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)\n\n    class Meta:\n        ordering = ('created',)  \u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6211\u4eec\u7684\u4ee3\u7801\u6bb5\u6a21\u578b\u521b\u5efa\u521d\u59cb\u8fc1\u79fb\uff08initial migration\uff09\uff0c\u5e76\u9996\u6b21\u540c\u6b65\u6570\u636e\u5e93\uff08migrate\uff09\u3002  python manage.py makemigrations snippets\npython manage.py migrate",
            "title": "\u521b\u5efa\u4e00\u4e2amodel"
        },
        {
            "location": "/tutorial/1-serialization_zh/#_4",
            "text": "\u5f00\u53d1\u6211\u4eec\u7684Web API\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u4e3a\u6211\u4eec\u7684Web API\u63d0\u4f9b\u4e00\u79cd\u5c06\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e3a\u8bf8\u5982 json \u4e4b\u7c7b\u7684\u8868\u793a\u5f62\u5f0f\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango forms\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\uff08serializers\uff09\u6765\u5b9e\u73b0\u3002 \u5728 snippets \u7684\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a serializers.py \u6587\u4ef6\uff0c\u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002  from rest_framework import serializers\nfrom snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES\n\n\nclass SnippetSerializer(serializers.Serializer):\n    id = serializers.IntegerField(read_only=True)\n    title = serializers.CharField(required=False, allow_blank=True, max_length=100)\n    code = serializers.CharField(style={'base_template': 'textarea.html'})\n    linenos = serializers.BooleanField(required=False)\n    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python')\n    style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly')\n\n    def create(self, validated_data):\n        \"\"\"\n        \u6839\u636e\u63d0\u4f9b\u7684\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684`Snippet`\u5b9e\u4f8b\u3002\n        \"\"\"\n        return Snippet.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        \"\"\"\n        \u6839\u636e\u63d0\u4f9b\u7684\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u66f4\u65b0\u548c\u8fd4\u56de\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684`Snippet`\u5b9e\u4f8b\u3002\n        \"\"\"\n        instance.title = validated_data.get('title', instance.title)\n        instance.code = validated_data.get('code', instance.code)\n        instance.linenos = validated_data.get('linenos', instance.linenos)\n        instance.language = validated_data.get('language', instance.language)\n        instance.style = validated_data.get('style', instance.style)\n        instance.save()\n        return instance  \u5e8f\u5217\u5316\u5668\u7c7b\u7684\u7b2c\u4e00\u90e8\u5206\u5b9a\u4e49\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002 create() \u548c update() \u65b9\u6cd5\u5b9a\u4e49\u4e86\u5728\u8c03\u7528 serializer.save() \u65f6\u5982\u4f55\u521b\u5efa\u548c\u4fee\u6539\u5b8c\u6574\u7684\u5b9e\u4f8b\u3002  \u5e8f\u5217\u5316\u5668\u7c7b\u4e0eDjango  Form \u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u5e76\u5728\u5404\u79cd\u5b57\u6bb5\u4e2d\u5305\u542b\u7c7b\u4f3c\u7684\u9a8c\u8bc1\u6807\u5fd7\uff0c\u4f8b\u5982 required \uff0c max_length \u548c default \u3002  \u5b57\u6bb5\u6807\u5fd7\u8fd8\u53ef\u4ee5\u63a7\u5236serializer\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5982\u4f55\u663e\u793a\uff0c\u6bd4\u5982\u6e32\u67d3HTML\u7684\u65f6\u5019\u3002\u4e0a\u9762\u7684 {'base_template': 'textarea.html'} \u6807\u5fd7\u7b49\u540c\u4e8e\u5728Django  Form \u7c7b\u4e2d\u4f7f\u7528 widget=widgets.Textarea \u3002\u8fd9\u5bf9\u4e8e\u63a7\u5236\u5982\u4f55\u663e\u793a\u53ef\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\u7279\u522b\u6709\u7528\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u540e\u9762\u770b\u5230\u3002  \u6211\u4eec\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ModelSerializer \u7c7b\u6765\u8282\u7701\u65f6\u95f4\uff0c\u5c31\u50cf\u6211\u4eec\u540e\u9762\u4f1a\u7528\u5230\u7684\u90a3\u6837\u3002\u4f46\u662f\u73b0\u5728\u6211\u4eec\u8fd8\u7ee7\u7eed\u4f7f\u7528\u6211\u4eec\u660e\u786e\u5b9a\u4e49\u7684serializer\u3002",
            "title": "\u521b\u5efa\u4e00\u4e2a\u5e8f\u5217\u5316\u7c7b"
        },
        {
            "location": "/tutorial/1-serialization_zh/#_5",
            "text": "\u5728\u6211\u4eec\u8fdb\u4e00\u6b65\u4e86\u89e3\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u719f\u6089\u4f7f\u7528\u6211\u4eec\u65b0\u7684Serializer\u7c7b\u3002\u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\u8fdb\u5165Django shell\u3002  python manage.py shell  \u597d\u7684\uff0c\u50cf\u4e0b\u9762\u4e00\u6837\u5bfc\u5165\u51e0\u4e2a\u6a21\u5757\uff0c\u7136\u540e\u5f00\u59cb\u521b\u5efa\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\u6765\u5904\u7406\u3002  from snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.parsers import JSONParser\n\nsnippet = Snippet(code='foo = \"bar\"\\n')\nsnippet.save()\n\nsnippet = Snippet(code='print \"hello, world\"\\n')\nsnippet.save()  \u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u51e0\u4e2a\u7247\u6bb5\u5b9e\u4f8b\u4e86\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5c06\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u5e8f\u5217\u5316\u3002  serializer = SnippetSerializer(snippet)\nserializer.data\n# {'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'}  \u6b64\u65f6\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u539f\u751f\u6570\u636e\u7c7b\u578b\u3002\u8981\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8f6c\u6362\u6210 json \u3002  content = JSONRenderer().render(serializer.data)\ncontent\n# '{\"id\": 2, \"title\": \"\", \"code\": \"print \\\\\"hello, world\\\\\"\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}'  \u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\u6211\u4eec\u5c06\u4e00\u4e2a\u6d41\uff08stream\uff09\u89e3\u6790\u4e3aPython\u539f\u751f\u6570\u636e\u7c7b\u578b...  from django.utils.six import BytesIO\n\nstream = BytesIO(content)\ndata = JSONParser().parse(stream)  ...\u7136\u540e\u6211\u4eec\u8981\u5c06Python\u539f\u751f\u6570\u636e\u7c7b\u578b\u6062\u590d\u6210\u6b63\u5e38\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002  serializer = SnippetSerializer(data=data)\nserializer.is_valid()\n# True\nserializer.validated_data\n# OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])\nserializer.save()\n# <Snippet: Snippet object>  \u53ef\u4ee5\u770b\u5230API\u548c\u8868\u5355(forms)\u662f\u591a\u4e48\u76f8\u4f3c\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7c7b\u7f16\u5199\u89c6\u56fe\u7684\u65f6\u5019\uff0c\u76f8\u4f3c\u6027\u4f1a\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002  \u6211\u4eec\u4e5f\u53ef\u4ee5\u5e8f\u5217\u5316\u67e5\u8be2\u7ed3\u679c\u96c6\uff08querysets\uff09\u800c\u4e0d\u662f\u6a21\u578b\u5b9e\u4f8b\u3002\u6211\u4eec\u53ea\u9700\u8981\u4e3aserializer\u6dfb\u52a0\u4e00\u4e2a many=True \u6807\u5fd7\u3002  serializer = SnippetSerializer(Snippet.objects.all(), many=True)\nserializer.data\n# [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]",
            "title": "\u4f7f\u7528\u5e8f\u5217\u5316\u7c7b"
        },
        {
            "location": "/tutorial/1-serialization_zh/#modelserializers",
            "text": "\u6211\u4eec\u7684 SnippetSerializer \u7c7b\u4e2d\u91cd\u590d\u4e86\u5f88\u591a\u5305\u542b\u5728 Snippet \u6a21\u578b\u7c7b\uff08model\uff09\u4e2d\u7684\u4fe1\u606f\u3002\u5982\u679c\u80fd\u4fdd\u8bc1\u6211\u4eec\u7684\u4ee3\u7801\u6574\u6d01\uff0c\u90a3\u5c31\u66f4\u597d\u4e86\u3002  \u5c31\u50cfDjango\u63d0\u4f9b\u4e86 Form \u7c7b\u548c ModelForm \u7c7b\u4e00\u6837\uff0cREST framework\u5305\u62ec Serializer \u7c7b\u548c ModelSerializer \u7c7b\u3002  \u6211\u4eec\u6765\u770b\u770b\u4f7f\u7528 ModelSerializer \u7c7b\u91cd\u6784\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7c7b\u3002\u518d\u6b21\u6253\u5f00 snippets/serializers.py \u6587\u4ef6\uff0c\u5e76\u5c06 SnippetSerializer \u7c7b\u66ff\u6362\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u3002  class SnippetSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Snippet\n        fields = ('id', 'title', 'code', 'linenos', 'language', 'style')  \u5e8f\u5217\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u5c5e\u6027\u5c31\u662f\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u5e8f\u5217\u5316\u5668\u7c7b\u5b9e\u4f8b\u7684\u7ed3\u6784(representation)\u67e5\u770b\u5b83\u7684\u6240\u6709\u5b57\u6bb5\u3002  from snippets.serializers import SnippetSerializer\nserializer = SnippetSerializer()\nprint(repr(serializer))\n# SnippetSerializer():\n#    id = IntegerField(label='ID', read_only=True)\n#    title = CharField(allow_blank=True, max_length=100, required=False)\n#    code = CharField(style={'base_template': 'textarea.html'})\n#    linenos = BooleanField(required=False)\n#    language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')...\n#    style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')...  \u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0c ModelSerializer \u7c7b\u5e76\u4e0d\u4f1a\u505a\u4efb\u4f55\u7279\u522b\u795e\u5947\u7684\u4e8b\u60c5\uff0c\u5b83\u4eec\u53ea\u662f\u521b\u5efa\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u5feb\u6377\u65b9\u5f0f\uff1a   \u4e00\u7ec4\u81ea\u52a8\u786e\u5b9a\u7684\u5b57\u6bb5\u3002  \u9ed8\u8ba4\u7b80\u5355\u5b9e\u73b0\u7684 create() \u548c update() \u65b9\u6cd5\u3002",
            "title": "\u4f7f\u7528ModelSerializers"
        },
        {
            "location": "/tutorial/1-serialization_zh/#serializerdjangoviews",
            "text": "\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u65b0\u7684Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u89c6\u56fe\u4f5c\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u7f16\u5199\u3002  \u7f16\u8f91 snippets/views.py \u6587\u4ef6\uff0c\u5e76\u4e14\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002  from django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.parsers import JSONParser\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n\nclass JSONResponse(HttpResponse):\n    \"\"\"\n    An HttpResponse that renders its content into JSON.\n    \"\"\"\n    def __init__(self, data, **kwargs):\n        content = JSONRenderer().render(data)\n        kwargs['content_type'] = 'application/json'\n        super(JSONResponse, self).__init__(content, **kwargs)  \u6211\u4eecAPI\u7684\u6839\u89c6\u56fe\u652f\u6301\u5217\u51fa\u6240\u6709\u73b0\u6709\u7684snippet\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002  @csrf_exempt\ndef snippet_list(request):\n    \"\"\"\n    \u5217\u51fa\u6240\u6709\u7684code snippet\uff0c\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002\n    \"\"\"\n    if request.method == 'GET':\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return JSONResponse(serializer.data)\n\n    elif request.method == 'POST':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JSONResponse(serializer.data, status=201)\n        return JSONResponse(serializer.errors, status=400)  \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ece\u4e0d\u5177\u6709CSRF\u4ee4\u724c\u7684\u5ba2\u6237\u7aef\u5bf9\u6b64\u89c6\u56fe\u8fdb\u884cPOST\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u89c6\u56fe\u6807\u8bb0\u4e3a csrf_exempt \u3002\u8fd9\u4e0d\u662f\u4f60\u901a\u5e38\u60f3\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u5e76\u4e14REST\u6846\u67b6\u89c6\u56fe\u5b9e\u9645\u4e0a\u6bd4\u8fd9\u66f4\u5b9e\u7528\u7684\u884c\u4e3a\uff0c\u4f46\u5b83\u73b0\u5728\u8db3\u591f\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\u3002  \u6211\u4eec\u4e5f\u9700\u8981\u4e00\u4e2a\u4e0e\u5355\u4e2asnippet\u5bf9\u8c61\u76f8\u5e94\u7684\u89c6\u56fe\uff0c\u5e76\u4e14\u7528\u4e8e\u83b7\u53d6\uff0c\u66f4\u65b0\u548c\u5220\u9664\u8fd9\u4e2asnippet\u3002  @csrf_exempt\ndef snippet_detail(request, pk):\n    \"\"\"\n    \u83b7\u53d6\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2a code snippet\u3002\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return HttpResponse(status=404)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return JSONResponse(serializer.data)\n\n    elif request.method == 'PUT':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(snippet, data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JSONResponse(serializer.data)\n        return JSONResponse(serializer.errors, status=400)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return HttpResponse(status=204)  \u6700\u7ec8\uff0c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e9b\u89c6\u56fe\u8fde\u8d77\u6765\u3002\u521b\u5efa\u4e00\u4e2a snippets/urls.py \u6587\u4ef6\uff1a  from django.conf.urls import url\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', views.snippet_detail),\n]  \u6211\u4eec\u4e5f\u9700\u8981\u5728\u6839URL\u914d\u7f6e tutorial/urls.py \u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u6211\u4eec\u7684snippet\u5e94\u7528\u7684URL\u3002  from django.conf.urls import url, include\n\nurlpatterns = [\n    url(r'^', include('snippets.urls')),\n]  \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u76ee\u524d\u6211\u4eec\u8fd8\u6ca1\u6709\u6b63\u786e\u5904\u7406\u597d\u51e0\u4e2a\u8fb9\u7f18\u4e8b\u9879\u3002\u5982\u679c\u6211\u4eec\u53d1\u9001\u683c\u5f0f\u9519\u8bef\u7684 json \uff0c\u6216\u8005\u5982\u679c\u4f7f\u7528\u89c6\u56fe\u4e0d\u5904\u7406\u7684\u65b9\u6cd5\u53d1\u51fa\u8bf7\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u4f1a\u51fa\u73b0\u4e00\u4e2a500\u201c\u670d\u52a1\u5668\u9519\u8bef\u201d\u54cd\u5e94\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u8fd9\u6837\u505a\u3002",
            "title": "\u4f7f\u7528\u6211\u4eec\u7684\u5e8f\u5217\u5316\uff08Serializer\uff09\u6765\u7f16\u5199\u5e38\u89c4\u7684Django\u89c6\u56fe\uff08views\uff09"
        },
        {
            "location": "/tutorial/1-serialization_zh/#web-api",
            "text": "\u73b0\u5728\u4e3a\u6211\u4eec\u7684snippets\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u3002  \u9000\u51fa\u6240\u6709\u7684shell...  quit()  ...\u542f\u52a8Django\u7684\u5f00\u53d1\u670d\u52a1\u5668\u3002  python manage.py runserver\n\nValidating models...\n\n0 errors found\nDjango version 1.8.3, using settings 'tutorial.settings'\nDevelopment server is running at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.  \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u670d\u52a1\u5668\u3002  \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 curl \u6216 httpie \u6d4b\u8bd5\u6211\u4eec\u7684\u670d\u52a1\u5668\u3002Httpie\u662f\u7528Python\u7f16\u5199\u7684\u7528\u6237\u53cb\u597d\u7684http\u5ba2\u6237\u7aef\uff0c\u6211\u4eec\u5b89\u88c5\u5b83\u3002  \u4f60\u53ef\u4ee5\u4f7f\u7528pip\u6765\u5b89\u88c5httpie\uff1a  pip install httpie  \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6240\u6709snippet\u7684\u5217\u8868\uff1a  http http://127.0.0.1:8000/snippets/\n\nHTTP/1.1 200 OK\n...\n[\n  {\n    \"id\": 1,\n    \"title\": \"\",\n    \"code\": \"foo = \\\"bar\\\"\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"\",\n    \"code\": \"print \\\"hello, world\\\"\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  }\n]  \u6216\u8005\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5176id\u6765\u83b7\u53d6\u7279\u5b9a\u7684snippet\uff1a  http http://127.0.0.1:8000/snippets/2/\n\nHTTP/1.1 200 OK\n...\n{\n  \"id\": 2,\n  \"title\": \"\",\n  \"code\": \"print \\\"hello, world\\\"\\n\",\n  \"linenos\": false,\n  \"language\": \"python\",\n  \"style\": \"friendly\"\n}  \u540c\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u8fd9\u4e9bURL\u6765\u663e\u793a\u76f8\u540c\u200b\u200b\u7684json\u3002",
            "title": "\u6d4b\u8bd5\u5728\u6211\u4eecWeb API\u8fdb\u884c\u7b2c\u4e00\u6b21\u5c1d\u8bd5"
        },
        {
            "location": "/tutorial/1-serialization_zh/#_6",
            "text": "\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u505a\u5f97\u4e0d\u9519\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e0eDjango\u7684Forms API\u975e\u5e38\u76f8\u4f3c\u5e8f\u5217\u5316API\uff0c\u548c\u4e00\u4e9b\u5e38\u89c4\u7684Django\u89c6\u56fe\u3002  \u73b0\u5728\uff0c\u6211\u4eec\u7684API\u89c6\u56fe\u9664\u4e86\u670d\u52a1 json \u54cd\u5e94\u5916\uff0c\u4e0d\u4f1a\u505a\u4efb\u4f55\u5176\u4ed6\u7279\u522b\u7684\u4e1c\u897f\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u9519\u8bef\u6211\u4eec\u4ecd\u7136\u9700\u8981\u6e05\u5904\u7406\uff0c\u4f46\u662f\u5b83\u4ecd\u662f\u4e00\u4e2a\u53ef\u7528\u7684Web API\u3002  \u6211\u4eec\u5c06\u5728 \u672c\u6559\u7a0b\u7684\u7b2c2\u90e8\u5206 \u6765\u5b8c\u5584\u8fd9\u4e9b\u4e1c\u897f\u3002",
            "title": "\u6211\u4eec\u73b0\u5728\u7684\u4f4d\u7f6e"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/",
            "text": "Tutorial 2: \u8bf7\u6c42\u548c\u54cd\u5e94\n\n\n\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u771f\u6b63\u5f00\u59cb\u63a5\u89e6REST\u6846\u67b6\u7684\u6838\u5fc3\u3002\n\u6211\u4eec\u6765\u4ecb\u7ecd\u51e0\u4e2a\u57fa\u672c\u7684\u6784\u5efa\u6a21\u5757\u3002\n\n\n\u8bf7\u6c42\u5bf9\u8c61\uff08Request objects\uff09\n\n\nREST\u6846\u67b6\u5f15\u5165\u4e86\u4e00\u4e2a\u6269\u5c55\u4e86\u5e38\u89c4\nHttpRequest\n\u7684\nRequest\n\u5bf9\u8c61\uff0c\u5e76\u63d0\u4f9b\u4e86\u66f4\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\u3002\nRequest\n\u5bf9\u8c61\u7684\u6838\u5fc3\u529f\u80fd\u662f\nrequest.data\n\u5c5e\u6027\uff0c\u5b83\u4e0e\nrequest.POST\n\u7c7b\u4f3c\uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528Web API\u66f4\u4e3a\u6709\u7528\u3002\n\n\nrequest.POST  # \u53ea\u5904\u7406\u8868\u5355\u6570\u636e  \u53ea\u9002\u7528\u4e8e'POST'\u65b9\u6cd5\nrequest.data  # \u5904\u7406\u4efb\u610f\u6570\u636e  \u9002\u7528\u4e8e'POST'\uff0c'PUT'\u548c'PATCH'\u65b9\u6cd5\n\n\n\n\u54cd\u5e94\u5bf9\u8c61\uff08Response objects\uff09\n\n\nREST\u6846\u67b6\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a\nResponse\n\u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u79cd\u83b7\u53d6\u672a\u6e32\u67d3\uff08unrendered\uff09\u5185\u5bb9\u7684\nTemplateResponse\n\u7c7b\u578b\uff0c\u5e76\u4f7f\u7528\u5185\u5bb9\u534f\u5546\u6765\u786e\u5b9a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002\n\n\nreturn Response(data)  # \u6e32\u67d3\u6210\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\u3002\n\n\n\n\u72b6\u6001\u7801\uff08Status codes\uff09\n\n\n\u5728\u4f60\u7684\u89c6\u56fe\uff08views\uff09\u4e2d\u4f7f\u7528\u7eaf\u6570\u5b57\u7684HTTP \u72b6\u6001\u7801\u5e76\u4e0d\u603b\u662f\u90a3\u4e48\u5bb9\u6613\u88ab\u7406\u89e3\u3002\u800c\u4e14\u5982\u679c\u9519\u8bef\u4ee3\u7801\u51fa\u9519\uff0c\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u3002REST\u6846\u67b6\u4e3a\nstatus\n\u6a21\u5757\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\uff08\u5982\nHTTP_400_BAD_REQUEST\n\uff09\u63d0\u4f9b\u66f4\u660e\u786e\u7684\u6807\u8bc6\u7b26\u3002\u4f7f\u7528\u5b83\u4eec\u6765\u4ee3\u66ff\u7eaf\u6570\u5b57\u7684HTTP\u72b6\u6001\u7801\u662f\u4e2a\u5f88\u597d\u7684\u4e3b\u610f\u3002\n\n\n\u5305\u88c5\uff08wrapping\uff09API\u89c6\u56fe\n\n\nREST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u7528\u4e8e\u7f16\u5199API\u89c6\u56fe\u7684\u5305\u88c5\u5668\uff08wrappers\uff09\u3002\n\n\n\n\n\u7528\u4e8e\u57fa\u4e8e\u51fd\u6570\u89c6\u56fe\u7684\n@api_view\n\u88c5\u9970\u5668\u3002\n\n\n\u7528\u4e8e\u57fa\u4e8e\u7c7b\u89c6\u56fe\u7684\nAPIView\n\u7c7b\u3002\n\n\n\n\n\u8fd9\u4e9b\u5305\u88c5\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u786e\u4fdd\u4f60\u5728\u89c6\u56fe\u4e2d\u63a5\u6536\u5230\nRequest\n\u5b9e\u4f8b\uff0c\u5e76\u5c06\u4e0a\u4e0b\u6587\u6dfb\u52a0\u5230\nResponse\n\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u6267\u884c\u5185\u5bb9\u534f\u5546\u3002\n\n\n\u5305\u88c5\u5668\u8fd8\u63d0\u4f9b\u4e86\u8bf8\u5982\u5728\u9002\u5f53\u65f6\u5019\u8fd4\u56de\n405 Method Not Allowed\n\u54cd\u5e94\uff0c\u5e76\u5904\u7406\u5728\u4f7f\u7528\u683c\u5f0f\u9519\u8bef\u7684\u8f93\u5165\u6765\u8bbf\u95ee\nrequest.data\n\u65f6\u53d1\u751f\u7684\u4efb\u4f55\nParseError\n\u5f02\u5e38\u3002\n\n\n\u7ec4\u5408\u5728\u4e00\u8d77\n\n\n\u597d\u7684\uff0c\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7684\u7ec4\u4ef6\u6765\u5199\u51e0\u4e2a\u89c6\u56fe\u3002\n\n\n\u6211\u4eec\u5728\nviews.py\n\u4e2d\u4e0d\u518d\u9700\u8981\nJSONResponse\n\u7c7b\u4e86\uff0c\u6240\u4ee5\u628a\u5b83\u5220\u9664\u6389\u3002\u5220\u9664\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u91cd\u6784\u6211\u4eec\u7684\u89c6\u56fe\u4e86\u3002\n\n\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n\n\n@api_view(['GET', 'POST'])\ndef snippet_list(request):\n    \"\"\"\n    \u5217\u51fa\u6240\u6709\u7684snippets\uff0c\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002\n    \"\"\"\n    if request.method == 'GET':\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    elif request.method == 'POST':\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\n\n\u6211\u4eec\u7684\u5b9e\u4f8b\u89c6\u56fe\u6bd4\u524d\u9762\u7684\u793a\u4f8b\u6709\u6240\u6539\u8fdb\u3002\u5b83\u7a0d\u5fae\u7b80\u6d01\u4e00\u70b9\uff0c\u73b0\u5728\u7684\u4ee3\u7801\u4e0e\u6211\u4eec\u4f7f\u7528Forms API\u65f6\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u4e86\u547d\u540d\u72b6\u6001\u4ee3\u7801\uff0c\u8fd9\u4f7f\u5f97\u54cd\u5e94\u610f\u4e49\u66f4\u52a0\u660e\u663e\u3002\n\n\n\u4ee5\u4e0b\u662f\nviews.py\n\u6a21\u5757\u4e2d\u5355\u4e2asnippet\u7684\u89c6\u56fe\u3002\n\n\n@api_view(['GET', 'PUT', 'DELETE'])\ndef snippet_detail(request, pk):\n    \"\"\"\n    \u83b7\u53d6\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2asnippet\u5b9e\u4f8b\u3002\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n\n    elif request.method == 'PUT':\n        serializer = SnippetSerializer(snippet, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n\n\n\n\u8fd9\u5bf9\u6211\u4eec\u6765\u8bf4\u5e94\u8be5\u90fd\u662f\u975e\u5e38\u719f\u6089\u7684\uff0c-\u5b83\u548c\u6b63\u5e38Django\u89c6\u56fe\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\n\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u518d\u663e\u5f0f\u5730\u5c06\u8bf7\u6c42\u6216\u54cd\u5e94\u7ed1\u5b9a\u5230\u7ed9\u5b9a\u7684\u5185\u5bb9\u7c7b\u578b\u3002\nrequest.data\n\u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684\njson\n\u8bf7\u6c42\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u5904\u7406\u5176\u4ed6\u683c\u5f0f\u3002\u540c\u6837\uff0c\u6211\u4eec\u8fd4\u56de\u5e26\u6709\u6570\u636e\u7684\u54cd\u5e94\u5bf9\u8c61\uff0c\u4f46\u5141\u8bb8REST\u6846\u67b6\u5c06\u54cd\u5e94\u7ed9\u6211\u4eec\u6e32\u67d3\u6210\u6b63\u786e\u7684\u5185\u5bb9\u7c7b\u578b\u3002\n\n\n\u7ed9\u6211\u4eec\u7684\u7f51\u5740\u6dfb\u52a0\u53ef\u9009\u7684\u683c\u5f0f\u540e\u7f00\n\n\n\u4e3a\u4e86\u5145\u5206\u5229\u7528\u6211\u4eec\u7684\u54cd\u5e94\u4e0d\u518d\u4e0e\u5355\u4e00\u5185\u5bb9\u7c7b\u578b\u8fde\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3aAPI\u8def\u5f84\u6dfb\u52a0\u5bf9\u683c\u5f0f\u540e\u7f00\u7684\u652f\u6301\u3002\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\u7ed9\u6211\u4eec\u660e\u786e\u6307\u5b9a\u4e86\u7ed9\u5b9a\u683c\u5f0f\u7684URL\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684API\u5c06\u80fd\u591f\u5904\u7406\u8bf8\u5982\nhttp://example.com/api/items/4.json\n\u4e4b\u7c7b\u7684URL\u3002\n\n\n\u50cf\u4e0b\u9762\u8fd9\u6837\u5728\u8fd9\u4e24\u4e2a\u89c6\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\nformat\n\u5173\u952e\u5b57\u53c2\u6570\u3002\n\n\ndef snippet_list(request, format=None):\n\n\n\n\u548c\n\n\ndef snippet_detail(request, pk, format=None):\n\n\n\n\u73b0\u5728\u66f4\u65b0\nurls.py\n\u6587\u4ef6\uff0c\u7ed9\u73b0\u6709\u7684URL\u540e\u9762\u6dfb\u52a0\u4e00\u7ec4\nformat_suffix_patterns\n\u3002\n\n\nfrom django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n    url(r'^snippets/(?P<pk>[0-9]+)$', views.snippet_detail),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n\n\n\n\u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u6dfb\u52a0\u8fd9\u4e9b\u989d\u5916\u7684url\u6a21\u5f0f\uff0c\u4f46\u5b83\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u7b80\u5355\uff0c\u6e05\u6670\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u7279\u5b9a\u7684\u683c\u5f0f\u3002\n\n\n\u600e\u4e48\u67e5\u770b\u7ed3\u679c\uff1f\n\n\n\u4ece\u547d\u4ee4\u884c\u5f00\u59cb\u6d4b\u8bd5API\uff0c\u5c31\u50cf\u6211\u4eec\u5728\n\u6559\u7a0b\u7b2c\u4e00\u90e8\u5206\n\u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u4e00\u5207\u64cd\u4f5c\u90fd\u5f88\u76f8\u4f3c\uff0c\u5c3d\u7ba1\u6211\u4eec\u53d1\u9001\u65e0\u6548\u7684\u8bf7\u6c42\u4e5f\u4f1a\u6709\u4e00\u4e9b\u66f4\u597d\u7684\u9519\u8bef\u5904\u7406\u4e86\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u50cf\u4ee5\u524d\u4e00\u6837\u83b7\u53d6\u6240\u6709snippet\u7684\u5217\u8868\u3002\n\n\nhttp http://127.0.0.1:8000/snippets/\n\nHTTP/1.1 200 OK\n...\n[\n  {\n    \"id\": 1,\n    \"title\": \"\",\n    \"code\": \"foo = \\\"bar\\\"\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"\",\n    \"code\": \"print \\\"hello, world\\\"\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  }\n]\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\nAccept\n\u6807\u5934\u6765\u63a7\u5236\u6211\u4eec\u56de\u590d\u7684\u54cd\u5e94\u683c\u5f0f\uff1a\n\n\nhttp http://127.0.0.1:8000/snippets/ Accept:application/json  # \u8bf7\u6c42JSON\nhttp http://127.0.0.1:8000/snippets/ Accept:text/html         # \u8bf7\u6c42HTML\n\n\n\n\u6216\u8005\u901a\u8fc7\u9644\u52a0\u683c\u5f0f\u540e\u7f00\uff1a\n\n\nhttp http://127.0.0.1:8000/snippets.json  # JSON\u540e\u7f00\nhttp http://127.0.0.1:8000/snippets.api   # \u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8API\u540e\u7f00\n\n\n\n\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\nContent-Type\n\u5934\u63a7\u5236\u6211\u4eec\u53d1\u9001\u7684\u8bf7\u6c42\u7684\u683c\u5f0f\u3002\n\n\n# POST\u8868\u5355\u6570\u636e\nhttp --form POST http://127.0.0.1:8000/snippets/ code=\"print 123\"\n\n{\n  \"id\": 3,\n  \"title\": \"\",\n  \"code\": \"print 123\",\n  \"linenos\": false,\n  \"language\": \"python\",\n  \"style\": \"friendly\"\n}\n\n# POST JSON\u6570\u636e\nhttp --json POST http://127.0.0.1:8000/snippets/ code=\"print 456\"\n\n{\n    \"id\": 4,\n    \"title\": \"\",\n    \"code\": \"print 456\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n}\n\n\n\n\u5982\u679c\u4f60\u5411\u4e0a\u8ff0\nhttp\n\u8bf7\u6c42\u6dfb\u52a0\u4e86\n--debug\n\uff0c\u5219\u53ef\u4ee5\u5728\u8bf7\u6c42\u6807\u5934\u4e2d\u67e5\u770b\u8bf7\u6c42\u7c7b\u578b\u3002\n\n\n\u73b0\u5728\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\nhttp://127.0.0.1:8000/snippets/\n\u67e5\u770bAPI\u3002\n\n\n\u6d4f\u89c8\u529f\u80fd\n\n\n\u7531\u4e8eAPI\u6839\u636e\u5ba2\u6237\u7aef\u8bf7\u6c42\u9009\u62e9\u54cd\u5e94\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53Web\u6d4f\u89c8\u5668\u8bf7\u6c42\u8be5\u8d44\u6e90\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u8d44\u6e90\u7684HTML\u683c\u5f0f\u8868\u793a\u3002\u8fd9\u5141\u8bb8API\u8fd4\u56de\u5b8c\u5168\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\uff08web-browsable\uff09\u7684HTML\u8868\u793a\u3002\n\n\n\u62e5\u6709\u652f\u6301\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684API\u5728\u53ef\u7528\u6027\u65b9\u9762\u5b8c\u80dc\u5e76\u4f7f\u5f00\u53d1\u548c\u4f7f\u7528\u4f60\u7684API\u66f4\u5bb9\u6613\u3002\u5b83\u4e5f\u5927\u5927\u964d\u4f4e\u4e86\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u8981\u68c0\u67e5\u548c\u4f7f\u7528API\u200b\u200b\u7684\u969c\u788d\u3002\n\n\n\u6709\u5173\u652f\u6301\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684API\u529f\u80fd\u4ee5\u53ca\u5982\u4f55\u81ea\u5b9a\u4e49API\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\n\u53ef\u6d4f\u89c8\u7684api\n\u4e3b\u9898\u3002\n\n\n\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff1f\n\n\n\u5728\n\u6559\u7a0b\u7684\u7b2c3\u90e8\u5206\n\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5e76\u67e5\u770b\u901a\u7528\u89c6\u56fe\u5982\u4f55\u51cf\u5c11\u9700\u8981\u7f16\u5199\u7684\u4ee3\u7801\u91cf\u3002",
            "title": "2 - Requests and responses"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#tutorial-2",
            "text": "\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u771f\u6b63\u5f00\u59cb\u63a5\u89e6REST\u6846\u67b6\u7684\u6838\u5fc3\u3002\n\u6211\u4eec\u6765\u4ecb\u7ecd\u51e0\u4e2a\u57fa\u672c\u7684\u6784\u5efa\u6a21\u5757\u3002",
            "title": "Tutorial 2: \u8bf7\u6c42\u548c\u54cd\u5e94"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#request-objects",
            "text": "REST\u6846\u67b6\u5f15\u5165\u4e86\u4e00\u4e2a\u6269\u5c55\u4e86\u5e38\u89c4 HttpRequest \u7684 Request \u5bf9\u8c61\uff0c\u5e76\u63d0\u4f9b\u4e86\u66f4\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\u3002 Request \u5bf9\u8c61\u7684\u6838\u5fc3\u529f\u80fd\u662f request.data \u5c5e\u6027\uff0c\u5b83\u4e0e request.POST \u7c7b\u4f3c\uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528Web API\u66f4\u4e3a\u6709\u7528\u3002  request.POST  # \u53ea\u5904\u7406\u8868\u5355\u6570\u636e  \u53ea\u9002\u7528\u4e8e'POST'\u65b9\u6cd5\nrequest.data  # \u5904\u7406\u4efb\u610f\u6570\u636e  \u9002\u7528\u4e8e'POST'\uff0c'PUT'\u548c'PATCH'\u65b9\u6cd5",
            "title": "\u8bf7\u6c42\u5bf9\u8c61\uff08Request objects\uff09"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#response-objects",
            "text": "REST\u6846\u67b6\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a Response \u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u79cd\u83b7\u53d6\u672a\u6e32\u67d3\uff08unrendered\uff09\u5185\u5bb9\u7684 TemplateResponse \u7c7b\u578b\uff0c\u5e76\u4f7f\u7528\u5185\u5bb9\u534f\u5546\u6765\u786e\u5b9a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002  return Response(data)  # \u6e32\u67d3\u6210\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\u3002",
            "title": "\u54cd\u5e94\u5bf9\u8c61\uff08Response objects\uff09"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#status-codes",
            "text": "\u5728\u4f60\u7684\u89c6\u56fe\uff08views\uff09\u4e2d\u4f7f\u7528\u7eaf\u6570\u5b57\u7684HTTP \u72b6\u6001\u7801\u5e76\u4e0d\u603b\u662f\u90a3\u4e48\u5bb9\u6613\u88ab\u7406\u89e3\u3002\u800c\u4e14\u5982\u679c\u9519\u8bef\u4ee3\u7801\u51fa\u9519\uff0c\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u3002REST\u6846\u67b6\u4e3a status \u6a21\u5757\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\uff08\u5982 HTTP_400_BAD_REQUEST \uff09\u63d0\u4f9b\u66f4\u660e\u786e\u7684\u6807\u8bc6\u7b26\u3002\u4f7f\u7528\u5b83\u4eec\u6765\u4ee3\u66ff\u7eaf\u6570\u5b57\u7684HTTP\u72b6\u6001\u7801\u662f\u4e2a\u5f88\u597d\u7684\u4e3b\u610f\u3002",
            "title": "\u72b6\u6001\u7801\uff08Status codes\uff09"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#wrappingapi",
            "text": "REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u7528\u4e8e\u7f16\u5199API\u89c6\u56fe\u7684\u5305\u88c5\u5668\uff08wrappers\uff09\u3002   \u7528\u4e8e\u57fa\u4e8e\u51fd\u6570\u89c6\u56fe\u7684 @api_view \u88c5\u9970\u5668\u3002  \u7528\u4e8e\u57fa\u4e8e\u7c7b\u89c6\u56fe\u7684 APIView \u7c7b\u3002   \u8fd9\u4e9b\u5305\u88c5\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u786e\u4fdd\u4f60\u5728\u89c6\u56fe\u4e2d\u63a5\u6536\u5230 Request \u5b9e\u4f8b\uff0c\u5e76\u5c06\u4e0a\u4e0b\u6587\u6dfb\u52a0\u5230 Response \uff0c\u4ee5\u4fbf\u53ef\u4ee5\u6267\u884c\u5185\u5bb9\u534f\u5546\u3002  \u5305\u88c5\u5668\u8fd8\u63d0\u4f9b\u4e86\u8bf8\u5982\u5728\u9002\u5f53\u65f6\u5019\u8fd4\u56de 405 Method Not Allowed \u54cd\u5e94\uff0c\u5e76\u5904\u7406\u5728\u4f7f\u7528\u683c\u5f0f\u9519\u8bef\u7684\u8f93\u5165\u6765\u8bbf\u95ee request.data \u65f6\u53d1\u751f\u7684\u4efb\u4f55 ParseError \u5f02\u5e38\u3002",
            "title": "\u5305\u88c5\uff08wrapping\uff09API\u89c6\u56fe"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#_1",
            "text": "\u597d\u7684\uff0c\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7684\u7ec4\u4ef6\u6765\u5199\u51e0\u4e2a\u89c6\u56fe\u3002  \u6211\u4eec\u5728 views.py \u4e2d\u4e0d\u518d\u9700\u8981 JSONResponse \u7c7b\u4e86\uff0c\u6240\u4ee5\u628a\u5b83\u5220\u9664\u6389\u3002\u5220\u9664\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u91cd\u6784\u6211\u4eec\u7684\u89c6\u56fe\u4e86\u3002  from rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n\n\n@api_view(['GET', 'POST'])\ndef snippet_list(request):\n    \"\"\"\n    \u5217\u51fa\u6240\u6709\u7684snippets\uff0c\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002\n    \"\"\"\n    if request.method == 'GET':\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    elif request.method == 'POST':\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)  \u6211\u4eec\u7684\u5b9e\u4f8b\u89c6\u56fe\u6bd4\u524d\u9762\u7684\u793a\u4f8b\u6709\u6240\u6539\u8fdb\u3002\u5b83\u7a0d\u5fae\u7b80\u6d01\u4e00\u70b9\uff0c\u73b0\u5728\u7684\u4ee3\u7801\u4e0e\u6211\u4eec\u4f7f\u7528Forms API\u65f6\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u4e86\u547d\u540d\u72b6\u6001\u4ee3\u7801\uff0c\u8fd9\u4f7f\u5f97\u54cd\u5e94\u610f\u4e49\u66f4\u52a0\u660e\u663e\u3002  \u4ee5\u4e0b\u662f views.py \u6a21\u5757\u4e2d\u5355\u4e2asnippet\u7684\u89c6\u56fe\u3002  @api_view(['GET', 'PUT', 'DELETE'])\ndef snippet_detail(request, pk):\n    \"\"\"\n    \u83b7\u53d6\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2asnippet\u5b9e\u4f8b\u3002\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n\n    elif request.method == 'PUT':\n        serializer = SnippetSerializer(snippet, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)  \u8fd9\u5bf9\u6211\u4eec\u6765\u8bf4\u5e94\u8be5\u90fd\u662f\u975e\u5e38\u719f\u6089\u7684\uff0c-\u5b83\u548c\u6b63\u5e38Django\u89c6\u56fe\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002  \u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u518d\u663e\u5f0f\u5730\u5c06\u8bf7\u6c42\u6216\u54cd\u5e94\u7ed1\u5b9a\u5230\u7ed9\u5b9a\u7684\u5185\u5bb9\u7c7b\u578b\u3002 request.data \u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684 json \u8bf7\u6c42\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u5904\u7406\u5176\u4ed6\u683c\u5f0f\u3002\u540c\u6837\uff0c\u6211\u4eec\u8fd4\u56de\u5e26\u6709\u6570\u636e\u7684\u54cd\u5e94\u5bf9\u8c61\uff0c\u4f46\u5141\u8bb8REST\u6846\u67b6\u5c06\u54cd\u5e94\u7ed9\u6211\u4eec\u6e32\u67d3\u6210\u6b63\u786e\u7684\u5185\u5bb9\u7c7b\u578b\u3002",
            "title": "\u7ec4\u5408\u5728\u4e00\u8d77"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#_2",
            "text": "\u4e3a\u4e86\u5145\u5206\u5229\u7528\u6211\u4eec\u7684\u54cd\u5e94\u4e0d\u518d\u4e0e\u5355\u4e00\u5185\u5bb9\u7c7b\u578b\u8fde\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3aAPI\u8def\u5f84\u6dfb\u52a0\u5bf9\u683c\u5f0f\u540e\u7f00\u7684\u652f\u6301\u3002\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\u7ed9\u6211\u4eec\u660e\u786e\u6307\u5b9a\u4e86\u7ed9\u5b9a\u683c\u5f0f\u7684URL\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684API\u5c06\u80fd\u591f\u5904\u7406\u8bf8\u5982 http://example.com/api/items/4.json \u4e4b\u7c7b\u7684URL\u3002  \u50cf\u4e0b\u9762\u8fd9\u6837\u5728\u8fd9\u4e24\u4e2a\u89c6\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a format \u5173\u952e\u5b57\u53c2\u6570\u3002  def snippet_list(request, format=None):  \u548c  def snippet_detail(request, pk, format=None):  \u73b0\u5728\u66f4\u65b0 urls.py \u6587\u4ef6\uff0c\u7ed9\u73b0\u6709\u7684URL\u540e\u9762\u6dfb\u52a0\u4e00\u7ec4 format_suffix_patterns \u3002  from django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n    url(r'^snippets/(?P<pk>[0-9]+)$', views.snippet_detail),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)  \u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u6dfb\u52a0\u8fd9\u4e9b\u989d\u5916\u7684url\u6a21\u5f0f\uff0c\u4f46\u5b83\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u7b80\u5355\uff0c\u6e05\u6670\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u7279\u5b9a\u7684\u683c\u5f0f\u3002",
            "title": "\u7ed9\u6211\u4eec\u7684\u7f51\u5740\u6dfb\u52a0\u53ef\u9009\u7684\u683c\u5f0f\u540e\u7f00"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#_3",
            "text": "\u4ece\u547d\u4ee4\u884c\u5f00\u59cb\u6d4b\u8bd5API\uff0c\u5c31\u50cf\u6211\u4eec\u5728 \u6559\u7a0b\u7b2c\u4e00\u90e8\u5206 \u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u4e00\u5207\u64cd\u4f5c\u90fd\u5f88\u76f8\u4f3c\uff0c\u5c3d\u7ba1\u6211\u4eec\u53d1\u9001\u65e0\u6548\u7684\u8bf7\u6c42\u4e5f\u4f1a\u6709\u4e00\u4e9b\u66f4\u597d\u7684\u9519\u8bef\u5904\u7406\u4e86\u3002  \u6211\u4eec\u53ef\u4ee5\u50cf\u4ee5\u524d\u4e00\u6837\u83b7\u53d6\u6240\u6709snippet\u7684\u5217\u8868\u3002  http http://127.0.0.1:8000/snippets/\n\nHTTP/1.1 200 OK\n...\n[\n  {\n    \"id\": 1,\n    \"title\": \"\",\n    \"code\": \"foo = \\\"bar\\\"\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"\",\n    \"code\": \"print \\\"hello, world\\\"\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n  }\n]  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Accept \u6807\u5934\u6765\u63a7\u5236\u6211\u4eec\u56de\u590d\u7684\u54cd\u5e94\u683c\u5f0f\uff1a  http http://127.0.0.1:8000/snippets/ Accept:application/json  # \u8bf7\u6c42JSON\nhttp http://127.0.0.1:8000/snippets/ Accept:text/html         # \u8bf7\u6c42HTML  \u6216\u8005\u901a\u8fc7\u9644\u52a0\u683c\u5f0f\u540e\u7f00\uff1a  http http://127.0.0.1:8000/snippets.json  # JSON\u540e\u7f00\nhttp http://127.0.0.1:8000/snippets.api   # \u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8API\u540e\u7f00  \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Content-Type \u5934\u63a7\u5236\u6211\u4eec\u53d1\u9001\u7684\u8bf7\u6c42\u7684\u683c\u5f0f\u3002  # POST\u8868\u5355\u6570\u636e\nhttp --form POST http://127.0.0.1:8000/snippets/ code=\"print 123\"\n\n{\n  \"id\": 3,\n  \"title\": \"\",\n  \"code\": \"print 123\",\n  \"linenos\": false,\n  \"language\": \"python\",\n  \"style\": \"friendly\"\n}\n\n# POST JSON\u6570\u636e\nhttp --json POST http://127.0.0.1:8000/snippets/ code=\"print 456\"\n\n{\n    \"id\": 4,\n    \"title\": \"\",\n    \"code\": \"print 456\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n}  \u5982\u679c\u4f60\u5411\u4e0a\u8ff0 http \u8bf7\u6c42\u6dfb\u52a0\u4e86 --debug \uff0c\u5219\u53ef\u4ee5\u5728\u8bf7\u6c42\u6807\u5934\u4e2d\u67e5\u770b\u8bf7\u6c42\u7c7b\u578b\u3002  \u73b0\u5728\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee http://127.0.0.1:8000/snippets/ \u67e5\u770bAPI\u3002",
            "title": "\u600e\u4e48\u67e5\u770b\u7ed3\u679c\uff1f"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#_4",
            "text": "\u7531\u4e8eAPI\u6839\u636e\u5ba2\u6237\u7aef\u8bf7\u6c42\u9009\u62e9\u54cd\u5e94\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53Web\u6d4f\u89c8\u5668\u8bf7\u6c42\u8be5\u8d44\u6e90\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u8d44\u6e90\u7684HTML\u683c\u5f0f\u8868\u793a\u3002\u8fd9\u5141\u8bb8API\u8fd4\u56de\u5b8c\u5168\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\uff08web-browsable\uff09\u7684HTML\u8868\u793a\u3002  \u62e5\u6709\u652f\u6301\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684API\u5728\u53ef\u7528\u6027\u65b9\u9762\u5b8c\u80dc\u5e76\u4f7f\u5f00\u53d1\u548c\u4f7f\u7528\u4f60\u7684API\u66f4\u5bb9\u6613\u3002\u5b83\u4e5f\u5927\u5927\u964d\u4f4e\u4e86\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u8981\u68c0\u67e5\u548c\u4f7f\u7528API\u200b\u200b\u7684\u969c\u788d\u3002  \u6709\u5173\u652f\u6301\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684API\u529f\u80fd\u4ee5\u53ca\u5982\u4f55\u81ea\u5b9a\u4e49API\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u53ef\u6d4f\u89c8\u7684api \u4e3b\u9898\u3002",
            "title": "\u6d4f\u89c8\u529f\u80fd"
        },
        {
            "location": "/tutorial/2-requests-and-responses_zh/#_5",
            "text": "\u5728 \u6559\u7a0b\u7684\u7b2c3\u90e8\u5206 \uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5e76\u67e5\u770b\u901a\u7528\u89c6\u56fe\u5982\u4f55\u51cf\u5c11\u9700\u8981\u7f16\u5199\u7684\u4ee3\u7801\u91cf\u3002",
            "title": "\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff1f"
        },
        {
            "location": "/tutorial/3-class-based-views_zh/",
            "text": "Tutorial 3: \u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff08CBV\uff09\n\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7f16\u5199\u6211\u4eec\u7684API\u89c6\u56fe\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u6a21\u5f0f\uff0c\u5141\u8bb8\u6211\u4eec\u91cd\u7528\u5e38\u7528\u529f\u80fd\uff0c\u5e76\u5e2e\u52a9\u6211\u4eec\u4fdd\u6301\u4ee3\u7801\nDRY\n\u3002\n\n\n\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u91cd\u5199\u6211\u4eec\u7684API\n\n\n\u6211\u4eec\u5c06\u9996\u5148\u5c06\u6839\u89c6\u56fe\u91cd\u5199\u4e3a\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5bf9\nviews.py\n\u6587\u4ef6\u7684\u91cd\u6784\u3002\n\n\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom django.http import Http404\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\n\nclass SnippetList(APIView):\n    \"\"\"\n    \u5217\u51fa\u6240\u6709\u7684snippets\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002\n    \"\"\"\n    def get(self, request, format=None):\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    def post(self, request, format=None):\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\n\n\u5230\u73b0\u5728\u4e3a\u6b62\u8fd8\u633a\u597d\u3002\u5b83\u770b\u8d77\u6765\u4e0e\u4ee5\u524d\u7684\u60c5\u51b5\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u6211\u4eec\u5728\u4e0d\u540c\u7684HTTP\u65b9\u6cd5\u4e4b\u95f4\u6709\u66f4\u597d\u7684\u5206\u79bb\u3002\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u65b0\nviews.py\n\u4e2d\u7684\u5b9e\u4f8b\u89c6\u56fe\u3002\n\n\nclass SnippetDetail(APIView):\n    \"\"\"\n    \u68c0\u7d22\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2asnippet\u793a\u4f8b\u3002\n    \"\"\"\n    def get_object(self, pk):\n        try:\n            return Snippet.objects.get(pk=pk)\n        except Snippet.DoesNotExist:\n            raise Http404\n\n    def get(self, request, pk, format=None):\n        snippet = self.get_object(pk)\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n\n    def put(self, request, pk, format=None):\n        snippet = self.get_object(pk)\n        serializer = SnippetSerializer(snippet, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    def delete(self, request, pk, format=None):\n        snippet = self.get_object(pk)\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n\n\n\n\u770b\u8d77\u6765\u4e0d\u9519\uff0c\u5b83\u73b0\u5728\u4ecd\u7136\u975e\u5e38\u7c7b\u4f3c\u4e8e\u57fa\u4e8e\u529f\u80fd\u7684\u89c6\u56fe\u3002\n\n\n\u6211\u4eec\u8fd8\u9700\u8981\u91cd\u6784\u6211\u4eec\u7684\nurls.py\n\uff0c\u73b0\u5728\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002\n\n\nfrom django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.SnippetList.as_view()),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', views.SnippetDetail.as_view()),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n\n\n\n\u597d\u4e86\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\u3002\u5982\u679c\u4f60\u542f\u52a8\u670d\u52a1\uff0c\u90a3\u4e48\u5b83\u5e94\u200b\u200b\u8be5\u50cf\u4e4b\u524d\u4e00\u6837\u53ef\u4ee5\u8fd0\u884c\u3002\n\n\n\u4f7f\u7528\u6df7\u5408\uff08mixins\uff09\n\n\n\u4f7f\u7528\u57fa\u4e8e\u7c7b\u89c6\u56fe\u7684\u6700\u5927\u4f18\u52bf\u4e4b\u4e00\u662f\u5b83\u53ef\u4ee5\u8f7b\u677e\u5730\u521b\u5efa\u53ef\u590d\u7528\u7684\u884c\u4e3a\u3002\n\n\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u521b\u5efa/\u83b7\u53d6/\u66f4\u65b0/\u5220\u9664\u64cd\u4f5c\u548c\u6211\u4eec\u521b\u5efa\u7684\u4efb\u4f55\u57fa\u4e8e\u6a21\u578b\u7684API\u89c6\u56fe\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u5e38\u89c1\u7684\u884c\u4e3a\u662f\u5728REST\u6846\u67b6\u7684mixin\u7c7b\u4e2d\u5b9e\u73b0\u7684\u3002\n\n\n\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7\u4f7f\u7528mixin\u7c7b\u7f16\u5199\u89c6\u56fe\u7684\u3002\u8fd9\u662f\u6211\u4eec\u7684\nviews.py\n\u6a21\u5757\u3002\n\n\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import mixins\nfrom rest_framework import generics\n\nclass SnippetList(mixins.ListModelMixin,\n                  mixins.CreateModelMixin,\n                  generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)\n\n\n\n\u6211\u4eec\u5c06\u82b1\u70b9\u65f6\u95f4\u597d\u597d\u770b\u4e0b\u8fd9\u91cc\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u3002\u6211\u4eec\u4f7f\u7528\nGenericAPIView\n\u6784\u5efa\u4e86\u6211\u4eec\u7684\u89c6\u56fe\uff0c\u5e76\u4e14\u7528\u4e0a\u4e86\nListModelMixin\n\u548c\nCreateModelMixin\n\u3002\n\n\n\u57fa\u7c7b\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u800cmixin\u7c7b\u63d0\u4f9b\n.list()\n\u548c\n.create()\n\u64cd\u4f5c\u3002\u7136\u540e\u6211\u4eec\u660e\u786e\u5730\u5c06\nget\n\u548c\npost\n\u65b9\u6cd5\u7ed1\u5b9a\u5230\u9002\u5f53\u7684\u64cd\u4f5c\u3002\u90fd\u76ee\u524d\u4e3a\u6b62\u90fd\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\n\n\nclass SnippetDetail(mixins.RetrieveModelMixin,\n                    mixins.UpdateModelMixin,\n                    mixins.DestroyModelMixin,\n                    generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\n\n    def put(self, request, *args, **kwargs):\n        return self.update(request, *args, **kwargs)\n\n    def delete(self, request, *args, **kwargs):\n        return self.destroy(request, *args, **kwargs)\n\n\n\n\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e00\u6b21\u6211\u4eec\u4f7f\u7528\nGenericAPIView\n\u7c7b\u6765\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u5e76\u6dfb\u52a0mixins\u6765\u63d0\u4f9b\n.retrieve()\n\uff09\uff0c\n.update()\n\u548c\n.destroy()\n\u64cd\u4f5c\u3002\n\n\n\u4f7f\u7528\u901a\u7528\u7684\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\n\n\n\u901a\u8fc7\u4f7f\u7528mixin\u7c7b\uff0c\u6211\u4eec\u4f7f\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u91cd\u5199\u4e86\u8fd9\u4e9b\u89c6\u56fe\uff0c\u4f46\u6211\u4eec\u8fd8\u53ef\u4ee5\u518d\u8fdb\u4e00\u6b65\u3002REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u7ec4\u5df2\u7ecf\u6df7\u5408\u597d\uff08mixed-in\uff09\u7684\u901a\u7528\u89c6\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u7b80\u5316\u6211\u4eec\u7684\nviews.py\n\u6a21\u5757\u3002\n\n\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import generics\n\n\nclass SnippetList(generics.ListCreateAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n\nclass SnippetDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n\n\n\u54c7\uff0c\u5982\u6b64\u7b80\u6d01\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u73b0\u6210\u7684\u4ee3\u7801\uff0c\u8ba9\u6211\u4eec\u7684\u4ee3\u7801\u770b\u8d77\u6765\u975e\u5e38\u6e05\u6670\u3001\u7b80\u6d01\uff0c\u5730\u9053\u7684Django\u3002\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u79fb\u6b65\n\u6559\u7a0b\u7684\u7b2c4\u90e8\u5206\n\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u5904\u7406API\u7684\u8eab\u4efd\u9a8c\u8bc1\u548c\u6743\u9650\u3002",
            "title": "3 - Class based views"
        },
        {
            "location": "/tutorial/3-class-based-views_zh/#tutorial-3-cbv",
            "text": "\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7f16\u5199\u6211\u4eec\u7684API\u89c6\u56fe\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u6a21\u5f0f\uff0c\u5141\u8bb8\u6211\u4eec\u91cd\u7528\u5e38\u7528\u529f\u80fd\uff0c\u5e76\u5e2e\u52a9\u6211\u4eec\u4fdd\u6301\u4ee3\u7801 DRY \u3002",
            "title": "Tutorial 3: \u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff08CBV\uff09"
        },
        {
            "location": "/tutorial/3-class-based-views_zh/#api",
            "text": "\u6211\u4eec\u5c06\u9996\u5148\u5c06\u6839\u89c6\u56fe\u91cd\u5199\u4e3a\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5bf9 views.py \u6587\u4ef6\u7684\u91cd\u6784\u3002  from snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom django.http import Http404\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\n\nclass SnippetList(APIView):\n    \"\"\"\n    \u5217\u51fa\u6240\u6709\u7684snippets\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002\n    \"\"\"\n    def get(self, request, format=None):\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    def post(self, request, format=None):\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)  \u5230\u73b0\u5728\u4e3a\u6b62\u8fd8\u633a\u597d\u3002\u5b83\u770b\u8d77\u6765\u4e0e\u4ee5\u524d\u7684\u60c5\u51b5\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u6211\u4eec\u5728\u4e0d\u540c\u7684HTTP\u65b9\u6cd5\u4e4b\u95f4\u6709\u66f4\u597d\u7684\u5206\u79bb\u3002\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u65b0 views.py \u4e2d\u7684\u5b9e\u4f8b\u89c6\u56fe\u3002  class SnippetDetail(APIView):\n    \"\"\"\n    \u68c0\u7d22\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2asnippet\u793a\u4f8b\u3002\n    \"\"\"\n    def get_object(self, pk):\n        try:\n            return Snippet.objects.get(pk=pk)\n        except Snippet.DoesNotExist:\n            raise Http404\n\n    def get(self, request, pk, format=None):\n        snippet = self.get_object(pk)\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n\n    def put(self, request, pk, format=None):\n        snippet = self.get_object(pk)\n        serializer = SnippetSerializer(snippet, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    def delete(self, request, pk, format=None):\n        snippet = self.get_object(pk)\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)  \u770b\u8d77\u6765\u4e0d\u9519\uff0c\u5b83\u73b0\u5728\u4ecd\u7136\u975e\u5e38\u7c7b\u4f3c\u4e8e\u57fa\u4e8e\u529f\u80fd\u7684\u89c6\u56fe\u3002  \u6211\u4eec\u8fd8\u9700\u8981\u91cd\u6784\u6211\u4eec\u7684 urls.py \uff0c\u73b0\u5728\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002  from django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.SnippetList.as_view()),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', views.SnippetDetail.as_view()),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)  \u597d\u4e86\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\u3002\u5982\u679c\u4f60\u542f\u52a8\u670d\u52a1\uff0c\u90a3\u4e48\u5b83\u5e94\u200b\u200b\u8be5\u50cf\u4e4b\u524d\u4e00\u6837\u53ef\u4ee5\u8fd0\u884c\u3002",
            "title": "\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u91cd\u5199\u6211\u4eec\u7684API"
        },
        {
            "location": "/tutorial/3-class-based-views_zh/#mixins",
            "text": "\u4f7f\u7528\u57fa\u4e8e\u7c7b\u89c6\u56fe\u7684\u6700\u5927\u4f18\u52bf\u4e4b\u4e00\u662f\u5b83\u53ef\u4ee5\u8f7b\u677e\u5730\u521b\u5efa\u53ef\u590d\u7528\u7684\u884c\u4e3a\u3002  \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u521b\u5efa/\u83b7\u53d6/\u66f4\u65b0/\u5220\u9664\u64cd\u4f5c\u548c\u6211\u4eec\u521b\u5efa\u7684\u4efb\u4f55\u57fa\u4e8e\u6a21\u578b\u7684API\u89c6\u56fe\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u5e38\u89c1\u7684\u884c\u4e3a\u662f\u5728REST\u6846\u67b6\u7684mixin\u7c7b\u4e2d\u5b9e\u73b0\u7684\u3002  \u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7\u4f7f\u7528mixin\u7c7b\u7f16\u5199\u89c6\u56fe\u7684\u3002\u8fd9\u662f\u6211\u4eec\u7684 views.py \u6a21\u5757\u3002  from snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import mixins\nfrom rest_framework import generics\n\nclass SnippetList(mixins.ListModelMixin,\n                  mixins.CreateModelMixin,\n                  generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)  \u6211\u4eec\u5c06\u82b1\u70b9\u65f6\u95f4\u597d\u597d\u770b\u4e0b\u8fd9\u91cc\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u3002\u6211\u4eec\u4f7f\u7528 GenericAPIView \u6784\u5efa\u4e86\u6211\u4eec\u7684\u89c6\u56fe\uff0c\u5e76\u4e14\u7528\u4e0a\u4e86 ListModelMixin \u548c CreateModelMixin \u3002  \u57fa\u7c7b\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u800cmixin\u7c7b\u63d0\u4f9b .list() \u548c .create() \u64cd\u4f5c\u3002\u7136\u540e\u6211\u4eec\u660e\u786e\u5730\u5c06 get \u548c post \u65b9\u6cd5\u7ed1\u5b9a\u5230\u9002\u5f53\u7684\u64cd\u4f5c\u3002\u90fd\u76ee\u524d\u4e3a\u6b62\u90fd\u662f\u663e\u800c\u6613\u89c1\u7684\u3002  class SnippetDetail(mixins.RetrieveModelMixin,\n                    mixins.UpdateModelMixin,\n                    mixins.DestroyModelMixin,\n                    generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\n\n    def put(self, request, *args, **kwargs):\n        return self.update(request, *args, **kwargs)\n\n    def delete(self, request, *args, **kwargs):\n        return self.destroy(request, *args, **kwargs)  \u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e00\u6b21\u6211\u4eec\u4f7f\u7528 GenericAPIView \u7c7b\u6765\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u5e76\u6dfb\u52a0mixins\u6765\u63d0\u4f9b .retrieve() \uff09\uff0c .update() \u548c .destroy() \u64cd\u4f5c\u3002",
            "title": "\u4f7f\u7528\u6df7\u5408\uff08mixins\uff09"
        },
        {
            "location": "/tutorial/3-class-based-views_zh/#_1",
            "text": "\u901a\u8fc7\u4f7f\u7528mixin\u7c7b\uff0c\u6211\u4eec\u4f7f\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u91cd\u5199\u4e86\u8fd9\u4e9b\u89c6\u56fe\uff0c\u4f46\u6211\u4eec\u8fd8\u53ef\u4ee5\u518d\u8fdb\u4e00\u6b65\u3002REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u7ec4\u5df2\u7ecf\u6df7\u5408\u597d\uff08mixed-in\uff09\u7684\u901a\u7528\u89c6\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u7b80\u5316\u6211\u4eec\u7684 views.py \u6a21\u5757\u3002  from snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import generics\n\n\nclass SnippetList(generics.ListCreateAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n\nclass SnippetDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer  \u54c7\uff0c\u5982\u6b64\u7b80\u6d01\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u73b0\u6210\u7684\u4ee3\u7801\uff0c\u8ba9\u6211\u4eec\u7684\u4ee3\u7801\u770b\u8d77\u6765\u975e\u5e38\u6e05\u6670\u3001\u7b80\u6d01\uff0c\u5730\u9053\u7684Django\u3002  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u79fb\u6b65 \u6559\u7a0b\u7684\u7b2c4\u90e8\u5206 \uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u5904\u7406API\u7684\u8eab\u4efd\u9a8c\u8bc1\u548c\u6743\u9650\u3002",
            "title": "\u4f7f\u7528\u901a\u7528\u7684\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/",
            "text": "Tutorial 4: \u8ba4\u8bc1\u548c\u6743\u9650\n\n\n\u76ee\u524d\uff0c\u6211\u4eec\u7684API\u5bf9\u8c01\u53ef\u4ee5\u7f16\u8f91\u6216\u5220\u9664\u4ee3\u7801\u6bb5\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002\u6211\u4eec\u5e0c\u671b\u6709\u66f4\u9ad8\u7ea7\u7684\u884c\u4e3a\uff0c\u4ee5\u786e\u4fdd\uff1a\n\n\n\n\n\u4ee3\u7801\u7247\u6bb5\u59cb\u7ec8\u4e0e\u521b\u5efa\u8005\u76f8\u5173\u8054\u3002\n\n\n\u53ea\u6709\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u7247\u6bb5\u3002\n\n\n\u53ea\u6709\u4ee3\u7801\u7247\u6bb5\u7684\u521b\u5efa\u8005\u53ef\u4ee5\u66f4\u65b0\u6216\u5220\u9664\u5b83\u3002\n\n\n\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5e94\u5177\u6709\u5b8c\u5168\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002\n\n\n\n\n\u5728\u6211\u4eec\u7684\u6a21\u578b\uff08model\uff09\u4e2d\u6dfb\u52a0\u4fe1\u606f\n\n\n\u6211\u4eec\u5c06\u5bf9\u6211\u4eec\u7684\nSnippet\n\u6a21\u578b\u7c7b\u8fdb\u884c\u51e0\u6b21\u66f4\u6539\u3002\u9996\u5148\uff0c\u6211\u4eec\u6dfb\u52a0\u51e0\u4e2a\u5b57\u6bb5\u3002\u5176\u4e2d\u4e00\u4e2a\u5b57\u6bb5\u5c06\u7528\u4e8e\u8868\u793a\u521b\u5efa\u4ee3\u7801\u6bb5\u7684\u7528\u6237\uff0c\u53e6\u4e00\u4e2a\u5b57\u6bb5\u5c06\u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7684\u9ad8\u4eae\u663e\u793a\u7684HTML\u5185\u5bb9\u3002\n\n\n\u5c06\u4ee5\u4e0b\u4e24\u4e2a\u5b57\u6bb5\u6dfb\u52a0\u5230\nmodels.py\n\u6587\u4ef6\u4e2d\u7684\nSnippet\n\u6a21\u578b\u4e2d\u3002\n\n\nowner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE)\nhighlighted = models.TextField()\n\n\n\n\u6211\u4eec\u8fd8\u9700\u8981\u786e\u4fdd\u5728\u4fdd\u5b58\u6a21\u578b\u65f6\uff0c\u4f7f\u7528\npygments\n\u4ee3\u7801\u9ad8\u4eae\u663e\u793a\u5e93\u586b\u5145\u8981\u9ad8\u4eae\u663e\u793a\u7684\u5b57\u6bb5\u3002\n\n\n\u6211\u4eec\u9700\u8981\u5bfc\u5165\u989d\u5916\u7684\u6a21\u5757\uff1a\n\n\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters.html import HtmlFormatter\nfrom pygments import highlight\n\n\n\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6a21\u578b\u7c7b\u4e2d\u6dfb\u52a0\u4e00\u4e2a\n.save()\n\u65b9\u6cd5\uff1a\n\n\ndef save(self, *args, **kwargs):\n    \"\"\"\n    \u4f7f\u7528`pygments`\u5e93\u521b\u5efa\u4e00\u4e2a\u9ad8\u4eae\u663e\u793a\u7684HTML\u8868\u793a\u4ee3\u7801\u6bb5\u3002\n    \"\"\"\n    lexer = get_lexer_by_name(self.language)\n    linenos = self.linenos and 'table' or False\n    options = self.title and {'title': self.title} or {}\n    formatter = HtmlFormatter(style=self.style, linenos=linenos,\n                              full=True, **options)\n    self.highlighted = highlight(self.code, lexer, formatter)\n    super(Snippet, self).save(*args, **kwargs)\n\n\n\n\u5b8c\u6210\u8fd9\u4e9b\u5de5\u4f5c\u540e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6211\u4eec\u7684\u6570\u636e\u5e93\u8868\u3002\n\u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u8fc1\u79fb\uff08migration\uff09\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u53ea\u662f\u4e2a\u6559\u7a0b\u793a\u4f8b\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u76f4\u63a5\u5220\u9664\u6570\u636e\u5e93\u5e76\u91cd\u65b0\u5f00\u59cb\u3002\n\n\nrm -f tmp.db db.sqlite3\nrm -r snippets/migrations\npython manage.py makemigrations snippets\npython manage.py migrate\n\n\n\n\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u521b\u5efa\u51e0\u4e2a\u4e0d\u540c\u7684\u7528\u6237\uff0c\u4ee5\u7528\u4e8e\u6d4b\u8bd5API\u3002\u6700\u5feb\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\ncreatesuperuser\n\u547d\u4ee4\u3002\n\n\npython manage.py createsuperuser\n\n\n\n\u4e3a\u6211\u4eec\u7684\u7528\u6237\u6a21\u578b\u6dfb\u52a0\u8def\u5f84\n\n\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e9b\u7528\u6237\uff0c\u6211\u4eec\u6700\u597d\u5728API\u4e2d\u6dfb\u52a0\u8fd9\u4e9b\u7528\u6237\u7684\u8868\u793a\u3002\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\u5316\u5668\u975e\u5e38\u7b80\u5355\uff0c\u5728\nserializers.py\n\u6587\u4ef6\u4e2d\u6dfb\u52a0\uff1a\n\n\nfrom django.contrib.auth.models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    snippets = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all())\n\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'snippets')\n\n\n\n\u56e0\u4e3a\n'snippets'\n \u5728\u7528\u6237\u6a21\u578b\u4e2d\u662f\u4e00\u4e2a\n\u53cd\u5411\n\u5173\u8054\u5173\u7cfb\u3002\u5728\u4f7f\u7528 \nModelSerializer\n \u7c7b\u65f6\u5b83\u9ed8\u8ba4\u4e0d\u4f1a\u88ab\u5305\u542b\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u5b83\u6dfb\u52a0\u4e00\u4e2a\u663e\u5f0f\u5b57\u6bb5\u3002\n\n\n\u6211\u4eec\u8fd8\u4f1a\u5728\nviews.py\n\u4e2d\u6dfb\u52a0\u51e0\u4e2a\u89c6\u56fe\u3002\u6211\u4eec\u53ea\u60f3\u5c06\u7528\u6237\u5c55\u793a\u4e3a\u53ea\u8bfb\u89c6\u56fe\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528\nListAPIView\n\u548c\nRetrieveAPIView\n\u901a\u7528\u7684\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002\n\n\nfrom django.contrib.auth.models import User\n\n\nclass UserList(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\nclass UserDetail(generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\n\n\u786e\u4fdd\u5bfc\u5165\u4e86\nUserSerializer\n\u7c7b\n\n\nfrom snippets.serializers import UserSerializer\n\n\n\n\u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u5728URL conf\u4e2d\u5f15\u7528\u5b83\u4eec\u6765\u5c06\u8fd9\u4e9b\u89c6\u56fe\u6dfb\u52a0\u5230API\u4e2d\u3002\u5c06\u4ee5\u4e0b\u5185\u5bb9\u6dfb\u52a0\u5230\nurls.py\n\u6587\u4ef6\u7684patterns\u4e2d\u3002\n\n\nurl(r'^users/$', views.UserList.as_view()),\nurl(r'^users/(?P<pk>[0-9]+)/$', views.UserDetail.as_view()),\n\n\n\n\u5c06Snippet\u548c\u7528\u6237\u5173\u8054\n\n\n\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u4e0d\u80fd\u5c06\u521b\u5efa\u8be5\u4ee3\u7801\u7247\u6bb5\u7684\u7528\u6237\u4e0e\u4ee3\u7801\u6bb5\u5b9e\u4f8b\u76f8\u5173\u8054\u3002\u7528\u6237\u4e0d\u662f\u4f5c\u4e3a\u5e8f\u5217\u5316\u8868\u793a\u7684\u4e00\u90e8\u5206\u53d1\u9001\u7684\uff0c\u800c\u662f\u4f5c\u4e3a\u4f20\u5165\u8bf7\u6c42\u7684\u5c5e\u6027\u3002\uff08\u8bd1\u8005\u6ce8\uff1auser\u4e0d\u5728\u4f20\u8fc7\u6765\u7684\u6570\u636e\u4e2d\uff0c\u800c\u662f\u901a\u8fc7request.user\u83b7\u5f97\uff09\n\n\n\u6211\u4eec\u5904\u7406\u7684\u65b9\u5f0f\u662f\u5728\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u89c6\u56fe\u4e2d\u91cd\u5199\u4e00\u4e2a\n.perform_create()\n\u65b9\u6cd5\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5b9e\u4f8b\u4fdd\u5b58\u7684\u65b9\u6cd5\uff0c\u5e76\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u6216\u8bf7\u6c42URL\u4e2d\u9690\u542b\u7684\u4efb\u4f55\u4fe1\u606f\u3002\n\n\n\u5728\nSnippetList\n\u89c6\u56fe\u7c7b\u4e2d\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n\n\ndef perform_create(self, serializer):\n    serializer.save(owner=self.request.user)\n\n\n\n\u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668\u7684\ncreate()\n\u65b9\u6cd5\u73b0\u5728\u5c06\u88ab\u4f20\u9012\u4e00\u4e2a\u9644\u52a0\u7684\n'owner'\n\u5b57\u6bb5\u4ee5\u53ca\u6765\u81ea\u8bf7\u6c42\u7684\u9a8c\u8bc1\u6570\u636e\u3002\n\n\n\u66f4\u65b0\u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668\n\n\n\u73b0\u5728\uff0c\u8fd9\u4e9b\u4ee3\u7801\u7247\u6bb5\u548c\u521b\u5efa\u5b83\u4eec\u7684\u7528\u6237\u76f8\u5173\u8054\uff0c\u8ba9\u6211\u4eec\u66f4\u65b0\u6211\u4eec\u7684\nSnippetSerializer\n\u6765\u4f53\u73b0\u8fd9\u4e2a\u5173\u8054\u5173\u7cfb\u3002\u5c06\u4ee5\u4e0b\u5b57\u6bb5\u6dfb\u52a0\u5230\nserializers.py\n\u4e2d\u7684\u5e8f\u5217\u5316\u5668\u5b9a\u4e49\uff1a\n Add the following field to the serializer definition in \nserializers.py\n:\n\n\nowner = serializers.ReadOnlyField(source='owner.username')\n\n\n\n\u6ce8\u610f\n\uff1a\u786e\u4fdd\u4f60\u8fd8\u5c06\n'owner',\n\u6dfb\u52a0\u5230\u5185\u90e8\nMeta\n\u7c7b\u7684\u5b57\u6bb5\u5217\u8868\u4e2d\u3002\n\n\n\u8fd9\u4e2a\u5b57\u6bb5\u975e\u5e38\u6709\u8da3\u3002\nsource\n\u53c2\u6570\u63a7\u5236\u54ea\u4e2a\u5c5e\u6027\u7528\u4e8e\u586b\u5145\u5b57\u6bb5\uff0c\u5e76\u4e14\u53ef\u4ee5\u6307\u5411\u5e8f\u5217\u5316\u5b9e\u4f8b\u4e0a\u7684\u4efb\u4f55\u5c5e\u6027\u3002\u5b83\u4e5f\u53ef\u4ee5\u91c7\u7528\u5982\u4e0a\u6240\u793a\u70b9\u52a0\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u4ee5\u4e0eDjango\u6a21\u677f\u8bed\u8a00\u4e00\u8d77\u4f7f\u7528\u7684\u76f8\u4f3c\u65b9\u5f0f\u904d\u5386\u7ed9\u5b9a\u7684\u5c5e\u6027\u3002\n\n\n\u6211\u4eec\u6dfb\u52a0\u7684\u5b57\u6bb5\u662f\u65e0\u7c7b\u578b\u7684\nReadOnlyField\n\u7c7b\uff0c\u533a\u522b\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u5b57\u6bb5\uff08\u5982\nCharField\n\uff0c\nBooleanField\n\u7b49\uff09\u3002\u65e0\u7c7b\u578b\u7684\nReadOnlyField\n\u59cb\u7ec8\u662f\u53ea\u8bfb\u7684\uff0c\u53ea\u80fd\u7528\u4e8e\u5e8f\u5217\u5316\u8868\u793a\uff0c\u4e0d\u80fd\u7528\u4e8e\u5728\u53cd\u5e8f\u5217\u5316\u65f6\u66f4\u65b0\u6a21\u578b\u5b9e\u4f8b\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528\nCharField(read_only=True)\n\u3002\n\n\n\u6dfb\u52a0\u89c6\u56fe\u6240\u9700\u7684\u6743\u9650\n\n\n\u73b0\u5728\uff0c\u4ee3\u7801\u7247\u6bb5\u4e0e\u7528\u6237\u662f\u76f8\u5173\u8054\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u53ea\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u624d\u80fd\u521b\u5efa\uff0c\u66f4\u65b0\u548c\u5220\u9664\u4ee3\u7801\u7247\u6bb5\u3002\n\n\nREST\u6846\u67b6\u5305\u62ec\u8bb8\u591a\u6743\u9650\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6743\u9650\u7c7b\u6765\u9650\u5236\u8c01\u53ef\u4ee5\u8bbf\u95ee\u7ed9\u5b9a\u7684\u89c6\u56fe\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f\nIsAuthenticatedOrReadOnly\n\u7c7b\uff0c\u8fd9\u5c06\u786e\u4fdd\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u83b7\u5f97\u8bfb\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5c06\u83b7\u5f97\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002\n\n\n\u9996\u5148\u8981\u5728\u89c6\u56fe\u6a21\u5757\u4e2d\u5bfc\u5165\u4ee5\u4e0b\u5185\u5bb9\n\n\nfrom rest_framework import permissions\n\n\n\n\u7136\u540e\uff0c\u5c06\u4ee5\u4e0b\u5c5e\u6027\u6dfb\u52a0\u5230\nSnippetList\n\u548c\nSnippetDetail\n\u89c6\u56fe\u7c7b\u4e2d\u3002\n\n\npermission_classes = (permissions.IsAuthenticatedOrReadOnly,)\n\n\n\n\u7ed9Browsable API\u6dfb\u52a0\u767b\u9646\n\n\n\u5982\u679c\u4f60\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6d4f\u89c8\u6211\u4eec\u7684API\uff0c\u90a3\u4e48\u4f60\u4f1a\u53d1\u73b0\u4e0d\u80fd\u521b\u5efa\u65b0\u7684\u4ee3\u7801\u7247\u6bb5\u3002\u53ea\u6709\u767b\u9646\u7528\u6237\u624d\u80fd\u521b\u5efa\u65b0\u7684\u4ee3\u7801\u7247\u6bb5\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91\u9879\u76ee\u7ea7\u522b\u7684\nurls.py\n\u6587\u4ef6\u4e2d\u7684URLconf\u6765\u6dfb\u52a0\u53ef\u6d4f\u89c8\u7684API\u4f7f\u7528\u7684\u767b\u5f55\u89c6\u56fe\u3002\n\n\n\u5728\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0\u4ee5\u4e0b\u5bfc\u5165\uff1a\n\n\nfrom django.conf.urls import include\n\n\n\n\u800c\u4e14\uff0c\u5728\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6a21\u5f0f\uff08pattern\uff09\u4ee5\u5305\u62ec\u53ef\u6d4f\u89c8\u7684API\u7684\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\u3002\n\n\nurlpatterns += [\n    url(r'^api-auth/', include('rest_framework.urls',\n                               namespace='rest_framework')),\n]\n\n\n\n\u6a21\u5f0f\u7684\nr'^api-auth/'\n\u90e8\u5206\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4f60\u8981\u4f7f\u7528\u7684\u4efb\u4f55URL\u3002\u552f\u4e00\u7684\u9650\u5236\u662f\u5305\u542b\u7684URL\u5fc5\u987b\u4f7f\u7528\n'rest_framework'\n\u547d\u540d\u7a7a\u95f4\u3002\u5728Django 1.9\u4ee5\u4e0a\u7684\u7248\u672c\u4e2d\uff0cREST\u6846\u67b6\u5c06\u8bbe\u7f6e\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u5c06\u5176\u5220\u9664\u3002\n\n\n\u73b0\u5728\uff0c\u5982\u679c\u4f60\u518d\u6b21\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5237\u65b0\u9875\u9762\uff0c\u4f60\u5c06\u5728\u9875\u9762\u53f3\u4e0a\u89d2\u770b\u5230\u4e00\u4e2a\u201c\u767b\u5f55\u201d\u94fe\u63a5\u3002\u5982\u679c\u4f60\u7528\u65e9\u671f\u521b\u5efa\u7684\u7528\u6237\u767b\u5f55\uff0c\u5c31\u53ef\u4ee5\u518d\u6b21\u521b\u5efa\u4ee3\u7801\u7247\u6bb5\u3002\n\n\n\u4e00\u65e6\u4f60\u521b\u5efa\u4e86\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\u540e\uff0c\u5728'/users/'\u8def\u5f84\u4e0b\u4f60\u4f1a\u6ce8\u610f\u5230\u6bcf\u4e2a\u7528\u6237\u7684'snippets'\u5b57\u6bb5\u90fd\u5305\u542b\u4e0e\u6bcf\u4e2a\u7528\u6237\u76f8\u5173\u8054\u7684\u4ee3\u7801\u7247\u6bb5\u7684\u5217\u8868\u3002\n\n\n\u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650\n\n\n\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u4ee3\u7801\u7247\u6bb5\u90fd\u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u770b\u5230\uff0c\u4f46\u4e5f\u8981\u786e\u4fdd\u53ea\u6709\u521b\u5efa\u4ee3\u7801\u7247\u6bb5\u7684\u7528\u6237\u624d\u80fd\u66f4\u65b0\u6216\u5220\u9664\u5b83\u3002\n\n\n\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6743\u9650\u3002\n\n\n\u5728snippets app\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\npermissions.py\n\u3002\n\n\nfrom rest_framework import permissions\n\n\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    \u81ea\u5b9a\u4e49\u6743\u9650\u53ea\u5141\u8bb8\u5bf9\u8c61\u7684\u6240\u6709\u8005\u7f16\u8f91\u5b83\u3002\n    \"\"\"\n\n    def has_object_permission(self, request, view, obj):\n        # \u8bfb\u53d6\u6743\u9650\u5141\u8bb8\u4efb\u4f55\u8bf7\u6c42\uff0c\n        # \u6240\u4ee5\u6211\u4eec\u603b\u662f\u5141\u8bb8GET\uff0cHEAD\u6216OPTIONS\u8bf7\u6c42\u3002\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        # \u53ea\u6709\u8be5snippet\u7684\u6240\u6709\u8005\u624d\u5141\u8bb8\u5199\u6743\u9650\u3002\n        return obj.owner == request.user\n\n\n\n\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\nSnippetDetail\n\u89c6\u56fe\u7c7b\u4e2d\u7f16\u8f91\npermission_classes\n\u5c5e\u6027\u5c06\u8be5\u81ea\u5b9a\u4e49\u6743\u9650\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u8def\u5f84\uff1a\n\n\npermission_classes = (permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly,)\n\n\n\n\u786e\u4fdd\u8981\u5148\u5bfc\u5165\nIsOwnerOrReadOnly\n\u7c7b\u3002\n\n\nfrom snippets.permissions import IsOwnerOrReadOnly\n\n\n\n\u73b0\u5728\uff0c\u5982\u679c\u518d\u6b21\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u4f60\u4f1a\u53d1\u73b0\u5982\u679c\u4f60\u4ee5\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u8005\u7684\u8eab\u4efd\u767b\u5f55\u7684\u8bdd\uff0c\u201cDELETE\u201d\u548c\u201cPUT\u201d\u64cd\u4f5c\u624d\u4f1a\u663e\u793a\u5728\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u8def\u5f84\u4e0a\u3002\n\n\n\u4f7f\u7528API\u200b\u200b\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\n\n\n\u73b0\u5728\u56e0\u4e3a\u6211\u4eec\u5728API\u4e0a\u6709\u4e00\u7ec4\u6743\u9650\uff0c\u5982\u679c\u6211\u4eec\u8981\u7f16\u8f91\u4efb\u4f55\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u90fd\u9700\u8981\u9a8c\u8bc1\u6211\u4eec\u7684\u8bf7\u6c42\u3002\u6211\u4eec\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u4efb\u4f55\n\u8eab\u4efd\u9a8c\u8bc1\u7c7b\n\uff0c\u6240\u4ee5\u5e94\u7528\u7684\u662f\u9ed8\u8ba4\u7684\nSessionAuthentication\n\u548c\nBasicAuthentication\n\u3002\n\n\n\u5f53\u6211\u4eec\u901a\u8fc7Web\u6d4f\u89c8\u5668\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u767b\u5f55\uff0c\u7136\u540e\u6d4f\u89c8\u5668\u4f1a\u8bdd\u5c06\u4e3a\u8bf7\u6c42\u63d0\u4f9b\u6240\u9700\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\n\n\n\u5982\u679c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u4e0eAPI\u4ea4\u4e92\uff0c\u6211\u4eec\u9700\u8981\u5728\u6bcf\u6b21\u8bf7\u6c42\u4e0a\u663e\u5f0f\u63d0\u4f9b\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002\n\n\n\u5982\u679c\u6211\u4eec\u901a\u8fc7\u6ca1\u6709\u9a8c\u8bc1\u5c31\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u4f1a\u50cf\u4e0b\u9762\u5c55\u793a\u7684\u90a3\u6837\u6536\u5230\u62a5\u9519\uff1a\n\n\nhttp POST http://127.0.0.1:8000/snippets/ code=\"print 123\"\n\n{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a0\u4e0a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684\u4e00\u4e2a\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u6765\u6210\u529f\u521b\u5efa\uff1a\n\n\nhttp -a tom:password123 POST http://127.0.0.1:8000/snippets/ code=\"print 789\"\n\n{\n    \"id\": 5,\n    \"owner\": \"tom\",\n    \"title\": \"foo\",\n    \"code\": \"print 789\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n}\n\n\n\n\u603b\u7ed3\n\n\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5728\u6211\u4eec\u7684Web API\u4e0a\u83b7\u5f97\u4e86\u76f8\u5f53\u7cbe\u7ec6\u7684\u4e00\u7ec4\u6743\u9650\u63a7\u5236\uff0c\u5e76\u4e3a\u7cfb\u7edf\u7684\u7528\u6237\u548c\u4ed6\u4eec\u521b\u5efa\u7684\u4ee3\u7801\u7247\u6bb5\u63d0\u4f9b\u4e86API\u8def\u5f84\u3002\n\n\n\u5728\n\u672c\u6559\u7a0b\u7684\u7b2c5\u90e8\u5206\n\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7\u4e3a\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u4e00\u4e2aHTML\u8def\u5f84\u6765\u5c06\u6240\u6709\u5185\u5bb9\u8054\u7cfb\u8d77\u6765\uff0c\u5e76\u5728\u7cfb\u7edf\u5185\u90e8\u901a\u8fc7\u4f7f\u7528\u8d85\u94fe\u63a5\u5c06API\u8054\u7cfb\u8d77\u6765\u3002",
            "title": "4 - Authentication and permissions"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#tutorial-4",
            "text": "\u76ee\u524d\uff0c\u6211\u4eec\u7684API\u5bf9\u8c01\u53ef\u4ee5\u7f16\u8f91\u6216\u5220\u9664\u4ee3\u7801\u6bb5\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002\u6211\u4eec\u5e0c\u671b\u6709\u66f4\u9ad8\u7ea7\u7684\u884c\u4e3a\uff0c\u4ee5\u786e\u4fdd\uff1a   \u4ee3\u7801\u7247\u6bb5\u59cb\u7ec8\u4e0e\u521b\u5efa\u8005\u76f8\u5173\u8054\u3002  \u53ea\u6709\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u7247\u6bb5\u3002  \u53ea\u6709\u4ee3\u7801\u7247\u6bb5\u7684\u521b\u5efa\u8005\u53ef\u4ee5\u66f4\u65b0\u6216\u5220\u9664\u5b83\u3002  \u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5e94\u5177\u6709\u5b8c\u5168\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002",
            "title": "Tutorial 4: \u8ba4\u8bc1\u548c\u6743\u9650"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#model",
            "text": "\u6211\u4eec\u5c06\u5bf9\u6211\u4eec\u7684 Snippet \u6a21\u578b\u7c7b\u8fdb\u884c\u51e0\u6b21\u66f4\u6539\u3002\u9996\u5148\uff0c\u6211\u4eec\u6dfb\u52a0\u51e0\u4e2a\u5b57\u6bb5\u3002\u5176\u4e2d\u4e00\u4e2a\u5b57\u6bb5\u5c06\u7528\u4e8e\u8868\u793a\u521b\u5efa\u4ee3\u7801\u6bb5\u7684\u7528\u6237\uff0c\u53e6\u4e00\u4e2a\u5b57\u6bb5\u5c06\u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7684\u9ad8\u4eae\u663e\u793a\u7684HTML\u5185\u5bb9\u3002  \u5c06\u4ee5\u4e0b\u4e24\u4e2a\u5b57\u6bb5\u6dfb\u52a0\u5230 models.py \u6587\u4ef6\u4e2d\u7684 Snippet \u6a21\u578b\u4e2d\u3002  owner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE)\nhighlighted = models.TextField()  \u6211\u4eec\u8fd8\u9700\u8981\u786e\u4fdd\u5728\u4fdd\u5b58\u6a21\u578b\u65f6\uff0c\u4f7f\u7528 pygments \u4ee3\u7801\u9ad8\u4eae\u663e\u793a\u5e93\u586b\u5145\u8981\u9ad8\u4eae\u663e\u793a\u7684\u5b57\u6bb5\u3002  \u6211\u4eec\u9700\u8981\u5bfc\u5165\u989d\u5916\u7684\u6a21\u5757\uff1a  from pygments.lexers import get_lexer_by_name\nfrom pygments.formatters.html import HtmlFormatter\nfrom pygments import highlight  \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6a21\u578b\u7c7b\u4e2d\u6dfb\u52a0\u4e00\u4e2a .save() \u65b9\u6cd5\uff1a  def save(self, *args, **kwargs):\n    \"\"\"\n    \u4f7f\u7528`pygments`\u5e93\u521b\u5efa\u4e00\u4e2a\u9ad8\u4eae\u663e\u793a\u7684HTML\u8868\u793a\u4ee3\u7801\u6bb5\u3002\n    \"\"\"\n    lexer = get_lexer_by_name(self.language)\n    linenos = self.linenos and 'table' or False\n    options = self.title and {'title': self.title} or {}\n    formatter = HtmlFormatter(style=self.style, linenos=linenos,\n                              full=True, **options)\n    self.highlighted = highlight(self.code, lexer, formatter)\n    super(Snippet, self).save(*args, **kwargs)  \u5b8c\u6210\u8fd9\u4e9b\u5de5\u4f5c\u540e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6211\u4eec\u7684\u6570\u636e\u5e93\u8868\u3002\n\u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u8fc1\u79fb\uff08migration\uff09\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u53ea\u662f\u4e2a\u6559\u7a0b\u793a\u4f8b\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u76f4\u63a5\u5220\u9664\u6570\u636e\u5e93\u5e76\u91cd\u65b0\u5f00\u59cb\u3002  rm -f tmp.db db.sqlite3\nrm -r snippets/migrations\npython manage.py makemigrations snippets\npython manage.py migrate  \u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u521b\u5efa\u51e0\u4e2a\u4e0d\u540c\u7684\u7528\u6237\uff0c\u4ee5\u7528\u4e8e\u6d4b\u8bd5API\u3002\u6700\u5feb\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 createsuperuser \u547d\u4ee4\u3002  python manage.py createsuperuser",
            "title": "\u5728\u6211\u4eec\u7684\u6a21\u578b\uff08model\uff09\u4e2d\u6dfb\u52a0\u4fe1\u606f"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#_1",
            "text": "\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e9b\u7528\u6237\uff0c\u6211\u4eec\u6700\u597d\u5728API\u4e2d\u6dfb\u52a0\u8fd9\u4e9b\u7528\u6237\u7684\u8868\u793a\u3002\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\u5316\u5668\u975e\u5e38\u7b80\u5355\uff0c\u5728 serializers.py \u6587\u4ef6\u4e2d\u6dfb\u52a0\uff1a  from django.contrib.auth.models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    snippets = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all())\n\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'snippets')  \u56e0\u4e3a 'snippets'  \u5728\u7528\u6237\u6a21\u578b\u4e2d\u662f\u4e00\u4e2a \u53cd\u5411 \u5173\u8054\u5173\u7cfb\u3002\u5728\u4f7f\u7528  ModelSerializer  \u7c7b\u65f6\u5b83\u9ed8\u8ba4\u4e0d\u4f1a\u88ab\u5305\u542b\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u5b83\u6dfb\u52a0\u4e00\u4e2a\u663e\u5f0f\u5b57\u6bb5\u3002  \u6211\u4eec\u8fd8\u4f1a\u5728 views.py \u4e2d\u6dfb\u52a0\u51e0\u4e2a\u89c6\u56fe\u3002\u6211\u4eec\u53ea\u60f3\u5c06\u7528\u6237\u5c55\u793a\u4e3a\u53ea\u8bfb\u89c6\u56fe\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528 ListAPIView \u548c RetrieveAPIView \u901a\u7528\u7684\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002  from django.contrib.auth.models import User\n\n\nclass UserList(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\nclass UserDetail(generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer  \u786e\u4fdd\u5bfc\u5165\u4e86 UserSerializer \u7c7b  from snippets.serializers import UserSerializer  \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u5728URL conf\u4e2d\u5f15\u7528\u5b83\u4eec\u6765\u5c06\u8fd9\u4e9b\u89c6\u56fe\u6dfb\u52a0\u5230API\u4e2d\u3002\u5c06\u4ee5\u4e0b\u5185\u5bb9\u6dfb\u52a0\u5230 urls.py \u6587\u4ef6\u7684patterns\u4e2d\u3002  url(r'^users/$', views.UserList.as_view()),\nurl(r'^users/(?P<pk>[0-9]+)/$', views.UserDetail.as_view()),",
            "title": "\u4e3a\u6211\u4eec\u7684\u7528\u6237\u6a21\u578b\u6dfb\u52a0\u8def\u5f84"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#snippet",
            "text": "\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u4e0d\u80fd\u5c06\u521b\u5efa\u8be5\u4ee3\u7801\u7247\u6bb5\u7684\u7528\u6237\u4e0e\u4ee3\u7801\u6bb5\u5b9e\u4f8b\u76f8\u5173\u8054\u3002\u7528\u6237\u4e0d\u662f\u4f5c\u4e3a\u5e8f\u5217\u5316\u8868\u793a\u7684\u4e00\u90e8\u5206\u53d1\u9001\u7684\uff0c\u800c\u662f\u4f5c\u4e3a\u4f20\u5165\u8bf7\u6c42\u7684\u5c5e\u6027\u3002\uff08\u8bd1\u8005\u6ce8\uff1auser\u4e0d\u5728\u4f20\u8fc7\u6765\u7684\u6570\u636e\u4e2d\uff0c\u800c\u662f\u901a\u8fc7request.user\u83b7\u5f97\uff09  \u6211\u4eec\u5904\u7406\u7684\u65b9\u5f0f\u662f\u5728\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u89c6\u56fe\u4e2d\u91cd\u5199\u4e00\u4e2a .perform_create() \u65b9\u6cd5\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5b9e\u4f8b\u4fdd\u5b58\u7684\u65b9\u6cd5\uff0c\u5e76\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u6216\u8bf7\u6c42URL\u4e2d\u9690\u542b\u7684\u4efb\u4f55\u4fe1\u606f\u3002  \u5728 SnippetList \u89c6\u56fe\u7c7b\u4e2d\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u65b9\u6cd5\uff1a  def perform_create(self, serializer):\n    serializer.save(owner=self.request.user)  \u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668\u7684 create() \u65b9\u6cd5\u73b0\u5728\u5c06\u88ab\u4f20\u9012\u4e00\u4e2a\u9644\u52a0\u7684 'owner' \u5b57\u6bb5\u4ee5\u53ca\u6765\u81ea\u8bf7\u6c42\u7684\u9a8c\u8bc1\u6570\u636e\u3002",
            "title": "\u5c06Snippet\u548c\u7528\u6237\u5173\u8054"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#_2",
            "text": "\u73b0\u5728\uff0c\u8fd9\u4e9b\u4ee3\u7801\u7247\u6bb5\u548c\u521b\u5efa\u5b83\u4eec\u7684\u7528\u6237\u76f8\u5173\u8054\uff0c\u8ba9\u6211\u4eec\u66f4\u65b0\u6211\u4eec\u7684 SnippetSerializer \u6765\u4f53\u73b0\u8fd9\u4e2a\u5173\u8054\u5173\u7cfb\u3002\u5c06\u4ee5\u4e0b\u5b57\u6bb5\u6dfb\u52a0\u5230 serializers.py \u4e2d\u7684\u5e8f\u5217\u5316\u5668\u5b9a\u4e49\uff1a\n Add the following field to the serializer definition in  serializers.py :  owner = serializers.ReadOnlyField(source='owner.username')  \u6ce8\u610f \uff1a\u786e\u4fdd\u4f60\u8fd8\u5c06 'owner', \u6dfb\u52a0\u5230\u5185\u90e8 Meta \u7c7b\u7684\u5b57\u6bb5\u5217\u8868\u4e2d\u3002  \u8fd9\u4e2a\u5b57\u6bb5\u975e\u5e38\u6709\u8da3\u3002 source \u53c2\u6570\u63a7\u5236\u54ea\u4e2a\u5c5e\u6027\u7528\u4e8e\u586b\u5145\u5b57\u6bb5\uff0c\u5e76\u4e14\u53ef\u4ee5\u6307\u5411\u5e8f\u5217\u5316\u5b9e\u4f8b\u4e0a\u7684\u4efb\u4f55\u5c5e\u6027\u3002\u5b83\u4e5f\u53ef\u4ee5\u91c7\u7528\u5982\u4e0a\u6240\u793a\u70b9\u52a0\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u4ee5\u4e0eDjango\u6a21\u677f\u8bed\u8a00\u4e00\u8d77\u4f7f\u7528\u7684\u76f8\u4f3c\u65b9\u5f0f\u904d\u5386\u7ed9\u5b9a\u7684\u5c5e\u6027\u3002  \u6211\u4eec\u6dfb\u52a0\u7684\u5b57\u6bb5\u662f\u65e0\u7c7b\u578b\u7684 ReadOnlyField \u7c7b\uff0c\u533a\u522b\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u5b57\u6bb5\uff08\u5982 CharField \uff0c BooleanField \u7b49\uff09\u3002\u65e0\u7c7b\u578b\u7684 ReadOnlyField \u59cb\u7ec8\u662f\u53ea\u8bfb\u7684\uff0c\u53ea\u80fd\u7528\u4e8e\u5e8f\u5217\u5316\u8868\u793a\uff0c\u4e0d\u80fd\u7528\u4e8e\u5728\u53cd\u5e8f\u5217\u5316\u65f6\u66f4\u65b0\u6a21\u578b\u5b9e\u4f8b\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528 CharField(read_only=True) \u3002",
            "title": "\u66f4\u65b0\u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#_3",
            "text": "\u73b0\u5728\uff0c\u4ee3\u7801\u7247\u6bb5\u4e0e\u7528\u6237\u662f\u76f8\u5173\u8054\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u53ea\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u624d\u80fd\u521b\u5efa\uff0c\u66f4\u65b0\u548c\u5220\u9664\u4ee3\u7801\u7247\u6bb5\u3002  REST\u6846\u67b6\u5305\u62ec\u8bb8\u591a\u6743\u9650\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6743\u9650\u7c7b\u6765\u9650\u5236\u8c01\u53ef\u4ee5\u8bbf\u95ee\u7ed9\u5b9a\u7684\u89c6\u56fe\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f IsAuthenticatedOrReadOnly \u7c7b\uff0c\u8fd9\u5c06\u786e\u4fdd\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u83b7\u5f97\u8bfb\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5c06\u83b7\u5f97\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002  \u9996\u5148\u8981\u5728\u89c6\u56fe\u6a21\u5757\u4e2d\u5bfc\u5165\u4ee5\u4e0b\u5185\u5bb9  from rest_framework import permissions  \u7136\u540e\uff0c\u5c06\u4ee5\u4e0b\u5c5e\u6027\u6dfb\u52a0\u5230 SnippetList \u548c SnippetDetail \u89c6\u56fe\u7c7b\u4e2d\u3002  permission_classes = (permissions.IsAuthenticatedOrReadOnly,)",
            "title": "\u6dfb\u52a0\u89c6\u56fe\u6240\u9700\u7684\u6743\u9650"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#browsable-api",
            "text": "\u5982\u679c\u4f60\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6d4f\u89c8\u6211\u4eec\u7684API\uff0c\u90a3\u4e48\u4f60\u4f1a\u53d1\u73b0\u4e0d\u80fd\u521b\u5efa\u65b0\u7684\u4ee3\u7801\u7247\u6bb5\u3002\u53ea\u6709\u767b\u9646\u7528\u6237\u624d\u80fd\u521b\u5efa\u65b0\u7684\u4ee3\u7801\u7247\u6bb5\u3002  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91\u9879\u76ee\u7ea7\u522b\u7684 urls.py \u6587\u4ef6\u4e2d\u7684URLconf\u6765\u6dfb\u52a0\u53ef\u6d4f\u89c8\u7684API\u4f7f\u7528\u7684\u767b\u5f55\u89c6\u56fe\u3002  \u5728\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0\u4ee5\u4e0b\u5bfc\u5165\uff1a  from django.conf.urls import include  \u800c\u4e14\uff0c\u5728\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6a21\u5f0f\uff08pattern\uff09\u4ee5\u5305\u62ec\u53ef\u6d4f\u89c8\u7684API\u7684\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\u3002  urlpatterns += [\n    url(r'^api-auth/', include('rest_framework.urls',\n                               namespace='rest_framework')),\n]  \u6a21\u5f0f\u7684 r'^api-auth/' \u90e8\u5206\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4f60\u8981\u4f7f\u7528\u7684\u4efb\u4f55URL\u3002\u552f\u4e00\u7684\u9650\u5236\u662f\u5305\u542b\u7684URL\u5fc5\u987b\u4f7f\u7528 'rest_framework' \u547d\u540d\u7a7a\u95f4\u3002\u5728Django 1.9\u4ee5\u4e0a\u7684\u7248\u672c\u4e2d\uff0cREST\u6846\u67b6\u5c06\u8bbe\u7f6e\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u5c06\u5176\u5220\u9664\u3002  \u73b0\u5728\uff0c\u5982\u679c\u4f60\u518d\u6b21\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5237\u65b0\u9875\u9762\uff0c\u4f60\u5c06\u5728\u9875\u9762\u53f3\u4e0a\u89d2\u770b\u5230\u4e00\u4e2a\u201c\u767b\u5f55\u201d\u94fe\u63a5\u3002\u5982\u679c\u4f60\u7528\u65e9\u671f\u521b\u5efa\u7684\u7528\u6237\u767b\u5f55\uff0c\u5c31\u53ef\u4ee5\u518d\u6b21\u521b\u5efa\u4ee3\u7801\u7247\u6bb5\u3002  \u4e00\u65e6\u4f60\u521b\u5efa\u4e86\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\u540e\uff0c\u5728'/users/'\u8def\u5f84\u4e0b\u4f60\u4f1a\u6ce8\u610f\u5230\u6bcf\u4e2a\u7528\u6237\u7684'snippets'\u5b57\u6bb5\u90fd\u5305\u542b\u4e0e\u6bcf\u4e2a\u7528\u6237\u76f8\u5173\u8054\u7684\u4ee3\u7801\u7247\u6bb5\u7684\u5217\u8868\u3002",
            "title": "\u7ed9Browsable API\u6dfb\u52a0\u767b\u9646"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#_4",
            "text": "\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u4ee3\u7801\u7247\u6bb5\u90fd\u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u770b\u5230\uff0c\u4f46\u4e5f\u8981\u786e\u4fdd\u53ea\u6709\u521b\u5efa\u4ee3\u7801\u7247\u6bb5\u7684\u7528\u6237\u624d\u80fd\u66f4\u65b0\u6216\u5220\u9664\u5b83\u3002  \u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6743\u9650\u3002  \u5728snippets app\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6 permissions.py \u3002  from rest_framework import permissions\n\n\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    \u81ea\u5b9a\u4e49\u6743\u9650\u53ea\u5141\u8bb8\u5bf9\u8c61\u7684\u6240\u6709\u8005\u7f16\u8f91\u5b83\u3002\n    \"\"\"\n\n    def has_object_permission(self, request, view, obj):\n        # \u8bfb\u53d6\u6743\u9650\u5141\u8bb8\u4efb\u4f55\u8bf7\u6c42\uff0c\n        # \u6240\u4ee5\u6211\u4eec\u603b\u662f\u5141\u8bb8GET\uff0cHEAD\u6216OPTIONS\u8bf7\u6c42\u3002\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        # \u53ea\u6709\u8be5snippet\u7684\u6240\u6709\u8005\u624d\u5141\u8bb8\u5199\u6743\u9650\u3002\n        return obj.owner == request.user  \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728 SnippetDetail \u89c6\u56fe\u7c7b\u4e2d\u7f16\u8f91 permission_classes \u5c5e\u6027\u5c06\u8be5\u81ea\u5b9a\u4e49\u6743\u9650\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u8def\u5f84\uff1a  permission_classes = (permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly,)  \u786e\u4fdd\u8981\u5148\u5bfc\u5165 IsOwnerOrReadOnly \u7c7b\u3002  from snippets.permissions import IsOwnerOrReadOnly  \u73b0\u5728\uff0c\u5982\u679c\u518d\u6b21\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u4f60\u4f1a\u53d1\u73b0\u5982\u679c\u4f60\u4ee5\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u8005\u7684\u8eab\u4efd\u767b\u5f55\u7684\u8bdd\uff0c\u201cDELETE\u201d\u548c\u201cPUT\u201d\u64cd\u4f5c\u624d\u4f1a\u663e\u793a\u5728\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u8def\u5f84\u4e0a\u3002",
            "title": "\u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#api",
            "text": "\u73b0\u5728\u56e0\u4e3a\u6211\u4eec\u5728API\u4e0a\u6709\u4e00\u7ec4\u6743\u9650\uff0c\u5982\u679c\u6211\u4eec\u8981\u7f16\u8f91\u4efb\u4f55\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u90fd\u9700\u8981\u9a8c\u8bc1\u6211\u4eec\u7684\u8bf7\u6c42\u3002\u6211\u4eec\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u4efb\u4f55 \u8eab\u4efd\u9a8c\u8bc1\u7c7b \uff0c\u6240\u4ee5\u5e94\u7528\u7684\u662f\u9ed8\u8ba4\u7684 SessionAuthentication \u548c BasicAuthentication \u3002  \u5f53\u6211\u4eec\u901a\u8fc7Web\u6d4f\u89c8\u5668\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u767b\u5f55\uff0c\u7136\u540e\u6d4f\u89c8\u5668\u4f1a\u8bdd\u5c06\u4e3a\u8bf7\u6c42\u63d0\u4f9b\u6240\u9700\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002  \u5982\u679c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u4e0eAPI\u4ea4\u4e92\uff0c\u6211\u4eec\u9700\u8981\u5728\u6bcf\u6b21\u8bf7\u6c42\u4e0a\u663e\u5f0f\u63d0\u4f9b\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002  \u5982\u679c\u6211\u4eec\u901a\u8fc7\u6ca1\u6709\u9a8c\u8bc1\u5c31\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u4f1a\u50cf\u4e0b\u9762\u5c55\u793a\u7684\u90a3\u6837\u6536\u5230\u62a5\u9519\uff1a  http POST http://127.0.0.1:8000/snippets/ code=\"print 123\"\n\n{\n    \"detail\": \"Authentication credentials were not provided.\"\n}  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a0\u4e0a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684\u4e00\u4e2a\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u6765\u6210\u529f\u521b\u5efa\uff1a  http -a tom:password123 POST http://127.0.0.1:8000/snippets/ code=\"print 789\"\n\n{\n    \"id\": 5,\n    \"owner\": \"tom\",\n    \"title\": \"foo\",\n    \"code\": \"print 789\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n}",
            "title": "\u4f7f\u7528API\u200b\u200b\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1"
        },
        {
            "location": "/tutorial/4-authentication-and-permissions_zh/#_5",
            "text": "\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5728\u6211\u4eec\u7684Web API\u4e0a\u83b7\u5f97\u4e86\u76f8\u5f53\u7cbe\u7ec6\u7684\u4e00\u7ec4\u6743\u9650\u63a7\u5236\uff0c\u5e76\u4e3a\u7cfb\u7edf\u7684\u7528\u6237\u548c\u4ed6\u4eec\u521b\u5efa\u7684\u4ee3\u7801\u7247\u6bb5\u63d0\u4f9b\u4e86API\u8def\u5f84\u3002  \u5728 \u672c\u6559\u7a0b\u7684\u7b2c5\u90e8\u5206 \u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7\u4e3a\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u4e00\u4e2aHTML\u8def\u5f84\u6765\u5c06\u6240\u6709\u5185\u5bb9\u8054\u7cfb\u8d77\u6765\uff0c\u5e76\u5728\u7cfb\u7edf\u5185\u90e8\u901a\u8fc7\u4f7f\u7528\u8d85\u94fe\u63a5\u5c06API\u8054\u7cfb\u8d77\u6765\u3002",
            "title": "\u603b\u7ed3"
        },
        {
            "location": "/tutorial/5-relationships-and-hyperlinked-apis_zh/",
            "text": "Tutorial 5: \u5173\u7cfb\u548c\u8d85\u94fe\u63a5API\n\n\n\u76ee\u524d\u6211\u4eec\u7684API\u4e2d\u7684\u5173\u7cfb\u662f\u7528\u4e3b\u952e\u8868\u793a\u7684\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u4f7f\u7528\u8d85\u94fe\u63a5\u6765\u63d0\u9ad8\u6211\u4eecAPI\u7684\u5185\u90e8\u8054\u7cfb\u3002\n\n\n\u4e3a\u6211\u4eec\u7684API\u521b\u5efa\u4e00\u4e2a\u6839\u8def\u5f84\n\n\n\u73b0\u5728\u6211\u4eec\u6709'snippets'\u548c'users'\u7684\u8def\u5f84\uff0c\u4f46\u662f\u6211\u4eec\u7684API\u6ca1\u6709\u4e00\u4e2a\u5165\u53e3\u70b9\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5e38\u89c4\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u548c\u6211\u4eec\u524d\u9762\u4ecb\u7ecd\u7684\n@api_view\n\u88c5\u9970\u5668\u521b\u5efa\u4e00\u4e2a\u3002\u5728\u4f60\u7684\nsnippets/views.py\n\u4e2d\u6dfb\u52a0\uff1a\n\n\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom rest_framework.reverse import reverse\n\n\n@api_view(['GET'])\ndef api_root(request, format=None):\n    return Response({\n        'users': reverse('user-list', request=request, format=format),\n        'snippets': reverse('snippet-list', request=request, format=format)\n    })\n\n\n\n\u8fd9\u91cc\u5e94\u8be5\u6ce8\u610f\u4e24\u4ef6\u4e8b\u3002\u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528REST\u6846\u67b6\u7684\nreverse\n\u529f\u80fd\u6765\u8fd4\u56de\u5b8c\u5168\u9650\u5b9a\u7684URL\uff1b\u7b2c\u4e8c\uff0cURL\u6a21\u5f0f\u662f\u901a\u8fc7\u65b9\u4fbf\u7684\u540d\u79f0\u6765\u6807\u8bc6\u7684\uff0c\u6211\u4eec\u7a0d\u540e\u5c06\u5728\nsnippets/urls.py\n\u4e2d\u58f0\u660e\u3002\n\n\n\u4e3a\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u8def\u5f84\n\n\n\u6211\u4eec\u7684API\u4e2d\u53e6\u4e00\u4e2a\u660e\u663e\u7f3a\u5c11\u7684\u662f\u4ee3\u7801\u9ad8\u4eae\u663e\u793a\u8def\u5f84\u3002\n\n\n\u4e0e\u6240\u6709\u5176\u4ed6API\u8def\u5f84\u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528JSON\uff0c\u800c\u53ea\u662f\u9700\u8981HTML\u8868\u793a\u3002REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cdHTML\u6e32\u67d3\u5668\uff0c\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u4f7f\u7528\u6a21\u677f\u6e32\u67d3\u7684HTML\uff0c\u53e6\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u9884\u6e32\u67d3\u7684HTML\u3002\u7b2c\u4e8c\u4e2a\u6e32\u67d3\u5668\u662f\u6211\u4eec\u8981\u7528\u4e8e\u6b64\u8def\u5f84\u7684\u6e32\u67d3\u5668\u3002\n\n\n\u521b\u5efa\u4ee3\u7801\u9ad8\u4eae\u89c6\u56fe\u65f6\u9700\u8981\u8003\u8651\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u53ef\u7528\u7684\u5177\u4f53\u901a\u7528\u89c6\u56fe\u3002\u6211\u4eec\u4e0d\u662f\u8fd4\u56de\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u800c\u662f\u8fd4\u56de\u5bf9\u8c61\u5b9e\u4f8b\u7684\u5c5e\u6027\u3002\n\n\n\u4e0d\u662f\u4f7f\u7528\u5177\u4f53\u7684\u901a\u7528\u89c6\u56fe\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u57fa\u7c7b\u6765\u8868\u793a\u5b9e\u4f8b\uff0c\u5e76\u521b\u5efa\u6211\u4eec\u81ea\u5df1\u7684\n.get()\n\u65b9\u6cd5\u3002\u5728\u4f60\u7684\nsnippets/views.py\n\u4e2d\u6dfb\u52a0\uff1a\n\n\nfrom rest_framework import renderers\nfrom rest_framework.response import Response\n\nclass SnippetHighlight(generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    renderer_classes = (renderers.StaticHTMLRenderer,)\n\n    def get(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)\n\n\n\n\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5728URLconf\u4e2d\u6dfb\u52a0\u6211\u4eec\u521b\u5efa\u7684\u65b0\u89c6\u56fe\u3002\u6211\u4eec\u5c06\u5728\nsnippets/urls.py\n\u4e2d\u4e3a\u6211\u4eec\u7684\u65b0API\u6839\u8def\u5f84\u6dfb\u52a0\u4e00\u4e2aurl\u6a21\u5f0f\uff1a\n\n\nurl(r'^$', views.api_root),\n\n\n\n\u7136\u540e\u4e3a\u9ad8\u4eae\u4ee3\u7801\u7247\u6bb5\u6dfb\u52a0\u4e00\u4e2aurl\u6a21\u5f0f\uff1a\n\n\nurl(r'^snippets/(?P<pk>[0-9]+)/highlight/$', views.SnippetHighlight.as_view()),\n\n\n\n\u8d85\u94fe\u63a5\u6211\u4eec\u7684API\n\n\n\u5904\u7406\u597d\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u662fWeb API\u8bbe\u8ba1\u4e2d\u66f4\u5177\u6311\u6218\u6027\u7684\u65b9\u9762\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u4ee3\u8868\u4e00\u79cd\u5173\u7cfb\uff1a\n\n\n\n\n\u4f7f\u7528\u4e3b\u952e\u3002\n\n\n\u5728\u5b9e\u4f53\u4e4b\u95f4\u4f7f\u7528\u8d85\u94fe\u63a5\u3002\n\n\n\u5728\u76f8\u5173\u5b9e\u4f53\u4e0a\u4f7f\u7528\u552f\u4e00\u7684\u6807\u8bc6\u5b57\u6bb5\u3002\n\n\n\u4f7f\u7528\u76f8\u5173\u5b9e\u4f53\u7684\u9ed8\u8ba4\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002\n\n\n\u5c06\u76f8\u5173\u5b9e\u4f53\u5d4c\u5957\u5728\u7236\u8868\u793a\u4e2d\u3002\n\n\n\u4e00\u4e9b\u5176\u4ed6\u81ea\u5b9a\u4e49\u8868\u793a\u3002\n\n\n\n\nREST\u6846\u67b6\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u65b9\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u5b83\u4eec\u5e94\u7528\u4e8e\u6b63\u5411\u6216\u53cd\u5411\u5173\u7cfb\uff0c\u4e5f\u53ef\u4ee5\u5728\u8bf8\u5982\u901a\u7528\u5916\u952e\u4e4b\u7c7b\u7684\u81ea\u5b9a\u4e49\u7ba1\u7406\u5668\u4e0a\u5e94\u7528\u3002\n\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u5b9e\u4f53\u4e4b\u95f4\u4f7f\u7528\u8d85\u94fe\u63a5\u65b9\u5f0f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u6765\u6269\u5c55\nHyperlinkedModelSerializer\n\u800c\u4e0d\u662f\u73b0\u6709\u7684\nModelSerializer\n\u3002\n\n\nHyperlinkedModelSerializer\n\u4e0e\nModelSerializer\n\u6709\u4ee5\u4e0b\u533a\u522b\uff1a\n\n\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u5305\u62ec\nid\n\u5b57\u6bb5\u3002\n\n\n\u5b83\u5305\u542b\u4e00\u4e2a\nurl\n\u5b57\u6bb5\uff0c\u4f7f\u7528\nHyperlinkedIdentityField\n\u3002\n\n\n\u5173\u8054\u5173\u7cfb\u4f7f\u7528\nHyperlinkedRelatedField\n\uff0c\u800c\u4e0d\u662f\nPrimaryKeyRelatedField\n\u3002\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u91cd\u5199\u6211\u4eec\u73b0\u6709\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u4ee5\u4f7f\u7528\u8d85\u94fe\u63a5\u3002\u5728\u4f60\u7684\nsnippets/serializers.py\n\u4e2d\u6dfb\u52a0\uff1a\n\n\nclass SnippetSerializer(serializers.HyperlinkedModelSerializer):\n    owner = serializers.ReadOnlyField(source='owner.username')\n    highlight = serializers.HyperlinkedIdentityField(view_name='snippet-highlight', format='html')\n\n    class Meta:\n        model = Snippet\n        fields = ('url', 'id', 'highlight', 'owner',\n                  'title', 'code', 'linenos', 'language', 'style')\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True)\n\n    class Meta:\n        model = User\n        fields = ('url', 'id', 'username', 'snippets')\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\n'highlight'\n\u5b57\u6bb5\u3002\u8be5\u5b57\u6bb5\u4e0e\nurl\n\u5b57\u6bb5\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u6307\u5411\n'snippet-highlight'\nurl\u6a21\u5f0f\uff0c\u800c\u4e0d\u662f\n'snippet-detail'\nurl\u6a21\u5f0f\u3002\n\n\n\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5305\u542b\u4e86\u683c\u5f0f\u540e\u7f00\u7684URL\uff0c\u4f8b\u5982\n'.json'\n\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728\nhighlight\n\u5b57\u6bb5\u4e0a\u6307\u51fa\u4efb\u4f55\u683c\u5f0f\u540e\u7f00\u7684\u8d85\u94fe\u63a5\uff0c\u5b83\u5e94\u8be5\u4f7f\u7528\n'.html'\n\u540e\u7f00\u3002\n\n\n\u786e\u4fdd\u6211\u4eec\u7684URL\u6a21\u5f0f\u88ab\u547d\u540d\n\n\n\u5982\u679c\u6211\u4eec\u8981\u4f7f\u7528\u8d85\u94fe\u63a5\u7684API\uff0c\u90a3\u4e48\u9700\u8981\u786e\u4fdd\u4e3a\u6211\u4eec\u7684URL\u6a21\u5f0f\u547d\u540d\u3002\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u9700\u8981\u547d\u540d\u7684URL\u6a21\u5f0f\u3002\n\n\n\n\n\u6211\u4eecAPI\u7684\u6839\u8def\u5f84\u662f\u6307\n'user-list'\n\u548c\n'snippet-list'\n\u3002\n\n\n\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u5e8f\u5217\u5316\u5668\u5305\u542b\u4e00\u4e2a\u6307\u5411\n'snippet-highlight'\n\u7684\u5b57\u6bb5\u3002\n\n\n\u6211\u4eec\u7684\u7528\u6237\u5e8f\u5217\u5316\u5668\u5305\u542b\u4e00\u4e2a\u6307\u5411\n'snippet-detail'\n\u7684\u5b57\u6bb5\u3002\n\n\n\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u548c\u7528\u6237\u5e8f\u5217\u5316\u7a0b\u5e8f\u5305\u62ec\n'url'\n\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u6307\u5411\n'{model_name}-detail'\n\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f\n'snippet-detail'\n\u548c\n'user-detail'\n\u3002\n\n\n\n\n\u5c06\u6240\u6709\u8fd9\u4e9b\u540d\u79f0\u6dfb\u52a0\u5230\u6211\u4eec\u7684URLconf\u4e2d\u540e\uff0c\u6700\u7ec8\u6211\u4eec\u7684\nsnippets/urls.py\n\u6587\u4ef6\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a\n\n\nfrom django.conf.urls import url, include\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\n# API endpoints\nurlpatterns = format_suffix_patterns([\n    url(r'^$', views.api_root),\n    url(r'^snippets/$',\n        views.SnippetList.as_view(),\n        name='snippet-list'),\n    url(r'^snippets/(?P<pk>[0-9]+)/$',\n        views.SnippetDetail.as_view(),\n        name='snippet-detail'),\n    url(r'^snippets/(?P<pk>[0-9]+)/highlight/$',\n        views.SnippetHighlight.as_view(),\n        name='snippet-highlight'),\n    url(r'^users/$',\n        views.UserList.as_view(),\n        name='user-list'),\n    url(r'^users/(?P<pk>[0-9]+)/$',\n        views.UserDetail.as_view(),\n        name='user-detail')\n])\n\n# \u53ef\u6d4f\u89c8API\u7684\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\nurlpatterns += [\n    url(r'^api-auth/', include('rest_framework.urls',\n                               namespace='rest_framework')),\n]\n\n\n\n\u6dfb\u52a0\u5206\u9875\n\n\n\u7528\u6237\u548c\u4ee3\u7801\u7247\u6bb5\u7684\u5217\u8868\u89c6\u56fe\u53ef\u80fd\u4f1a\u8fd4\u56de\u76f8\u5f53\u591a\u7684\u5b9e\u4f8b\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u5bf9\u7ed3\u679c\u5206\u9875\uff0c\u5e76\u5141\u8bb8API\u5ba2\u6237\u7aef\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u5355\u72ec\u7684\u9875\u9762\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a0d\u5fae\u4fee\u6539\u6211\u4eec\u7684\ntutorial/settings.py\n\u6587\u4ef6\u6765\u66f4\u6539\u9ed8\u8ba4\u5217\u8868\u5c55\u793a\u6837\u5f0f\u6765\u4f7f\u7528\u5206\u9875\u3002\u6dfb\u52a0\u4ee5\u4e0b\u8bbe\u7f6e\uff1a\n\n\nREST_FRAMEWORK = {\n    'PAGE_SIZE': 10\n}\n\n\n\n\u8bf7\u6ce8\u610f\uff0cREST\u6846\u67b6\u4e2d\u7684\u6240\u6709\u8bbe\u7f6e\u90fd\u653e\u5728\u4e00\u4e2a\u540d\u4e3a\u201cREST_FRAMEWORK\u201d\u7684\u5b57\u5178\u4e2d\uff0c\u8fd9\u6709\u52a9\u4e8e\u533a\u5206\u9879\u76ee\u4e2d\u7684\u5176\u4ed6\u8bbe\u7f6e\u3002\n\n\n\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5206\u9875\u98ce\u683c\uff0c\u4f46\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u76f4\u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u3002\n\n\n\u6d4f\u89c8API\n\n\n\u5982\u679c\u6211\u4eec\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6d4f\u89c8\u6211\u4eec\u7684API\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7\u9875\u9762\u4e0a\u7684\u8d85\u94fe\u63a5\u6765\u4e86\u89e3API\u3002\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u770b\u5230\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u4e0a\u7684'highlight'\u94fe\u63a5\uff0c\u5b83\u80fd\u5e26\u4f60\u8df3\u8f6c\u5230\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801HTML\u8868\u793a\u3002\n\n\n\u5728\n\u6559\u7a0b\u7684\u7b2c6\u90e8\u5206\n\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528ViewSets\u548cRouters\u6765\u51cf\u5c11\u6784\u5efaAPI\u6240\u9700\u7684\u4ee3\u7801\u91cf\u3002",
            "title": "5 - Relationships and hyperlinked APIs"
        },
        {
            "location": "/tutorial/5-relationships-and-hyperlinked-apis_zh/#tutorial-5-api",
            "text": "\u76ee\u524d\u6211\u4eec\u7684API\u4e2d\u7684\u5173\u7cfb\u662f\u7528\u4e3b\u952e\u8868\u793a\u7684\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u4f7f\u7528\u8d85\u94fe\u63a5\u6765\u63d0\u9ad8\u6211\u4eecAPI\u7684\u5185\u90e8\u8054\u7cfb\u3002",
            "title": "Tutorial 5: \u5173\u7cfb\u548c\u8d85\u94fe\u63a5API"
        },
        {
            "location": "/tutorial/5-relationships-and-hyperlinked-apis_zh/#api",
            "text": "\u73b0\u5728\u6211\u4eec\u6709'snippets'\u548c'users'\u7684\u8def\u5f84\uff0c\u4f46\u662f\u6211\u4eec\u7684API\u6ca1\u6709\u4e00\u4e2a\u5165\u53e3\u70b9\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5e38\u89c4\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u548c\u6211\u4eec\u524d\u9762\u4ecb\u7ecd\u7684 @api_view \u88c5\u9970\u5668\u521b\u5efa\u4e00\u4e2a\u3002\u5728\u4f60\u7684 snippets/views.py \u4e2d\u6dfb\u52a0\uff1a  from rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom rest_framework.reverse import reverse\n\n\n@api_view(['GET'])\ndef api_root(request, format=None):\n    return Response({\n        'users': reverse('user-list', request=request, format=format),\n        'snippets': reverse('snippet-list', request=request, format=format)\n    })  \u8fd9\u91cc\u5e94\u8be5\u6ce8\u610f\u4e24\u4ef6\u4e8b\u3002\u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528REST\u6846\u67b6\u7684 reverse \u529f\u80fd\u6765\u8fd4\u56de\u5b8c\u5168\u9650\u5b9a\u7684URL\uff1b\u7b2c\u4e8c\uff0cURL\u6a21\u5f0f\u662f\u901a\u8fc7\u65b9\u4fbf\u7684\u540d\u79f0\u6765\u6807\u8bc6\u7684\uff0c\u6211\u4eec\u7a0d\u540e\u5c06\u5728 snippets/urls.py \u4e2d\u58f0\u660e\u3002",
            "title": "\u4e3a\u6211\u4eec\u7684API\u521b\u5efa\u4e00\u4e2a\u6839\u8def\u5f84"
        },
        {
            "location": "/tutorial/5-relationships-and-hyperlinked-apis_zh/#_1",
            "text": "\u6211\u4eec\u7684API\u4e2d\u53e6\u4e00\u4e2a\u660e\u663e\u7f3a\u5c11\u7684\u662f\u4ee3\u7801\u9ad8\u4eae\u663e\u793a\u8def\u5f84\u3002  \u4e0e\u6240\u6709\u5176\u4ed6API\u8def\u5f84\u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528JSON\uff0c\u800c\u53ea\u662f\u9700\u8981HTML\u8868\u793a\u3002REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cdHTML\u6e32\u67d3\u5668\uff0c\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u4f7f\u7528\u6a21\u677f\u6e32\u67d3\u7684HTML\uff0c\u53e6\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u9884\u6e32\u67d3\u7684HTML\u3002\u7b2c\u4e8c\u4e2a\u6e32\u67d3\u5668\u662f\u6211\u4eec\u8981\u7528\u4e8e\u6b64\u8def\u5f84\u7684\u6e32\u67d3\u5668\u3002  \u521b\u5efa\u4ee3\u7801\u9ad8\u4eae\u89c6\u56fe\u65f6\u9700\u8981\u8003\u8651\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u53ef\u7528\u7684\u5177\u4f53\u901a\u7528\u89c6\u56fe\u3002\u6211\u4eec\u4e0d\u662f\u8fd4\u56de\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u800c\u662f\u8fd4\u56de\u5bf9\u8c61\u5b9e\u4f8b\u7684\u5c5e\u6027\u3002  \u4e0d\u662f\u4f7f\u7528\u5177\u4f53\u7684\u901a\u7528\u89c6\u56fe\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u57fa\u7c7b\u6765\u8868\u793a\u5b9e\u4f8b\uff0c\u5e76\u521b\u5efa\u6211\u4eec\u81ea\u5df1\u7684 .get() \u65b9\u6cd5\u3002\u5728\u4f60\u7684 snippets/views.py \u4e2d\u6dfb\u52a0\uff1a  from rest_framework import renderers\nfrom rest_framework.response import Response\n\nclass SnippetHighlight(generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    renderer_classes = (renderers.StaticHTMLRenderer,)\n\n    def get(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)  \u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5728URLconf\u4e2d\u6dfb\u52a0\u6211\u4eec\u521b\u5efa\u7684\u65b0\u89c6\u56fe\u3002\u6211\u4eec\u5c06\u5728 snippets/urls.py \u4e2d\u4e3a\u6211\u4eec\u7684\u65b0API\u6839\u8def\u5f84\u6dfb\u52a0\u4e00\u4e2aurl\u6a21\u5f0f\uff1a  url(r'^$', views.api_root),  \u7136\u540e\u4e3a\u9ad8\u4eae\u4ee3\u7801\u7247\u6bb5\u6dfb\u52a0\u4e00\u4e2aurl\u6a21\u5f0f\uff1a  url(r'^snippets/(?P<pk>[0-9]+)/highlight/$', views.SnippetHighlight.as_view()),",
            "title": "\u4e3a\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u8def\u5f84"
        },
        {
            "location": "/tutorial/5-relationships-and-hyperlinked-apis_zh/#api_1",
            "text": "\u5904\u7406\u597d\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u662fWeb API\u8bbe\u8ba1\u4e2d\u66f4\u5177\u6311\u6218\u6027\u7684\u65b9\u9762\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u4ee3\u8868\u4e00\u79cd\u5173\u7cfb\uff1a   \u4f7f\u7528\u4e3b\u952e\u3002  \u5728\u5b9e\u4f53\u4e4b\u95f4\u4f7f\u7528\u8d85\u94fe\u63a5\u3002  \u5728\u76f8\u5173\u5b9e\u4f53\u4e0a\u4f7f\u7528\u552f\u4e00\u7684\u6807\u8bc6\u5b57\u6bb5\u3002  \u4f7f\u7528\u76f8\u5173\u5b9e\u4f53\u7684\u9ed8\u8ba4\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002  \u5c06\u76f8\u5173\u5b9e\u4f53\u5d4c\u5957\u5728\u7236\u8868\u793a\u4e2d\u3002  \u4e00\u4e9b\u5176\u4ed6\u81ea\u5b9a\u4e49\u8868\u793a\u3002   REST\u6846\u67b6\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u65b9\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u5b83\u4eec\u5e94\u7528\u4e8e\u6b63\u5411\u6216\u53cd\u5411\u5173\u7cfb\uff0c\u4e5f\u53ef\u4ee5\u5728\u8bf8\u5982\u901a\u7528\u5916\u952e\u4e4b\u7c7b\u7684\u81ea\u5b9a\u4e49\u7ba1\u7406\u5668\u4e0a\u5e94\u7528\u3002  \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u5b9e\u4f53\u4e4b\u95f4\u4f7f\u7528\u8d85\u94fe\u63a5\u65b9\u5f0f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u6765\u6269\u5c55 HyperlinkedModelSerializer \u800c\u4e0d\u662f\u73b0\u6709\u7684 ModelSerializer \u3002  HyperlinkedModelSerializer \u4e0e ModelSerializer \u6709\u4ee5\u4e0b\u533a\u522b\uff1a   \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u5305\u62ec id \u5b57\u6bb5\u3002  \u5b83\u5305\u542b\u4e00\u4e2a url \u5b57\u6bb5\uff0c\u4f7f\u7528 HyperlinkedIdentityField \u3002  \u5173\u8054\u5173\u7cfb\u4f7f\u7528 HyperlinkedRelatedField \uff0c\u800c\u4e0d\u662f PrimaryKeyRelatedField \u3002   \u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u91cd\u5199\u6211\u4eec\u73b0\u6709\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u4ee5\u4f7f\u7528\u8d85\u94fe\u63a5\u3002\u5728\u4f60\u7684 snippets/serializers.py \u4e2d\u6dfb\u52a0\uff1a  class SnippetSerializer(serializers.HyperlinkedModelSerializer):\n    owner = serializers.ReadOnlyField(source='owner.username')\n    highlight = serializers.HyperlinkedIdentityField(view_name='snippet-highlight', format='html')\n\n    class Meta:\n        model = Snippet\n        fields = ('url', 'id', 'highlight', 'owner',\n                  'title', 'code', 'linenos', 'language', 'style')\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True)\n\n    class Meta:\n        model = User\n        fields = ('url', 'id', 'username', 'snippets')  \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684 'highlight' \u5b57\u6bb5\u3002\u8be5\u5b57\u6bb5\u4e0e url \u5b57\u6bb5\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u6307\u5411 'snippet-highlight' url\u6a21\u5f0f\uff0c\u800c\u4e0d\u662f 'snippet-detail' url\u6a21\u5f0f\u3002  \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5305\u542b\u4e86\u683c\u5f0f\u540e\u7f00\u7684URL\uff0c\u4f8b\u5982 '.json' \uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728 highlight \u5b57\u6bb5\u4e0a\u6307\u51fa\u4efb\u4f55\u683c\u5f0f\u540e\u7f00\u7684\u8d85\u94fe\u63a5\uff0c\u5b83\u5e94\u8be5\u4f7f\u7528 '.html' \u540e\u7f00\u3002",
            "title": "\u8d85\u94fe\u63a5\u6211\u4eec\u7684API"
        },
        {
            "location": "/tutorial/5-relationships-and-hyperlinked-apis_zh/#url",
            "text": "\u5982\u679c\u6211\u4eec\u8981\u4f7f\u7528\u8d85\u94fe\u63a5\u7684API\uff0c\u90a3\u4e48\u9700\u8981\u786e\u4fdd\u4e3a\u6211\u4eec\u7684URL\u6a21\u5f0f\u547d\u540d\u3002\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u9700\u8981\u547d\u540d\u7684URL\u6a21\u5f0f\u3002   \u6211\u4eecAPI\u7684\u6839\u8def\u5f84\u662f\u6307 'user-list' \u548c 'snippet-list' \u3002  \u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u5e8f\u5217\u5316\u5668\u5305\u542b\u4e00\u4e2a\u6307\u5411 'snippet-highlight' \u7684\u5b57\u6bb5\u3002  \u6211\u4eec\u7684\u7528\u6237\u5e8f\u5217\u5316\u5668\u5305\u542b\u4e00\u4e2a\u6307\u5411 'snippet-detail' \u7684\u5b57\u6bb5\u3002  \u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u548c\u7528\u6237\u5e8f\u5217\u5316\u7a0b\u5e8f\u5305\u62ec 'url' \u5b57\u6bb5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u6307\u5411 '{model_name}-detail' \uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f 'snippet-detail' \u548c 'user-detail' \u3002   \u5c06\u6240\u6709\u8fd9\u4e9b\u540d\u79f0\u6dfb\u52a0\u5230\u6211\u4eec\u7684URLconf\u4e2d\u540e\uff0c\u6700\u7ec8\u6211\u4eec\u7684 snippets/urls.py \u6587\u4ef6\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a  from django.conf.urls import url, include\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\n# API endpoints\nurlpatterns = format_suffix_patterns([\n    url(r'^$', views.api_root),\n    url(r'^snippets/$',\n        views.SnippetList.as_view(),\n        name='snippet-list'),\n    url(r'^snippets/(?P<pk>[0-9]+)/$',\n        views.SnippetDetail.as_view(),\n        name='snippet-detail'),\n    url(r'^snippets/(?P<pk>[0-9]+)/highlight/$',\n        views.SnippetHighlight.as_view(),\n        name='snippet-highlight'),\n    url(r'^users/$',\n        views.UserList.as_view(),\n        name='user-list'),\n    url(r'^users/(?P<pk>[0-9]+)/$',\n        views.UserDetail.as_view(),\n        name='user-detail')\n])\n\n# \u53ef\u6d4f\u89c8API\u7684\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\nurlpatterns += [\n    url(r'^api-auth/', include('rest_framework.urls',\n                               namespace='rest_framework')),\n]",
            "title": "\u786e\u4fdd\u6211\u4eec\u7684URL\u6a21\u5f0f\u88ab\u547d\u540d"
        },
        {
            "location": "/tutorial/5-relationships-and-hyperlinked-apis_zh/#_2",
            "text": "\u7528\u6237\u548c\u4ee3\u7801\u7247\u6bb5\u7684\u5217\u8868\u89c6\u56fe\u53ef\u80fd\u4f1a\u8fd4\u56de\u76f8\u5f53\u591a\u7684\u5b9e\u4f8b\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u5bf9\u7ed3\u679c\u5206\u9875\uff0c\u5e76\u5141\u8bb8API\u5ba2\u6237\u7aef\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u5355\u72ec\u7684\u9875\u9762\u3002  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a0d\u5fae\u4fee\u6539\u6211\u4eec\u7684 tutorial/settings.py \u6587\u4ef6\u6765\u66f4\u6539\u9ed8\u8ba4\u5217\u8868\u5c55\u793a\u6837\u5f0f\u6765\u4f7f\u7528\u5206\u9875\u3002\u6dfb\u52a0\u4ee5\u4e0b\u8bbe\u7f6e\uff1a  REST_FRAMEWORK = {\n    'PAGE_SIZE': 10\n}  \u8bf7\u6ce8\u610f\uff0cREST\u6846\u67b6\u4e2d\u7684\u6240\u6709\u8bbe\u7f6e\u90fd\u653e\u5728\u4e00\u4e2a\u540d\u4e3a\u201cREST_FRAMEWORK\u201d\u7684\u5b57\u5178\u4e2d\uff0c\u8fd9\u6709\u52a9\u4e8e\u533a\u5206\u9879\u76ee\u4e2d\u7684\u5176\u4ed6\u8bbe\u7f6e\u3002  \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5206\u9875\u98ce\u683c\uff0c\u4f46\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u76f4\u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u3002",
            "title": "\u6dfb\u52a0\u5206\u9875"
        },
        {
            "location": "/tutorial/5-relationships-and-hyperlinked-apis_zh/#api_2",
            "text": "\u5982\u679c\u6211\u4eec\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6d4f\u89c8\u6211\u4eec\u7684API\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7\u9875\u9762\u4e0a\u7684\u8d85\u94fe\u63a5\u6765\u4e86\u89e3API\u3002  \u4f60\u8fd8\u53ef\u4ee5\u770b\u5230\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u4e0a\u7684'highlight'\u94fe\u63a5\uff0c\u5b83\u80fd\u5e26\u4f60\u8df3\u8f6c\u5230\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801HTML\u8868\u793a\u3002  \u5728 \u6559\u7a0b\u7684\u7b2c6\u90e8\u5206 \u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528ViewSets\u548cRouters\u6765\u51cf\u5c11\u6784\u5efaAPI\u6240\u9700\u7684\u4ee3\u7801\u91cf\u3002",
            "title": "\u6d4f\u89c8API"
        },
        {
            "location": "/tutorial/6-viewsets-and-routers_zh/",
            "text": "Tutorial 6: \u89c6\u56fe\u96c6\u548c\u8def\u7531\u5668\n\n\nREST\u6846\u67b6\u5305\u62ec\u4e00\u4e2a\u7528\u4e8e\u5904\u7406\nViewSets\n\u7684\u62bd\u8c61\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u96c6\u4e2d\u7cbe\u529b\u5bf9API\u7684\u72b6\u6001\u548c\u4ea4\u4e92\u8fdb\u884c\u5efa\u6a21\uff0c\u5e76\u6839\u636e\u5e38\u89c4\u7ea6\u5b9a\u81ea\u52a8\u5904\u7406URL\u6784\u9020\u3002\n\n\nViewSet\n\u7c7b\u4e0e\nView\n\u7c7b\u51e0\u4e4e\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4eec\u63d0\u4f9b\u8bf8\u5982\nread\n\u6216\nupdate\n\u4e4b\u7c7b\u7684\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\nget\n\u6216\nput\n\u7b49\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6700\u540e\u4e00\u4e2a\nViewSet\n\u7c7b\u53ea\u7ed1\u5b9a\u5230\u4e00\u7ec4\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\uff0c\u5f53\u5b83\u88ab\u5b9e\u4f8b\u5316\u6210\u4e00\u7ec4\u89c6\u56fe\u7684\u65f6\u5019\uff0c\u901a\u5e38\u901a\u8fc7\u4f7f\u7528\u4e00\u4e2a\nRouter\n\u7c7b\u6765\u5904\u7406\u81ea\u5df1\u5b9a\u4e49URL conf\u7684\u590d\u6742\u6027\u3002\n\n\n\u4f7f\u7528ViewSets\u91cd\u6784\n\n\n\u6211\u4eec\u770b\u4e00\u4e0b\u76ee\u524d\u7684\u89c6\u56fe\uff0c\u628a\u5b83\u4eec\u91cd\u6784\u6210\u89c6\u56fe\u96c6\u3002\n\n\n\u9996\u5148\u8ba9\u6211\u4eec\u5c06\nUserList\n\u548c\nUserDetail\n\u89c6\u56fe\u91cd\u6784\u4e3a\u4e00\u4e2a\nUserViewSet\n\u3002\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u8fd9\u4e24\u4e2a\u89c6\u56fe\uff0c\u5e76\u7528\u4e00\u4e2a\u7c7b\u66ff\u6362\u5b83\u4eec\uff1a\n\n\nfrom rest_framework import viewsets\n\nclass UserViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    \u6b64\u89c6\u56fe\u81ea\u52a8\u63d0\u4f9b`list`\u548c`detail`\u64cd\u4f5c\u3002\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\nReadOnlyModelViewSet\n\u7c7b\u6765\u81ea\u52a8\u63d0\u4f9b\u9ed8\u8ba4\u7684\u201c\u53ea\u8bfb\u201d\u64cd\u4f5c\u3002\u6211\u4eec\u4ecd\u7136\u50cf\u4f7f\u7528\u5e38\u89c4\u89c6\u56fe\u90a3\u6837\u8bbe\u7f6e\nqueryset\n\u548c\nserializer_class\n\u5c5e\u6027\uff0c\u4f46\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5411\u4e24\u4e2a\u4e0d\u540c\u7684\u7c7b\u63d0\u4f9b\u76f8\u540c\u7684\u4fe1\u606f\u3002\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u66ff\u6362\nSnippetList\n\uff0c\nSnippetDetail\n\u548c\nSnippetHighlight\n\u89c6\u56fe\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u4e09\u4e2a\u89c6\u56fe\uff0c\u5e76\u518d\u6b21\u7528\u4e00\u4e2a\u7c7b\u66ff\u6362\u5b83\u4eec\u3002\n\n\nfrom rest_framework.decorators import detail_route\n\nclass SnippetViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u6b64\u89c6\u56fe\u81ea\u52a8\u63d0\u4f9b`list`\uff0c`create`\uff0c`retrieve`\uff0c`update`\u548c`destroy`\u64cd\u4f5c\u3002\n\n    \u53e6\u5916\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u989d\u5916\u7684`highlight`\u64cd\u4f5c\u3002\n    \"\"\"\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    permission_classes = (permissions.IsAuthenticatedOrReadOnly,\n                          IsOwnerOrReadOnly,)\n\n    @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])\n    def highlight(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)\n\n    def perform_create(self, serializer):\n        serializer.save(owner=self.request.user)\n\n\n\n\u8fd9\u6b21\u6211\u4eec\u4f7f\u7528\u4e86\nModelViewSet\n\u7c7b\u6765\u83b7\u53d6\u5b8c\u6574\u7684\u9ed8\u8ba4\u8bfb\u5199\u64cd\u4f5c\u3002\n\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528\n@detail_route\n\u88c5\u9970\u5668\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\nhighlight\n\u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u3002\u8fd9\u4e2a\u88c5\u9970\u5668\u53ef\u7528\u4e8e\u6dfb\u52a0\u4e0d\u7b26\u5408\u6807\u51c6\ncreate\n/\nupdate\n/\ndelete\n\u6837\u5f0f\u7684\u4efb\u4f55\u81ea\u5b9a\u4e49\u8def\u5f84\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\n@detail_route\n\u88c5\u9970\u5668\u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u5c06\u54cd\u5e94\nGET\n\u8bf7\u6c42\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u54cd\u5e94\nPOST\n\u8bf7\u6c42\u7684\u52a8\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\nmethods\n\u53c2\u6570\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684URL\u53d6\u51b3\u4e8e\u65b9\u6cd5\u540d\u79f0\u672c\u8eab\u3002\u5982\u679c\u8981\u66f4\u6539URL\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4e3a\u88c5\u9970\u5668\u8bbe\u7f6eurl_path\u5173\u952e\u5b57\u53c2\u6570\u3002\n\n\n\u660e\u786e\u5730\u5c06ViewSets\u7ed1\u5b9a\u5230URL\n\n\n\u5f53\u6211\u4eec\u5b9a\u4e49URLConf\u65f6\uff0c\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u53ea\u80fd\u7ed1\u5b9a\u5230\u90a3\u4e9b\u52a8\u4f5c\u4e0a\u3002\n\u8981\u4e86\u89e3\u5728\u5e55\u540e\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u9996\u5148\u663e\u5f0f\u5730\u4ece\u6211\u4eec\u7684\u89c6\u56fe\u96c6\u4e2d\u521b\u5efa\u4e00\u7ec4\u89c6\u56fe\u3002\n\n\n\u5728\nurls.py\n\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5c06\nViewSet\n\u7c7b\u7ed1\u5b9a\u5230\u4e00\u7ec4\u5177\u4f53\u89c6\u56fe\u4e2d\u3002\n\n\nfrom snippets.views import SnippetViewSet, UserViewSet, api_root\nfrom rest_framework import renderers\n\nsnippet_list = SnippetViewSet.as_view({\n    'get': 'list',\n    'post': 'create'\n})\nsnippet_detail = SnippetViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nsnippet_highlight = SnippetViewSet.as_view({\n    'get': 'highlight'\n}, renderer_classes=[renderers.StaticHTMLRenderer])\nuser_list = UserViewSet.as_view({\n    'get': 'list'\n})\nuser_detail = UserViewSet.as_view({\n    'get': 'retrieve'\n})\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7\u5c06http\u65b9\u6cd5\u7ed1\u5b9a\u5230\u6bcf\u4e2a\u89c6\u56fe\u6240\u9700\u7684\u64cd\u4f5c\uff0c\u4ece\u6bcf\u4e2a\nViewSet\n\u7c7b\u521b\u5efa\u591a\u4e2a\u89c6\u56fe\u7684\u3002\n\n\n\u73b0\u5728\u6211\u4eec\u5c06\u8d44\u6e90\u7ed1\u5b9a\u5230\u5177\u4f53\u7684\u89c6\u56fe\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u5f80\u5e38\u4e00\u6837\u5728URL conf\u4e2d\u6ce8\u518c\u89c6\u56fe\u3002\n\n\nurlpatterns = format_suffix_patterns([\n    url(r'^$', api_root),\n    url(r'^snippets/$', snippet_list, name='snippet-list'),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', snippet_detail, name='snippet-detail'),\n    url(r'^snippets/(?P<pk>[0-9]+)/highlight/$', snippet_highlight, name='snippet-highlight'),\n    url(r'^users/$', user_list, name='user-list'),\n    url(r'^users/(?P<pk>[0-9]+)/$', user_detail, name='user-detail')\n])\n\n\n\n\u4f7f\u7528\u8def\u7531\u5668\n\n\n\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f\nViewSet\n\u7c7b\u800c\u4e0d\u662f\nView\n\u7c7b\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u81ea\u5df1\u8bbe\u8ba1URL\u3002\u5c06\u8d44\u6e90\u8fde\u63a5\u5230\u89c6\u56fe\u548curl\u7684\u7ea6\u5b9a\u53ef\u4ee5\u4f7f\u7528\nRouter\n\u7c7b\u81ea\u52a8\u5904\u7406\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u4f7f\u7528\u8def\u7531\u5668\u6ce8\u518c\u76f8\u5e94\u7684\u89c6\u56fe\u96c6\uff0c\u7136\u540e\u8ba9\u5b83\u6267\u884c\u5176\u4f59\u64cd\u4f5c\u3002\n\n\n\u8fd9\u662f\u6211\u4eec\u91cd\u5199\u7684\nurls.py\n\u6587\u4ef6\u3002\n\n\nfrom django.conf.urls import url, include\nfrom snippets import views\nfrom rest_framework.routers import DefaultRouter\n\n# \u521b\u5efa\u8def\u7531\u5668\u5e76\u6ce8\u518c\u6211\u4eec\u7684\u89c6\u56fe\u3002\nrouter = DefaultRouter()\nrouter.register(r'snippets', views.SnippetViewSet)\nrouter.register(r'users', views.UserViewSet)\n\n# API URL\u73b0\u5728\u7531\u8def\u7531\u5668\u81ea\u52a8\u786e\u5b9a\u3002\n# \u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u5305\u542b\u53ef\u6d4f\u89c8\u7684API\u7684\u767b\u5f55URL\u3002\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\n\n\n\n\u4f7f\u7528\u8def\u7531\u5668\u6ce8\u518cviewsets\u7c7b\u4f3c\u4e8e\u63d0\u4f9burlpattern\u3002\u6211\u4eec\u5305\u542b\u4e24\u4e2a\u53c2\u6570 - \u89c6\u56fe\u7684URL\u524d\u7f00\u548c\u89c6\u56fe\u672c\u8eab\u3002\n\n\n\u6211\u4eec\u4f7f\u7528\u7684\nDefaultRouter\n\u7c7b\u4e5f\u4f1a\u81ea\u52a8\u4e3a\u6211\u4eec\u521b\u5efaAPI\u6839\u89c6\u56fe\uff0c\u56e0\u6b64\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u6211\u4eec\u7684\nviews\n\u6a21\u5757\u4e2d\u5220\u9664\napi_root\n\u65b9\u6cd5\u3002\n\n\n\u89c6\u56fe\uff08views\uff09vs\u89c6\u56fe\u96c6\uff08viewsets\uff09\u4e4b\u95f4\u7684\u6743\u8861\n\n\n\u4f7f\u7528\u89c6\u56fe\u96c6\u53ef\u4ee5\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u62bd\u8c61\u3002\u5b83\u6709\u52a9\u4e8e\u786e\u4fddURL\u7ea6\u5b9a\u5728\u4f60\u7684API\u4e2d\u4fdd\u6301\u4e00\u81f4\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u7f16\u5199\u6240\u9700\u7684\u4ee3\u7801\u91cf\uff0c\u8ba9\u4f60\u80fd\u591f\u4e13\u6ce8\u4e8eAPI\u63d0\u4f9b\u7684\u4ea4\u4e92\u548c\u8868\u793a\uff0c\u800c\u4e0d\u662fURLconf\u7684\u7ec6\u8282\u3002\n\n\n\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u91c7\u7528\u89c6\u56fe\u96c6\u603b\u662f\u6b63\u786e\u7684\u65b9\u6cd5\u3002\u5728\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u800c\u4e0d\u662f\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u65f6\uff0c\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6743\u8861\u8981\u8003\u8651\u3002\u4f7f\u7528\u89c6\u56fe\u96c6\u4e0d\u50cf\u5355\u72ec\u6784\u5efa\u89c6\u56fe\u90a3\u6837\u660e\u786e\u3002\n\n\n\u5728\n\u672c\u6559\u7a0b\u7684\u7b2c7\u90e8\u5206\n\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u6dfb\u52a0API\u6a21\u5f0f\uff0c\u5e76\u4f7f\u7528\u5ba2\u6237\u7aef\u5e93\u6216\u547d\u4ee4\u884c\u5de5\u5177\u4e0e\u6211\u4eec\u7684API\u8fdb\u884c\u4ea4\u4e92\u3002",
            "title": "6 - Viewsets and routers"
        },
        {
            "location": "/tutorial/6-viewsets-and-routers_zh/#tutorial-6",
            "text": "REST\u6846\u67b6\u5305\u62ec\u4e00\u4e2a\u7528\u4e8e\u5904\u7406 ViewSets \u7684\u62bd\u8c61\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u96c6\u4e2d\u7cbe\u529b\u5bf9API\u7684\u72b6\u6001\u548c\u4ea4\u4e92\u8fdb\u884c\u5efa\u6a21\uff0c\u5e76\u6839\u636e\u5e38\u89c4\u7ea6\u5b9a\u81ea\u52a8\u5904\u7406URL\u6784\u9020\u3002  ViewSet \u7c7b\u4e0e View \u7c7b\u51e0\u4e4e\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4eec\u63d0\u4f9b\u8bf8\u5982 read \u6216 update \u4e4b\u7c7b\u7684\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f get \u6216 put \u7b49\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002  \u6700\u540e\u4e00\u4e2a ViewSet \u7c7b\u53ea\u7ed1\u5b9a\u5230\u4e00\u7ec4\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\uff0c\u5f53\u5b83\u88ab\u5b9e\u4f8b\u5316\u6210\u4e00\u7ec4\u89c6\u56fe\u7684\u65f6\u5019\uff0c\u901a\u5e38\u901a\u8fc7\u4f7f\u7528\u4e00\u4e2a Router \u7c7b\u6765\u5904\u7406\u81ea\u5df1\u5b9a\u4e49URL conf\u7684\u590d\u6742\u6027\u3002",
            "title": "Tutorial 6: \u89c6\u56fe\u96c6\u548c\u8def\u7531\u5668"
        },
        {
            "location": "/tutorial/6-viewsets-and-routers_zh/#viewsets",
            "text": "\u6211\u4eec\u770b\u4e00\u4e0b\u76ee\u524d\u7684\u89c6\u56fe\uff0c\u628a\u5b83\u4eec\u91cd\u6784\u6210\u89c6\u56fe\u96c6\u3002  \u9996\u5148\u8ba9\u6211\u4eec\u5c06 UserList \u548c UserDetail \u89c6\u56fe\u91cd\u6784\u4e3a\u4e00\u4e2a UserViewSet \u3002\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u8fd9\u4e24\u4e2a\u89c6\u56fe\uff0c\u5e76\u7528\u4e00\u4e2a\u7c7b\u66ff\u6362\u5b83\u4eec\uff1a  from rest_framework import viewsets\n\nclass UserViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    \u6b64\u89c6\u56fe\u81ea\u52a8\u63d0\u4f9b`list`\u548c`detail`\u64cd\u4f5c\u3002\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer  \u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 ReadOnlyModelViewSet \u7c7b\u6765\u81ea\u52a8\u63d0\u4f9b\u9ed8\u8ba4\u7684\u201c\u53ea\u8bfb\u201d\u64cd\u4f5c\u3002\u6211\u4eec\u4ecd\u7136\u50cf\u4f7f\u7528\u5e38\u89c4\u89c6\u56fe\u90a3\u6837\u8bbe\u7f6e queryset \u548c serializer_class \u5c5e\u6027\uff0c\u4f46\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5411\u4e24\u4e2a\u4e0d\u540c\u7684\u7c7b\u63d0\u4f9b\u76f8\u540c\u7684\u4fe1\u606f\u3002  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u66ff\u6362 SnippetList \uff0c SnippetDetail \u548c SnippetHighlight \u89c6\u56fe\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u4e09\u4e2a\u89c6\u56fe\uff0c\u5e76\u518d\u6b21\u7528\u4e00\u4e2a\u7c7b\u66ff\u6362\u5b83\u4eec\u3002  from rest_framework.decorators import detail_route\n\nclass SnippetViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u6b64\u89c6\u56fe\u81ea\u52a8\u63d0\u4f9b`list`\uff0c`create`\uff0c`retrieve`\uff0c`update`\u548c`destroy`\u64cd\u4f5c\u3002\n\n    \u53e6\u5916\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u989d\u5916\u7684`highlight`\u64cd\u4f5c\u3002\n    \"\"\"\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    permission_classes = (permissions.IsAuthenticatedOrReadOnly,\n                          IsOwnerOrReadOnly,)\n\n    @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])\n    def highlight(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)\n\n    def perform_create(self, serializer):\n        serializer.save(owner=self.request.user)  \u8fd9\u6b21\u6211\u4eec\u4f7f\u7528\u4e86 ModelViewSet \u7c7b\u6765\u83b7\u53d6\u5b8c\u6574\u7684\u9ed8\u8ba4\u8bfb\u5199\u64cd\u4f5c\u3002  \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528 @detail_route \u88c5\u9970\u5668\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a highlight \u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u3002\u8fd9\u4e2a\u88c5\u9970\u5668\u53ef\u7528\u4e8e\u6dfb\u52a0\u4e0d\u7b26\u5408\u6807\u51c6 create / update / delete \u6837\u5f0f\u7684\u4efb\u4f55\u81ea\u5b9a\u4e49\u8def\u5f84\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 @detail_route \u88c5\u9970\u5668\u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u5c06\u54cd\u5e94 GET \u8bf7\u6c42\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u54cd\u5e94 POST \u8bf7\u6c42\u7684\u52a8\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 methods \u53c2\u6570\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684URL\u53d6\u51b3\u4e8e\u65b9\u6cd5\u540d\u79f0\u672c\u8eab\u3002\u5982\u679c\u8981\u66f4\u6539URL\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4e3a\u88c5\u9970\u5668\u8bbe\u7f6eurl_path\u5173\u952e\u5b57\u53c2\u6570\u3002",
            "title": "\u4f7f\u7528ViewSets\u91cd\u6784"
        },
        {
            "location": "/tutorial/6-viewsets-and-routers_zh/#viewsetsurl",
            "text": "\u5f53\u6211\u4eec\u5b9a\u4e49URLConf\u65f6\uff0c\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u53ea\u80fd\u7ed1\u5b9a\u5230\u90a3\u4e9b\u52a8\u4f5c\u4e0a\u3002\n\u8981\u4e86\u89e3\u5728\u5e55\u540e\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u9996\u5148\u663e\u5f0f\u5730\u4ece\u6211\u4eec\u7684\u89c6\u56fe\u96c6\u4e2d\u521b\u5efa\u4e00\u7ec4\u89c6\u56fe\u3002  \u5728 urls.py \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5c06 ViewSet \u7c7b\u7ed1\u5b9a\u5230\u4e00\u7ec4\u5177\u4f53\u89c6\u56fe\u4e2d\u3002  from snippets.views import SnippetViewSet, UserViewSet, api_root\nfrom rest_framework import renderers\n\nsnippet_list = SnippetViewSet.as_view({\n    'get': 'list',\n    'post': 'create'\n})\nsnippet_detail = SnippetViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nsnippet_highlight = SnippetViewSet.as_view({\n    'get': 'highlight'\n}, renderer_classes=[renderers.StaticHTMLRenderer])\nuser_list = UserViewSet.as_view({\n    'get': 'list'\n})\nuser_detail = UserViewSet.as_view({\n    'get': 'retrieve'\n})  \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7\u5c06http\u65b9\u6cd5\u7ed1\u5b9a\u5230\u6bcf\u4e2a\u89c6\u56fe\u6240\u9700\u7684\u64cd\u4f5c\uff0c\u4ece\u6bcf\u4e2a ViewSet \u7c7b\u521b\u5efa\u591a\u4e2a\u89c6\u56fe\u7684\u3002  \u73b0\u5728\u6211\u4eec\u5c06\u8d44\u6e90\u7ed1\u5b9a\u5230\u5177\u4f53\u7684\u89c6\u56fe\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u5f80\u5e38\u4e00\u6837\u5728URL conf\u4e2d\u6ce8\u518c\u89c6\u56fe\u3002  urlpatterns = format_suffix_patterns([\n    url(r'^$', api_root),\n    url(r'^snippets/$', snippet_list, name='snippet-list'),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', snippet_detail, name='snippet-detail'),\n    url(r'^snippets/(?P<pk>[0-9]+)/highlight/$', snippet_highlight, name='snippet-highlight'),\n    url(r'^users/$', user_list, name='user-list'),\n    url(r'^users/(?P<pk>[0-9]+)/$', user_detail, name='user-detail')\n])",
            "title": "\u660e\u786e\u5730\u5c06ViewSets\u7ed1\u5b9a\u5230URL"
        },
        {
            "location": "/tutorial/6-viewsets-and-routers_zh/#_1",
            "text": "\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f ViewSet \u7c7b\u800c\u4e0d\u662f View \u7c7b\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u81ea\u5df1\u8bbe\u8ba1URL\u3002\u5c06\u8d44\u6e90\u8fde\u63a5\u5230\u89c6\u56fe\u548curl\u7684\u7ea6\u5b9a\u53ef\u4ee5\u4f7f\u7528 Router \u7c7b\u81ea\u52a8\u5904\u7406\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u4f7f\u7528\u8def\u7531\u5668\u6ce8\u518c\u76f8\u5e94\u7684\u89c6\u56fe\u96c6\uff0c\u7136\u540e\u8ba9\u5b83\u6267\u884c\u5176\u4f59\u64cd\u4f5c\u3002  \u8fd9\u662f\u6211\u4eec\u91cd\u5199\u7684 urls.py \u6587\u4ef6\u3002  from django.conf.urls import url, include\nfrom snippets import views\nfrom rest_framework.routers import DefaultRouter\n\n# \u521b\u5efa\u8def\u7531\u5668\u5e76\u6ce8\u518c\u6211\u4eec\u7684\u89c6\u56fe\u3002\nrouter = DefaultRouter()\nrouter.register(r'snippets', views.SnippetViewSet)\nrouter.register(r'users', views.UserViewSet)\n\n# API URL\u73b0\u5728\u7531\u8def\u7531\u5668\u81ea\u52a8\u786e\u5b9a\u3002\n# \u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u5305\u542b\u53ef\u6d4f\u89c8\u7684API\u7684\u767b\u5f55URL\u3002\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]  \u4f7f\u7528\u8def\u7531\u5668\u6ce8\u518cviewsets\u7c7b\u4f3c\u4e8e\u63d0\u4f9burlpattern\u3002\u6211\u4eec\u5305\u542b\u4e24\u4e2a\u53c2\u6570 - \u89c6\u56fe\u7684URL\u524d\u7f00\u548c\u89c6\u56fe\u672c\u8eab\u3002  \u6211\u4eec\u4f7f\u7528\u7684 DefaultRouter \u7c7b\u4e5f\u4f1a\u81ea\u52a8\u4e3a\u6211\u4eec\u521b\u5efaAPI\u6839\u89c6\u56fe\uff0c\u56e0\u6b64\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u6211\u4eec\u7684 views \u6a21\u5757\u4e2d\u5220\u9664 api_root \u65b9\u6cd5\u3002",
            "title": "\u4f7f\u7528\u8def\u7531\u5668"
        },
        {
            "location": "/tutorial/6-viewsets-and-routers_zh/#viewsvsviewsets",
            "text": "\u4f7f\u7528\u89c6\u56fe\u96c6\u53ef\u4ee5\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u62bd\u8c61\u3002\u5b83\u6709\u52a9\u4e8e\u786e\u4fddURL\u7ea6\u5b9a\u5728\u4f60\u7684API\u4e2d\u4fdd\u6301\u4e00\u81f4\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u7f16\u5199\u6240\u9700\u7684\u4ee3\u7801\u91cf\uff0c\u8ba9\u4f60\u80fd\u591f\u4e13\u6ce8\u4e8eAPI\u63d0\u4f9b\u7684\u4ea4\u4e92\u548c\u8868\u793a\uff0c\u800c\u4e0d\u662fURLconf\u7684\u7ec6\u8282\u3002  \u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u91c7\u7528\u89c6\u56fe\u96c6\u603b\u662f\u6b63\u786e\u7684\u65b9\u6cd5\u3002\u5728\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u800c\u4e0d\u662f\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u65f6\uff0c\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6743\u8861\u8981\u8003\u8651\u3002\u4f7f\u7528\u89c6\u56fe\u96c6\u4e0d\u50cf\u5355\u72ec\u6784\u5efa\u89c6\u56fe\u90a3\u6837\u660e\u786e\u3002  \u5728 \u672c\u6559\u7a0b\u7684\u7b2c7\u90e8\u5206 \u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u6dfb\u52a0API\u6a21\u5f0f\uff0c\u5e76\u4f7f\u7528\u5ba2\u6237\u7aef\u5e93\u6216\u547d\u4ee4\u884c\u5de5\u5177\u4e0e\u6211\u4eec\u7684API\u8fdb\u884c\u4ea4\u4e92\u3002",
            "title": "\u89c6\u56fe\uff08views\uff09vs\u89c6\u56fe\u96c6\uff08viewsets\uff09\u4e4b\u95f4\u7684\u6743\u8861"
        },
        {
            "location": "/tutorial/7-schemas-and-client-libraries_zh/",
            "text": "Tutorial 7: \u6982\u8981\u548c\u5ba2\u6237\u7aef\u5e93\n\n\n\u6982\u8981\u662f\u4e00\u79cd\u673a\u5668\u53ef\u8bfb\u6587\u6863\uff0c\u7528\u4e8e\u63cf\u8ff0\u53ef\u7528\u7684API\u8def\u5f84\uff0c\u5176URLS\u4ee5\u53ca\u5b83\u4eec\u652f\u6301\u7684\u64cd\u4f5c\u3002\n\n\n\u6982\u8981\u53ef\u4ee5\u662f\u81ea\u52a8\u751f\u6210\u6587\u6863\u7684\u6709\u7528\u5de5\u5177\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u9a71\u52a8\u53ef\u4ee5\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u7684\u52a8\u6001\u5ba2\u6237\u7aef\u5e93\u3002\n\n\nCore API\n\n\n\u4e3a\u4e86\u63d0\u4f9b\u6982\u8981\u652f\u6301REST\u6846\u67b6\u4f7f\u7528\nCore API\n\u3002\n\n\nCore API\u662f\u7528\u4e8e\u63cf\u8ff0API\u7684\u6587\u6863\u89c4\u8303\u3002\u5b83\u7528\u4e8e\u63d0\u4f9b\u53ef\u7528\u8def\u5f84\u7684\u5185\u90e8\u8868\u793a\u5f62\u5f0f\u548cAPI\u516c\u5f00\u7684\u53ef\u80fd\u7684\u4ea4\u4e92\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u6216\u5ba2\u6237\u7aef\u3002\n\n\n\u5f53\u4f7f\u7528\u670d\u52a1\u5668\u7aef\u65f6\uff0ccoreAPI\u5141\u8bb8API\u652f\u6301\u5448\u73b0\u8303\u56f4\u5e7f\u6cdb\u7684\u6982\u8981\u6216\u8d85\u5a92\u4f53\u683c\u5f0f\u3002\n\n\n\u5f53\u4f7f\u7528\u5ba2\u6237\u7aef\u65f6\uff0c\u6838\u5fc3API\u5141\u8bb8\u52a8\u6001\u9a71\u52a8\u7684\u5ba2\u6237\u7aef\u5e93\uff0c\u5b83\u53ef\u4ee5\u4e0e\u4efb\u4f55\u516c\u5f00\u53d7\u652f\u6301\u7684\u6982\u8981\u6216\u8d85\u5a92\u4f53\u683c\u5f0f\u7684API\u4ea4\u4e92\u3002\n\n\n\u6dfb\u52a0\u6982\u8981\n\n\nREST\u6846\u67b6\u652f\u6301\u660e\u786e\u5b9a\u4e49\u7684\u6982\u8981\u89c6\u56fe\u6216\u81ea\u52a8\u751f\u6210\u7684\u6982\u8981\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u89c6\u56fe\u96c6\u548c\u8def\u7531\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528\u81ea\u52a8\u6982\u8981\u751f\u6210\u3002\n\n\n\u4f60\u9700\u8981\u5b89\u88c5\ncoreapi\n python\u5305\u624d\u80fd\u5305\u542bAPI\u6982\u8981\u3002\n\n\n$ pip install coreapi\n\n\n\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728URL\u914d\u7f6e\u4e2d\u5305\u542b\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u6982\u8981\u89c6\u56fe\u6765\u4e3aAPI\u6dfb\u52a0\u6982\u8981\u3002\n\n\nfrom rest_framework.schemas import get_schema_view\n\nschema_view = get_schema_view(title='Pastebin API')\n\nurlpatterns = [\n    url('^schema/$', schema_view),\n    ...\n]\n\n\n\n\u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95eeAPI\u6839\u8def\u5f84\uff0c\u90a3\u4e48\u4f60\u73b0\u5728\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\ncorejson\n\u8868\u793a\u5f62\u5f0f\u662f\u4e00\u4e2a\u53ef\u7528\u9009\u9879\u3002\n\n\n\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\nAccept\n\u6807\u5934\u4e2d\u6307\u5b9a\u6240\u9700\u7684\u5185\u5bb9\u7c7b\u578b\u4ece\u547d\u4ee4\u884c\u8bf7\u6c42\u6982\u8981\u3002\n\n\n$ http http://127.0.0.1:8000/schema/ Accept:application/coreapi+json\nHTTP/1.0 200 OK\nAllow: GET, HEAD, OPTIONS\nContent-Type: application/coreapi+json\n\n{\n    \"_meta\": {\n        \"title\": \"Pastebin API\"\n    },\n    \"_type\": \"document\",\n    ...\n\n\n\n\u9ed8\u8ba4\u8f93\u51fa\u6837\u5f0f\u662f\u4f7f\u7528\nCore JSON\n\u7f16\u7801\u3002\n\n\n\u8fd8\u652f\u6301\u5176\u4ed6\u6982\u8981\u683c\u5f0f\uff0c\u5982\nOpen API\n\uff08\u4ee5\u524d\u53ebSwagger\uff09\u3002\n\n\n\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\n\n\n\u73b0\u5728\u6211\u4eec\u7684API\u66b4\u9732\u4e86\u4e00\u4e2a\u6982\u8981\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u52a8\u6001\u7684\u5ba2\u6237\u7aef\u5e93\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u3002\u4e3a\u4e86\u6f14\u793a\u8fd9\u4e2a\uff0c\u6211\u4eec\u6765\u4f7f\u7528Core API\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u3002\n\n\n\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u4f5c\u4e3a\u4e00\u4e2a\ncoreapi-cli\n\u5305\u63d0\u4f9b\uff1a\n\n\n$ pip install coreapi-cli\n\n\n\n\u73b0\u5728\u68c0\u67e5\u5b83\u5728\u547d\u4ee4\u884c\u4e0a\u662f\u5426\u53ef\u7528...\n\n\n$ coreapi\nUsage: coreapi [OPTIONS] COMMAND [ARGS]...\n\n  Command line client for interacting with CoreAPI services.\n\n  Visit http://www.coreapi.org for more information.\n\nOptions:\n  --version  Display the package version number.\n  --help     Show this message and exit.\n\nCommands:\n...\n\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u52a0\u8f7dAPI\u6982\u8981\u3002\n\n\n$ coreapi get http://127.0.0.1:8000/schema/\n<Pastebin API \"http://127.0.0.1:8000/schema/\">\n    snippets: {\n        highlight(id)\n        list()\n        read(id)\n    }\n    users: {\n        list()\n        read(id)\n    }\n\n\n\n\u6211\u4eec\u8fd8\u6ca1\u6709\u8ba4\u8bc1\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ea\u80fd\u770b\u5230\u53ea\u8bfb\u8def\u5f84\uff0c\u8fd9\u4e0e\u6211\u4eec\u8bbe\u7f6e\u7684API\u6743\u9650\u662f\u4e00\u81f4\u7684\u3002\n\n\n\u6211\u4eec\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\uff0c\u5c1d\u8bd5\u5217\u51fa\u73b0\u6709\u7684\u4ee3\u7801\u7247\u6bb5\uff1a\n\n\n$ coreapi action snippets list\n[\n    {\n        \"url\": \"http://127.0.0.1:8000/snippets/1/\",\n        \"id\": 1,\n        \"highlight\": \"http://127.0.0.1:8000/snippets/1/highlight/\",\n        \"owner\": \"lucy\",\n        \"title\": \"Example\",\n        \"code\": \"print('hello, world!')\",\n        \"linenos\": true,\n        \"language\": \"python\",\n        \"style\": \"friendly\"\n    },\n    ...\n\n\n\n\u4e00\u4e9bAPI\u8def\u5f84\u9700\u8981\u547d\u540d\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u7279\u5b9a\u4ee3\u7801\u7247\u6bb5\u7684\u9ad8\u4eaeHTML\u8868\u793a\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e2aid\u3002\n\n\n$ coreapi action snippets highlight --param id=1\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n\n<html>\n<head>\n  <title>Example</title>\n  ...\n\n\n\n\u9a8c\u8bc1\u6211\u4eec\u7684\u5ba2\u6237\u7aef\n\n\n\u5982\u679c\u6211\u4eec\u60f3\u8981\u521b\u5efa\uff0c\u7f16\u8f91\u548c\u5220\u9664\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6709\u6548\u6027\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u4f7f\u7528\u57fa\u672c\u7684auth\u3002\n\n\n\u8bf7\u786e\u4fdd\u4f7f\u7528\u5b9e\u9645\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u66ff\u6362\u4e0b\u9762\u7684\n<username>\n\u548c\n<password>\n\u3002\n\n\n$ coreapi credentials add 127.0.0.1 <username>:<password> --auth basic\nAdded credentials\n127.0.0.1 \"Basic <...>\"\n\n\n\n\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u518d\u6b21\u63d0\u53d6\u6982\u8981\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u770b\u5230\u4e00\u7ec4\u53ef\u7528\u7684\u4ea4\u4e92\u3002\n\n\n$ coreapi reload\nPastebin API \"http://127.0.0.1:8000/schema/\">\n    snippets: {\n        create(code, [title], [linenos], [language], [style])\n        delete(id)\n        highlight(id)\n        list()\n        partial_update(id, [title], [code], [linenos], [language], [style])\n        read(id)\n        update(id, code, [title], [linenos], [language], [style])\n    }\n    users: {\n        list()\n        read(id)\n    }\n\n\n\n\u6211\u4eec\u73b0\u5728\u80fd\u591f\u4e0e\u8fd9\u4e9b\u8def\u5f84\u884c\u4ea4\u4e92\u3002\u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ee3\u7801\u7247\u6bb5:\n\n\n$ coreapi action snippets create --param title=\"Example\" --param code=\"print('hello, world')\"\n{\n    \"url\": \"http://127.0.0.1:8000/snippets/7/\",\n    \"id\": 7,\n    \"highlight\": \"http://127.0.0.1:8000/snippets/7/highlight/\",\n    \"owner\": \"lucy\",\n    \"title\": \"Example\",\n    \"code\": \"print('hello, world')\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n}\n\n\n\n\u7136\u540e\u5220\u9664\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff1a\n\n\n$ coreapi action snippets delete --param id=7\n\n\n\n\u9664\u4e86\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\uff0c\u5f00\u53d1\u4eba\u5458\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5ba2\u6237\u7aef\u5e93\u4e0e\u4f60\u7684API\u8fdb\u884c\u4ea4\u4e92\u3002Python\u5ba2\u6237\u7aef\u5e93\u662f\u7b2c\u4e00\u4e2a\u53ef\u7528\u7684\u5e93\uff0c\u5e76\u4e14\u8ba1\u5212\u5373\u5c06\u53d1\u5e03\u4e00\u4e2aJavascript\u5ba2\u6237\u7aef\u5e93\u3002\n\n\n\u6709\u5173\u5b9a\u5236\u6a21\u5f0f\u751f\u6210\u548c\u4f7f\u7528Core API\u5ba2\u6237\u7aef\u5e93\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u60a8\u9700\u8981\u53c2\u8003\u5b8c\u6574\u7684\u6587\u6863\u3002\n\n\n\u56de\u987e\u6211\u4eec\u6240\u505a\u7684\n\n\n\u4f7f\u7528\u975e\u5e38\u5c11\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u4ee3\u7801\u6536\u96c6\u7cfb\u7edf\u7684webAPI\uff0c\u5b83\u662f\u5b8c\u5168\u7684\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684\uff0c\u5305\u62ec\u4e00\u4e2a\u6982\u8981\u9a71\u52a8\u7684\u5ba2\u6237\u7aef\u5e93\u548c\u5e26\u6709\u8eab\u4efd\u9a8c\u8bc1\u3001\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6743\u9650\u63a7\u5236\u548c\u591a\u4e2a\u6e32\u67d3\u5668\u683c\u5f0f\u652f\u6301\u3002\n\n\n\u6211\u4eec\u5df2\u7ecf\u8d70\u8fc7\u4e86\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u6bcf\u4e2a\u6b65\u9aa4\uff0c\u5e76\u4e14\u770b\u5230\u5982\u679c\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u4efb\u4f55\u4e1c\u897f\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6309\u90e8\u5c31\u73ed\u7684\u7b80\u5355\u5730\u4f7f\u7528\u5e38\u89c4\u7684Django\u89c6\u56fe\u5b9e\u73b0\u3002\n\n\n\u4f60\u53ef\u4ee5\u67e5\u770bGitHub\u4e0a\u7684\n\u6700\u7ec8\u6559\u7a0b\u4ee3\u7801\n\uff0c\u6216\u8005\u5c1d\u8bd5\u4e0b\n\u6c99\u7bb1\u4e2d\n\u7684\u5b9e\u4f8b\u3002\n\n\n\u8d8a\u6765\u8d8a\u6210\u529f\n\n\n\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u6211\u4eec\u7684\u6559\u7a0b\u3002\u5982\u679c\u4f60\u60f3\u8981\u66f4\u591a\u5730\u53c2\u4e0e\u5230REST\u6846\u67b6\u9879\u76ee\u4e2d\uff0c\u4ee5\u4e0b\u662f\u4f60\u53ef\u4ee5\u5f00\u59cb\u7684\u51e0\u4e2a\u5730\u65b9\uff1a\n\n\n\n\n\u901a\u8fc7\u5ba1\u67e5\u548c\u63d0\u4ea4\u95ee\u9898\uff0c\u5e76pull requests\uff0c\u4e3a\nGitHub\n\u505a\u51fa\u8d21\u732e\u3002\n\n\n\u52a0\u5165\nREST framework \u8ba8\u8bba\u7ec4\n\uff0c\u5e76\u5e2e\u52a9\u6784\u5efa\u793e\u533a\u3002\n\n\n\u5728Twitter\u6210\u4e3a\n\u4f5c\u8005\n\u7684\u7c89\u4e1d\uff0c\u5e76\u6253\u4e2a\u62db\u547c\u3002\n\n\n\n\n\u73b0\u5728\u5c31\u53bb\u6784\u5efa\u975e\u5e38\u68d2\u7684\u4e1c\u897f\u5427\u3002",
            "title": "7 - Schemas and client libraries"
        },
        {
            "location": "/tutorial/7-schemas-and-client-libraries_zh/#tutorial-7",
            "text": "\u6982\u8981\u662f\u4e00\u79cd\u673a\u5668\u53ef\u8bfb\u6587\u6863\uff0c\u7528\u4e8e\u63cf\u8ff0\u53ef\u7528\u7684API\u8def\u5f84\uff0c\u5176URLS\u4ee5\u53ca\u5b83\u4eec\u652f\u6301\u7684\u64cd\u4f5c\u3002  \u6982\u8981\u53ef\u4ee5\u662f\u81ea\u52a8\u751f\u6210\u6587\u6863\u7684\u6709\u7528\u5de5\u5177\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u9a71\u52a8\u53ef\u4ee5\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u7684\u52a8\u6001\u5ba2\u6237\u7aef\u5e93\u3002",
            "title": "Tutorial 7: \u6982\u8981\u548c\u5ba2\u6237\u7aef\u5e93"
        },
        {
            "location": "/tutorial/7-schemas-and-client-libraries_zh/#core-api",
            "text": "\u4e3a\u4e86\u63d0\u4f9b\u6982\u8981\u652f\u6301REST\u6846\u67b6\u4f7f\u7528 Core API \u3002  Core API\u662f\u7528\u4e8e\u63cf\u8ff0API\u7684\u6587\u6863\u89c4\u8303\u3002\u5b83\u7528\u4e8e\u63d0\u4f9b\u53ef\u7528\u8def\u5f84\u7684\u5185\u90e8\u8868\u793a\u5f62\u5f0f\u548cAPI\u516c\u5f00\u7684\u53ef\u80fd\u7684\u4ea4\u4e92\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u6216\u5ba2\u6237\u7aef\u3002  \u5f53\u4f7f\u7528\u670d\u52a1\u5668\u7aef\u65f6\uff0ccoreAPI\u5141\u8bb8API\u652f\u6301\u5448\u73b0\u8303\u56f4\u5e7f\u6cdb\u7684\u6982\u8981\u6216\u8d85\u5a92\u4f53\u683c\u5f0f\u3002  \u5f53\u4f7f\u7528\u5ba2\u6237\u7aef\u65f6\uff0c\u6838\u5fc3API\u5141\u8bb8\u52a8\u6001\u9a71\u52a8\u7684\u5ba2\u6237\u7aef\u5e93\uff0c\u5b83\u53ef\u4ee5\u4e0e\u4efb\u4f55\u516c\u5f00\u53d7\u652f\u6301\u7684\u6982\u8981\u6216\u8d85\u5a92\u4f53\u683c\u5f0f\u7684API\u4ea4\u4e92\u3002",
            "title": "Core API"
        },
        {
            "location": "/tutorial/7-schemas-and-client-libraries_zh/#_1",
            "text": "REST\u6846\u67b6\u652f\u6301\u660e\u786e\u5b9a\u4e49\u7684\u6982\u8981\u89c6\u56fe\u6216\u81ea\u52a8\u751f\u6210\u7684\u6982\u8981\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u89c6\u56fe\u96c6\u548c\u8def\u7531\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528\u81ea\u52a8\u6982\u8981\u751f\u6210\u3002  \u4f60\u9700\u8981\u5b89\u88c5 coreapi  python\u5305\u624d\u80fd\u5305\u542bAPI\u6982\u8981\u3002  $ pip install coreapi  \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728URL\u914d\u7f6e\u4e2d\u5305\u542b\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u6982\u8981\u89c6\u56fe\u6765\u4e3aAPI\u6dfb\u52a0\u6982\u8981\u3002  from rest_framework.schemas import get_schema_view\n\nschema_view = get_schema_view(title='Pastebin API')\n\nurlpatterns = [\n    url('^schema/$', schema_view),\n    ...\n]  \u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95eeAPI\u6839\u8def\u5f84\uff0c\u90a3\u4e48\u4f60\u73b0\u5728\u5e94\u8be5\u53ef\u4ee5\u770b\u5230 corejson \u8868\u793a\u5f62\u5f0f\u662f\u4e00\u4e2a\u53ef\u7528\u9009\u9879\u3002   \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728 Accept \u6807\u5934\u4e2d\u6307\u5b9a\u6240\u9700\u7684\u5185\u5bb9\u7c7b\u578b\u4ece\u547d\u4ee4\u884c\u8bf7\u6c42\u6982\u8981\u3002  $ http http://127.0.0.1:8000/schema/ Accept:application/coreapi+json\nHTTP/1.0 200 OK\nAllow: GET, HEAD, OPTIONS\nContent-Type: application/coreapi+json\n\n{\n    \"_meta\": {\n        \"title\": \"Pastebin API\"\n    },\n    \"_type\": \"document\",\n    ...  \u9ed8\u8ba4\u8f93\u51fa\u6837\u5f0f\u662f\u4f7f\u7528 Core JSON \u7f16\u7801\u3002  \u8fd8\u652f\u6301\u5176\u4ed6\u6982\u8981\u683c\u5f0f\uff0c\u5982 Open API \uff08\u4ee5\u524d\u53ebSwagger\uff09\u3002",
            "title": "\u6dfb\u52a0\u6982\u8981"
        },
        {
            "location": "/tutorial/7-schemas-and-client-libraries_zh/#_2",
            "text": "\u73b0\u5728\u6211\u4eec\u7684API\u66b4\u9732\u4e86\u4e00\u4e2a\u6982\u8981\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u52a8\u6001\u7684\u5ba2\u6237\u7aef\u5e93\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u3002\u4e3a\u4e86\u6f14\u793a\u8fd9\u4e2a\uff0c\u6211\u4eec\u6765\u4f7f\u7528Core API\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u3002  \u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u4f5c\u4e3a\u4e00\u4e2a coreapi-cli \u5305\u63d0\u4f9b\uff1a  $ pip install coreapi-cli  \u73b0\u5728\u68c0\u67e5\u5b83\u5728\u547d\u4ee4\u884c\u4e0a\u662f\u5426\u53ef\u7528...  $ coreapi\nUsage: coreapi [OPTIONS] COMMAND [ARGS]...\n\n  Command line client for interacting with CoreAPI services.\n\n  Visit http://www.coreapi.org for more information.\n\nOptions:\n  --version  Display the package version number.\n  --help     Show this message and exit.\n\nCommands:\n...  \u9996\u5148\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u52a0\u8f7dAPI\u6982\u8981\u3002  $ coreapi get http://127.0.0.1:8000/schema/\n<Pastebin API \"http://127.0.0.1:8000/schema/\">\n    snippets: {\n        highlight(id)\n        list()\n        read(id)\n    }\n    users: {\n        list()\n        read(id)\n    }  \u6211\u4eec\u8fd8\u6ca1\u6709\u8ba4\u8bc1\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ea\u80fd\u770b\u5230\u53ea\u8bfb\u8def\u5f84\uff0c\u8fd9\u4e0e\u6211\u4eec\u8bbe\u7f6e\u7684API\u6743\u9650\u662f\u4e00\u81f4\u7684\u3002  \u6211\u4eec\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\uff0c\u5c1d\u8bd5\u5217\u51fa\u73b0\u6709\u7684\u4ee3\u7801\u7247\u6bb5\uff1a  $ coreapi action snippets list\n[\n    {\n        \"url\": \"http://127.0.0.1:8000/snippets/1/\",\n        \"id\": 1,\n        \"highlight\": \"http://127.0.0.1:8000/snippets/1/highlight/\",\n        \"owner\": \"lucy\",\n        \"title\": \"Example\",\n        \"code\": \"print('hello, world!')\",\n        \"linenos\": true,\n        \"language\": \"python\",\n        \"style\": \"friendly\"\n    },\n    ...  \u4e00\u4e9bAPI\u8def\u5f84\u9700\u8981\u547d\u540d\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u7279\u5b9a\u4ee3\u7801\u7247\u6bb5\u7684\u9ad8\u4eaeHTML\u8868\u793a\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e2aid\u3002  $ coreapi action snippets highlight --param id=1\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n\n<html>\n<head>\n  <title>Example</title>\n  ...",
            "title": "\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef"
        },
        {
            "location": "/tutorial/7-schemas-and-client-libraries_zh/#_3",
            "text": "\u5982\u679c\u6211\u4eec\u60f3\u8981\u521b\u5efa\uff0c\u7f16\u8f91\u548c\u5220\u9664\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6709\u6548\u6027\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u4f7f\u7528\u57fa\u672c\u7684auth\u3002  \u8bf7\u786e\u4fdd\u4f7f\u7528\u5b9e\u9645\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u66ff\u6362\u4e0b\u9762\u7684 <username> \u548c <password> \u3002  $ coreapi credentials add 127.0.0.1 <username>:<password> --auth basic\nAdded credentials\n127.0.0.1 \"Basic <...>\"  \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u518d\u6b21\u63d0\u53d6\u6982\u8981\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u770b\u5230\u4e00\u7ec4\u53ef\u7528\u7684\u4ea4\u4e92\u3002  $ coreapi reload\nPastebin API \"http://127.0.0.1:8000/schema/\">\n    snippets: {\n        create(code, [title], [linenos], [language], [style])\n        delete(id)\n        highlight(id)\n        list()\n        partial_update(id, [title], [code], [linenos], [language], [style])\n        read(id)\n        update(id, code, [title], [linenos], [language], [style])\n    }\n    users: {\n        list()\n        read(id)\n    }  \u6211\u4eec\u73b0\u5728\u80fd\u591f\u4e0e\u8fd9\u4e9b\u8def\u5f84\u884c\u4ea4\u4e92\u3002\u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ee3\u7801\u7247\u6bb5:  $ coreapi action snippets create --param title=\"Example\" --param code=\"print('hello, world')\"\n{\n    \"url\": \"http://127.0.0.1:8000/snippets/7/\",\n    \"id\": 7,\n    \"highlight\": \"http://127.0.0.1:8000/snippets/7/highlight/\",\n    \"owner\": \"lucy\",\n    \"title\": \"Example\",\n    \"code\": \"print('hello, world')\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n}  \u7136\u540e\u5220\u9664\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff1a  $ coreapi action snippets delete --param id=7  \u9664\u4e86\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\uff0c\u5f00\u53d1\u4eba\u5458\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5ba2\u6237\u7aef\u5e93\u4e0e\u4f60\u7684API\u8fdb\u884c\u4ea4\u4e92\u3002Python\u5ba2\u6237\u7aef\u5e93\u662f\u7b2c\u4e00\u4e2a\u53ef\u7528\u7684\u5e93\uff0c\u5e76\u4e14\u8ba1\u5212\u5373\u5c06\u53d1\u5e03\u4e00\u4e2aJavascript\u5ba2\u6237\u7aef\u5e93\u3002  \u6709\u5173\u5b9a\u5236\u6a21\u5f0f\u751f\u6210\u548c\u4f7f\u7528Core API\u5ba2\u6237\u7aef\u5e93\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u60a8\u9700\u8981\u53c2\u8003\u5b8c\u6574\u7684\u6587\u6863\u3002",
            "title": "\u9a8c\u8bc1\u6211\u4eec\u7684\u5ba2\u6237\u7aef"
        },
        {
            "location": "/tutorial/7-schemas-and-client-libraries_zh/#_4",
            "text": "\u4f7f\u7528\u975e\u5e38\u5c11\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u4ee3\u7801\u6536\u96c6\u7cfb\u7edf\u7684webAPI\uff0c\u5b83\u662f\u5b8c\u5168\u7684\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684\uff0c\u5305\u62ec\u4e00\u4e2a\u6982\u8981\u9a71\u52a8\u7684\u5ba2\u6237\u7aef\u5e93\u548c\u5e26\u6709\u8eab\u4efd\u9a8c\u8bc1\u3001\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6743\u9650\u63a7\u5236\u548c\u591a\u4e2a\u6e32\u67d3\u5668\u683c\u5f0f\u652f\u6301\u3002  \u6211\u4eec\u5df2\u7ecf\u8d70\u8fc7\u4e86\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u6bcf\u4e2a\u6b65\u9aa4\uff0c\u5e76\u4e14\u770b\u5230\u5982\u679c\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u4efb\u4f55\u4e1c\u897f\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6309\u90e8\u5c31\u73ed\u7684\u7b80\u5355\u5730\u4f7f\u7528\u5e38\u89c4\u7684Django\u89c6\u56fe\u5b9e\u73b0\u3002  \u4f60\u53ef\u4ee5\u67e5\u770bGitHub\u4e0a\u7684 \u6700\u7ec8\u6559\u7a0b\u4ee3\u7801 \uff0c\u6216\u8005\u5c1d\u8bd5\u4e0b \u6c99\u7bb1\u4e2d \u7684\u5b9e\u4f8b\u3002",
            "title": "\u56de\u987e\u6211\u4eec\u6240\u505a\u7684"
        },
        {
            "location": "/tutorial/7-schemas-and-client-libraries_zh/#_5",
            "text": "\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u6211\u4eec\u7684\u6559\u7a0b\u3002\u5982\u679c\u4f60\u60f3\u8981\u66f4\u591a\u5730\u53c2\u4e0e\u5230REST\u6846\u67b6\u9879\u76ee\u4e2d\uff0c\u4ee5\u4e0b\u662f\u4f60\u53ef\u4ee5\u5f00\u59cb\u7684\u51e0\u4e2a\u5730\u65b9\uff1a   \u901a\u8fc7\u5ba1\u67e5\u548c\u63d0\u4ea4\u95ee\u9898\uff0c\u5e76pull requests\uff0c\u4e3a GitHub \u505a\u51fa\u8d21\u732e\u3002  \u52a0\u5165 REST framework \u8ba8\u8bba\u7ec4 \uff0c\u5e76\u5e2e\u52a9\u6784\u5efa\u793e\u533a\u3002  \u5728Twitter\u6210\u4e3a \u4f5c\u8005 \u7684\u7c89\u4e1d\uff0c\u5e76\u6253\u4e2a\u62db\u547c\u3002   \u73b0\u5728\u5c31\u53bb\u6784\u5efa\u975e\u5e38\u68d2\u7684\u4e1c\u897f\u5427\u3002",
            "title": "\u8d8a\u6765\u8d8a\u6210\u529f"
        },
        {
            "location": "/api-guide/requests_zh/",
            "text": "Requests\uff08\u8bf7\u6c42\uff09\n\n\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u505a\u57fa\u4e8eREST\u7684Web\u670d\u52a1...\u4f60\u6700\u597d\u5ffd\u7565request.POST\u3002\n\n\n\u2014 Malcom Tredinnick, \nDjango developers group\n\n\n\n\nREST framework\u7684\nRequest\n\u7c7b\u6269\u5c55\u4e86\u6807\u51c6\u7684\nHttpRequest\n\uff0c\u6dfb\u52a0\u5bf9REST framework\u7684\u7075\u6d3b\u8bf7\u6c42\u89e3\u6790\u548c\u8bf7\u6c42\u8eab\u4efd\u9a8c\u8bc1\u7684\u652f\u6301\u3002\n\n\n\n\nRequest parsing\uff08\u8bf7\u6c42\u89e3\u6790\uff09\n\n\nREST framework\u7684\u8bf7\u6c42\u5bf9\u8c61\u63d0\u4f9b\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\uff0c\u5141\u8bb8\u4f60\u4ee5\u4e0e\u901a\u5e38\u5904\u7406\u8868\u5355\u6570\u636e\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528JSON\u6570\u636e\u6216\u5176\u4ed6\u5a92\u4f53\u7c7b\u578b\u5904\u7406\u8bf7\u6c42\u3002\n\n\n.data\n\n\nrequest.data\n \u8fd4\u56de\u8bf7\u6c42\u6b63\u6587\u7684\u89e3\u6790\u5185\u5bb9\u3002\u8fd9\u4e0e\u6807\u51c6\u7684 \nrequest.POST\n \u548c \nrequest.FILES\n \u5c5e\u6027\u7c7b\u4f3c\uff0c\u9664\u4e86\u4e0b\u9762\u7684\uff1a\n\n\n\n\n\u5b83\u5305\u62ec\u6240\u6709\u89e3\u6790\u7684\u5185\u5bb9, \u5305\u62ec \n\u6587\u4ef6\u6216\u975e\u6587\u4ef6\n \u8f93\u5165\u3002\n\n\n\u5b83\u652f\u6301\u89e3\u6790\u9664\nPOST\n\u4e4b\u5916\u7684HTTP\u65b9\u6cd5\u7684\u5185\u5bb9\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u8bbf\u95ee\nPUT\n\u548c\nPATCH\n\u8bf7\u6c42\u7684\u5185\u5bb9\u3002\n\n\n\u5b83\u652f\u6301REST framework\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\uff0c\u800c\u4e0d\u4ec5\u4ec5\u652f\u6301\u8868\u5355\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4e0e\u5904\u7406\u4f20\u5165\u8868\u5355\u6570\u636e\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4f20\u5165\u7684JSON\u6570\u636e\u3002\n\n\n\n\n\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u9605\nparsers documentation\n.\n\n\n.query_params\n\n\nrequest.query_params\n\u662f\nrequest.GET\n\u7684\u4e00\u4e2a\u66f4\u51c6\u786e\u7684\u540c\u4e49\u8bcd\u3002\n\n\n\u4e3a\u4e86\u8ba9\u4f60\u7684\u4ee3\u7801\u6e05\u6670\u660e\u4e86, \u6211\u4eec\u5efa\u8bae\u4f7f\u7528 \nrequest.query_params\n \u800c\u4e0d\u662fDjango\u6807\u51c6\u7684\nrequest.GET\n\u3002\u8fd9\u6837\u505a\u6709\u52a9\u4e8e\u4fdd\u6301\u4ee3\u7801\u5e93\u66f4\u52a0\u6b63\u786e\u548c\u660e\u4e86\u2014\u2014\u4efb\u4f55HTTP\u65b9\u6cd5\u7c7b\u578b\u53ef\u80fd\u5305\u62ec\u67e5\u8be2\u53c2\u6570\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\nGET\n\u8bf7\u6c42\u3002\n\n\n.parsers\n\n\nAPIView\n\u7c7b\u6216\n@api_view\n\u88c5\u9970\u5668\u5c06\u6839\u636eview\u4e2d\u8bbe\u7f6e\u7684\nparser_classes\n\u96c6\u5408\u6216\u57fa\u4e8e\nDEFAULT_PARSER_CLASSES\n\u8bbe\u7f6e\uff0c\u786e\u4fdd\u6b64\u5c5e\u6027\u81ea\u52a8\u8bbe\u7f6e\u4e3a\nParser\n\u5b9e\u4f8b\u5217\u8868\u3002\n\n\n\u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u8bbf\u95ee\u8fd9\u4e2a\u5c5e\u6027\u3002\n\n\n\n\nNote:\n \u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u683c\u5f0f\u9519\u8bef\u7684\u5185\u5bb9\uff0c\u5219\u8bbf\u95ee\nrequest.data\n\u53ef\u80fd\u4f1a\u5f15\u53d1\nParseError\n\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0bREST framework\u7684 \nAPIView\n\u7c7b\u6216\n@api_view\n\u88c5\u9970\u5668\u5c06\u6355\u83b7\u9519\u8bef\u5e76\u8fd4\u56de\n400 Bad Request\n\u54cd\u5e94\u3002\n\n\n\u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u5177\u6709\u65e0\u6cd5\u89e3\u6790\u7684\u5443\u9006\u8363\u7c7b\u578b\u7684\u8bf7\u6c42\uff0c\u5219\u4f1a\u5f15\u53d1 \nUnsupportedMediaType\n \u5f02\u5e38, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u6355\u83b7\u8be5\u5f02\u5e38\u5e76\u8fd4\u56de \n415 Unsupported Media Type\n \u54cd\u5e94\u3002\n\n\n\n\nContent negotiation\uff08\u5185\u5bb9\u534f\u5546\uff09\n\n\n\u8bf7\u6c42\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5c5e\u6027\u5141\u8bb8\u4f60\u786e\u5b9a\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u7684\u7ed3\u679c\u3002\u8fd9\u5141\u8bb8\u4f60\u5b9e\u73b0\u5177\u4f53\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u4e3a\u4e0d\u540c\u7684\u5a92\u4f53\u7c7b\u578b\u9009\u62e9\u4e0d\u7528\u7684\u5e8f\u5217\u5316\u65b9\u6848\u3002\n\n\n.accepted_renderer\n\n\n\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u9009\u62e9\u7684render\u5b9e\u4f8b\u3002\n\n\n.accepted_media_type\n\n\n\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\n\nAuthentication\uff08\u8ba4\u8bc1\uff09\n\n\nREST framework \u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\uff0c\u6bcf\u6b21\u8bf7\u6c42\u7684\u9a8c\u8bc1\uff0c\u8ba9\u4f60\u80fd\u591f\uff1a\n\n \u5bf9API\u7684\u4e0d\u540c\u90e8\u5206\u4f7f\u7528\u4e0d\u540c\u7684\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002\n\n \u652f\u6301\u4f7f\u7528\u591a\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002\n* \u63d0\u4f9b\u4e0e\u4f20\u5165\u8bf7\u6c42\u76f8\u5173\u8054\u7684\u7528\u6237\u548c\u4ee4\u724c\u4fe1\u606f\u3002\n\n\n.user\n\n\nrequest.user\n \u901a\u5e38\u8fd4\u56de\u4e00\u4e2a \ndjango.contrib.auth.models.User\n \u5b9e\u4f8b, \u5c3d\u7ba1\u8be5\u884c\u4e3a\u53d6\u51b3\u4e8e\u6240\u4f7f\u7528\u7684\u7684\u8ba4\u8bc1\u7b56\u7565\u3002\n\n\n\u5982\u679c\u8bf7\u6c42\u672a\u8ba4\u8bc1\u5219 \nrequest.user\n \u7684\u9ed8\u8ba4\u503c\u4e3a \ndjango.contrib.auth.models.AnonymousUser\n\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\n\n\n\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 \nauthentication documentation\n.\n\n\n.auth\n\n\nrequest.auth\n \u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u4e0a\u4e0b\u6587\u3002 \nrequest.auth\n \u7684\u786e\u5207\u884c\u4e3a\u53d6\u51b3\u4e8e\u6240\u4f7f\u7528\u7684\u7684\u8ba4\u8bc1\u7b56\u7565\uff0c\u4f46\u5b83\u901a\u5e38\u53ef\u4ee5\u662f\u8bf7\u6c42\u88ab\u8ba4\u8bc1\u7684token\u7684\u5b9e\u4f8b\u3002\n\n\n\u5982\u679c\u8bf7\u6c42\u672a\u8ba4\u8bc1\u6216\u8005\u6ca1\u6709\u5176\u4ed6\u4e0a\u4e0b\u6587\uff0c\u5219 \nrequest.auth\n \u7684\u9ed8\u8ba4\u503c\u4e3a \nNone\n.\n\n\n\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 \nauthentication documentation\n.\n\n\n.authenticators\n\n\nAPIView\n \u7c7b\u6216 \n@api_view\n \u88c5\u9970\u5668\u5c06\u6839\u636e\u5728view\u4e2d\u8bbe\u7f6e\u7684 \nauthentication_classes\n \u6216\u57fa\u4e8e\nDEFAULT_AUTHENTICATORS\n \u8bbe\u7f6e\uff0c\u786e\u4fdd\u6b64\u5c5e\u6027\u81ea\u52a8\u8bbe\u7f6e\u4e3a \nAuthentication\n \u5b9e\u4f8b\u7684\u5217\u8868\u3002\n\n\n\u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u8bbf\u95ee\u6b64\u5c5e\u6027\u3002\n\n\n\n\nBrowser enhancements\uff08\u6d4f\u89c8\u5668\u589e\u5f3a\uff09\n\n\nREST framework \u652f\u6301\u4e00\u4e9b\u6d4f\u89c8\u5668\u589e\u5f3a\u529f\u80fd\uff0c\u4f8b\u5982\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684 \nPUT\n, \nPATCH\n \u548c \nDELETE\n \u8868\u5355\u3002\n\n\n.method\n\n\nrequest.method\n \u8fd4\u56de\u8bf7\u6c42\u7684HTTP\u65b9\u6cd5\u7684 \n\u5927\u5199\n \u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002\n\n\n\u900f\u660e\u5730\u652f\u6301\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684 \nPUT\n, \nPATCH\n \u548c \nDELETE\n \u8868\u5355\u3002\n\n\n\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 \nbrowser enhancements documentation\n.\n\n\n.content_type\n\n\nrequest.content_type\n \u8fd4\u56de\u8868\u793aHTTP\u8bf7\u6c42\u6b63\u6587\u7684\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u5982\u679c\u672a\u63d0\u4f9b\u5a92\u4f53\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002\n\n\n\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u5c06\u4f9d\u8d56\u4e8eREST framework\u7684\u9ed8\u8ba4\u8bf7\u6c42\u89e3\u6790\u884c\u4e3a\u3002\n\n\n\u5982\u679c\u4f60\u786e\u5b9e\u9700\u8981\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 \n.content_type\n \u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 \nrequest.META.get('HTTP_CONTENT_TYPE')\n, \u56e0\u4e3a\u5b83\u4e3a\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u975e\u8868\u5355\u5185\u5bb9\u63d0\u4f9b\u4e86\u900f\u660e\u7684\u652f\u6301\u3002\n\n\n\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 \nbrowser enhancements documentation\n.\n\n\n.stream\n\n\nrequest.stream\n \u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u4e3b\u4f53\u5185\u5bb9\u7684\u6d41\u3002\n\n\n\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u5c06\u4f9d\u8d56\u4e8eREST framework\u7684\u9ed8\u8ba4\u8bf7\u6c42\u89e3\u6790\u884c\u4e3a\u3002\n\n\n\n\nStandard HttpRequest attributes\uff08\u6807\u51c6HttpRequest\u5c5e\u6027\uff09\n\n\n\u7531\u4e8e REST framework \u7684 \nRequest\n \u6269\u5c55\u4e86 Django\u7684 \nHttpRequest\n, \u6240\u4ee5\u6240\u6709\u5176\u4ed6\u6807\u51c6\u5c5e\u6027\u548c\u65b9\u6cd5\u4e5f\u662f\u53ef\u7528\u7684\u3002\u4f8b\u5982 \nrequest.META\n \u548c \nrequest.session\n \u5b57\u5178\u6b63\u5e38\u53ef\u7528\u3002\n\n\n\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u5b9e\u73b0\u539f\u56e0\uff0c \nRequest\n \u7c7b\u5e76\u4e0d\u4f1a\u4ece \nHttpRequest\n \u7c7b\u7ee7\u627f, \u800c\u662f\u4f7f\u7528\u5408\u6210\u6269\u5c55\u7c7b\u3002",
            "title": "Requests"
        },
        {
            "location": "/api-guide/requests_zh/#requests",
            "text": "\u5982\u679c\u4f60\u6b63\u5728\u505a\u57fa\u4e8eREST\u7684Web\u670d\u52a1...\u4f60\u6700\u597d\u5ffd\u7565request.POST\u3002  \u2014 Malcom Tredinnick,  Django developers group   REST framework\u7684 Request \u7c7b\u6269\u5c55\u4e86\u6807\u51c6\u7684 HttpRequest \uff0c\u6dfb\u52a0\u5bf9REST framework\u7684\u7075\u6d3b\u8bf7\u6c42\u89e3\u6790\u548c\u8bf7\u6c42\u8eab\u4efd\u9a8c\u8bc1\u7684\u652f\u6301\u3002",
            "title": "Requests\uff08\u8bf7\u6c42\uff09"
        },
        {
            "location": "/api-guide/requests_zh/#request-parsing",
            "text": "REST framework\u7684\u8bf7\u6c42\u5bf9\u8c61\u63d0\u4f9b\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\uff0c\u5141\u8bb8\u4f60\u4ee5\u4e0e\u901a\u5e38\u5904\u7406\u8868\u5355\u6570\u636e\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528JSON\u6570\u636e\u6216\u5176\u4ed6\u5a92\u4f53\u7c7b\u578b\u5904\u7406\u8bf7\u6c42\u3002",
            "title": "Request parsing\uff08\u8bf7\u6c42\u89e3\u6790\uff09"
        },
        {
            "location": "/api-guide/requests_zh/#data",
            "text": "request.data  \u8fd4\u56de\u8bf7\u6c42\u6b63\u6587\u7684\u89e3\u6790\u5185\u5bb9\u3002\u8fd9\u4e0e\u6807\u51c6\u7684  request.POST  \u548c  request.FILES  \u5c5e\u6027\u7c7b\u4f3c\uff0c\u9664\u4e86\u4e0b\u9762\u7684\uff1a   \u5b83\u5305\u62ec\u6240\u6709\u89e3\u6790\u7684\u5185\u5bb9, \u5305\u62ec  \u6587\u4ef6\u6216\u975e\u6587\u4ef6  \u8f93\u5165\u3002  \u5b83\u652f\u6301\u89e3\u6790\u9664 POST \u4e4b\u5916\u7684HTTP\u65b9\u6cd5\u7684\u5185\u5bb9\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u8bbf\u95ee PUT \u548c PATCH \u8bf7\u6c42\u7684\u5185\u5bb9\u3002  \u5b83\u652f\u6301REST framework\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\uff0c\u800c\u4e0d\u4ec5\u4ec5\u652f\u6301\u8868\u5355\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4e0e\u5904\u7406\u4f20\u5165\u8868\u5355\u6570\u636e\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4f20\u5165\u7684JSON\u6570\u636e\u3002   \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u9605 parsers documentation .",
            "title": ".data"
        },
        {
            "location": "/api-guide/requests_zh/#query_params",
            "text": "request.query_params \u662f request.GET \u7684\u4e00\u4e2a\u66f4\u51c6\u786e\u7684\u540c\u4e49\u8bcd\u3002  \u4e3a\u4e86\u8ba9\u4f60\u7684\u4ee3\u7801\u6e05\u6670\u660e\u4e86, \u6211\u4eec\u5efa\u8bae\u4f7f\u7528  request.query_params  \u800c\u4e0d\u662fDjango\u6807\u51c6\u7684 request.GET \u3002\u8fd9\u6837\u505a\u6709\u52a9\u4e8e\u4fdd\u6301\u4ee3\u7801\u5e93\u66f4\u52a0\u6b63\u786e\u548c\u660e\u4e86\u2014\u2014\u4efb\u4f55HTTP\u65b9\u6cd5\u7c7b\u578b\u53ef\u80fd\u5305\u62ec\u67e5\u8be2\u53c2\u6570\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f GET \u8bf7\u6c42\u3002",
            "title": ".query_params"
        },
        {
            "location": "/api-guide/requests_zh/#parsers",
            "text": "APIView \u7c7b\u6216 @api_view \u88c5\u9970\u5668\u5c06\u6839\u636eview\u4e2d\u8bbe\u7f6e\u7684 parser_classes \u96c6\u5408\u6216\u57fa\u4e8e DEFAULT_PARSER_CLASSES \u8bbe\u7f6e\uff0c\u786e\u4fdd\u6b64\u5c5e\u6027\u81ea\u52a8\u8bbe\u7f6e\u4e3a Parser \u5b9e\u4f8b\u5217\u8868\u3002  \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u8bbf\u95ee\u8fd9\u4e2a\u5c5e\u6027\u3002   Note:  \u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u683c\u5f0f\u9519\u8bef\u7684\u5185\u5bb9\uff0c\u5219\u8bbf\u95ee request.data \u53ef\u80fd\u4f1a\u5f15\u53d1 ParseError \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0bREST framework\u7684  APIView \u7c7b\u6216 @api_view \u88c5\u9970\u5668\u5c06\u6355\u83b7\u9519\u8bef\u5e76\u8fd4\u56de 400 Bad Request \u54cd\u5e94\u3002  \u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u5177\u6709\u65e0\u6cd5\u89e3\u6790\u7684\u5443\u9006\u8363\u7c7b\u578b\u7684\u8bf7\u6c42\uff0c\u5219\u4f1a\u5f15\u53d1  UnsupportedMediaType  \u5f02\u5e38, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u6355\u83b7\u8be5\u5f02\u5e38\u5e76\u8fd4\u56de  415 Unsupported Media Type  \u54cd\u5e94\u3002",
            "title": ".parsers"
        },
        {
            "location": "/api-guide/requests_zh/#content-negotiation",
            "text": "\u8bf7\u6c42\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5c5e\u6027\u5141\u8bb8\u4f60\u786e\u5b9a\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u7684\u7ed3\u679c\u3002\u8fd9\u5141\u8bb8\u4f60\u5b9e\u73b0\u5177\u4f53\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u4e3a\u4e0d\u540c\u7684\u5a92\u4f53\u7c7b\u578b\u9009\u62e9\u4e0d\u7528\u7684\u5e8f\u5217\u5316\u65b9\u6848\u3002",
            "title": "Content negotiation\uff08\u5185\u5bb9\u534f\u5546\uff09"
        },
        {
            "location": "/api-guide/requests_zh/#accepted_renderer",
            "text": "\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u9009\u62e9\u7684render\u5b9e\u4f8b\u3002",
            "title": ".accepted_renderer"
        },
        {
            "location": "/api-guide/requests_zh/#accepted_media_type",
            "text": "\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002",
            "title": ".accepted_media_type"
        },
        {
            "location": "/api-guide/requests_zh/#authentication",
            "text": "REST framework \u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\uff0c\u6bcf\u6b21\u8bf7\u6c42\u7684\u9a8c\u8bc1\uff0c\u8ba9\u4f60\u80fd\u591f\uff1a  \u5bf9API\u7684\u4e0d\u540c\u90e8\u5206\u4f7f\u7528\u4e0d\u540c\u7684\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002  \u652f\u6301\u4f7f\u7528\u591a\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002\n* \u63d0\u4f9b\u4e0e\u4f20\u5165\u8bf7\u6c42\u76f8\u5173\u8054\u7684\u7528\u6237\u548c\u4ee4\u724c\u4fe1\u606f\u3002",
            "title": "Authentication\uff08\u8ba4\u8bc1\uff09"
        },
        {
            "location": "/api-guide/requests_zh/#user",
            "text": "request.user  \u901a\u5e38\u8fd4\u56de\u4e00\u4e2a  django.contrib.auth.models.User  \u5b9e\u4f8b, \u5c3d\u7ba1\u8be5\u884c\u4e3a\u53d6\u51b3\u4e8e\u6240\u4f7f\u7528\u7684\u7684\u8ba4\u8bc1\u7b56\u7565\u3002  \u5982\u679c\u8bf7\u6c42\u672a\u8ba4\u8bc1\u5219  request.user  \u7684\u9ed8\u8ba4\u503c\u4e3a  django.contrib.auth.models.AnonymousUser \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002  \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605  authentication documentation .",
            "title": ".user"
        },
        {
            "location": "/api-guide/requests_zh/#auth",
            "text": "request.auth  \u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u4e0a\u4e0b\u6587\u3002  request.auth  \u7684\u786e\u5207\u884c\u4e3a\u53d6\u51b3\u4e8e\u6240\u4f7f\u7528\u7684\u7684\u8ba4\u8bc1\u7b56\u7565\uff0c\u4f46\u5b83\u901a\u5e38\u53ef\u4ee5\u662f\u8bf7\u6c42\u88ab\u8ba4\u8bc1\u7684token\u7684\u5b9e\u4f8b\u3002  \u5982\u679c\u8bf7\u6c42\u672a\u8ba4\u8bc1\u6216\u8005\u6ca1\u6709\u5176\u4ed6\u4e0a\u4e0b\u6587\uff0c\u5219  request.auth  \u7684\u9ed8\u8ba4\u503c\u4e3a  None .  \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605  authentication documentation .",
            "title": ".auth"
        },
        {
            "location": "/api-guide/requests_zh/#authenticators",
            "text": "APIView  \u7c7b\u6216  @api_view  \u88c5\u9970\u5668\u5c06\u6839\u636e\u5728view\u4e2d\u8bbe\u7f6e\u7684  authentication_classes  \u6216\u57fa\u4e8e DEFAULT_AUTHENTICATORS  \u8bbe\u7f6e\uff0c\u786e\u4fdd\u6b64\u5c5e\u6027\u81ea\u52a8\u8bbe\u7f6e\u4e3a  Authentication  \u5b9e\u4f8b\u7684\u5217\u8868\u3002  \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u8bbf\u95ee\u6b64\u5c5e\u6027\u3002",
            "title": ".authenticators"
        },
        {
            "location": "/api-guide/requests_zh/#browser-enhancements",
            "text": "REST framework \u652f\u6301\u4e00\u4e9b\u6d4f\u89c8\u5668\u589e\u5f3a\u529f\u80fd\uff0c\u4f8b\u5982\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684  PUT ,  PATCH  \u548c  DELETE  \u8868\u5355\u3002",
            "title": "Browser enhancements\uff08\u6d4f\u89c8\u5668\u589e\u5f3a\uff09"
        },
        {
            "location": "/api-guide/requests_zh/#method",
            "text": "request.method  \u8fd4\u56de\u8bf7\u6c42\u7684HTTP\u65b9\u6cd5\u7684  \u5927\u5199  \u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002  \u900f\u660e\u5730\u652f\u6301\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684  PUT ,  PATCH  \u548c  DELETE  \u8868\u5355\u3002  \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605  browser enhancements documentation .",
            "title": ".method"
        },
        {
            "location": "/api-guide/requests_zh/#content_type",
            "text": "request.content_type  \u8fd4\u56de\u8868\u793aHTTP\u8bf7\u6c42\u6b63\u6587\u7684\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u5982\u679c\u672a\u63d0\u4f9b\u5a92\u4f53\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002  \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u5c06\u4f9d\u8d56\u4e8eREST framework\u7684\u9ed8\u8ba4\u8bf7\u6c42\u89e3\u6790\u884c\u4e3a\u3002  \u5982\u679c\u4f60\u786e\u5b9e\u9700\u8981\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528  .content_type  \u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u4f7f\u7528  request.META.get('HTTP_CONTENT_TYPE') , \u56e0\u4e3a\u5b83\u4e3a\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u975e\u8868\u5355\u5185\u5bb9\u63d0\u4f9b\u4e86\u900f\u660e\u7684\u652f\u6301\u3002  \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605  browser enhancements documentation .",
            "title": ".content_type"
        },
        {
            "location": "/api-guide/requests_zh/#stream",
            "text": "request.stream  \u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u4e3b\u4f53\u5185\u5bb9\u7684\u6d41\u3002  \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u5c06\u4f9d\u8d56\u4e8eREST framework\u7684\u9ed8\u8ba4\u8bf7\u6c42\u89e3\u6790\u884c\u4e3a\u3002",
            "title": ".stream"
        },
        {
            "location": "/api-guide/requests_zh/#standard-httprequest-attributeshttprequest",
            "text": "\u7531\u4e8e REST framework \u7684  Request  \u6269\u5c55\u4e86 Django\u7684  HttpRequest , \u6240\u4ee5\u6240\u6709\u5176\u4ed6\u6807\u51c6\u5c5e\u6027\u548c\u65b9\u6cd5\u4e5f\u662f\u53ef\u7528\u7684\u3002\u4f8b\u5982  request.META  \u548c  request.session  \u5b57\u5178\u6b63\u5e38\u53ef\u7528\u3002  \u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u5b9e\u73b0\u539f\u56e0\uff0c  Request  \u7c7b\u5e76\u4e0d\u4f1a\u4ece  HttpRequest  \u7c7b\u7ee7\u627f, \u800c\u662f\u4f7f\u7528\u5408\u6210\u6269\u5c55\u7c7b\u3002",
            "title": "Standard HttpRequest attributes\uff08\u6807\u51c6HttpRequest\u5c5e\u6027\uff09"
        },
        {
            "location": "/api-guide/responses_zh/",
            "text": "Responses\n\n\n\n\n\u4e0e\u57fa\u672c\u7684HttpResponse\u5bf9\u8c61\u4e0d\u540c, TemplateResponse \u5bf9\u8c61\u4fdd\u7559view\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u7684\u8be6\u7ec6\u4fe1\u606f\u4ee5\u8ba1\u7b97 response.  Response\u7684\u6700\u7ec8\u8f93\u51fa\u76f4\u5230\u5b83\u5728\u7a0d\u540e\u7684\u54cd\u5e94\u8fc7\u7a0b\u4e2d\u88ab\u9700\u8981\u624d\u4f1a\u8ba1\u7b97\u3002\n\n\n\n\u2014 \nDjango \u6587\u6863\n\n\n\n\nREST framework \u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a \nResponse\n \u7c7b\u6765\u652f\u6301 HTTP content negotiation\uff0c\u8be5\u7c7b\u5141\u8bb8\u4f60\u8fd4\u56de\u53ef\u4ee5\u5448\u73b0\u4e3a\u591a\u79cd\u5185\u5bb9\u7c7b\u578b\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002\n\n\nResponse\n \u7c7b\u662f Django\u4e2d \nSimpleTemplateResponse\n \u7c7b\u7684\u4e00\u4e2a\u5b50\u7c7b\u3002\nResponse\n \u5bf9\u8c61\u7528Python\u57fa\u672c\u6570\u636e\u7c7b\u578b\u521d\u59cb\u5316\u3002 \u7136\u540eREST framework \u4f7f\u7528\u6807\u51c6\u7684HTTP content negotiation \u6765\u786e\u5b9a\u5982\u4f55\u5448\u73b0\u6700\u7ec8\u7684\u54cd\u5e94\u5185\u5bb9\u3002\n\n\n\u4f60\u5e76\u4e0d\u9700\u8981\u4e00\u5b9a\u662f\u7528 \nResponse\n \u7c7b\uff0c\u4f60\u53ef\u4ee5\u4ece\u4f60\u7684\u89c6\u56fe\u8fd4\u56de\u5e38\u89c4\u7684 \nHttpResponse\n \u6216\u8005 \nStreamingHttpResponse\n \u5bf9\u8c61\u3002\u4f7f\u7528\nResponse\n\u7c7b\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5448\u73b0\u591a\u79cd\u683c\u5f0f\u7684\u66f4\u597d\u7684\u754c\u9762\u6765\u8fd4\u56de content-negotiated \u7684 Web API \u54cd\u5e94\u3002\n\n\n\u9664\u975e\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u4f60\u8981\u5bf9 REST framework \u505a\u5927\u91cf\u7684\u81ea\u5b9a\u4e49\uff0c\u5426\u5219\u4f60\u5e94\u8be5\u59cb\u7ec8\u5bf9\u8fd4\u56de\u5bf9\u8c61\u7684views\u4f7f\u7528 \nAPIView\n \u7c7b\u6216\u8005 \n@api_view\n \u51fd\u6570\u3002\u8fd9\u6837\u505a\u53ef\u4ee5\u786e\u4fdd\u89c6\u56fe\u5728\u8fd4\u56de\u4e4b\u524d\u80fd\u591f\u6267\u884c content negotiation \u5e76\u4e14\u4e3a\u54cd\u5e94\u9009\u62e9\u9002\u5f53\u7684\u6e32\u67d3\u5668\u3002\n\n\n\n\n\u521b\u5efa responses\n\n\nResponse()\n\n\n\u7b7e\u540d:\n \nResponse(data, status=None, template_name=None, headers=None, content_type=None)\n\n\n\u4e0e\u5e38\u89c4\u7684 \nHttpResponse\n \u5bf9\u8c61\u4e0d\u540c\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u6e32\u67d3\u5185\u5bb9\u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a \nResponse\n \u5bf9\u8c61\uff0c\u800c\u662f\u4f20\u9012\u672a\u6e32\u67d3\u7684\u6570\u636e\uff0c\u5305\u542b\u4efb\u4f55Python\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\n\n\nResponse\n \u7c7b\u4f7f\u7528\u7684\u6e32\u67d3\u5668\u65e0\u6cd5\u81ea\u884c\u5904\u7406\u50cf Django model \u5b9e\u4f8b\u8fd9\u6837\u7684\u590d\u6742\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u5728\u521b\u5efa \nResponse\n \u5bf9\u8c61\u4e4b\u524d\u5c06\u6570\u636e\u5e8f\u5217\u5316\u4e3a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528 REST framework\u7684 \nSerializer\n \u7c7b\u6765\u6267\u884c\u6b64\u7c7b\u6570\u636e\u7684\u5e8f\u5217\u5316\uff0c\u6216\u8005\u4f7f\u7528\u4f60\u81ea\u5b9a\u4e49\u7684\u6765\u5e8f\u5217\u5316\u3002\n\n\n\u53c2\u6570:\n\n\n\n\n\n\ndata\n: response\u7684\u6570\u5217\u5316\u6570\u636e.\n\n\n\n\n\n\nstatus\n:  response\u7684\u72b6\u6001\u7801\u3002\u9ed8\u8ba4\u662f200.  \u53e6\u884c\u53c2\u9605 \nstatus codes\n.\n\n\n\n\n\n\ntemplate_name\n: \nHTMLRenderer\n \u9009\u62e9\u8981\u4f7f\u7528\u7684\u6a21\u677f\u540d\u79f0\u3002\n\n\n\n\n\n\nheaders\n: A dictionary of HTTP headers to use in the response.\n\n\n\n\n\n\ncontent_type\n: response\u7684\u5185\u5bb9\u7c7b\u578b\u3002\u901a\u5e38\u7531\u6e32\u67d3\u5668\u81ea\u884c\u8bbe\u7f6e\uff0c\u7531content negotiation\u786e\u5b9a\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u660e\u786e\u6307\u5b9a\u5185\u5bb9\u7c7b\u578b\u3002\n\n\n\n\n\n\n\n\n\u5c5e\u6027\n\n\n.data\n\n\nRequest\n \u5bf9\u8c61\u7684\u672a\u6e32\u67d3\u5185\u5bb9\u3002\n\n\n.status_code\n\n\nHTTP \u54cd\u5e94\u7684\u6570\u5b57\u72b6\u6001\u5417\u3002\n\n\n.content\n\n\nresponse\u7684\u5448\u73b0\u5185\u5bb9\u3002 \n.render()\n \u65b9\u6cd5\u5fc5\u987b\u5148\u8c03\u7528\u624d\u80fd\u8bbf\u95ee \n.content\n \u3002\n\n\n.template_name\n\n\ntemplate_name\n \u53ea\u6709\u5728\u4f7f\u7528 \nHTMLRenderer\n \u6216\u8005\u5176\u4ed6\u81ea\u5b9a\u4e49\u6a21\u677f\u4f5c\u4e3aresponse\u7684\u6e32\u67d3\u5668\u65f6\u624d\u9700\u8981\u63d0\u4f9b\u8be5\u5c5e\u6027\u3002\n\n\n.accepted_renderer\n\n\n\u5c06\u7528\u4e8e\u5448\u73b0response\u7684render\u5b9e\u4f8b\u3002\n\n\n\u81ea\u52a8\u901a\u8fc7 \nAPIView\n \u6216\u8005 \n@api_view\n \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002\n\n\n.accepted_media_type\n\n\n\u7531 content negotiation \u9636\u6bb5\u9009\u62e9\u7684\u5a92\u4f53\u7c7b\u578b\u3002\n\n\n\u81ea\u52a8\u901a\u8fc7 \nAPIView\n \u6216\u8005 \n@api_view\n \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002\n\n\n.renderer_context\n\n\n\u4e00\u4e2a\u5c06\u4f20\u9012\u7ed9\u6e32\u67d3\u5668\u7684\n.render()\n\u65b9\u6cd5\u7684\u9644\u52a0\u4e0a\u4e0b\u6587\u4fe1\u606f\u5b57\u5178\u3002\n\n\n\u81ea\u52a8\u901a\u8fc7 \nAPIView\n \u6216\u8005 \n@api_view\n \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002\n\n\n\n\n\u6807\u51c6\u7684HttpResponse \u5c5e\u6027\n\n\nResponse\n \u7c7b\u6269\u5c55\u4e86 \nSimpleTemplateResponse\n\uff0c\u5e76\u4e14\u6240\u6709\u5e38\u7528\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u90fd\u662f\u63d0\u4f9b\u7684\u3002\u6bd4\u5982\u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684\u65b9\u6cd5\u8bbe\u7f6eresponse\u7684header\u4fe1\u606f\uff1a\n\n\nresponse = Response()\n\nresponse['Cache-Control'] = 'no-cache'\n\n\n\n\n.render()\n\n\nSignature:\n \n.render()\n\n\n\u548c\u5176\u4ed6\u7684 \nTemplateResponse\n \u4e00\u6837\uff0c\u8c03\u7528\u8be5\u65b9\u6cd5\u5c06response\u7684\u5e8f\u5217\u5316\u6570\u636e\u5448\u73b0\u4e3a\u6700\u7ec8\u7684response\u5185\u5bb9\u3002 \u5f53 \n.render()\n \u88ab\u8c03\u7528\u65f6\uff0c response\u7684\u5185\u5bb9\u5c06\u88ab\u8bbe\u7f6e\u6210\u5728 \naccepted_renderer\n\u5b9e\u4f8b\u4e0a\u8c03\u7528 \n.render(data, accepted_media_type, renderer_context)\n \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\u3002\n\n\n\u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u81ea\u5df1\u8c03\u7528 \n.render()\n \uff0c\u56e0\u4e3a\u5b83\u662f\u7531Django\u7684\u6807\u51c6\u54cd\u5e94\u5468\u671f\u6765\u5904\u7406\u7684\u3002",
            "title": "Responses"
        },
        {
            "location": "/api-guide/responses_zh/#responses",
            "text": "\u4e0e\u57fa\u672c\u7684HttpResponse\u5bf9\u8c61\u4e0d\u540c, TemplateResponse \u5bf9\u8c61\u4fdd\u7559view\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u7684\u8be6\u7ec6\u4fe1\u606f\u4ee5\u8ba1\u7b97 response.  Response\u7684\u6700\u7ec8\u8f93\u51fa\u76f4\u5230\u5b83\u5728\u7a0d\u540e\u7684\u54cd\u5e94\u8fc7\u7a0b\u4e2d\u88ab\u9700\u8981\u624d\u4f1a\u8ba1\u7b97\u3002  \u2014  Django \u6587\u6863   REST framework \u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a  Response  \u7c7b\u6765\u652f\u6301 HTTP content negotiation\uff0c\u8be5\u7c7b\u5141\u8bb8\u4f60\u8fd4\u56de\u53ef\u4ee5\u5448\u73b0\u4e3a\u591a\u79cd\u5185\u5bb9\u7c7b\u578b\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002  Response  \u7c7b\u662f Django\u4e2d  SimpleTemplateResponse  \u7c7b\u7684\u4e00\u4e2a\u5b50\u7c7b\u3002 Response  \u5bf9\u8c61\u7528Python\u57fa\u672c\u6570\u636e\u7c7b\u578b\u521d\u59cb\u5316\u3002 \u7136\u540eREST framework \u4f7f\u7528\u6807\u51c6\u7684HTTP content negotiation \u6765\u786e\u5b9a\u5982\u4f55\u5448\u73b0\u6700\u7ec8\u7684\u54cd\u5e94\u5185\u5bb9\u3002  \u4f60\u5e76\u4e0d\u9700\u8981\u4e00\u5b9a\u662f\u7528  Response  \u7c7b\uff0c\u4f60\u53ef\u4ee5\u4ece\u4f60\u7684\u89c6\u56fe\u8fd4\u56de\u5e38\u89c4\u7684  HttpResponse  \u6216\u8005  StreamingHttpResponse  \u5bf9\u8c61\u3002\u4f7f\u7528 Response \u7c7b\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5448\u73b0\u591a\u79cd\u683c\u5f0f\u7684\u66f4\u597d\u7684\u754c\u9762\u6765\u8fd4\u56de content-negotiated \u7684 Web API \u54cd\u5e94\u3002  \u9664\u975e\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u4f60\u8981\u5bf9 REST framework \u505a\u5927\u91cf\u7684\u81ea\u5b9a\u4e49\uff0c\u5426\u5219\u4f60\u5e94\u8be5\u59cb\u7ec8\u5bf9\u8fd4\u56de\u5bf9\u8c61\u7684views\u4f7f\u7528  APIView  \u7c7b\u6216\u8005  @api_view  \u51fd\u6570\u3002\u8fd9\u6837\u505a\u53ef\u4ee5\u786e\u4fdd\u89c6\u56fe\u5728\u8fd4\u56de\u4e4b\u524d\u80fd\u591f\u6267\u884c content negotiation \u5e76\u4e14\u4e3a\u54cd\u5e94\u9009\u62e9\u9002\u5f53\u7684\u6e32\u67d3\u5668\u3002",
            "title": "Responses"
        },
        {
            "location": "/api-guide/responses_zh/#responses_1",
            "text": "",
            "title": "\u521b\u5efa responses"
        },
        {
            "location": "/api-guide/responses_zh/#response",
            "text": "\u7b7e\u540d:   Response(data, status=None, template_name=None, headers=None, content_type=None)  \u4e0e\u5e38\u89c4\u7684  HttpResponse  \u5bf9\u8c61\u4e0d\u540c\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u6e32\u67d3\u5185\u5bb9\u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a  Response  \u5bf9\u8c61\uff0c\u800c\u662f\u4f20\u9012\u672a\u6e32\u67d3\u7684\u6570\u636e\uff0c\u5305\u542b\u4efb\u4f55Python\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002  Response  \u7c7b\u4f7f\u7528\u7684\u6e32\u67d3\u5668\u65e0\u6cd5\u81ea\u884c\u5904\u7406\u50cf Django model \u5b9e\u4f8b\u8fd9\u6837\u7684\u590d\u6742\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u5728\u521b\u5efa  Response  \u5bf9\u8c61\u4e4b\u524d\u5c06\u6570\u636e\u5e8f\u5217\u5316\u4e3a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002  \u4f60\u53ef\u4ee5\u4f7f\u7528 REST framework\u7684  Serializer  \u7c7b\u6765\u6267\u884c\u6b64\u7c7b\u6570\u636e\u7684\u5e8f\u5217\u5316\uff0c\u6216\u8005\u4f7f\u7528\u4f60\u81ea\u5b9a\u4e49\u7684\u6765\u5e8f\u5217\u5316\u3002  \u53c2\u6570:    data : response\u7684\u6570\u5217\u5316\u6570\u636e.    status :  response\u7684\u72b6\u6001\u7801\u3002\u9ed8\u8ba4\u662f200.  \u53e6\u884c\u53c2\u9605  status codes .    template_name :  HTMLRenderer  \u9009\u62e9\u8981\u4f7f\u7528\u7684\u6a21\u677f\u540d\u79f0\u3002    headers : A dictionary of HTTP headers to use in the response.    content_type : response\u7684\u5185\u5bb9\u7c7b\u578b\u3002\u901a\u5e38\u7531\u6e32\u67d3\u5668\u81ea\u884c\u8bbe\u7f6e\uff0c\u7531content negotiation\u786e\u5b9a\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u660e\u786e\u6307\u5b9a\u5185\u5bb9\u7c7b\u578b\u3002",
            "title": "Response()"
        },
        {
            "location": "/api-guide/responses_zh/#_1",
            "text": "",
            "title": "\u5c5e\u6027"
        },
        {
            "location": "/api-guide/responses_zh/#data",
            "text": "Request  \u5bf9\u8c61\u7684\u672a\u6e32\u67d3\u5185\u5bb9\u3002",
            "title": ".data"
        },
        {
            "location": "/api-guide/responses_zh/#status_code",
            "text": "HTTP \u54cd\u5e94\u7684\u6570\u5b57\u72b6\u6001\u5417\u3002",
            "title": ".status_code"
        },
        {
            "location": "/api-guide/responses_zh/#content",
            "text": "response\u7684\u5448\u73b0\u5185\u5bb9\u3002  .render()  \u65b9\u6cd5\u5fc5\u987b\u5148\u8c03\u7528\u624d\u80fd\u8bbf\u95ee  .content  \u3002",
            "title": ".content"
        },
        {
            "location": "/api-guide/responses_zh/#template_name",
            "text": "template_name  \u53ea\u6709\u5728\u4f7f\u7528  HTMLRenderer  \u6216\u8005\u5176\u4ed6\u81ea\u5b9a\u4e49\u6a21\u677f\u4f5c\u4e3aresponse\u7684\u6e32\u67d3\u5668\u65f6\u624d\u9700\u8981\u63d0\u4f9b\u8be5\u5c5e\u6027\u3002",
            "title": ".template_name"
        },
        {
            "location": "/api-guide/responses_zh/#accepted_renderer",
            "text": "\u5c06\u7528\u4e8e\u5448\u73b0response\u7684render\u5b9e\u4f8b\u3002  \u81ea\u52a8\u901a\u8fc7  APIView  \u6216\u8005  @api_view  \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002",
            "title": ".accepted_renderer"
        },
        {
            "location": "/api-guide/responses_zh/#accepted_media_type",
            "text": "\u7531 content negotiation \u9636\u6bb5\u9009\u62e9\u7684\u5a92\u4f53\u7c7b\u578b\u3002  \u81ea\u52a8\u901a\u8fc7  APIView  \u6216\u8005  @api_view  \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002",
            "title": ".accepted_media_type"
        },
        {
            "location": "/api-guide/responses_zh/#renderer_context",
            "text": "\u4e00\u4e2a\u5c06\u4f20\u9012\u7ed9\u6e32\u67d3\u5668\u7684 .render() \u65b9\u6cd5\u7684\u9644\u52a0\u4e0a\u4e0b\u6587\u4fe1\u606f\u5b57\u5178\u3002  \u81ea\u52a8\u901a\u8fc7  APIView  \u6216\u8005  @api_view  \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002",
            "title": ".renderer_context"
        },
        {
            "location": "/api-guide/responses_zh/#httpresponse",
            "text": "Response  \u7c7b\u6269\u5c55\u4e86  SimpleTemplateResponse \uff0c\u5e76\u4e14\u6240\u6709\u5e38\u7528\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u90fd\u662f\u63d0\u4f9b\u7684\u3002\u6bd4\u5982\u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684\u65b9\u6cd5\u8bbe\u7f6eresponse\u7684header\u4fe1\u606f\uff1a  response = Response()\n\nresponse['Cache-Control'] = 'no-cache'",
            "title": "\u6807\u51c6\u7684HttpResponse \u5c5e\u6027"
        },
        {
            "location": "/api-guide/responses_zh/#render",
            "text": "Signature:   .render()  \u548c\u5176\u4ed6\u7684  TemplateResponse  \u4e00\u6837\uff0c\u8c03\u7528\u8be5\u65b9\u6cd5\u5c06response\u7684\u5e8f\u5217\u5316\u6570\u636e\u5448\u73b0\u4e3a\u6700\u7ec8\u7684response\u5185\u5bb9\u3002 \u5f53  .render()  \u88ab\u8c03\u7528\u65f6\uff0c response\u7684\u5185\u5bb9\u5c06\u88ab\u8bbe\u7f6e\u6210\u5728  accepted_renderer \u5b9e\u4f8b\u4e0a\u8c03\u7528  .render(data, accepted_media_type, renderer_context)  \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\u3002  \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u81ea\u5df1\u8c03\u7528  .render()  \uff0c\u56e0\u4e3a\u5b83\u662f\u7531Django\u7684\u6807\u51c6\u54cd\u5e94\u5468\u671f\u6765\u5904\u7406\u7684\u3002",
            "title": ".render()"
        },
        {
            "location": "/api-guide/views_zh/",
            "text": "\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\n\n\n\n\nDjango\u4e2d\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u5bf9\u4e8e\u65e7\u5f0f\u98ce\u683c\u7684\u89c6\u56fe\u6765\u8bf4\u662f\u826f\u597d\u7684\u66ff\u4ee3\u54c1\u3002\n\n\n\u2014 \nreinout van rees\n\n\n\n\nREST framework\u63d0\u4f9b\u4e86\u4e00\u4e2a\nAPIView\n\u7c7b\uff0c\u5b83\u662fDjango\u7684\nView\n\u7c7b\u7684\u5b50\u7c7b\u3002\n\n\nAPIView\n\u7c7b\u548c\u4e00\u822c\u7684\nView\n\u7c7b\u6709\u4ee5\u4e0b\u4e0d\u540c\uff1a\n\n\n\n\n\n\n\u88ab\u4f20\u5165\u5230\u5904\u7406\u65b9\u6cd5\u7684\u8bf7\u6c42\u4e0d\u4f1a\u662fDjango\u7684\nHttpRequest\n\u7c7b\u7684\u5b9e\u4f8b\uff0c\u800c\u662fREST framework\u7684\nRequest\n\u7c7b\u7684\u5b9e\u4f8b\u3002\n\n\n\n\n\n\n\u5904\u7406\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56deREST framework\u7684\nResponse\n\uff0c\u800c\u4e0d\u662fDjango\u7684\nHttpRequest\n\u3002\u89c6\u56fe\u4f1a\u7ba1\u7406\u5185\u5bb9\u534f\u8bae\uff0c\u7ed9\u54cd\u5e94\u8bbe\u7f6e\u6b63\u786e\u7684\u6e32\u67d3\u5668\u3002\n\n\n\n\n\n\n\u4efb\u4f55\nAPIException\n\u5f02\u5e38\u90fd\u4f1a\u88ab\u6355\u83b7\uff0c\u5e76\u4e14\u4f20\u9012\u7ed9\u5408\u9002\u7684\u54cd\u5e94\u3002\n\n\n\n\n\n\n\u8fdb\u5165\u7684\u8bf7\u6c42\u5c06\u4f1a\u7ecf\u8fc7\u8ba4\u8bc1\uff0c\u5408\u9002\u7684\u6743\u9650\u548c\uff08\u6216\uff09\u8282\u6d41\u68c0\u67e5\u4f1a\u5728\u8bf7\u6c42\u88ab\u6d3e\u53d1\u5230\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u8fd0\u884c\u3002\n\n\n\n\n\n\n\u4f7f\u7528\nAPIView\n\u7c7b\u548c\u4f7f\u7528\u4e00\u822c\u7684\nView\n\u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u901a\u5e38\uff0c\u8fdb\u5165\u7684\u8bf7\u6c42\u4f1a\u88ab\u5206\u53d1\u5230\u5408\u9002\u5904\u7406\u65b9\u6cd5\u6bd4\u5982\n.get()\n\uff0c\u6216\u8005\n.post\n\u3002\u53e6\u5916\uff0c\u5f88\u591a\u5c5e\u6027\u4f1a\u88ab\u8bbe\u5b9a\u5728\u63a7\u5236API\u7b56\u7565\u7684\u5404\u79cd\u5207\u9762\u7684\u7c7b\u4e0a\u3002\n\n\n\u6bd4\u5982\uff1a\n\n\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import authentication, permissions\n\nclass ListUsers(APIView):\n    \"\"\"\n    \u5217\u51fa\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7528\u6237\u7684\u89c6\u56fe\u3002\n\n    * \u9700\u8981token\u8ba4\u8bc1\n    * \u53ea\u6709\u7ba1\u7406\u5458\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u89c6\u56fe\u3002\n    \"\"\"\n    authentication_classes = (authentication.TokenAuthentication,)\n    permission_classes = (permissions.IsAdminUser,)\n\n    def get(self, request, format=None):\n        \"\"\"\n        Return a list of all users.\n        \"\"\"\n        usernames = [user.username for user in User.objects.all()]\n        return Response(usernames)\n\n\n\nAPI\u7b56\u7565\u5c5e\u6027\n\n\n\u4e0b\u9762\u8fd9\u4e9b\u5c5e\u6027\u63a7\u5236\u4e86API\u89c6\u56fe\u53ef\u62d4\u63d2\u7684\u90a3\u4e9b\u65b9\u9762\u3002\n\n\n.renderer_classes\n\n\n.parser_classes\n\n\n.authentication_classes\n\n\n.throttle_classes\n\n\n.permission_classes\n\n\n.content_negotiation_class\n\n\nAPI policy instantiation methods\n\n\n\u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u88abREST framework\u7528\u6765\u5b9e\u4f8b\u5316\u5404\u79cd\u53ef\u62d4\u63d2\u7684API\u7b56\u7565\u3002\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e9b\u65b9\u6cd5\u3002\n\n\n.get_renderers(self)\n\n\n.get_parsers(self)\n\n\n.get_authenticators(self)\n\n\n.get_throttles(self)\n\n\n.get_permissions(self)\n\n\n.get_content_negotiator(self)\n\n\n.get_exception_handler(self)\n\n\nAPI policy implementation methods\n\n\n\u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u5728\u8bf7\u6c42\u88ab\u5206\u53d1\u5230\u5177\u4f53\u7684\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u8c03\u7528\u3002\n\n\n.check_permissions(self, request)\n\n\n.check_throttles(self, request)\n\n\n.perform_content_negotiation(self, request, force=False)\n\n\nDispatch methods\n\n\n\u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u88ab\u89c6\u56fe\u7684\n.dispatch()\n\u65b9\u6cd5\u76f4\u63a5\u8c03\u7528\u3002\u5b83\u4eec\u5728\u8c03\u7528\n.get\n, \n.post()\n, \nput()\n, \npatch()\n\u548c\ndelete()\n\u4e4b\u7c7b\u7684\u8bf7\u6c42\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u6216\u8005\u4e4b\u540e\u6267\u884c\u4efb\u4f55\u9700\u8981\u6267\u884c\u7684\u64cd\u4f5c\u3002\n\n\n.initial(self, request, *args, **kwargs)\n\n\n\u5728\u5904\u7406\u65b9\u6cd5\u8c03\u7528\u4e4b\u524d\u8fdb\u884c\u4efb\u4f55\u9700\u8981\u7684\u52a8\u4f5c\u3002\n\u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u6267\u884c\u6743\u9650\u8ba4\u8bc1\u548c\u9650\u5236\uff0c\u5e76\u4e14\u6267\u884c\u5185\u5bb9\u534f\u5546\u3002\n\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5\u3002\n\n\n.handle_exception(self, exc)\n\n\n\u4efb\u4f55\u88ab\u5904\u7406\u8bf7\u6c42\u7684\u65b9\u6cd5\u629b\u51fa\u7684\u5f02\u5e38\u90fd\u4f1a\u88ab\u4f20\u9012\u7ed9\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u65e2\u4e0d\u8fd4\u56de\nResponse\n\u7684\u5b9e\u4f8b\uff0c\u4e5f\u4e0d\u91cd\u65b0\u629b\u51fa\u5f02\u5e38\u3002\n\n\n\u9ed8\u8ba4\u7684\u5b9e\u73b0\u4f1a\u5904\u7406\nrest_framework.expceptions.APIException\n\u7684\u4efb\u4f55\u5b50\u7c7b\u5f02\u5e38\uff0c\u4ee5\u53caDjango\u7684\nHttp404\n\u548c\nPermissionDenied\n\u5f02\u5e38\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u9002\u5f53\u7684\u9519\u8bef\u54cd\u5e94\u3002\n\n\n\u5982\u679c\u4f60\u9700\u8981\u5728\u81ea\u5df1\u7684API\u4e2d\u81ea\u5b9a\u4e49\u8fd4\u56de\u7684\u9519\u8bef\u54cd\u5e94\uff0c\u4f60\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\n\n.initialize_request(self, request, *args, **kwargs)\n\n\n\u786e\u4fdd\u4f20\u9012\u7ed9\u8bf7\u6c42\u5904\u7406\u65b9\u6cd5\u7684\u8bf7\u6c42\u5bf9\u8c61\u662f\nRequest\n\u7684\u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f\u901a\u5e38\u7684Django\nHttpResquest\n\u7684\u5b9e\u4f8b\u3002\n\n\n\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\n\n.finalize_response(self, request, response, *args, **kwargs)\n\n\n\u786e\u4fdd\u4efb\u4f55\u4ece\u5904\u7406\u8bf7\u6c42\u7684\u65b9\u6cd5\u8fd4\u56de\u7684\nResponse\n\u5bf9\u8c61\u88ab\u6e32\u67d3\u5230\u7531\u5185\u5bb9\u534f\u5546\u51b3\u5b9a\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002\n\n\n\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\n\n\n\n\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\n\n\n\n\n\u8bf4[\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe]\u4e0d\u7ba1\u4ec0\u4e48\u65f6\u5019\u90fd\u662f\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u90a3\u662f\u9519\u8bef\u7684\u3002\n\n\n\u2014 \nNick Coghlan\n\n\n\n\n\u5728REST framework\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u7b80\u5355\u7684\u88c5\u9970\u5668\uff0c\u7528\u6765\u5305\u88c5\u4f60\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u4ee5\u786e\u4fdd\u89c6\u56fe\u51fd\u6570\u4f1a\u6536\u5230\nRequest\n\uff08\u800c\u4e0d\u662fDjango\u4e00\u822c\u7684\nHttpRequest\n)\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd4\u56de\nResponse\n\uff08\u800c\u4e0d\u662fDjango\u7684\nHttpResponse\n\uff09\u5bf9\u8c61\uff0c\u540c\u65f6\u5141\u8bb8\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u8bf7\u6c42\u7684\u5904\u7406\u65b9\u5f0f\u3002\n\n\n@api_view()\n\n\n\u51fd\u6570\u7b7e\u540d:\n \n@api_view(http_method_names=['GET'], exclude_from_schema=False)\n\n\n\u6b64\u529f\u80fd\u7684\u6838\u5fc3\u662f\napi_view\n\u88c5\u9970\u5668\uff0c\u5b83\u63a5\u53d7\u89c6\u56fe\u5e94\u8be5\u54cd\u5e94\u7684HTTP\u65b9\u6cd5\u5217\u8868\u7684\u53c2\u6570\u3002\n\u6bd4\u5982\uff0c\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u5199\u4e00\u4e2a\u8fd4\u56de\u4e00\u4e9b\u6570\u636e\u7684\u975e\u5e38\u7b80\u5355\u7684\u89c6\u56fe\u3002\n\n\nfrom rest_framework.decorators import api_view\n\n@api_view()\ndef hello_world(request):\n    return Response({\"message\": \"Hello, world!\"})\n\n\n\n\u8fd9\u4e2a\u89c6\u56fe\u4f1a\u4f7f\u7528\nsettings\n\u4e2d\u6307\u5b9a\u7684\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\uff0c\u89e3\u6790\u5668\uff0c\u8ba4\u8bc1\u7c7b\u7b49\u7b49\u3002\n\n\n\u9ed8\u8ba4\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\nGET\n\u8bf7\u6c42\u4f1a\u88ab\u63a5\u53d7\u3002\u5176\u4ed6\u7684\u8bf7\u6c42\u65b9\u6cd5\u4f1a\u5f97\u5230\u4e00\u4e2a\"405 Method Not Allowed\"\u54cd\u5e94\u3002\u53ef\u4ee5\u50cf\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e00\u6837\u6539\u53d8\u9ed8\u8ba4\u884c\u4e3a\uff1a\n\n\n@api_view(['GET', 'POST'])\ndef hello_world(request):\n    if request.method == 'POST':\n        return Response({\"message\": \"Got some data!\", \"data\": request.data})\n    return Response({\"message\": \"Hello, world!\"})\n\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u7528\nexclude_from_schema\n\u53c2\u6570\u6807\u8bb0API\u89c6\u56fe\u6765\u5ffd\u7565\u4efb\u4f55\n\u81ea\u52a8\u751f\u6210\u7684\u89c6\u56fe\n,\n\n\n@api_view(['GET'], exclude_from_schema=True)\ndef api_docs(request):\n    ...\n\n\n\nAPI \u7b56\u7565\u88c5\u9970\u5668\n\n\nREST framework\u63d0\u4f9b\u4e86\u4e00\u7ec4\u53ef\u4ee5\u52a0\u5230\u89c6\u56fe\u4e0a\u7684\u88c5\u9970\u5668\u6765\u91cd\u5199\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u8fd9\u4e9b\u88c5\u9970\u5668\u5fc5\u987b\u653e\u5728\n@api_view\n\u7684\n\u540e\n(\u4e0b)\u9762\u3002\u6bd4\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528[\u9650\u5236\u5668][throtting]\u786e\u4fdd\u7279\u5b9a\u7528\u6237\u6bcf\u5929\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\u7684\u89c6\u56fe\uff0c\u53ef\u4ee5\u7528\n@throttle_classes\n\u88c5\u9970\u5668\u5e76\u7ed9\u5b83\u4f20\u9012\u4e00\u4e2a\u9650\u5236\u5668\u7c7b\u7684\u5217\u8868\u3002\n\n\nfrom rest_framework.decorators import api_view, throttle_classes\nfrom rest_framework.throttling import UserRateThrottle\n\nclass OncePerDayUserThrottle(UserRateThrottle):\n        rate = '1/day'\n\n@api_view(['GET'])\n@throttle_classes([OncePerDayUserThrottle])\ndef view(request):\n    return Response({\"message\": \"Hello for today! See you tomorrow!\"})\n\n\n\n\u8fd9\u4e9b\u88c5\u9970\u5668\u548c\u4e0a\u6587\u4e2d\u7684\nAPIView\n\u7684\u5b50\u7c7b\u4e2d\u8bbe\u7f6e\u7684\u5c5e\u6027\u76f8\u5bf9\u5e94\u3002\n\n\n\u53ef\u7528\u7684\u88c5\u9970\u5668\u6709\uff1a\n\n\n\n\n@renderer_classes(...)\n\n\n@parser_classes(...)\n\n\n@authentication_classes(...)\n\n\n@throttle_classes(...)\n\n\n@permission_classes(...)\n\n\n\n\n\u8fd9\u4e9b\u88c5\u9970\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u7c7b\u7684\u5217\u8868\u6216\u5143\u7ec4\u3002",
            "title": "Views"
        },
        {
            "location": "/api-guide/views_zh/#_1",
            "text": "Django\u4e2d\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u5bf9\u4e8e\u65e7\u5f0f\u98ce\u683c\u7684\u89c6\u56fe\u6765\u8bf4\u662f\u826f\u597d\u7684\u66ff\u4ee3\u54c1\u3002  \u2014  reinout van rees   REST framework\u63d0\u4f9b\u4e86\u4e00\u4e2a APIView \u7c7b\uff0c\u5b83\u662fDjango\u7684 View \u7c7b\u7684\u5b50\u7c7b\u3002  APIView \u7c7b\u548c\u4e00\u822c\u7684 View \u7c7b\u6709\u4ee5\u4e0b\u4e0d\u540c\uff1a    \u88ab\u4f20\u5165\u5230\u5904\u7406\u65b9\u6cd5\u7684\u8bf7\u6c42\u4e0d\u4f1a\u662fDjango\u7684 HttpRequest \u7c7b\u7684\u5b9e\u4f8b\uff0c\u800c\u662fREST framework\u7684 Request \u7c7b\u7684\u5b9e\u4f8b\u3002    \u5904\u7406\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56deREST framework\u7684 Response \uff0c\u800c\u4e0d\u662fDjango\u7684 HttpRequest \u3002\u89c6\u56fe\u4f1a\u7ba1\u7406\u5185\u5bb9\u534f\u8bae\uff0c\u7ed9\u54cd\u5e94\u8bbe\u7f6e\u6b63\u786e\u7684\u6e32\u67d3\u5668\u3002    \u4efb\u4f55 APIException \u5f02\u5e38\u90fd\u4f1a\u88ab\u6355\u83b7\uff0c\u5e76\u4e14\u4f20\u9012\u7ed9\u5408\u9002\u7684\u54cd\u5e94\u3002    \u8fdb\u5165\u7684\u8bf7\u6c42\u5c06\u4f1a\u7ecf\u8fc7\u8ba4\u8bc1\uff0c\u5408\u9002\u7684\u6743\u9650\u548c\uff08\u6216\uff09\u8282\u6d41\u68c0\u67e5\u4f1a\u5728\u8bf7\u6c42\u88ab\u6d3e\u53d1\u5230\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u8fd0\u884c\u3002    \u4f7f\u7528 APIView \u7c7b\u548c\u4f7f\u7528\u4e00\u822c\u7684 View \u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u901a\u5e38\uff0c\u8fdb\u5165\u7684\u8bf7\u6c42\u4f1a\u88ab\u5206\u53d1\u5230\u5408\u9002\u5904\u7406\u65b9\u6cd5\u6bd4\u5982 .get() \uff0c\u6216\u8005 .post \u3002\u53e6\u5916\uff0c\u5f88\u591a\u5c5e\u6027\u4f1a\u88ab\u8bbe\u5b9a\u5728\u63a7\u5236API\u7b56\u7565\u7684\u5404\u79cd\u5207\u9762\u7684\u7c7b\u4e0a\u3002  \u6bd4\u5982\uff1a  from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import authentication, permissions\n\nclass ListUsers(APIView):\n    \"\"\"\n    \u5217\u51fa\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7528\u6237\u7684\u89c6\u56fe\u3002\n\n    * \u9700\u8981token\u8ba4\u8bc1\n    * \u53ea\u6709\u7ba1\u7406\u5458\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u89c6\u56fe\u3002\n    \"\"\"\n    authentication_classes = (authentication.TokenAuthentication,)\n    permission_classes = (permissions.IsAdminUser,)\n\n    def get(self, request, format=None):\n        \"\"\"\n        Return a list of all users.\n        \"\"\"\n        usernames = [user.username for user in User.objects.all()]\n        return Response(usernames)",
            "title": "\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe"
        },
        {
            "location": "/api-guide/views_zh/#api",
            "text": "\u4e0b\u9762\u8fd9\u4e9b\u5c5e\u6027\u63a7\u5236\u4e86API\u89c6\u56fe\u53ef\u62d4\u63d2\u7684\u90a3\u4e9b\u65b9\u9762\u3002",
            "title": "API\u7b56\u7565\u5c5e\u6027"
        },
        {
            "location": "/api-guide/views_zh/#renderer_classes",
            "text": "",
            "title": ".renderer_classes"
        },
        {
            "location": "/api-guide/views_zh/#parser_classes",
            "text": "",
            "title": ".parser_classes"
        },
        {
            "location": "/api-guide/views_zh/#authentication_classes",
            "text": "",
            "title": ".authentication_classes"
        },
        {
            "location": "/api-guide/views_zh/#throttle_classes",
            "text": "",
            "title": ".throttle_classes"
        },
        {
            "location": "/api-guide/views_zh/#permission_classes",
            "text": "",
            "title": ".permission_classes"
        },
        {
            "location": "/api-guide/views_zh/#content_negotiation_class",
            "text": "",
            "title": ".content_negotiation_class"
        },
        {
            "location": "/api-guide/views_zh/#api-policy-instantiation-methods",
            "text": "\u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u88abREST framework\u7528\u6765\u5b9e\u4f8b\u5316\u5404\u79cd\u53ef\u62d4\u63d2\u7684API\u7b56\u7565\u3002\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e9b\u65b9\u6cd5\u3002",
            "title": "API policy instantiation methods"
        },
        {
            "location": "/api-guide/views_zh/#get_renderersself",
            "text": "",
            "title": ".get_renderers(self)"
        },
        {
            "location": "/api-guide/views_zh/#get_parsersself",
            "text": "",
            "title": ".get_parsers(self)"
        },
        {
            "location": "/api-guide/views_zh/#get_authenticatorsself",
            "text": "",
            "title": ".get_authenticators(self)"
        },
        {
            "location": "/api-guide/views_zh/#get_throttlesself",
            "text": "",
            "title": ".get_throttles(self)"
        },
        {
            "location": "/api-guide/views_zh/#get_permissionsself",
            "text": "",
            "title": ".get_permissions(self)"
        },
        {
            "location": "/api-guide/views_zh/#get_content_negotiatorself",
            "text": "",
            "title": ".get_content_negotiator(self)"
        },
        {
            "location": "/api-guide/views_zh/#get_exception_handlerself",
            "text": "",
            "title": ".get_exception_handler(self)"
        },
        {
            "location": "/api-guide/views_zh/#api-policy-implementation-methods",
            "text": "\u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u5728\u8bf7\u6c42\u88ab\u5206\u53d1\u5230\u5177\u4f53\u7684\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u8c03\u7528\u3002",
            "title": "API policy implementation methods"
        },
        {
            "location": "/api-guide/views_zh/#check_permissionsself-request",
            "text": "",
            "title": ".check_permissions(self, request)"
        },
        {
            "location": "/api-guide/views_zh/#check_throttlesself-request",
            "text": "",
            "title": ".check_throttles(self, request)"
        },
        {
            "location": "/api-guide/views_zh/#perform_content_negotiationself-request-forcefalse",
            "text": "",
            "title": ".perform_content_negotiation(self, request, force=False)"
        },
        {
            "location": "/api-guide/views_zh/#dispatch-methods",
            "text": "\u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u88ab\u89c6\u56fe\u7684 .dispatch() \u65b9\u6cd5\u76f4\u63a5\u8c03\u7528\u3002\u5b83\u4eec\u5728\u8c03\u7528 .get ,  .post() ,  put() ,  patch() \u548c delete() \u4e4b\u7c7b\u7684\u8bf7\u6c42\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u6216\u8005\u4e4b\u540e\u6267\u884c\u4efb\u4f55\u9700\u8981\u6267\u884c\u7684\u64cd\u4f5c\u3002",
            "title": "Dispatch methods"
        },
        {
            "location": "/api-guide/views_zh/#initialself-request-42args-kwargs",
            "text": "\u5728\u5904\u7406\u65b9\u6cd5\u8c03\u7528\u4e4b\u524d\u8fdb\u884c\u4efb\u4f55\u9700\u8981\u7684\u52a8\u4f5c\u3002\n\u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u6267\u884c\u6743\u9650\u8ba4\u8bc1\u548c\u9650\u5236\uff0c\u5e76\u4e14\u6267\u884c\u5185\u5bb9\u534f\u5546\u3002\n\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5\u3002",
            "title": ".initial(self, request, *args, **kwargs)"
        },
        {
            "location": "/api-guide/views_zh/#handle_exceptionself-exc",
            "text": "\u4efb\u4f55\u88ab\u5904\u7406\u8bf7\u6c42\u7684\u65b9\u6cd5\u629b\u51fa\u7684\u5f02\u5e38\u90fd\u4f1a\u88ab\u4f20\u9012\u7ed9\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u65e2\u4e0d\u8fd4\u56de Response \u7684\u5b9e\u4f8b\uff0c\u4e5f\u4e0d\u91cd\u65b0\u629b\u51fa\u5f02\u5e38\u3002  \u9ed8\u8ba4\u7684\u5b9e\u73b0\u4f1a\u5904\u7406 rest_framework.expceptions.APIException \u7684\u4efb\u4f55\u5b50\u7c7b\u5f02\u5e38\uff0c\u4ee5\u53caDjango\u7684 Http404 \u548c PermissionDenied \u5f02\u5e38\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u9002\u5f53\u7684\u9519\u8bef\u54cd\u5e94\u3002  \u5982\u679c\u4f60\u9700\u8981\u5728\u81ea\u5df1\u7684API\u4e2d\u81ea\u5b9a\u4e49\u8fd4\u56de\u7684\u9519\u8bef\u54cd\u5e94\uff0c\u4f60\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002",
            "title": ".handle_exception(self, exc)"
        },
        {
            "location": "/api-guide/views_zh/#initialize_requestself-request-42args-kwargs",
            "text": "\u786e\u4fdd\u4f20\u9012\u7ed9\u8bf7\u6c42\u5904\u7406\u65b9\u6cd5\u7684\u8bf7\u6c42\u5bf9\u8c61\u662f Request \u7684\u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f\u901a\u5e38\u7684Django HttpResquest \u7684\u5b9e\u4f8b\u3002  \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002",
            "title": ".initialize_request(self, request, *args, **kwargs)"
        },
        {
            "location": "/api-guide/views_zh/#finalize_responseself-request-response-42args-kwargs",
            "text": "\u786e\u4fdd\u4efb\u4f55\u4ece\u5904\u7406\u8bf7\u6c42\u7684\u65b9\u6cd5\u8fd4\u56de\u7684 Response \u5bf9\u8c61\u88ab\u6e32\u67d3\u5230\u7531\u5185\u5bb9\u534f\u5546\u51b3\u5b9a\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002  \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002",
            "title": ".finalize_response(self, request, response, *args, **kwargs)"
        },
        {
            "location": "/api-guide/views_zh/#_2",
            "text": "\u8bf4[\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe]\u4e0d\u7ba1\u4ec0\u4e48\u65f6\u5019\u90fd\u662f\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u90a3\u662f\u9519\u8bef\u7684\u3002  \u2014  Nick Coghlan   \u5728REST framework\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u7b80\u5355\u7684\u88c5\u9970\u5668\uff0c\u7528\u6765\u5305\u88c5\u4f60\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u4ee5\u786e\u4fdd\u89c6\u56fe\u51fd\u6570\u4f1a\u6536\u5230 Request \uff08\u800c\u4e0d\u662fDjango\u4e00\u822c\u7684 HttpRequest )\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd4\u56de Response \uff08\u800c\u4e0d\u662fDjango\u7684 HttpResponse \uff09\u5bf9\u8c61\uff0c\u540c\u65f6\u5141\u8bb8\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u8bf7\u6c42\u7684\u5904\u7406\u65b9\u5f0f\u3002",
            "title": "\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe"
        },
        {
            "location": "/api-guide/views_zh/#api_view",
            "text": "\u51fd\u6570\u7b7e\u540d:   @api_view(http_method_names=['GET'], exclude_from_schema=False)  \u6b64\u529f\u80fd\u7684\u6838\u5fc3\u662f api_view \u88c5\u9970\u5668\uff0c\u5b83\u63a5\u53d7\u89c6\u56fe\u5e94\u8be5\u54cd\u5e94\u7684HTTP\u65b9\u6cd5\u5217\u8868\u7684\u53c2\u6570\u3002\n\u6bd4\u5982\uff0c\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u5199\u4e00\u4e2a\u8fd4\u56de\u4e00\u4e9b\u6570\u636e\u7684\u975e\u5e38\u7b80\u5355\u7684\u89c6\u56fe\u3002  from rest_framework.decorators import api_view\n\n@api_view()\ndef hello_world(request):\n    return Response({\"message\": \"Hello, world!\"})  \u8fd9\u4e2a\u89c6\u56fe\u4f1a\u4f7f\u7528 settings \u4e2d\u6307\u5b9a\u7684\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\uff0c\u89e3\u6790\u5668\uff0c\u8ba4\u8bc1\u7c7b\u7b49\u7b49\u3002  \u9ed8\u8ba4\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709 GET \u8bf7\u6c42\u4f1a\u88ab\u63a5\u53d7\u3002\u5176\u4ed6\u7684\u8bf7\u6c42\u65b9\u6cd5\u4f1a\u5f97\u5230\u4e00\u4e2a\"405 Method Not Allowed\"\u54cd\u5e94\u3002\u53ef\u4ee5\u50cf\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e00\u6837\u6539\u53d8\u9ed8\u8ba4\u884c\u4e3a\uff1a  @api_view(['GET', 'POST'])\ndef hello_world(request):\n    if request.method == 'POST':\n        return Response({\"message\": \"Got some data!\", \"data\": request.data})\n    return Response({\"message\": \"Hello, world!\"})  \u4f60\u4e5f\u53ef\u4ee5\u7528 exclude_from_schema \u53c2\u6570\u6807\u8bb0API\u89c6\u56fe\u6765\u5ffd\u7565\u4efb\u4f55 \u81ea\u52a8\u751f\u6210\u7684\u89c6\u56fe ,  @api_view(['GET'], exclude_from_schema=True)\ndef api_docs(request):\n    ...",
            "title": "@api_view()"
        },
        {
            "location": "/api-guide/views_zh/#api_1",
            "text": "REST framework\u63d0\u4f9b\u4e86\u4e00\u7ec4\u53ef\u4ee5\u52a0\u5230\u89c6\u56fe\u4e0a\u7684\u88c5\u9970\u5668\u6765\u91cd\u5199\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u8fd9\u4e9b\u88c5\u9970\u5668\u5fc5\u987b\u653e\u5728 @api_view \u7684 \u540e (\u4e0b)\u9762\u3002\u6bd4\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528[\u9650\u5236\u5668][throtting]\u786e\u4fdd\u7279\u5b9a\u7528\u6237\u6bcf\u5929\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\u7684\u89c6\u56fe\uff0c\u53ef\u4ee5\u7528 @throttle_classes \u88c5\u9970\u5668\u5e76\u7ed9\u5b83\u4f20\u9012\u4e00\u4e2a\u9650\u5236\u5668\u7c7b\u7684\u5217\u8868\u3002  from rest_framework.decorators import api_view, throttle_classes\nfrom rest_framework.throttling import UserRateThrottle\n\nclass OncePerDayUserThrottle(UserRateThrottle):\n        rate = '1/day'\n\n@api_view(['GET'])\n@throttle_classes([OncePerDayUserThrottle])\ndef view(request):\n    return Response({\"message\": \"Hello for today! See you tomorrow!\"})  \u8fd9\u4e9b\u88c5\u9970\u5668\u548c\u4e0a\u6587\u4e2d\u7684 APIView \u7684\u5b50\u7c7b\u4e2d\u8bbe\u7f6e\u7684\u5c5e\u6027\u76f8\u5bf9\u5e94\u3002  \u53ef\u7528\u7684\u88c5\u9970\u5668\u6709\uff1a   @renderer_classes(...)  @parser_classes(...)  @authentication_classes(...)  @throttle_classes(...)  @permission_classes(...)   \u8fd9\u4e9b\u88c5\u9970\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u7c7b\u7684\u5217\u8868\u6216\u5143\u7ec4\u3002",
            "title": "API \u7b56\u7565\u88c5\u9970\u5668"
        },
        {
            "location": "/api-guide/generic-views_zh/",
            "text": "Generic views\n\n\n\n\nDjango\u7684\u6807\u51c6 views...\u662f\u4e3a\u66f4\u5feb\u6377\u5730\u4f7f\u7528\u5e38\u89c1\u7684\u4f7f\u7528\u6a21\u5f0f\u800c\u5f00\u53d1\u7684... \u5b83\u4eec\u91c7\u7528\u5728view\u5f00\u53d1\u4e2d\u627e\u5230\u7684\u67d0\u4e9b\u5e38\u89c1\u8bed\u6cd5\u548c\u6a21\u5f0f\uff0c\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u62bd\u8c61\uff0c\u4ee5\u4fbf\u4f60\u53ef\u4ee5\u5feb\u901f\u5199\u51fa\u6570\u636e\u7684\u5e38\u89c1\u89c6\u56fe\uff0c\u800c\u65e0\u9700\u91cd\u590d\u81ea\u5df1\u3002\n\n\n\n\u2014 \nDjango \u6587\u6863\n\n\n\n\n\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7684\u4e3b\u8981\u4f18\u70b9\u4e4b\u4e00\u662f\u5b83\u4eec\u5141\u8bb8\u4f60\u7ec4\u5408\u4e00\u4e9b\u53ef\u91cd\u7528\u7684\u884c\u4e3a\u3002  REST framework\u901a\u8fc7\u63d0\u4f9b\u8bb8\u591a\u9884\u5148\u6784\u5efa\u7684\u89c6\u56fe\u6765\u63d0\u4f9b\u5e38\u7528\u7684\u6a21\u5f0f\u6765\u5229\u7528\u8fd9\u4e00\u4f18\u70b9\u3002\n\n\nREST framework \u63d0\u4f9b\u7684\u901a\u7528\u89c6\u56fe\u5141\u8bb8\u60a8\u5feb\u901f\u6784\u5efa\u4e0e\u6570\u636e\u5e93\u6a21\u578b\u5bc6\u5207\u6620\u5c04\u7684API\u89c6\u56fe\u3002\n\n\n\u5982\u679c\u901a\u7528\u89c6\u56fe\u4e0d\u9002\u5408\u4f60\u7684API\u7684\u9700\u6c42\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5e38\u89c4 \nAPIView\n \u7c7b\uff0c\u6216\u91cd\u7528\u901a\u7528\u89c6\u56fe\u4f7f\u7528\u7684mixins\u548c\u57fa\u7c7b\u6765\u7ec4\u6210\u4f60\u81ea\u5df1\u7684\u4e00\u7ec4\u53ef\u91cd\u7528\u7684\u901a\u7528\u89c6\u56fe\u3002\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\n\n\n\u901a\u5e38\u5728\u4f7f\u7528\u901a\u7528\u89c6\u56fe\u65f6\uff0c\u4f60\u5c06\u8986\u76d6\u89c6\u56fe\uff0c\u5e76\u8bbe\u7f6e\u591a\u4e2a\u7c7b\u5c5e\u6027\u3002\n\n\nfrom django.contrib.auth.models import User\nfrom myapp.serializers import UserSerializer\nfrom rest_framework import generics\nfrom rest_framework.permissions import IsAdminUser\n\nclass UserList(generics.ListCreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = (IsAdminUser, )\n\n\n\n\n\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff0c\u60a8\u53ef\u80fd\u8fd8\u60f3\u8986\u76d6\u89c6\u56fe\u7c7b\u4e0a\u7684\u5404\u79cd\u65b9\u6cd5\u3002\u6bd4\u5982\uff1a\n\n\nclass UserList(generics.ListCreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = (IsAdminUser, )\n\n    def list(self, request):\n        # Note the use of `get_queryset()` instead of `self.queryset`\n        queryset = self.get_queryset()\n        serializer = UserSerializer(queryset, many=True)\n        return Response(serializer.data)\n\n\n\n\u5bf9\u4e8e\u975e\u5e38\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u4f60\u53ef\u80fd\u60f3\u4f7f\u7528 \n.as_view()\n \u65b9\u6cd5\u4f20\u9012\u4efb\u4f55\u7c7b\u5c5e\u6027\u3002 \u6bd4\u5982\uff1a\u4f60\u7684URLconf\u53ef\u80fd\u5305\u62ec\u7c7b\u4f3c\u4ee5\u4e0b\u6761\u76ee\uff1a\n\n\nurl(r'^/users/', ListCreateAPIView.as_view\\(queryset=User.objects.all(), serializer_class=UserSerializer), name='user-list')\n\n\n\n\n\n\nAPI Reference\n\n\nGenericAPIView\n\n\n\u6b64\u7c7b\u6269\u5c55\u4e86REST\u6846\u67b6\u7684 \nAPIView\n \u7c7b\uff0c\u4e3a\u6807\u51c6list\u548cdetail view \u6dfb\u52a0\u4e86\u901a\u5e38\u9700\u8981\u7684\u884c\u4e3a\u3002\n\n\n\u63d0\u4f9b\u7684\u6bcf\u4e2a\u5177\u4f53\u901a\u7528\u89c6\u56fe\u662f\u901a\u8fc7\u5c06 \nGenericAPIView\n \u4e0e\u4e00\u4e2a\u6216\u591a\u4e2amixin\u7c7b\u7ec4\u5408\u6765\u6784\u5efa\u7684\u3002\n\n\nAttributes\n\n\n\u57fa\u672c\u8bbe\u7f6e\n:\n\n\n\u4ee5\u4e0b\u5c5e\u6027\u63a7\u5236\u7740\u57fa\u672c\u89c6\u56fe\u7684\u884c\u4e3a\u3002\n\n\n\n\nqueryset\n - \u7528\u4e8e\u4ece\u89c6\u56fe\u8fd4\u56de\u5bf9\u8c61\u7684\u67e5\u8be2\u7ed3\u679c\u96c6\u3002\u901a\u5e38\uff0c\u4f60\u5fc5\u987b\u8bbe\u7f6e\u6b64\u5c5e\u6027\u6216\u8005\u91cd\u5199 \nget_queryset()\n \u65b9\u6cd5\u3002\u5982\u679c\u4f60\u91cd\u5199\u4e86\u4e00\u4e2a\u89c6\u56fe\u7684\u65b9\u6cd5\uff0c\u91cd\u8981\u7684\u662f\u4f60\u5e94\u8be5\u8c03\u7528 \nget_queryset()\n \u65b9\u6cd5\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee\u8be5\u5c5e\u6027\uff0c\u56e0\u4e3a \nqueryset\n \u5c06\u88ab\u8ba1\u7b97\u4e00\u6b21\uff0c\u8fd9\u4e9b\u7ed3\u679c\u5c06\u4e3a\u540e\u7eed\u8bf7\u6c42\u7f13\u5b58\u8d77\u6765\u3002\n\n\nserializer_class\n - \u7528\u4e8e\u9a8c\u8bc1\u548c\u53cd\u5e8f\u5217\u5316\u8f93\u5165\u4ee5\u53ca\u7528\u4e8e\u5e8f\u5217\u5316\u8f93\u51fa\u7684Serializer\u7c7b\u3002 \u901a\u5e38\uff0c\u4f60\u5fc5\u987b\u8bbe\u7f6e\u6b64\u5c5e\u6027\u6216\u8005\u91cd\u5199\nget_serializer_class()\n \u65b9\u6cd5\u3002\n\n\nlookup_field\n - \u7528\u4e8e\u6267\u884c\u5404\u4e2amodel\u5b9e\u4f8b\u7684\u5bf9\u8c61\u67e5\u627e\u7684model\u5b57\u6bb5\u3002\u9ed8\u8ba4\u4e3a \n'pk'\n\u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u4f7f\u7528\u8d85\u94fe\u63a5API\u65f6\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u503c\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5728API\u89c6\u56fe\n\u548c\n\u5e8f\u5217\u5316\u7c7b\n\u90fd\n\u8bbe\u7f6e\u67e5\u627e\u5b57\u6bb5\u3002\n\n\nlookup_url_kwarg\n - \u5e94\u7528\u4e8e\u5bf9\u8c61\u67e5\u627e\u7684URL\u5173\u952e\u5b57\u53c2\u6570\u3002\u5b83\u7684 URL conf \u5e94\u8be5\u5305\u62ec\u4e00\u4e2a\u4e0e\u8fd9\u4e2a\u503c\u76f8\u5bf9\u5e94\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\u5982\u679c\u53d6\u6d88\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e0e \nlookup_field\n\u76f8\u540c\u7684\u503c\u3002\n\n\n\n\nPagination\n:\n\n\n\u4ee5\u4e0b\u5c5e\u6027\u7528\u4e8e\u5728\u4e0e\u5217\u8868\u89c6\u56fe\u4e00\u8d77\u4f7f\u7528\u65f6\u63a7\u5236\u5206\u9875\u3002\n\n\n\n\npagination_class\n - \u5f53\u5206\u9875\u5217\u51fa\u7ed3\u679c\u65f6\u5e94\u4f7f\u7528\u7684\u5206\u9875\u7c7b\u3002\u9ed8\u8ba4\u503c\u4e0e \nDEFAULT_PAGINATION_CLASS\n \u8bbe\u7f6e\u7684\u503c\u76f8\u540c\uff0c\u5373 \n'rest_framework.pagination.PageNumberPagination'\n\u3002\n\n\n\n\nFiltering\n:\n\n\n\n\nfilter_backends\n - \u7528\u4e8e\u8fc7\u6ee4\u67e5\u8be2\u96c6\u7684\u8fc7\u6ee4\u5668\u540e\u7aef\u7c7b\u7684\u5217\u8868\u3002\u9ed8\u8ba4\u503c\u4e0e\nDEFAULT_FILTER_BACKENDS\n \u8bbe\u7f6e\u7684\u503c\u76f8\u540c\u3002\n\n\n\n\nMethods\n\n\nBase methods\n:\n\n\nget_queryset(self)\n\n\n\u8fd4\u56de\u5217\u8868\u89c6\u56fe\u4e2d\u5b9e\u7528\u7684\u67e5\u8be2\u96c6\uff0c\u8be5\u67e5\u8be2\u96c6\u8fd8\u7528\u4f5c\u8be6\u7ec6\u89c6\u56fe\u4e2d\u7684\u67e5\u627e\u57fa\u7840\u3002\u9ed8\u8ba4\u8fd4\u56de\u7531 \nqueryset\n \u5c5e\u6027\u6307\u5b9a\u7684\u67e5\u8be2\u96c6\u3002\n\u8fd9\u4e2a\u65b9\u6cd5\u5e94\u8be5\u603b\u662f\u88ab\u8c03\u7528\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee \nself.queryset\n \uff0c\u56e0\u4e3a \nself.queryset\n \u53ea\u4f1a\u88ab\u8ba1\u7b97\u4e00\u8d77\uff0c\u7136\u540e\u8fd9\u4e9b\u7ed3\u679c\u5c06\u4e3a\u540e\u7eed\u7684\u8bf7\u6c42\u7f13\u5b58\u8d77\u6765\u3002\n\u8be5\u65b9\u6cd5\u53ef\u80fd\u4f1a\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u52a8\u6001\u884c\u4e3a\uff0c\u6bd4\u5982\u8fd4\u56de\u57fa\u4e8e\u53d1\u51fa\u8bf7\u6c42\u7684\u7528\u6237\u7684\u7ed3\u679c\u96c6\u3002\n\n\n\u4f8b\u5982:\n\n\ndef get_queryset(self):\n    user = self.request.user\n    return user.accounts.all()\n\n\n\n\nget_object(self)\n\n\n\u8fd4\u56de\u5e94\u7528\u4e8e\u8be6\u7ec6\u89c6\u56fe\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002\u9ed8\u8ba4\u4f7f\u7528 \nlookup_field\n \u53c2\u6570\u8fc7\u6ee4\u57fa\u672c\u7684\u67e5\u8be2\u96c6\u3002\n\n\n\u8be5\u65b9\u6cd5\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u66f4\u590d\u6742\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u57fa\u4e8e\u591a\u4e2a URL \u53c2\u6570\u7684\u5bf9\u8c61\u67e5\u627e\u3002\n\n\n\u4f8b\u5982:\n\n\ndef get_object(self):\n    queryset = self.get_queryset()\n    filter = {}\n    for field in self.multiple_lookup_fields:\n        filter[field] = self.kwargs[field]\n\n    obj = get_object_or_404(queryset, **filter)\n    self.check_object_permissions(self.request, obj)\n    return obj\n\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u7684API\u4e0d\u5305\u542b\u4efb\u4f55\u5bf9\u8c61\u7ea7\u7684\u6743\u9650\u63a7\u5236\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e0d\u6267\u884c\nself.check_object_permissions\n\uff0c\u7b80\u5355\u7684\u8fd4\u56de \nget_object_or_404\n \u67e5\u627e\u7684\u5bf9\u8c61\u5373\u53ef\u3002\n\n\nfilter_queryset(self, queryset)\n\n\n\u7ed9\u5b9a\u4e00\u4e2aqueryset\uff0c\u4f7f\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684queryset\u3002\n\n\n\u4f8b\u5982:\n\n\ndef filter_queryset(self, queryset):\n    filter_backends = (CategoryFilter, )\n\n    if 'geo_route' in self.request.query_params:\n        filter_backends = (GeoRouteFilter, CategoryFilter)\n    elif 'geo_point' in self.request.query_params:\n        filter_backends = (GeoPointFilter, CategoryFilter)\n\n    for backend in list(filter_backends):\n        queryset = backend().filter_queryset(self.request, queryset, view=self)\n\n    return queryset\n\n\n\n\nget_serializer_class(self)\n\n\n\u8fd4\u56de\u5e94\u7528\u4e8e\u5e8f\u5217\u5316\u7684\u7c7b\u3002\u9ed8\u8ba4\u4e3a\u8fd4\u56de \nserializer_class\n \u5c5e\u6027\u7684\u503c\u3002\n\n\n\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u52a8\u6001\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u5bf9\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u64cd\u4f5c\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\uff0c\u6216\u8005\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u7528\u6237\u63d0\u4f9b\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\u3002\n\n\n\u4f8b\u5982:\n\n\ndef get_serializer_class(self\\):\n    if self.request.user.is_staff:\n        return FullAccountSerializer\n    return BasicAccountSerializer\n\n\n\n\nSave and deletion hooks\n:\n\n\n\u4ee5\u4e0b\u65b9\u6cd5\u7531mixin\u7c7b\u63d0\u4f9b\uff0c\u5e76\u63d0\u4f9b\u5bf9\u8c61\u4fdd\u5b58\u6216\u5220\u9664\u884c\u4e3a\u7684\u7b80\u5355\u91cd\u5199\u3002\n\n\n\n\nperform_create(self, serializer)\n - \u5728\u4fdd\u5b58\u65b0\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531 \nCreateModelMixin\n \u8c03\u7528\u3002\n\n\nperform_update(self, serializer)\n - \u5728\u4fdd\u5b58\u73b0\u6709\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531 \nUpdateModelMixin\n \u8c03\u7528\u3002\n\n\nperform_destroy(self, instance)\n - \u5728\u5220\u9664\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531 \nDestroyModelMixin\n \u8c03\u7528\u3002\n\n\n\n\n\u8fd9\u4e9b\u94a9\u5b50\u5bf9\u4e8e\u8bbe\u7f6e\u8bf7\u6c42\u4e2d\u9690\u542b\u7684\u4f46\u4e0d\u662f\u8bf7\u6c42\u6570\u636e\u7684\u4e00\u90e8\u5206\u7684\u5c5e\u6027\u7279\u522b\u6709\u7528\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u7528\u6237\u6216\u57fa\u4e8eURL\u5173\u952e\u5b57\u53c2\u6570\u5728\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u5c5e\u6027\u3002\n\n\ndef perform_create(self, serializer):\n    serializer.save(user=self.request.user)\n\n\n\n\n\u8fd9\u4e9b\u53ef\u91cd\u5199\u7684\u5173\u952e\u70b9\u5bf9\u4e8e\u6dfb\u52a0\u5728\u4fdd\u5b58\u5bf9\u8c61\u4e4b\u524d\u6216\u4e4b\u540e\u53d1\u751f\u7684\u884c\u4e3a\uff08\u4f8b\u5982\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u786e\u8ba4\u6216\u8bb0\u5f55\u66f4\u65b0\u65e5\u5fd7\uff09\u4e5f\u7279\u522b\u6709\u7528\u3002\n\n\ndef perform_update(self, serializer):\n    instance = serializer.save()\n    send_email_confirmation(user=self.request.user, modified=instance)\n\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u94a9\u5b50\u901a\u8fc7\u629b\u51fa \nValidationError()\n \u6765\u63d0\u4f9b\u989d\u5916\u7684\u9a8c\u8bc1\u3002\u5f53\u4f60\u9700\u8981\u5728\u6570\u636e\u5e93\u4fdd\u5b58\u65f6\u5e94\u7528\u4e00\u4e9b\u9a8c\u8bc1\u903b\u8f91\u65f6\uff0c\u8fd9\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982:\n\n\ndef perform_create(self, serializer):\n    queryset = SignupRequest.objects.filter(user=self.request.user)\n    if queryset.exists():\n        raise ValidationError('You have already signed up')\n    serializer.save(user=self.request.user)\n\n\n\n\n\u6ce8\u610f\n: \u8fd9\u4e9b\u65b9\u6cd5\u66ff\u6362\u4e86\u65e7\u7248\u672c2.x\u4e2d\u7684 \npre_save\n, \npost_save\n, \npre_delete\n \u548c \npost_delete\n \u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u518d\u53ef\u7528\u3002\n\n\n\u5176\u4ed6\u65b9\u6cd5\n:\n\n\n\u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u91cd\u5199\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u867d\u7136\u5728\u4f60\u4f7f\u7528 \nGenericAPIView\n \u7f16\u5199\u81ea\u5b9a\u4e49\u89c6\u56fe\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u8c03\u7528\u5b83\u4eec\u3002\n\n\n\n\nget_serializer_context(self)\n - \u8fd4\u56de\u5305\u542b\u5e94\u8be5\u63d0\u4f9b\u7ed9\u5e8f\u5217\u5316\u7a0b\u5e8f\u7684\u4efb\u4f55\u989d\u5916\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u3002\u9ed8\u8ba4\u5305\u542b \n'request'\n, \n'view'\n \u548c \n'format'\n \u8fd9\u4e9bkeys\u3002.\n\n\nget_serializer(self, instance=None, data=None, many=False, partial=False)\n - \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7684\u5b9e\u4f8b\u3002\n\n\nget_paginated_response(self, data)\n - \u8fd4\u56de\u5206\u9875\u6837\u5f0f\u7684 \nResponse\n \u5bf9\u8c61\u3002\n\n\npaginate_queryset(self, queryset)\n - \u5982\u679c\u9700\u8981\u5206\u9875\u67e5\u8be2\uff0c\u8fd4\u56de\u9875\u9762\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u4e3a\u6b64\u89c6\u56fe\u914d\u7f6e\u5206\u9875\uff0c\u5219\u8fd4\u56de \nNone\n\u3002\n\n\nfilter_queryset(self, queryset)\n - \u7ed9\u5b9a\u67e5\u8be2\u96c6\uff0c\u4f7f\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u67e5\u8be2\u96c6\u3002\n\n\n\n\n\n\nMixins\n\n\nMixin \u7c7b\u63d0\u4f9b\u7528\u4e8e\u63d0\u4f9b\u57fa\u672c\u89c6\u56fe\u884c\u4e3a\u7684\u64cd\u4f5c\u3002\u6ce8\u610fmixin\u7c7b\u63d0\u4f9b\u52a8\u4f5c\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\uff0c\u4f8b\u5982 \n.get()\n \u548c \n.post()\n\uff0c \u8fd9\u5141\u8bb8\u66f4\u7075\u6d3b\u7684\u884c\u4e3a\u7ec4\u6210\u3002\n\n\nMixin \u7c7b\u53ef\u4ee5\u4ece \nrest_framework.mixins\n\u5bfc\u5165\u3002\n\n\nListModelMixin\n\n\n\u63d0\u4f9b\u4e00\u4e2a \n.list(request, *args, **kwargs)\n \u65b9\u6cd5\uff0c\u5b9e\u73b0\u5217\u51fa\u7ed3\u679c\u96c6\u3002\n\n\n\u5982\u679c\u67e5\u8be2\u96c6\u88ab\u586b\u5145\u4e86\u6570\u636e\uff0c\u5219\u8fd4\u56de \n200 OK\n \u54cd\u5e94\uff0c\u5c06\u67e5\u8be2\u96c6\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u76f8\u5e94\u6570\u636e\u53ef\u4ee5\u4efb\u610f\u5206\u9875\u3002\n\n\nCreateModelMixin\n\n\n\u63d0\u4f9b \n.create(request, *args, **kwargs)\n \u65b9\u6cd5\uff0c\u5b9e\u73b0\u521b\u5efa\u548c\u4fdd\u5b58\u4e00\u4e2a\u65b0\u7684model\u5b9e\u4f8b\u3002\n\n\n\u5982\u679c\u521b\u5efa\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a \n201 Created\n \u54cd\u5e94\uff0c\u5c06\u8be5\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u5982\u679c\u5e8f\u5217\u5316\u7684\u8868\u793a\u4e2d\u5305\u542b\u540d\u4e3a \nurl\n\u7684\u952e\uff0c\u5219\u54cd\u5e94\u7684 \nLocation\n \u5934\u5c06\u586b\u5145\u8be5\u503c\u3002\n\n\n\u5982\u679c\u4e3a\u521b\u5efa\u5bf9\u8c61\u63d0\u4f9b\u7684\u8bf7\u6c42\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de \n400 Bad Request\n\uff0c\u5176\u4e2d\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\u7684\u6b63\u6587\u3002\n\n\nRetrieveModelMixin\n\n\n\u63d0\u4f9b\u4e00\u4e2a \n.retrieve(request, *args, **kwargs)\n \u65b9\u6cd5\uff0c\u5b9e\u73b0\u8fd4\u56de\u54cd\u5e94\u4e2d\u73b0\u6709\u6a21\u578b\u7684\u5b9e\u4f8b\u3002\n\n\n\u5982\u679c\u53ef\u4ee5\u68c0\u7d22\u5bf9\u8c61\uff0c\u5219\u8fd4\u56de \n200 OK\n \u54cd\u5e94\uff0c\u5c06\u8be5\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u5426\u5219\u5c06\u8fd4\u56de \n404 Not Found\n\u3002\n\n\nUpdateModelMixin\n\n\n\u63d0\u4f9b \n.update(request, *args, **kwargs)\n \u65b9\u6cd5\uff0c\u5b9e\u73b0\u66f4\u65b0\u548c\u4fdd\u5b58\u73b0\u6709\u6a21\u578b\u5b9e\u4f8b\u3002\n\n\n\u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a \n.partial_update(request, *args, **kwargs)\n \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u548c \nupdate\n \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u66f4\u65b0\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\u3002\u8fd9\u5141\u8bb8\u652f\u6301 HTTP \nPATCH\n \u8bf7\u6c42\u3002\n\n\n\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u88ab\u66f4\u65b0\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a \n200 OK\n \u54cd\u5e94\uff0c\u5c06\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\n\n\n\u5982\u679c\u4e3a\u66f4\u65b0\u5bf9\u8c61\u63d0\u4f9b\u7684\u8bf7\u6c42\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a \n400 Bad Request\n \u54cd\u5e94\uff0c\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\u7684\u6b63\u6587\u3002\n\n\nDestroyModelMixin\n\n\n\u63d0\u4f9b\u4e00\u4e2a \n.destroy(request, *args, **kwargs)\n \u65b9\u6cd5\uff0c\u5b9e\u73b0\u5220\u9664\u73b0\u6709\u6a21\u578b\u5b9e\u4f8b\u3002\n\n\n\u5982\u679c\u5220\u9664\u5bf9\u8c61\uff0c\u5219\u8fd4\u56de \n204 No Content\n \u54cd\u5e94\uff0c\u5426\u5219\u8fd4\u56de \n404 Not Found\n\u3002\n\n\n\n\nConcrete View Classes\n\n\n\u4ee5\u4e0b\u7c7b\u662f\u5177\u4f53\u7684\u901a\u7528\u89c6\u56fe\u3002\u8fd9\u901a\u5e38\u662f\u4f60\u771f\u6b63\u7528\u5230\u7684\u90a3\u4e9b\uff0c\u9664\u975e\u4f60\u9700\u8981\u6df1\u5ea6\u5b9a\u5236\u7684\u884c\u4e3a\u3002\n\n\n\u8fd9\u4e9b\u89c6\u56fe\u7c7b\u53ef\u4ee5\u4ece \nrest_framework.generics\n\u5bfc\u5165\u3002\n\n\nCreateAPIView\n\n\n\u7528\u4e8e \n\u4ec5\u521b\u5efa\n \u7aef\u70b9\u3002\n\n\n\u63d0\u4f9b\u4e00\u4e2a \npost\n \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6269\u5c55: \nGenericAPIView\n, \nCreateModelMixin\n\n\nListAPIView\n\n\n\u7528\u4e8e\n \u53ea\u8bfb \n \u7aef\u70b9\u4ee5\u8868\u793a\n\u6a21\u578b\u5b9e\u4f8b\u96c6\u5408 \n\u3002\n\n\n\u63d0\u4f9b\u4e00\u4e2a \nget\n \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6269\u5c55: \nGenericAPIView\n, \nListModelMixin\n\n\nRetrieveAPIView\n\n\n\u7528\u4e8e\n\u53ea\u8bfb\n \u7aef\u70b9\u4ee5\u8868\u793a\n\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\n\u3002\n\n\n\u63d0\u4f9b\u4e00\u4e2a \nget\n \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6269\u5c55: \nGenericAPIView\n, \nRetrieveModelMixin\n\n\nDestroyAPIView\n\n\n\u7528\u4e8e\n\u53ea\u5220\u9664\n\u7aef\u70b9\u4ee5\u8868\u793a\n\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\n\u3002\n\n\n\u63d0\u4f9b\u4e00\u4e2a \ndelete\n \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6269\u5c55: \nGenericAPIView\n, \nDestroyModelMixin\n\n\nUpdateAPIView\n\n\n\u7528\u4e8e\n\u53ea\u66f4\u65b0\n\u7aef\u70b9\u4ee5\u8868\u793a\n\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\n\u3002\n\n\n\u63d0\u4f9b\u4e00\u4e2a \nput\n\u548c\npatch\n\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6269\u5c55: \nGenericAPIView\n, \nUpdateModelMixin\n\n\nListCreateAPIView\n\n\n\u7528\u4e8e\n\u8bfb\u5199\u7aef\u70b9\n\u4ee5\u8868\u793a\n\u6a21\u578b\u5b9e\u4f8b\u7684\u96c6\u5408\n\u3002\n\n\n\u63d0\u4f9b\u4e00\u4e2a \nget\n \u548c \npost\n \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6269\u5c55: \nGenericAPIView\n, \nListModelMixin\n, \nCreateModelMixin\n\n\nRetrieveUpdateAPIView\n\n\n\u7528\u4e8e \n\u8bfb\u53d6\u6216\u66f4\u65b0\n \u7aef\u70b9\u4ee5\u8868\u793a \n\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\n\u3002\n\n\n\u63d0\u4f9b \nget\n, \nput\n \u548c \npatch\n \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6269\u5c55: \nGenericAPIView\n, \nRetrieveModelMixin\n, \nUpdateModelMixin\n\n\nRetrieveDestroyAPIView\n\n\n\u7528\u4e8e \n\u8bfb\u53d6\u6216\u5220\u9664\n \u7aef\u70b9\u4ee5\u8868\u793a \n\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\n\u3002\n\n\n\u63d0\u4f9b \nget\n \u548c \ndelete\n \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6269\u5c55: \nGenericAPIView\n, \nRetrieveModelMixin\n, \nDestroyModelMixin\n\n\nRetrieveUpdateDestroyAPIView\n\n\n\u7528\u4e8e \n\u8bfb\u5199\u5220\u9664\n \u7aef\u70b9\u4ee5\u8868\u793a \n\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\n\u3002\n\n\n\u63d0\u4f9b \nget\n, \nput\n, \npatch\n \u548c \ndelete\n\u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u6269\u5c55: \nGenericAPIView\n, \nRetrieveModelMixin\n, \nUpdateModelMixin\n, \nDestroyModelMixin\n\n\n\n\n\u81ea\u5b9a\u4e49\u901a\u7528\u89c6\u56fe\n\n\n\u901a\u5e38\u4f60\u4f1a\u60f3\u4f7f\u7528\u73b0\u6709\u7684\u901a\u7528\u89c6\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u4e00\u4e9b\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u591a\u4e2a\u5730\u65b9\u91cd\u590d\u4f7f\u7528\u4e86\u4e00\u4e9b\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u4f60\u53ef\u80fd\u60f3\u5c06\u884c\u4e3a\u91cd\u6784\u4e3a\u4e00\u4e2a\u516c\u5171\u7c7b\uff0c\u7136\u540e\u53ea\u9700\u6839\u636e\u9700\u8981\u5e94\u7528\u5230\u4efb\u4f55\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u3002\n\n\n\u521b\u5efa\u81ea\u5b9a\u4e49 mixins\n\n\n\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981\u57fa\u4e8e URL conf\u4e2d\u7684\u591a\u4e2a\u5b57\u6bb5\u67e5\u627e\u5bf9\u8c61\uff0c\u5219\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684 mixin\u7c7b\uff1a\n\n\nclass MultipleFieldLookupMixin(object):\n    \"\"\"\n    Apply this mixin to any view or viewset to get multiple field filtering\n    based on a `lookup_fields` attribute, instead of the default single field filtering.\n    \"\"\"\n    def get_object(self):\n        queryset = self.get_queryset()             # \u83b7\u53d6\u57fa\u672c\u7684queryset\n        queryset = self.filter_queryset(queryset)  # \u5e94\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\n        filter = {}\n        for field in self.lookup_fields:\n            if self.kwargs[field]: # Ignore empty fields.\n                filter[field] = self.kwargs[field]\n        return get_object_or_404(queryset, **filter)  # \u67e5\u627e\u5bf9\u8c61\n\n\n\n\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u5e94\u7528\u81ea\u5b9a\u4e49\u884c\u4e3a\u65f6\u968f\u65f6\u5c06\u6b64mixin\u7c7b\u5e94\u7528\u4e8e\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u3002\n\n\nclass RetrieveUserView(MultipleFieldLookupMixin, generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    lookup_fields = ('account', 'username')\n\n\n\n\n\u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u90a3\u4e48\u4f7f\u7528\u81ea\u5b9a\u4e49mixin\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n\n\u521b\u5efa\u81ea\u5b9a\u4e49\u57fa\u7c7b\n\n\n\u5982\u679c\u4f60\u5728\u591a\u4e2a\u89c6\u56fe\u4e2d\u4f7f\u7528mixin\uff0c\u4f60\u53ef\u4ee5\u8fdb\u4e00\u6b65\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u4e00\u7ec4\u57fa\u672c\u89c6\u56fe\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u4f7f\u7528\u3002\u4e3e\u4e2a\u4f8b\u5b50:\n\n\nclass BaseRetrieveView(MultipleFieldLookupMixin,\n                       generics.RetrieveAPIView):\n    pass\n\nclass BaseRetrieveUpdateDestroyView(MultipleFieldLookupMixin,\n                                    generics.RetrieveUpdateDestroyAPIView):\n    pass\n\n\n\n\n\u5982\u679c\u4f60\u7684\u81ea\u5b9a\u4e49\u884c\u4e3a\u59cb\u7ec8\u9700\u8981\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u7684\u5927\u91cf\u89c6\u56fe\u4e2d\u91cd\u590d\uff0c\u5219\u4f7f\u7528\u81ea\u5b9a\u4e49\u57fa\u7c7b\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n\n\n\nPUT as create\n\n\n\u57283.0\u7248\u672c\u4e4b\u524d\uff0cREST framework mixins \u5c06 \nPUT\n \u89c6\u4e3a\u66f4\u65b0\u6216\u521b\u5efa\u64cd\u4f5c\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5bf9\u8c61\u662f\u5426\u5df2\u5b58\u5728\u3002\n\n\n\u5141\u8bb8 \nPUT\n \u4f5c\u4e3a\u521b\u5efa\u64cd\u4f5c\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u7136\u4f1a\u66b4\u9732\u5173\u4e8e\u5bf9\u8c61\u7684\u5b58\u5728\u4e0e\u4e0d\u5b58\u5728\u7684\u4fe1\u606f\u3002\u540c\u6837\u4e0d\u660e\u663e\u7684\u662f\uff0c\u900f\u660e\u5730\u5141\u8bb8\u91cd\u65b0\u521b\u5efa\u4ee5\u524d\u5220\u9664\u7684\u5b9e\u4f8b\u662f\u6bd4\u7b80\u5355\u5730\u8fd4\u56de\n404\n\u54cd\u5e94\u66f4\u597d\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002\n\n\n\u4e24\u79cd\u5f62\u5f0f \"\nPUT\n as 404\" \u548c \"\nPUT\n as create\" \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u6709\u6548\uff0c\u4f46\u4ece3.0\u7248\u672c\u8d77\uff0c\u6211\u4eec\u73b0\u5728\u4f7f\u7528 404\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff0c\u56e0\u4e3a\u5b83\u66f4\u7b80\u5355\u548c\u66f4\u660e\u663e\u3002\n\n\n\u5982\u679c\u4f60\u9700\u8981\u901a\u7528\u7684 PUT-as-create\u884c\u4e3a\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5305\u62ec\u50cf \n\u8fd9\u4e2a\nAllowPUTAsCreateMixin\n \u7c7b\n \u4e00\u6837\u7684mixin\u5728\u4f60\u7684\u89c6\u56fe\u91cc\u3002\n\n\n\n\n\u7b2c\u4e09\u65b9\u5305\n\n\n\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u63d0\u4f9b\u4e86\u5176\u4ed6\u901a\u7528\u89c6\u56fe\u5b9e\u73b0\u3002\n\n\nDjango REST Framework bulk\n\n\nThe \ndjango-rest-framework-bulk package\n \u5305\u5b9e\u73b0\u901a\u7528\u89c6\u56femixins\u4ee5\u53ca\u4e00\u4e9b\u5e38\u89c1\u7684\u5177\u4f53\u901a\u7528\u89c6\u56fe\uff0c\u4ee5\u5141\u8bb8\u901a\u8fc7API\u8bf7\u6c42\u5e94\u7528\u6279\u91cf\u64cd\u4f5c\u3002\n\n\nDjango Rest Multiple Models\n\n\nDjango Rest Multiple Models\n \u63d0\u4f9b\u4e86\u901a\u8fc7\u5355\u4e2aAPI\u8bf7\u6c42\u53d1\u9001\u591a\u4e2a\u5e8f\u5217\u5316\u6a21\u578b\u548c/\u6216\u8005\u67e5\u8be2\u96c6\u7684\u901a\u7528\u89c6\u56fe\uff08\u548cmixin\uff09\u3002",
            "title": "Generic views"
        },
        {
            "location": "/api-guide/generic-views_zh/#generic-views",
            "text": "Django\u7684\u6807\u51c6 views...\u662f\u4e3a\u66f4\u5feb\u6377\u5730\u4f7f\u7528\u5e38\u89c1\u7684\u4f7f\u7528\u6a21\u5f0f\u800c\u5f00\u53d1\u7684... \u5b83\u4eec\u91c7\u7528\u5728view\u5f00\u53d1\u4e2d\u627e\u5230\u7684\u67d0\u4e9b\u5e38\u89c1\u8bed\u6cd5\u548c\u6a21\u5f0f\uff0c\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u62bd\u8c61\uff0c\u4ee5\u4fbf\u4f60\u53ef\u4ee5\u5feb\u901f\u5199\u51fa\u6570\u636e\u7684\u5e38\u89c1\u89c6\u56fe\uff0c\u800c\u65e0\u9700\u91cd\u590d\u81ea\u5df1\u3002  \u2014  Django \u6587\u6863   \u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7684\u4e3b\u8981\u4f18\u70b9\u4e4b\u4e00\u662f\u5b83\u4eec\u5141\u8bb8\u4f60\u7ec4\u5408\u4e00\u4e9b\u53ef\u91cd\u7528\u7684\u884c\u4e3a\u3002  REST framework\u901a\u8fc7\u63d0\u4f9b\u8bb8\u591a\u9884\u5148\u6784\u5efa\u7684\u89c6\u56fe\u6765\u63d0\u4f9b\u5e38\u7528\u7684\u6a21\u5f0f\u6765\u5229\u7528\u8fd9\u4e00\u4f18\u70b9\u3002  REST framework \u63d0\u4f9b\u7684\u901a\u7528\u89c6\u56fe\u5141\u8bb8\u60a8\u5feb\u901f\u6784\u5efa\u4e0e\u6570\u636e\u5e93\u6a21\u578b\u5bc6\u5207\u6620\u5c04\u7684API\u89c6\u56fe\u3002  \u5982\u679c\u901a\u7528\u89c6\u56fe\u4e0d\u9002\u5408\u4f60\u7684API\u7684\u9700\u6c42\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5e38\u89c4  APIView  \u7c7b\uff0c\u6216\u91cd\u7528\u901a\u7528\u89c6\u56fe\u4f7f\u7528\u7684mixins\u548c\u57fa\u7c7b\u6765\u7ec4\u6210\u4f60\u81ea\u5df1\u7684\u4e00\u7ec4\u53ef\u91cd\u7528\u7684\u901a\u7528\u89c6\u56fe\u3002",
            "title": "Generic views"
        },
        {
            "location": "/api-guide/generic-views_zh/#_1",
            "text": "\u901a\u5e38\u5728\u4f7f\u7528\u901a\u7528\u89c6\u56fe\u65f6\uff0c\u4f60\u5c06\u8986\u76d6\u89c6\u56fe\uff0c\u5e76\u8bbe\u7f6e\u591a\u4e2a\u7c7b\u5c5e\u6027\u3002  from django.contrib.auth.models import User\nfrom myapp.serializers import UserSerializer\nfrom rest_framework import generics\nfrom rest_framework.permissions import IsAdminUser\n\nclass UserList(generics.ListCreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = (IsAdminUser, )  \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff0c\u60a8\u53ef\u80fd\u8fd8\u60f3\u8986\u76d6\u89c6\u56fe\u7c7b\u4e0a\u7684\u5404\u79cd\u65b9\u6cd5\u3002\u6bd4\u5982\uff1a  class UserList(generics.ListCreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = (IsAdminUser, )\n\n    def list(self, request):\n        # Note the use of `get_queryset()` instead of `self.queryset`\n        queryset = self.get_queryset()\n        serializer = UserSerializer(queryset, many=True)\n        return Response(serializer.data)  \u5bf9\u4e8e\u975e\u5e38\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u4f60\u53ef\u80fd\u60f3\u4f7f\u7528  .as_view()  \u65b9\u6cd5\u4f20\u9012\u4efb\u4f55\u7c7b\u5c5e\u6027\u3002 \u6bd4\u5982\uff1a\u4f60\u7684URLconf\u53ef\u80fd\u5305\u62ec\u7c7b\u4f3c\u4ee5\u4e0b\u6761\u76ee\uff1a  url(r'^/users/', ListCreateAPIView.as_view\\(queryset=User.objects.all(), serializer_class=UserSerializer), name='user-list')",
            "title": "\u4e3e\u4e2a\u4f8b\u5b50"
        },
        {
            "location": "/api-guide/generic-views_zh/#api-reference",
            "text": "",
            "title": "API Reference"
        },
        {
            "location": "/api-guide/generic-views_zh/#genericapiview",
            "text": "\u6b64\u7c7b\u6269\u5c55\u4e86REST\u6846\u67b6\u7684  APIView  \u7c7b\uff0c\u4e3a\u6807\u51c6list\u548cdetail view \u6dfb\u52a0\u4e86\u901a\u5e38\u9700\u8981\u7684\u884c\u4e3a\u3002  \u63d0\u4f9b\u7684\u6bcf\u4e2a\u5177\u4f53\u901a\u7528\u89c6\u56fe\u662f\u901a\u8fc7\u5c06  GenericAPIView  \u4e0e\u4e00\u4e2a\u6216\u591a\u4e2amixin\u7c7b\u7ec4\u5408\u6765\u6784\u5efa\u7684\u3002",
            "title": "GenericAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#attributes",
            "text": "\u57fa\u672c\u8bbe\u7f6e :  \u4ee5\u4e0b\u5c5e\u6027\u63a7\u5236\u7740\u57fa\u672c\u89c6\u56fe\u7684\u884c\u4e3a\u3002   queryset  - \u7528\u4e8e\u4ece\u89c6\u56fe\u8fd4\u56de\u5bf9\u8c61\u7684\u67e5\u8be2\u7ed3\u679c\u96c6\u3002\u901a\u5e38\uff0c\u4f60\u5fc5\u987b\u8bbe\u7f6e\u6b64\u5c5e\u6027\u6216\u8005\u91cd\u5199  get_queryset()  \u65b9\u6cd5\u3002\u5982\u679c\u4f60\u91cd\u5199\u4e86\u4e00\u4e2a\u89c6\u56fe\u7684\u65b9\u6cd5\uff0c\u91cd\u8981\u7684\u662f\u4f60\u5e94\u8be5\u8c03\u7528  get_queryset()  \u65b9\u6cd5\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee\u8be5\u5c5e\u6027\uff0c\u56e0\u4e3a  queryset  \u5c06\u88ab\u8ba1\u7b97\u4e00\u6b21\uff0c\u8fd9\u4e9b\u7ed3\u679c\u5c06\u4e3a\u540e\u7eed\u8bf7\u6c42\u7f13\u5b58\u8d77\u6765\u3002  serializer_class  - \u7528\u4e8e\u9a8c\u8bc1\u548c\u53cd\u5e8f\u5217\u5316\u8f93\u5165\u4ee5\u53ca\u7528\u4e8e\u5e8f\u5217\u5316\u8f93\u51fa\u7684Serializer\u7c7b\u3002 \u901a\u5e38\uff0c\u4f60\u5fc5\u987b\u8bbe\u7f6e\u6b64\u5c5e\u6027\u6216\u8005\u91cd\u5199 get_serializer_class()  \u65b9\u6cd5\u3002  lookup_field  - \u7528\u4e8e\u6267\u884c\u5404\u4e2amodel\u5b9e\u4f8b\u7684\u5bf9\u8c61\u67e5\u627e\u7684model\u5b57\u6bb5\u3002\u9ed8\u8ba4\u4e3a  'pk' \u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u4f7f\u7528\u8d85\u94fe\u63a5API\u65f6\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u503c\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5728API\u89c6\u56fe \u548c \u5e8f\u5217\u5316\u7c7b \u90fd \u8bbe\u7f6e\u67e5\u627e\u5b57\u6bb5\u3002  lookup_url_kwarg  - \u5e94\u7528\u4e8e\u5bf9\u8c61\u67e5\u627e\u7684URL\u5173\u952e\u5b57\u53c2\u6570\u3002\u5b83\u7684 URL conf \u5e94\u8be5\u5305\u62ec\u4e00\u4e2a\u4e0e\u8fd9\u4e2a\u503c\u76f8\u5bf9\u5e94\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\u5982\u679c\u53d6\u6d88\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e0e  lookup_field \u76f8\u540c\u7684\u503c\u3002   Pagination :  \u4ee5\u4e0b\u5c5e\u6027\u7528\u4e8e\u5728\u4e0e\u5217\u8868\u89c6\u56fe\u4e00\u8d77\u4f7f\u7528\u65f6\u63a7\u5236\u5206\u9875\u3002   pagination_class  - \u5f53\u5206\u9875\u5217\u51fa\u7ed3\u679c\u65f6\u5e94\u4f7f\u7528\u7684\u5206\u9875\u7c7b\u3002\u9ed8\u8ba4\u503c\u4e0e  DEFAULT_PAGINATION_CLASS  \u8bbe\u7f6e\u7684\u503c\u76f8\u540c\uff0c\u5373  'rest_framework.pagination.PageNumberPagination' \u3002   Filtering :   filter_backends  - \u7528\u4e8e\u8fc7\u6ee4\u67e5\u8be2\u96c6\u7684\u8fc7\u6ee4\u5668\u540e\u7aef\u7c7b\u7684\u5217\u8868\u3002\u9ed8\u8ba4\u503c\u4e0e DEFAULT_FILTER_BACKENDS  \u8bbe\u7f6e\u7684\u503c\u76f8\u540c\u3002",
            "title": "Attributes"
        },
        {
            "location": "/api-guide/generic-views_zh/#methods",
            "text": "Base methods :",
            "title": "Methods"
        },
        {
            "location": "/api-guide/generic-views_zh/#get_querysetself",
            "text": "\u8fd4\u56de\u5217\u8868\u89c6\u56fe\u4e2d\u5b9e\u7528\u7684\u67e5\u8be2\u96c6\uff0c\u8be5\u67e5\u8be2\u96c6\u8fd8\u7528\u4f5c\u8be6\u7ec6\u89c6\u56fe\u4e2d\u7684\u67e5\u627e\u57fa\u7840\u3002\u9ed8\u8ba4\u8fd4\u56de\u7531  queryset  \u5c5e\u6027\u6307\u5b9a\u7684\u67e5\u8be2\u96c6\u3002\n\u8fd9\u4e2a\u65b9\u6cd5\u5e94\u8be5\u603b\u662f\u88ab\u8c03\u7528\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee  self.queryset  \uff0c\u56e0\u4e3a  self.queryset  \u53ea\u4f1a\u88ab\u8ba1\u7b97\u4e00\u8d77\uff0c\u7136\u540e\u8fd9\u4e9b\u7ed3\u679c\u5c06\u4e3a\u540e\u7eed\u7684\u8bf7\u6c42\u7f13\u5b58\u8d77\u6765\u3002\n\u8be5\u65b9\u6cd5\u53ef\u80fd\u4f1a\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u52a8\u6001\u884c\u4e3a\uff0c\u6bd4\u5982\u8fd4\u56de\u57fa\u4e8e\u53d1\u51fa\u8bf7\u6c42\u7684\u7528\u6237\u7684\u7ed3\u679c\u96c6\u3002  \u4f8b\u5982:  def get_queryset(self):\n    user = self.request.user\n    return user.accounts.all()",
            "title": "get_queryset(self)"
        },
        {
            "location": "/api-guide/generic-views_zh/#get_objectself",
            "text": "\u8fd4\u56de\u5e94\u7528\u4e8e\u8be6\u7ec6\u89c6\u56fe\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002\u9ed8\u8ba4\u4f7f\u7528  lookup_field  \u53c2\u6570\u8fc7\u6ee4\u57fa\u672c\u7684\u67e5\u8be2\u96c6\u3002  \u8be5\u65b9\u6cd5\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u66f4\u590d\u6742\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u57fa\u4e8e\u591a\u4e2a URL \u53c2\u6570\u7684\u5bf9\u8c61\u67e5\u627e\u3002  \u4f8b\u5982:  def get_object(self):\n    queryset = self.get_queryset()\n    filter = {}\n    for field in self.multiple_lookup_fields:\n        filter[field] = self.kwargs[field]\n\n    obj = get_object_or_404(queryset, **filter)\n    self.check_object_permissions(self.request, obj)\n    return obj  \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u7684API\u4e0d\u5305\u542b\u4efb\u4f55\u5bf9\u8c61\u7ea7\u7684\u6743\u9650\u63a7\u5236\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e0d\u6267\u884c self.check_object_permissions \uff0c\u7b80\u5355\u7684\u8fd4\u56de  get_object_or_404  \u67e5\u627e\u7684\u5bf9\u8c61\u5373\u53ef\u3002",
            "title": "get_object(self)"
        },
        {
            "location": "/api-guide/generic-views_zh/#filter_querysetself-queryset",
            "text": "\u7ed9\u5b9a\u4e00\u4e2aqueryset\uff0c\u4f7f\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684queryset\u3002  \u4f8b\u5982:  def filter_queryset(self, queryset):\n    filter_backends = (CategoryFilter, )\n\n    if 'geo_route' in self.request.query_params:\n        filter_backends = (GeoRouteFilter, CategoryFilter)\n    elif 'geo_point' in self.request.query_params:\n        filter_backends = (GeoPointFilter, CategoryFilter)\n\n    for backend in list(filter_backends):\n        queryset = backend().filter_queryset(self.request, queryset, view=self)\n\n    return queryset",
            "title": "filter_queryset(self, queryset)"
        },
        {
            "location": "/api-guide/generic-views_zh/#get_serializer_classself",
            "text": "\u8fd4\u56de\u5e94\u7528\u4e8e\u5e8f\u5217\u5316\u7684\u7c7b\u3002\u9ed8\u8ba4\u4e3a\u8fd4\u56de  serializer_class  \u5c5e\u6027\u7684\u503c\u3002  \u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u52a8\u6001\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u5bf9\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u64cd\u4f5c\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\uff0c\u6216\u8005\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u7528\u6237\u63d0\u4f9b\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\u3002  \u4f8b\u5982:  def get_serializer_class(self\\):\n    if self.request.user.is_staff:\n        return FullAccountSerializer\n    return BasicAccountSerializer  Save and deletion hooks :  \u4ee5\u4e0b\u65b9\u6cd5\u7531mixin\u7c7b\u63d0\u4f9b\uff0c\u5e76\u63d0\u4f9b\u5bf9\u8c61\u4fdd\u5b58\u6216\u5220\u9664\u884c\u4e3a\u7684\u7b80\u5355\u91cd\u5199\u3002   perform_create(self, serializer)  - \u5728\u4fdd\u5b58\u65b0\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531  CreateModelMixin  \u8c03\u7528\u3002  perform_update(self, serializer)  - \u5728\u4fdd\u5b58\u73b0\u6709\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531  UpdateModelMixin  \u8c03\u7528\u3002  perform_destroy(self, instance)  - \u5728\u5220\u9664\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531  DestroyModelMixin  \u8c03\u7528\u3002   \u8fd9\u4e9b\u94a9\u5b50\u5bf9\u4e8e\u8bbe\u7f6e\u8bf7\u6c42\u4e2d\u9690\u542b\u7684\u4f46\u4e0d\u662f\u8bf7\u6c42\u6570\u636e\u7684\u4e00\u90e8\u5206\u7684\u5c5e\u6027\u7279\u522b\u6709\u7528\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u7528\u6237\u6216\u57fa\u4e8eURL\u5173\u952e\u5b57\u53c2\u6570\u5728\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u5c5e\u6027\u3002  def perform_create(self, serializer):\n    serializer.save(user=self.request.user)  \u8fd9\u4e9b\u53ef\u91cd\u5199\u7684\u5173\u952e\u70b9\u5bf9\u4e8e\u6dfb\u52a0\u5728\u4fdd\u5b58\u5bf9\u8c61\u4e4b\u524d\u6216\u4e4b\u540e\u53d1\u751f\u7684\u884c\u4e3a\uff08\u4f8b\u5982\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u786e\u8ba4\u6216\u8bb0\u5f55\u66f4\u65b0\u65e5\u5fd7\uff09\u4e5f\u7279\u522b\u6709\u7528\u3002  def perform_update(self, serializer):\n    instance = serializer.save()\n    send_email_confirmation(user=self.request.user, modified=instance)  \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u94a9\u5b50\u901a\u8fc7\u629b\u51fa  ValidationError()  \u6765\u63d0\u4f9b\u989d\u5916\u7684\u9a8c\u8bc1\u3002\u5f53\u4f60\u9700\u8981\u5728\u6570\u636e\u5e93\u4fdd\u5b58\u65f6\u5e94\u7528\u4e00\u4e9b\u9a8c\u8bc1\u903b\u8f91\u65f6\uff0c\u8fd9\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982:  def perform_create(self, serializer):\n    queryset = SignupRequest.objects.filter(user=self.request.user)\n    if queryset.exists():\n        raise ValidationError('You have already signed up')\n    serializer.save(user=self.request.user)  \u6ce8\u610f : \u8fd9\u4e9b\u65b9\u6cd5\u66ff\u6362\u4e86\u65e7\u7248\u672c2.x\u4e2d\u7684  pre_save ,  post_save ,  pre_delete  \u548c  post_delete  \u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u518d\u53ef\u7528\u3002  \u5176\u4ed6\u65b9\u6cd5 :  \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u91cd\u5199\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u867d\u7136\u5728\u4f60\u4f7f\u7528  GenericAPIView  \u7f16\u5199\u81ea\u5b9a\u4e49\u89c6\u56fe\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u8c03\u7528\u5b83\u4eec\u3002   get_serializer_context(self)  - \u8fd4\u56de\u5305\u542b\u5e94\u8be5\u63d0\u4f9b\u7ed9\u5e8f\u5217\u5316\u7a0b\u5e8f\u7684\u4efb\u4f55\u989d\u5916\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u3002\u9ed8\u8ba4\u5305\u542b  'request' ,  'view'  \u548c  'format'  \u8fd9\u4e9bkeys\u3002.  get_serializer(self, instance=None, data=None, many=False, partial=False)  - \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7684\u5b9e\u4f8b\u3002  get_paginated_response(self, data)  - \u8fd4\u56de\u5206\u9875\u6837\u5f0f\u7684  Response  \u5bf9\u8c61\u3002  paginate_queryset(self, queryset)  - \u5982\u679c\u9700\u8981\u5206\u9875\u67e5\u8be2\uff0c\u8fd4\u56de\u9875\u9762\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u4e3a\u6b64\u89c6\u56fe\u914d\u7f6e\u5206\u9875\uff0c\u5219\u8fd4\u56de  None \u3002  filter_queryset(self, queryset)  - \u7ed9\u5b9a\u67e5\u8be2\u96c6\uff0c\u4f7f\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u67e5\u8be2\u96c6\u3002",
            "title": "get_serializer_class(self)"
        },
        {
            "location": "/api-guide/generic-views_zh/#mixins",
            "text": "Mixin \u7c7b\u63d0\u4f9b\u7528\u4e8e\u63d0\u4f9b\u57fa\u672c\u89c6\u56fe\u884c\u4e3a\u7684\u64cd\u4f5c\u3002\u6ce8\u610fmixin\u7c7b\u63d0\u4f9b\u52a8\u4f5c\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\uff0c\u4f8b\u5982  .get()  \u548c  .post() \uff0c \u8fd9\u5141\u8bb8\u66f4\u7075\u6d3b\u7684\u884c\u4e3a\u7ec4\u6210\u3002  Mixin \u7c7b\u53ef\u4ee5\u4ece  rest_framework.mixins \u5bfc\u5165\u3002",
            "title": "Mixins"
        },
        {
            "location": "/api-guide/generic-views_zh/#listmodelmixin",
            "text": "\u63d0\u4f9b\u4e00\u4e2a  .list(request, *args, **kwargs)  \u65b9\u6cd5\uff0c\u5b9e\u73b0\u5217\u51fa\u7ed3\u679c\u96c6\u3002  \u5982\u679c\u67e5\u8be2\u96c6\u88ab\u586b\u5145\u4e86\u6570\u636e\uff0c\u5219\u8fd4\u56de  200 OK  \u54cd\u5e94\uff0c\u5c06\u67e5\u8be2\u96c6\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u76f8\u5e94\u6570\u636e\u53ef\u4ee5\u4efb\u610f\u5206\u9875\u3002",
            "title": "ListModelMixin"
        },
        {
            "location": "/api-guide/generic-views_zh/#createmodelmixin",
            "text": "\u63d0\u4f9b  .create(request, *args, **kwargs)  \u65b9\u6cd5\uff0c\u5b9e\u73b0\u521b\u5efa\u548c\u4fdd\u5b58\u4e00\u4e2a\u65b0\u7684model\u5b9e\u4f8b\u3002  \u5982\u679c\u521b\u5efa\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a  201 Created  \u54cd\u5e94\uff0c\u5c06\u8be5\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u5982\u679c\u5e8f\u5217\u5316\u7684\u8868\u793a\u4e2d\u5305\u542b\u540d\u4e3a  url \u7684\u952e\uff0c\u5219\u54cd\u5e94\u7684  Location  \u5934\u5c06\u586b\u5145\u8be5\u503c\u3002  \u5982\u679c\u4e3a\u521b\u5efa\u5bf9\u8c61\u63d0\u4f9b\u7684\u8bf7\u6c42\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de  400 Bad Request \uff0c\u5176\u4e2d\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\u7684\u6b63\u6587\u3002",
            "title": "CreateModelMixin"
        },
        {
            "location": "/api-guide/generic-views_zh/#retrievemodelmixin",
            "text": "\u63d0\u4f9b\u4e00\u4e2a  .retrieve(request, *args, **kwargs)  \u65b9\u6cd5\uff0c\u5b9e\u73b0\u8fd4\u56de\u54cd\u5e94\u4e2d\u73b0\u6709\u6a21\u578b\u7684\u5b9e\u4f8b\u3002  \u5982\u679c\u53ef\u4ee5\u68c0\u7d22\u5bf9\u8c61\uff0c\u5219\u8fd4\u56de  200 OK  \u54cd\u5e94\uff0c\u5c06\u8be5\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u5426\u5219\u5c06\u8fd4\u56de  404 Not Found \u3002",
            "title": "RetrieveModelMixin"
        },
        {
            "location": "/api-guide/generic-views_zh/#updatemodelmixin",
            "text": "\u63d0\u4f9b  .update(request, *args, **kwargs)  \u65b9\u6cd5\uff0c\u5b9e\u73b0\u66f4\u65b0\u548c\u4fdd\u5b58\u73b0\u6709\u6a21\u578b\u5b9e\u4f8b\u3002  \u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a  .partial_update(request, *args, **kwargs)  \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u548c  update  \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u66f4\u65b0\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\u3002\u8fd9\u5141\u8bb8\u652f\u6301 HTTP  PATCH  \u8bf7\u6c42\u3002  \u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u88ab\u66f4\u65b0\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a  200 OK  \u54cd\u5e94\uff0c\u5c06\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002  \u5982\u679c\u4e3a\u66f4\u65b0\u5bf9\u8c61\u63d0\u4f9b\u7684\u8bf7\u6c42\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a  400 Bad Request  \u54cd\u5e94\uff0c\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\u7684\u6b63\u6587\u3002",
            "title": "UpdateModelMixin"
        },
        {
            "location": "/api-guide/generic-views_zh/#destroymodelmixin",
            "text": "\u63d0\u4f9b\u4e00\u4e2a  .destroy(request, *args, **kwargs)  \u65b9\u6cd5\uff0c\u5b9e\u73b0\u5220\u9664\u73b0\u6709\u6a21\u578b\u5b9e\u4f8b\u3002  \u5982\u679c\u5220\u9664\u5bf9\u8c61\uff0c\u5219\u8fd4\u56de  204 No Content  \u54cd\u5e94\uff0c\u5426\u5219\u8fd4\u56de  404 Not Found \u3002",
            "title": "DestroyModelMixin"
        },
        {
            "location": "/api-guide/generic-views_zh/#concrete-view-classes",
            "text": "\u4ee5\u4e0b\u7c7b\u662f\u5177\u4f53\u7684\u901a\u7528\u89c6\u56fe\u3002\u8fd9\u901a\u5e38\u662f\u4f60\u771f\u6b63\u7528\u5230\u7684\u90a3\u4e9b\uff0c\u9664\u975e\u4f60\u9700\u8981\u6df1\u5ea6\u5b9a\u5236\u7684\u884c\u4e3a\u3002  \u8fd9\u4e9b\u89c6\u56fe\u7c7b\u53ef\u4ee5\u4ece  rest_framework.generics \u5bfc\u5165\u3002",
            "title": "Concrete View Classes"
        },
        {
            "location": "/api-guide/generic-views_zh/#createapiview",
            "text": "\u7528\u4e8e  \u4ec5\u521b\u5efa  \u7aef\u70b9\u3002  \u63d0\u4f9b\u4e00\u4e2a  post  \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002  \u6269\u5c55:  GenericAPIView ,  CreateModelMixin",
            "title": "CreateAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#listapiview",
            "text": "\u7528\u4e8e  \u53ea\u8bfb   \u7aef\u70b9\u4ee5\u8868\u793a \u6a21\u578b\u5b9e\u4f8b\u96c6\u5408  \u3002  \u63d0\u4f9b\u4e00\u4e2a  get  \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002  \u6269\u5c55:  GenericAPIView ,  ListModelMixin",
            "title": "ListAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#retrieveapiview",
            "text": "\u7528\u4e8e \u53ea\u8bfb  \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002  \u63d0\u4f9b\u4e00\u4e2a  get  \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002  \u6269\u5c55:  GenericAPIView ,  RetrieveModelMixin",
            "title": "RetrieveAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#destroyapiview",
            "text": "\u7528\u4e8e \u53ea\u5220\u9664 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002  \u63d0\u4f9b\u4e00\u4e2a  delete  \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002  \u6269\u5c55:  GenericAPIView ,  DestroyModelMixin",
            "title": "DestroyAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#updateapiview",
            "text": "\u7528\u4e8e \u53ea\u66f4\u65b0 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002  \u63d0\u4f9b\u4e00\u4e2a  put \u548c patch \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002  \u6269\u5c55:  GenericAPIView ,  UpdateModelMixin",
            "title": "UpdateAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#listcreateapiview",
            "text": "\u7528\u4e8e \u8bfb\u5199\u7aef\u70b9 \u4ee5\u8868\u793a \u6a21\u578b\u5b9e\u4f8b\u7684\u96c6\u5408 \u3002  \u63d0\u4f9b\u4e00\u4e2a  get  \u548c  post  \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002  \u6269\u5c55:  GenericAPIView ,  ListModelMixin ,  CreateModelMixin",
            "title": "ListCreateAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#retrieveupdateapiview",
            "text": "\u7528\u4e8e  \u8bfb\u53d6\u6216\u66f4\u65b0  \u7aef\u70b9\u4ee5\u8868\u793a  \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002  \u63d0\u4f9b  get ,  put  \u548c  patch  \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002  \u6269\u5c55:  GenericAPIView ,  RetrieveModelMixin ,  UpdateModelMixin",
            "title": "RetrieveUpdateAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#retrievedestroyapiview",
            "text": "\u7528\u4e8e  \u8bfb\u53d6\u6216\u5220\u9664  \u7aef\u70b9\u4ee5\u8868\u793a  \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002  \u63d0\u4f9b  get  \u548c  delete  \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002  \u6269\u5c55:  GenericAPIView ,  RetrieveModelMixin ,  DestroyModelMixin",
            "title": "RetrieveDestroyAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#retrieveupdatedestroyapiview",
            "text": "\u7528\u4e8e  \u8bfb\u5199\u5220\u9664  \u7aef\u70b9\u4ee5\u8868\u793a  \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002  \u63d0\u4f9b  get ,  put ,  patch  \u548c  delete \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002  \u6269\u5c55:  GenericAPIView ,  RetrieveModelMixin ,  UpdateModelMixin ,  DestroyModelMixin",
            "title": "RetrieveUpdateDestroyAPIView"
        },
        {
            "location": "/api-guide/generic-views_zh/#_2",
            "text": "\u901a\u5e38\u4f60\u4f1a\u60f3\u4f7f\u7528\u73b0\u6709\u7684\u901a\u7528\u89c6\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u4e00\u4e9b\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u591a\u4e2a\u5730\u65b9\u91cd\u590d\u4f7f\u7528\u4e86\u4e00\u4e9b\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u4f60\u53ef\u80fd\u60f3\u5c06\u884c\u4e3a\u91cd\u6784\u4e3a\u4e00\u4e2a\u516c\u5171\u7c7b\uff0c\u7136\u540e\u53ea\u9700\u6839\u636e\u9700\u8981\u5e94\u7528\u5230\u4efb\u4f55\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u3002",
            "title": "\u81ea\u5b9a\u4e49\u901a\u7528\u89c6\u56fe"
        },
        {
            "location": "/api-guide/generic-views_zh/#mixins_1",
            "text": "\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981\u57fa\u4e8e URL conf\u4e2d\u7684\u591a\u4e2a\u5b57\u6bb5\u67e5\u627e\u5bf9\u8c61\uff0c\u5219\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684 mixin\u7c7b\uff1a  class MultipleFieldLookupMixin(object):\n    \"\"\"\n    Apply this mixin to any view or viewset to get multiple field filtering\n    based on a `lookup_fields` attribute, instead of the default single field filtering.\n    \"\"\"\n    def get_object(self):\n        queryset = self.get_queryset()             # \u83b7\u53d6\u57fa\u672c\u7684queryset\n        queryset = self.filter_queryset(queryset)  # \u5e94\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\n        filter = {}\n        for field in self.lookup_fields:\n            if self.kwargs[field]: # Ignore empty fields.\n                filter[field] = self.kwargs[field]\n        return get_object_or_404(queryset, **filter)  # \u67e5\u627e\u5bf9\u8c61  \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u5e94\u7528\u81ea\u5b9a\u4e49\u884c\u4e3a\u65f6\u968f\u65f6\u5c06\u6b64mixin\u7c7b\u5e94\u7528\u4e8e\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u3002  class RetrieveUserView(MultipleFieldLookupMixin, generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    lookup_fields = ('account', 'username')  \u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u90a3\u4e48\u4f7f\u7528\u81ea\u5b9a\u4e49mixin\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002",
            "title": "\u521b\u5efa\u81ea\u5b9a\u4e49 mixins"
        },
        {
            "location": "/api-guide/generic-views_zh/#_3",
            "text": "\u5982\u679c\u4f60\u5728\u591a\u4e2a\u89c6\u56fe\u4e2d\u4f7f\u7528mixin\uff0c\u4f60\u53ef\u4ee5\u8fdb\u4e00\u6b65\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u4e00\u7ec4\u57fa\u672c\u89c6\u56fe\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u4f7f\u7528\u3002\u4e3e\u4e2a\u4f8b\u5b50:  class BaseRetrieveView(MultipleFieldLookupMixin,\n                       generics.RetrieveAPIView):\n    pass\n\nclass BaseRetrieveUpdateDestroyView(MultipleFieldLookupMixin,\n                                    generics.RetrieveUpdateDestroyAPIView):\n    pass  \u5982\u679c\u4f60\u7684\u81ea\u5b9a\u4e49\u884c\u4e3a\u59cb\u7ec8\u9700\u8981\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u7684\u5927\u91cf\u89c6\u56fe\u4e2d\u91cd\u590d\uff0c\u5219\u4f7f\u7528\u81ea\u5b9a\u4e49\u57fa\u7c7b\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002",
            "title": "\u521b\u5efa\u81ea\u5b9a\u4e49\u57fa\u7c7b"
        },
        {
            "location": "/api-guide/generic-views_zh/#put-as-create",
            "text": "\u57283.0\u7248\u672c\u4e4b\u524d\uff0cREST framework mixins \u5c06  PUT  \u89c6\u4e3a\u66f4\u65b0\u6216\u521b\u5efa\u64cd\u4f5c\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5bf9\u8c61\u662f\u5426\u5df2\u5b58\u5728\u3002  \u5141\u8bb8  PUT  \u4f5c\u4e3a\u521b\u5efa\u64cd\u4f5c\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u7136\u4f1a\u66b4\u9732\u5173\u4e8e\u5bf9\u8c61\u7684\u5b58\u5728\u4e0e\u4e0d\u5b58\u5728\u7684\u4fe1\u606f\u3002\u540c\u6837\u4e0d\u660e\u663e\u7684\u662f\uff0c\u900f\u660e\u5730\u5141\u8bb8\u91cd\u65b0\u521b\u5efa\u4ee5\u524d\u5220\u9664\u7684\u5b9e\u4f8b\u662f\u6bd4\u7b80\u5355\u5730\u8fd4\u56de 404 \u54cd\u5e94\u66f4\u597d\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002  \u4e24\u79cd\u5f62\u5f0f \" PUT  as 404\" \u548c \" PUT  as create\" \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u6709\u6548\uff0c\u4f46\u4ece3.0\u7248\u672c\u8d77\uff0c\u6211\u4eec\u73b0\u5728\u4f7f\u7528 404\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff0c\u56e0\u4e3a\u5b83\u66f4\u7b80\u5355\u548c\u66f4\u660e\u663e\u3002  \u5982\u679c\u4f60\u9700\u8981\u901a\u7528\u7684 PUT-as-create\u884c\u4e3a\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5305\u62ec\u50cf  \u8fd9\u4e2a AllowPUTAsCreateMixin  \u7c7b  \u4e00\u6837\u7684mixin\u5728\u4f60\u7684\u89c6\u56fe\u91cc\u3002",
            "title": "PUT as create"
        },
        {
            "location": "/api-guide/generic-views_zh/#_4",
            "text": "\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u63d0\u4f9b\u4e86\u5176\u4ed6\u901a\u7528\u89c6\u56fe\u5b9e\u73b0\u3002",
            "title": "\u7b2c\u4e09\u65b9\u5305"
        },
        {
            "location": "/api-guide/generic-views_zh/#django-rest-framework-bulk",
            "text": "The  django-rest-framework-bulk package  \u5305\u5b9e\u73b0\u901a\u7528\u89c6\u56femixins\u4ee5\u53ca\u4e00\u4e9b\u5e38\u89c1\u7684\u5177\u4f53\u901a\u7528\u89c6\u56fe\uff0c\u4ee5\u5141\u8bb8\u901a\u8fc7API\u8bf7\u6c42\u5e94\u7528\u6279\u91cf\u64cd\u4f5c\u3002",
            "title": "Django REST Framework bulk"
        },
        {
            "location": "/api-guide/generic-views_zh/#django-rest-multiple-models",
            "text": "Django Rest Multiple Models  \u63d0\u4f9b\u4e86\u901a\u8fc7\u5355\u4e2aAPI\u8bf7\u6c42\u53d1\u9001\u591a\u4e2a\u5e8f\u5217\u5316\u6a21\u578b\u548c/\u6216\u8005\u67e5\u8be2\u96c6\u7684\u901a\u7528\u89c6\u56fe\uff08\u548cmixin\uff09\u3002",
            "title": "Django Rest Multiple Models"
        },
        {
            "location": "/api-guide/viewsets_zh/",
            "text": "ViewSets\n\n\n\n\n\u5728\u8def\u7531\u5df2\u7ecf\u786e\u5b9a\u4e86\u7528\u4e8e\u8bf7\u6c42\u7684\u63a7\u5236\u5668\u4e4b\u540e\uff0c\u4f60\u7684\u63a7\u5236\u5668\u8d1f\u8d23\u7406\u89e3\u8bf7\u6c42\u5e76\u4ea7\u751f\u9002\u5f53\u7684\u8f93\u51fa\u3002 \n\n\n\u2014 \nRuby on Rails \u6587\u6863\n\n\n\n\nDjango REST framework\u5141\u8bb8\u4f60\u5c06\u4e00\u7ec4\u76f8\u5173\u89c6\u56fe\u7684\u903b\u8f91\u7ec4\u5408\u5728\u5355\u4e2a\u7c7b\uff08\u79f0\u4e3a \nViewSet\n\uff09\u4e2d\u3002 \u5728\u5176\u4ed6\u6846\u67b6\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u627e\u5230\u6982\u5ff5\u4e0a\u7c7b\u4f3c\u4e8e 'Resources' \u6216 'Controllers'\u7684\u7c7b\u4f3c\u5b9e\u73b0\u3002\n\n\nViewSet\n \u53ea\u662f\n\u4e00\u79cd\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5b83\u4e0d\u63d0\u4f9b\u4efb\u4f55\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\n\uff08\u5982 \n.get()\n\u6216\n.post()\n\uff09,\u800c\u662f\u63d0\u4f9b\u8bf8\u5982 \n.list()\n \u548c \n.create()\n \u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002\n\n\nViewSet\n \u7684\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u4ec5\u4f7f\u7528 \n.as_view()\n \u65b9\u6cd5\u7ed1\u5b9a\u5230\u5b8c\u6210\u89c6\u56fe\u7684\u76f8\u5e94\u64cd\u4f5c\u3002\n\n\n\u901a\u5e38\u4e0d\u662f\u5728 urlconf \u4e2d\u7684\u89c6\u56fe\u96c6\u4e2d\u663e\u793a\u6ce8\u518c\u89c6\u56fe\uff0c\u800c\u662f\u8981\u4f7f\u7528\u8def\u7531\u7c7b\u6ce8\u518c\u89c6\u56fe\u96c6\uff0c\u8be5\u7c7b\u4f1a\u81ea\u52a8\u4e3a\u4f60\u786e\u5b9a urlconf\u3002\n\n\nExample\n\n\n\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u89c6\u56fe\u96c6\uff0c\u53ef\u4ee5\u7528\u6765\u5217\u51fa\u6216\u68c0\u7d22\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7528\u6237\u3002\n\n\nfrom django.contrib.auth.models import User\nfrom django.shortcuts import get_object_or_404\nfrom myapps.serializers import UserSerializer\nfrom rest_framework import viewsets\nfrom rest_framework.response import Response\n\nclass UserViewSet(viewsets.ViewSet):\n    \"\"\"\n    A simple ViewSet for listing or retrieving users.\n    \"\"\"\n    def list(self, request):\n        queryset = User.objects.all()\n        serializer = UserSerializer(queryset, many=True)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None):\n        queryset = User.objects.all()\n        user = get_object_or_404(queryset, pk=pk)\n        serializer = UserSerializer(user)\n        return Response(serializer.data)\n\n\n\n\n\u5982\u679c\u6211\u4eec\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2aviewset\u7ed1\u5b9a\u5230\u4e24\u4e2a\u5355\u72ec\u7684\u89c6\u56fe\uff0c\u60f3\u8fd9\u6837\uff1a\n\n\nuser_list = UserViewSet.as_view({'get': 'list'})\nuser_detail = UserViewSet.as_view({'get': 'retrieve'})\n\n\n\n\n\u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u4f1a\u7528\u4e00\u4e2arouter\u6765\u6ce8\u518c\u6211\u4eec\u7684viewset\uff0c\u8ba9urlconf\u81ea\u52a8\u751f\u6210\u3002\n\n\nfrom myapp.views import UserViewSet\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register(r'users', UserViewSet)\nurlpatterns = router.urls\n\n\n\n\n\u4e0d\u9700\u8981\u7f16\u5199\u81ea\u5df1\u7684\u89c6\u56fe\u96c6\uff0c\u4f60\u901a\u5e38\u4f1a\u60f3\u8981\u4f7f\u7528\u63d0\u4f9b\u9ed8\u8ba4\u884c\u4e3a\u7684\u73b0\u6709\u57fa\u7c7b\u3002\u4f8b\u5982\uff1a\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u7528\u4e8e\u67e5\u770b\u548c\u7f16\u8f91\u7528\u6237\u5b9e\u4f8b\u7684\u89c6\u56fe\u96c6\u3002\n    \"\"\"\n    serializer_class = UserSerializer\n    queryset = User.objects.all()\n\n\n\n\n\u4e0e\u4f7f\u7528 \nView\n \u7c7b\u76f8\u6bd4\uff0c\u4f7f\u7528 \nViewSet\n \u7c7b\u6709\u4e24\u4e2a\u4e3b\u8981\u4f18\u70b9\u3002\n\n\n\n\n\u91cd\u590d\u7684\u903b\u8f91\u53ef\u4ee5\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u6b21 \nqueryset\n\uff0c\u5b83\u5c06\u5728\u591a\u4e2a\u89c6\u56fe\u4e2d\u4f7f\u7528\u3002\n\n\n\u901a\u8fc7\u4f7f\u7528 routers, \u54e6\u4eec\u4e0d\u518d\u9700\u8981\u81ea\u5df1\u5904\u7406URLconf\u3002\n\n\n\n\n\u8fd9\u4e24\u8005\u90fd\u6709\u4e00\u4e2a\u6743\u8861\u3002\u4f7f\u7528\u5e38\u89c4\u7684 views \u548c URL confs \u66f4\u660e\u786e\u4e5f\u80fd\u591f\u4e3a\u4f60\u63d0\u4f9b\u66f4\u591a\u7684\u63a7\u5236\u3002ViewSets\u6709\u52a9\u4e8e\u5feb\u901f\u542f\u52a8\u548c\u8fd0\u884c\uff0c\u6216\u8005\u5f53\u4f60\u6709\u5927\u578b\u7684API\uff0c\u5e76\u4e14\u5e0c\u671b\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6267\u884c\u4e00\u81f4\u7684 URL \u914d\u7f6e\u3002\n\n\n\u6807\u8bb0\u8def\u7531\u7684\u989d\u5916\u64cd\u4f5c\n\n\nREST framework \u4e2d\u5305\u542b\u7684\u9ed8\u4efb routes \u5c06\u4e3a\u6807\u51c6\u7684 create/retrieve/update/destroy \u7c7b\u578b\u64cd\u4f5c\u63d0\u4f9b\u8def\u7531, \u5982\u4e0b\u6240\u793a\uff1a\n\n\nclass UserViewSet(viewsets.ViewSet):\n    \"\"\"\n    \u793a\u4f8b viewset \u6f14\u793a\u4e86\u5c06\u7531\u8def\u7531\u5668\u7c7b\u5904\u7406\u7684\u6807\u51c6\u52a8\u4f5c\u3002\n\n    \u5982\u679c\u4f60\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\uff0c\u8bf7\u52a1\u5fc5\u4e3a\u6bcf\u4e2a\u52a8\u4f5c\u5305\u542b\u4e00\u4e2a`format=None` \u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\n    \"\"\"\n\n    def list(self, request):\n        pass\n\n    def create(self, request):\n        pass\n\n    def retrieve(self, request, pk=None):\n        pass\n\n    def update(self, request, pk=None):\n        pass\n\n    def partial_update(self, request, pk=None):\n        pass\n\n    def destroy(self, request, pk=None):\n        pass\n\n\n\n\u5982\u679c\u4f60\u6709\u9700\u8981\u88ab\u8def\u7531\u5230\u7684\u7279\u522b\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 \n@detail_route\n \u6216 \n@list_route\n \u88c5\u9970\u5668\u5c06\u5b83\u4eec\u6807\u8bb0\u4e3a\u9700\u8981\u8def\u7531\u3002\n\n\n@detail_route\n \u88c5\u9970\u5668\u5728\u5176URL\u6a21\u5f0f\u4e2d\u5305\u542b \npk\n \u7528\u4e8e\u9700\u8981\u5355\u4e2a\u5b9e\u4f8b\u7684\u65b9\u6cd5\u3002The \n@list_route\n \u88c5\u9970\u5668\u7528\u4e8e\u5bf9\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002\n\n\n\u4f8b\u5982\uff1a\n\n\nfrom django.contrib.auth.models import User\nfrom rest_framework import status\nfrom rest_framework import viewsets\nfrom rest_framework.decorators import detail_route, list_route\nfrom rest_framework.response import Response\nfrom myapp.serializers import UserSerializer, PasswordSerializer\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u4e00\u4e2a\u63d0\u4f9b\u6807\u51c6\u52a8\u4f5c\u7684 viewset\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n    @detail_route(methods=['post'])\n    def set_password(self, request, pk=None):\n        user = self.get_object()\n        serializer = PasswordSerializer(data=request.data)\n        if serializer.is_valid():\n            user.set_password(serializer.data['password'])\n            user.save()\n            return Response({'status': 'password set'})\n        else:\n            return Response(serializer.errors,\n                            status=status.HTTP_400_BAD_REQUEST)\n\n    @list_route()\n    def recent_users(self, request):\n        recent_users = User.objects.all().order('-last_login')\n\n        page = self.paginate_queryset(recent_users)\n        if page is not None:\n            serializer = self.get_serializer(page, many=True)\n            return self.get_paginated_response(serializer.data)\n\n        serializer = self.get_serializer(recent_users, many=True)\n        return Response(serializer.data)\n\n\n\n\n\u88c5\u9970\u5668\u53ef\u4ee5\u53e6\u5916\u83b7\u53d6\u4e3a\u8def\u7531\u89c6\u56fe\u8bbe\u7f6e\u7684\u989d\u5916\u53c2\u6570\u3002\u4f8b\u5982...\n\n\n    @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf])\n    def set_password(self, request, pk=None):\n       ...\n\n\n\n\n\u8fd9\u4e9b\u88c5\u9970\u5668\u5c06\u9ed8\u8ba4\u8def\u7531 \nGET\n \u8bf7\u6c42\uff0c\u4f46\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 \nmethods\n \u53c2\u6570\u63a5\u53d7\u5176\u4ed6 HTTP \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a\n\n\n    @detail_route(methods=['post', 'delete'])\n    def unset_password(self, request, pk=None):\n       ...\n\n\n\n\n\u8fd9\u4e24\u4e2a\u65b0\u52a8\u4f5c\u5c06\u5728 urls \n^users/{pk}/set_password/$\n \u548c \n^users/{pk}/unset_password/$\n\u4e0a\u53ef\u7528\u3002\n\n\n\n\nAPI \u53c2\u8003\n\n\nViewSet\n\n\nViewSet\n \u7ee7\u627f\u81ea \nAPIView\n\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5c5e\u6027\uff0c\u5982 \npermission_classes\n, \nauthentication_classes\n \u4ee5\u4fbf\u63a7\u5236\u89c6\u56fe\u96c6\u4e0a\u7684 API \u7b56\u7565\u3002\n\n\nViewSet\n \u7c7b\u4e0d\u63d0\u4f9b\u4efb\u4f55\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002\u4e3a\u4e86\u4f7f\u7528 \nViewSet\n \u7c7b\uff0c\u4f60\u5c06\u91cd\u5199\u8be5\u7c7b\u5e76\u663e\u5f0f\u5730\u5b9a\u4e49\u52a8\u4f5c\u5b9e\u73b0\u3002\n\n\nGenericViewSet\n\n\nGenericViewSet\n \u7c7b\u7ee7\u627f\u81ea \nGenericAPIView\n\uff0c\u5e76\u63d0\u4f9b\u4e86 \nget_object\n\uff0c \nget_queryset\n \u65b9\u6cd5\u548c\u5176\u4ed6\u901a\u7528\u89c6\u56fe\u57fa\u672c\u884c\u4e3a\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0d\u5305\u62ec\u4efb\u4f55\u64cd\u4f5c\u3002\n\n\nIn order to use a \nGenericViewSet\n class you'll override the class and either mixin the required mixin classes, or define the action implementations explicitly.\n\n\nModelViewSet\n\n\nThe \nModelViewSet\n class inherits from \nGenericAPIView\n and includes implementations for various actions, by mixing in the behavior of the various mixin classes.\n\n\nThe actions provided by the \nModelViewSet\n class are \n.list()\n, \n.retrieve()\n,  \n.create()\n, \n.update()\n, \n.partial_update()\n, and \n.destroy()\n.\n\n\nExample\n\n\nBecause \nModelViewSet\n extends \nGenericAPIView\n, you'll normally need to provide at least the \nqueryset\n and \nserializer_class\n attributes.  For example:\n\n\nclass AccountViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing and editing accounts.\n    \"\"\"\n    queryset = Account.objects.all()\n    serializer_class = AccountSerializer\n    permission_classes = [IsAccountAdminOrReadOnly]\n\n\n\n\nNote that you can use any of the standard attributes or method overrides provided by \nGenericAPIView\n.  For example, to use a \nViewSet\n that dynamically determines the queryset it should operate on, you might do something like this:\n\n\nclass AccountViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing and editing the accounts\n    associated with the user.\n    \"\"\"\n    serializer_class = AccountSerializer\n    permission_classes = [IsAccountAdminOrReadOnly]\n\n    def get_queryset(self):\n        return self.request.user.accounts.all()\n\n\n\n\nNote however that upon removal of the \nqueryset\n property from your \nViewSet\n, any associated \nrouter\n will be unable to derive the base_name of your Model automatically, and so you will have to specify the \nbase_name\n kwarg as part of your \nrouter registration\n.\n\n\nAlso note that although this class provides the complete set of create/list/retrieve/update/destroy actions by default, you can restrict the available operations by using the standard permission classes.\n\n\nReadOnlyModelViewSet\n\n\nThe \nReadOnlyModelViewSet\n class also inherits from \nGenericAPIView\n.  As with \nModelViewSet\n it also includes implementations for various actions, but unlike \nModelViewSet\n only provides the 'read-only' actions, \n.list()\n and \n.retrieve()\n.\n\n\nExample\n\n\nAs with \nModelViewSet\n, you'll normally need to provide at least the \nqueryset\n and \nserializer_class\n attributes.  For example:\n\n\nclass AccountViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing accounts.\n    \"\"\"\n    queryset = Account.objects.all()\n    serializer_class = AccountSerializer\n\n\n\n\nAgain, as with \nModelViewSet\n, you can use any of the standard attributes and method overrides available to \nGenericAPIView\n.\n\n\nCustom ViewSet base classes\n\n\nYou may need to provide custom \nViewSet\n classes that do not have the full set of \nModelViewSet\n actions, or that customize the behavior in some other way.\n\n\nExample\n\n\nTo create a base viewset class that provides \ncreate\n, \nlist\n and \nretrieve\n operations, inherit from \nGenericViewSet\n, and mixin the required actions:\n\n\nclass CreateListRetrieveViewSet(mixins.CreateModelMixin,\n                                mixins.ListModelMixin,\n                                mixins.RetrieveModelMixin,\n                                viewsets.GenericViewSet):\n    \"\"\"\n    A viewset that provides `retrieve`, `create`, and `list` actions.\n\n    To use it, override the class and set the `.queryset` and\n    `.serializer_class` attributes.\n    \"\"\"\n    pass\n\n\n\nBy creating your own base \nViewSet\n classes, you can provide common behavior that can be reused in multiple viewsets across your API.",
            "title": "Viewsets"
        },
        {
            "location": "/api-guide/viewsets_zh/#viewsets",
            "text": "\u5728\u8def\u7531\u5df2\u7ecf\u786e\u5b9a\u4e86\u7528\u4e8e\u8bf7\u6c42\u7684\u63a7\u5236\u5668\u4e4b\u540e\uff0c\u4f60\u7684\u63a7\u5236\u5668\u8d1f\u8d23\u7406\u89e3\u8bf7\u6c42\u5e76\u4ea7\u751f\u9002\u5f53\u7684\u8f93\u51fa\u3002   \u2014  Ruby on Rails \u6587\u6863   Django REST framework\u5141\u8bb8\u4f60\u5c06\u4e00\u7ec4\u76f8\u5173\u89c6\u56fe\u7684\u903b\u8f91\u7ec4\u5408\u5728\u5355\u4e2a\u7c7b\uff08\u79f0\u4e3a  ViewSet \uff09\u4e2d\u3002 \u5728\u5176\u4ed6\u6846\u67b6\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u627e\u5230\u6982\u5ff5\u4e0a\u7c7b\u4f3c\u4e8e 'Resources' \u6216 'Controllers'\u7684\u7c7b\u4f3c\u5b9e\u73b0\u3002  ViewSet  \u53ea\u662f \u4e00\u79cd\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5b83\u4e0d\u63d0\u4f9b\u4efb\u4f55\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f \uff08\u5982  .get() \u6216 .post() \uff09,\u800c\u662f\u63d0\u4f9b\u8bf8\u5982  .list()  \u548c  .create()  \u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002  ViewSet  \u7684\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u4ec5\u4f7f\u7528  .as_view()  \u65b9\u6cd5\u7ed1\u5b9a\u5230\u5b8c\u6210\u89c6\u56fe\u7684\u76f8\u5e94\u64cd\u4f5c\u3002  \u901a\u5e38\u4e0d\u662f\u5728 urlconf \u4e2d\u7684\u89c6\u56fe\u96c6\u4e2d\u663e\u793a\u6ce8\u518c\u89c6\u56fe\uff0c\u800c\u662f\u8981\u4f7f\u7528\u8def\u7531\u7c7b\u6ce8\u518c\u89c6\u56fe\u96c6\uff0c\u8be5\u7c7b\u4f1a\u81ea\u52a8\u4e3a\u4f60\u786e\u5b9a urlconf\u3002",
            "title": "ViewSets"
        },
        {
            "location": "/api-guide/viewsets_zh/#example",
            "text": "\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u89c6\u56fe\u96c6\uff0c\u53ef\u4ee5\u7528\u6765\u5217\u51fa\u6216\u68c0\u7d22\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7528\u6237\u3002  from django.contrib.auth.models import User\nfrom django.shortcuts import get_object_or_404\nfrom myapps.serializers import UserSerializer\nfrom rest_framework import viewsets\nfrom rest_framework.response import Response\n\nclass UserViewSet(viewsets.ViewSet):\n    \"\"\"\n    A simple ViewSet for listing or retrieving users.\n    \"\"\"\n    def list(self, request):\n        queryset = User.objects.all()\n        serializer = UserSerializer(queryset, many=True)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None):\n        queryset = User.objects.all()\n        user = get_object_or_404(queryset, pk=pk)\n        serializer = UserSerializer(user)\n        return Response(serializer.data)  \u5982\u679c\u6211\u4eec\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2aviewset\u7ed1\u5b9a\u5230\u4e24\u4e2a\u5355\u72ec\u7684\u89c6\u56fe\uff0c\u60f3\u8fd9\u6837\uff1a  user_list = UserViewSet.as_view({'get': 'list'})\nuser_detail = UserViewSet.as_view({'get': 'retrieve'})  \u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u4f1a\u7528\u4e00\u4e2arouter\u6765\u6ce8\u518c\u6211\u4eec\u7684viewset\uff0c\u8ba9urlconf\u81ea\u52a8\u751f\u6210\u3002  from myapp.views import UserViewSet\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register(r'users', UserViewSet)\nurlpatterns = router.urls  \u4e0d\u9700\u8981\u7f16\u5199\u81ea\u5df1\u7684\u89c6\u56fe\u96c6\uff0c\u4f60\u901a\u5e38\u4f1a\u60f3\u8981\u4f7f\u7528\u63d0\u4f9b\u9ed8\u8ba4\u884c\u4e3a\u7684\u73b0\u6709\u57fa\u7c7b\u3002\u4f8b\u5982\uff1a  class UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u7528\u4e8e\u67e5\u770b\u548c\u7f16\u8f91\u7528\u6237\u5b9e\u4f8b\u7684\u89c6\u56fe\u96c6\u3002\n    \"\"\"\n    serializer_class = UserSerializer\n    queryset = User.objects.all()  \u4e0e\u4f7f\u7528  View  \u7c7b\u76f8\u6bd4\uff0c\u4f7f\u7528  ViewSet  \u7c7b\u6709\u4e24\u4e2a\u4e3b\u8981\u4f18\u70b9\u3002   \u91cd\u590d\u7684\u903b\u8f91\u53ef\u4ee5\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u6b21  queryset \uff0c\u5b83\u5c06\u5728\u591a\u4e2a\u89c6\u56fe\u4e2d\u4f7f\u7528\u3002  \u901a\u8fc7\u4f7f\u7528 routers, \u54e6\u4eec\u4e0d\u518d\u9700\u8981\u81ea\u5df1\u5904\u7406URLconf\u3002   \u8fd9\u4e24\u8005\u90fd\u6709\u4e00\u4e2a\u6743\u8861\u3002\u4f7f\u7528\u5e38\u89c4\u7684 views \u548c URL confs \u66f4\u660e\u786e\u4e5f\u80fd\u591f\u4e3a\u4f60\u63d0\u4f9b\u66f4\u591a\u7684\u63a7\u5236\u3002ViewSets\u6709\u52a9\u4e8e\u5feb\u901f\u542f\u52a8\u548c\u8fd0\u884c\uff0c\u6216\u8005\u5f53\u4f60\u6709\u5927\u578b\u7684API\uff0c\u5e76\u4e14\u5e0c\u671b\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6267\u884c\u4e00\u81f4\u7684 URL \u914d\u7f6e\u3002",
            "title": "Example"
        },
        {
            "location": "/api-guide/viewsets_zh/#_1",
            "text": "REST framework \u4e2d\u5305\u542b\u7684\u9ed8\u4efb routes \u5c06\u4e3a\u6807\u51c6\u7684 create/retrieve/update/destroy \u7c7b\u578b\u64cd\u4f5c\u63d0\u4f9b\u8def\u7531, \u5982\u4e0b\u6240\u793a\uff1a  class UserViewSet(viewsets.ViewSet):\n    \"\"\"\n    \u793a\u4f8b viewset \u6f14\u793a\u4e86\u5c06\u7531\u8def\u7531\u5668\u7c7b\u5904\u7406\u7684\u6807\u51c6\u52a8\u4f5c\u3002\n\n    \u5982\u679c\u4f60\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\uff0c\u8bf7\u52a1\u5fc5\u4e3a\u6bcf\u4e2a\u52a8\u4f5c\u5305\u542b\u4e00\u4e2a`format=None` \u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\n    \"\"\"\n\n    def list(self, request):\n        pass\n\n    def create(self, request):\n        pass\n\n    def retrieve(self, request, pk=None):\n        pass\n\n    def update(self, request, pk=None):\n        pass\n\n    def partial_update(self, request, pk=None):\n        pass\n\n    def destroy(self, request, pk=None):\n        pass  \u5982\u679c\u4f60\u6709\u9700\u8981\u88ab\u8def\u7531\u5230\u7684\u7279\u522b\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528  @detail_route  \u6216  @list_route  \u88c5\u9970\u5668\u5c06\u5b83\u4eec\u6807\u8bb0\u4e3a\u9700\u8981\u8def\u7531\u3002  @detail_route  \u88c5\u9970\u5668\u5728\u5176URL\u6a21\u5f0f\u4e2d\u5305\u542b  pk  \u7528\u4e8e\u9700\u8981\u5355\u4e2a\u5b9e\u4f8b\u7684\u65b9\u6cd5\u3002The  @list_route  \u88c5\u9970\u5668\u7528\u4e8e\u5bf9\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002  \u4f8b\u5982\uff1a  from django.contrib.auth.models import User\nfrom rest_framework import status\nfrom rest_framework import viewsets\nfrom rest_framework.decorators import detail_route, list_route\nfrom rest_framework.response import Response\nfrom myapp.serializers import UserSerializer, PasswordSerializer\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    \u4e00\u4e2a\u63d0\u4f9b\u6807\u51c6\u52a8\u4f5c\u7684 viewset\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n    @detail_route(methods=['post'])\n    def set_password(self, request, pk=None):\n        user = self.get_object()\n        serializer = PasswordSerializer(data=request.data)\n        if serializer.is_valid():\n            user.set_password(serializer.data['password'])\n            user.save()\n            return Response({'status': 'password set'})\n        else:\n            return Response(serializer.errors,\n                            status=status.HTTP_400_BAD_REQUEST)\n\n    @list_route()\n    def recent_users(self, request):\n        recent_users = User.objects.all().order('-last_login')\n\n        page = self.paginate_queryset(recent_users)\n        if page is not None:\n            serializer = self.get_serializer(page, many=True)\n            return self.get_paginated_response(serializer.data)\n\n        serializer = self.get_serializer(recent_users, many=True)\n        return Response(serializer.data)  \u88c5\u9970\u5668\u53ef\u4ee5\u53e6\u5916\u83b7\u53d6\u4e3a\u8def\u7531\u89c6\u56fe\u8bbe\u7f6e\u7684\u989d\u5916\u53c2\u6570\u3002\u4f8b\u5982...      @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf])\n    def set_password(self, request, pk=None):\n       ...  \u8fd9\u4e9b\u88c5\u9970\u5668\u5c06\u9ed8\u8ba4\u8def\u7531  GET  \u8bf7\u6c42\uff0c\u4f46\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528  methods  \u53c2\u6570\u63a5\u53d7\u5176\u4ed6 HTTP \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a      @detail_route(methods=['post', 'delete'])\n    def unset_password(self, request, pk=None):\n       ...  \u8fd9\u4e24\u4e2a\u65b0\u52a8\u4f5c\u5c06\u5728 urls  ^users/{pk}/set_password/$  \u548c  ^users/{pk}/unset_password/$ \u4e0a\u53ef\u7528\u3002",
            "title": "\u6807\u8bb0\u8def\u7531\u7684\u989d\u5916\u64cd\u4f5c"
        },
        {
            "location": "/api-guide/viewsets_zh/#api",
            "text": "",
            "title": "API \u53c2\u8003"
        },
        {
            "location": "/api-guide/viewsets_zh/#viewset",
            "text": "ViewSet  \u7ee7\u627f\u81ea  APIView \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5c5e\u6027\uff0c\u5982  permission_classes ,  authentication_classes  \u4ee5\u4fbf\u63a7\u5236\u89c6\u56fe\u96c6\u4e0a\u7684 API \u7b56\u7565\u3002  ViewSet  \u7c7b\u4e0d\u63d0\u4f9b\u4efb\u4f55\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002\u4e3a\u4e86\u4f7f\u7528  ViewSet  \u7c7b\uff0c\u4f60\u5c06\u91cd\u5199\u8be5\u7c7b\u5e76\u663e\u5f0f\u5730\u5b9a\u4e49\u52a8\u4f5c\u5b9e\u73b0\u3002",
            "title": "ViewSet"
        },
        {
            "location": "/api-guide/viewsets_zh/#genericviewset",
            "text": "GenericViewSet  \u7c7b\u7ee7\u627f\u81ea  GenericAPIView \uff0c\u5e76\u63d0\u4f9b\u4e86  get_object \uff0c  get_queryset  \u65b9\u6cd5\u548c\u5176\u4ed6\u901a\u7528\u89c6\u56fe\u57fa\u672c\u884c\u4e3a\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0d\u5305\u62ec\u4efb\u4f55\u64cd\u4f5c\u3002  In order to use a  GenericViewSet  class you'll override the class and either mixin the required mixin classes, or define the action implementations explicitly.",
            "title": "GenericViewSet"
        },
        {
            "location": "/api-guide/viewsets_zh/#modelviewset",
            "text": "The  ModelViewSet  class inherits from  GenericAPIView  and includes implementations for various actions, by mixing in the behavior of the various mixin classes.  The actions provided by the  ModelViewSet  class are  .list() ,  .retrieve() ,   .create() ,  .update() ,  .partial_update() , and  .destroy() .",
            "title": "ModelViewSet"
        },
        {
            "location": "/api-guide/viewsets_zh/#example_1",
            "text": "Because  ModelViewSet  extends  GenericAPIView , you'll normally need to provide at least the  queryset  and  serializer_class  attributes.  For example:  class AccountViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing and editing accounts.\n    \"\"\"\n    queryset = Account.objects.all()\n    serializer_class = AccountSerializer\n    permission_classes = [IsAccountAdminOrReadOnly]  Note that you can use any of the standard attributes or method overrides provided by  GenericAPIView .  For example, to use a  ViewSet  that dynamically determines the queryset it should operate on, you might do something like this:  class AccountViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing and editing the accounts\n    associated with the user.\n    \"\"\"\n    serializer_class = AccountSerializer\n    permission_classes = [IsAccountAdminOrReadOnly]\n\n    def get_queryset(self):\n        return self.request.user.accounts.all()  Note however that upon removal of the  queryset  property from your  ViewSet , any associated  router  will be unable to derive the base_name of your Model automatically, and so you will have to specify the  base_name  kwarg as part of your  router registration .  Also note that although this class provides the complete set of create/list/retrieve/update/destroy actions by default, you can restrict the available operations by using the standard permission classes.",
            "title": "Example"
        },
        {
            "location": "/api-guide/viewsets_zh/#readonlymodelviewset",
            "text": "The  ReadOnlyModelViewSet  class also inherits from  GenericAPIView .  As with  ModelViewSet  it also includes implementations for various actions, but unlike  ModelViewSet  only provides the 'read-only' actions,  .list()  and  .retrieve() .",
            "title": "ReadOnlyModelViewSet"
        },
        {
            "location": "/api-guide/viewsets_zh/#example_2",
            "text": "As with  ModelViewSet , you'll normally need to provide at least the  queryset  and  serializer_class  attributes.  For example:  class AccountViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing accounts.\n    \"\"\"\n    queryset = Account.objects.all()\n    serializer_class = AccountSerializer  Again, as with  ModelViewSet , you can use any of the standard attributes and method overrides available to  GenericAPIView .",
            "title": "Example"
        },
        {
            "location": "/api-guide/viewsets_zh/#custom-viewset-base-classes",
            "text": "You may need to provide custom  ViewSet  classes that do not have the full set of  ModelViewSet  actions, or that customize the behavior in some other way.",
            "title": "Custom ViewSet base classes"
        },
        {
            "location": "/api-guide/viewsets_zh/#example_3",
            "text": "To create a base viewset class that provides  create ,  list  and  retrieve  operations, inherit from  GenericViewSet , and mixin the required actions:  class CreateListRetrieveViewSet(mixins.CreateModelMixin,\n                                mixins.ListModelMixin,\n                                mixins.RetrieveModelMixin,\n                                viewsets.GenericViewSet):\n    \"\"\"\n    A viewset that provides `retrieve`, `create`, and `list` actions.\n\n    To use it, override the class and set the `.queryset` and\n    `.serializer_class` attributes.\n    \"\"\"\n    pass  By creating your own base  ViewSet  classes, you can provide common behavior that can be reused in multiple viewsets across your API.",
            "title": "Example"
        },
        {
            "location": "/api-guide/routers_zh/",
            "text": "Routers\n\n\n\n\n\u8d44\u6e90\u8def\u7531\u5141\u8bb8\u4f60\u5feb\u901f\u58f0\u660e\u7ed9\u5b9a\u7684\u6709\u8db3\u591f\u63a7\u5236\u5668\u7684\u6240\u6709\u516c\u5171\u8def\u7531\u3002\u800c\u4e0d\u662f\u4e3a\u4f60\u7684index...\u58f0\u660e\u5355\u72ec\u7684\u8def\u7531\uff0c\u4e00\u4e2a\u5f3a\u5927\u7684\u8def\u7531\u80fd\u5728\u4e00\u884c\u4ee3\u7801\u4e2d\u58f0\u660e\u5b83\u4eec\u3002\n\n\n\u2014 [Ruby on Rails \u6587\u6863][cite]\n\n\n\n\n\u67d0\u4e9bWeb\u6846\u67b6\uff08\u5982Rails\uff09\u63d0\u4f9b\u4e86\u81ea\u52a8\u786e\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684URL\u5e94\u5982\u4f55\u6620\u5c04\u5230\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u7684\u903b\u8f91\u7684\u529f\u80fd\u3002\n\n\nREST\u6846\u67b6\u6dfb\u52a0\u4e86\u5bf9\u81ea\u52a8URL\u8def\u7531\u5230Django\u7684\u652f\u6301\uff0c\u5e76\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u3001\u5feb\u901f\u548c\u4e00\u81f4\u7684\u65b9\u5f0f\u6765\u5c06\u89c6\u56fe\u903b\u8f91\u8fde\u63a5\u5230\u4e00\u7ec4URL\u3002\n\n\nUsage\n\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684URL conf\u7684\u4f8b\u5b50\uff0c\u5b83\u4f7f\u7528 \nSimpleRouter\n\u3002\n\n\nfrom rest_framework import routers\n\nrouter = routers.SimpleRouter()\nrouter.register(r'users', UserViewSet)\nrouter.register(r'accounts', AccountViewSet)\nurlpatterns = router.urls\n\n\n\nregister()\n \u65b9\u6cd5\u6709\u4e24\u4e2a\u5f3a\u5236\u53c2\u6570\uff1a\n\n\n\n\nprefix\n - \u7528\u4e8e\u6b64\u7ec4\u8def\u7531\u7684URL\u524d\u7f00\u3002\n\n\nviewset\n - \u5904\u7406\u8bf7\u6c42\u7684viewset\u7c7b\u3002\n\n\n\n\n\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u9644\u52a0\u53c2\u6570\uff08\u53ef\u9009\uff09\uff1a\n\n\n\n\nbase_name\n - \u7528\u4e8e\u521b\u5efa\u7684URL\u540d\u79f0\u7684\u57fa\u672c\u540d\u79f0\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u53c2\u6570\uff0c\u5c06\u6839\u636e\u89c6\u56fe\u96c6\u7684\nqueryset\n\u5c5e\u6027\uff08\u5982\u679c\u6709\uff09\u6765\u81ea\u52a8\u751f\u6210\u57fa\u672c\u540d\u79f0\u3002\u6ce8\u610f\uff0c\u5982\u679c\u89c6\u56fe\u96c6\u4e0d\u5305\u62ec\nqueryset\n\u5c5e\u6027\uff0c\u90a3\u4e48\u5728\u6ce8\u518c\u89c6\u56fe\u96c6\u65f6\u5fc5\u987b\u8bbe\u7f6e\nbase_name\n\u3002\n\n\n\n\n\u4e0a\u9762\u7684\u793a\u4f8b\u5c06\u751f\u6210\u4ee5\u4e0bURL\u6a21\u5f0f\uff1a\n\n\n\n\nURL pattern: \n^users/$\n  Name: \n'user-list'\n\n\nURL pattern: \n^users/{pk}/$\n  Name: \n'user-detail'\n\n\nURL pattern: \n^accounts/$\n  Name: \n'account-list'\n\n\nURL pattern: \n^accounts/{pk}/$\n  Name: \n'account-detail'\n\n\n\n\n\n\n\u6ce8\u610f\n: \nbase_name\n \u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u89c6\u56fe\u540d\u79f0\u6a21\u5f0f\u7684\u521d\u59cb\u90e8\u5206\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f\u6307 \nuser\n \u6216 \naccount\n \u90e8\u5206\u3002\n\n\n\u901a\u5e38\uff0c\u4f60\n\u4e0d\u9700\u8981\n\u6307\u5b9a\nbase_name\n\u53c2\u6570\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709\u81ea\u5b9a\u4e49\nget_queryset\n\u65b9\u6cd5\u7684\u89c6\u56fe\u96c6\uff0c\u90a3\u4e48\u90a3\u4e2a\u89c6\u56fe\u96c6\u53ef\u80fd\u6ca1\u6709\u8bbe\u7f6e\n.queryset\n\u5c5e\u6027\u3002\u5f53\u4f60\u6ce8\u518c\u8fd9\u4e2a\u89c6\u56fe\u96c6\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u6709\u53ef\u80fd\u4f1a\u770b\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u9519\u8bef\uff1a\n\n\n'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.\n\n\n\n\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u5728\u6ce8\u518c\u89c6\u56fe\u96c6\u65f6\u663e\u5f0f\u8bbe\u7f6e\nbase_name\n\u53c2\u6570\uff0c\u56e0\u4e3a\u65e0\u6cd5\u4ecemodel\u540d\u81ea\u52a8\u786e\u5b9a\u3002\n\n\n\n\n\u5728\u8def\u7531\u4e2d\u4f7f\u7528 \ninclude\n\n\n\u8def\u7531\u5668\u5b9e\u4f8b\u4e0a\u7684\n.urls\n\u5c5e\u6027\u53ea\u662f\u4e00\u4e2aURL\u6a21\u5f0f\u7684\u6807\u51c6\u5217\u8868\u3002\u5bf9\u4e8e\u5982\u4f55\u6dfb\u52a0\u8fd9\u4e9bURL\uff0c\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5199\u6cd5\u3002\n\n\n\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\nrouter.urls\n\u9644\u52a0\u5230\u73b0\u6709\u89c6\u56fe\u7684\u5217\u8868\u4e2d...\n\n\nrouter = routers.SimpleRouter()\nrouter.register(r'users', UserViewSet)\nrouter.register(r'accounts', AccountViewSet)\n\nurlpatterns = [\n    url(r'^forgot-password/$', ForgotPasswordFormView.as_view()),\n]\n\nurlpatterns += router.urls\n\n\n\n\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528Django\u7684\ninclude\n\u51fd\u6570\uff0c\u50cf\u8fd9\u6837...\n\n\nurlpatterns = [\n    url(r'^forgot-password/$', ForgotPasswordFormView.as_view()),\n    url(r'^', include(router.urls)),\n]\n\n\n\n\u8def\u7531\u5668URL\u6a21\u5f0f\u4e5f\u652f\u6301\u547d\u540d\u7a7a\u95f4\u7684\u5199\u6cd5\u3002\n\n\nurlpatterns = [\n    url(r'^forgot-password/$', ForgotPasswordFormView.as_view()),\n    url(r'^api/', include(router.urls, namespace='api')),\n]\n\n\n\n\u5982\u679c\u4f7f\u7528\u5e26\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u5668\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u4efb\u4f55\nview_name\n\u53c2\u6570\u6b63\u786e\u5730\u53cd\u6620\u547d\u540d\u7a7a\u95f4\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u4f60\u9700\u8981\u8ba9\u8d85\u94fe\u63a5\u5230\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u89c6\u56fe\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u5305\u542b\u4e00\u4e2a\u53c2\u6570\uff0c\u4f8b\u5982\nview_name ='api\uff1auser-detail'\n\u3002\n\n\n\u989d\u5916\u94fe\u63a5\u548c\u64cd\u4f5c\n\n\n\u7528\n@detail_route\n\u6216\n@list_route\n\u88c5\u9970\u7684\u89c6\u56fe\u96c6\u4e0a\u7684\u4efb\u4f55\u65b9\u6cd5\u4e5f\u5c06\u88ab\u8def\u7531\u3002\n\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u65b9\u6cd5\u5728\nUserViewSet\n\u7c7b\uff1a\n\n\nfrom myapp.permissions import IsAdminOrIsSelf\nfrom rest_framework.decorators import detail_route\n\nclass UserViewSet(ModelViewSet):\n    ...\n\n    @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf])\n    def set_password(self, request, pk=None):\n        ...\n\n\n\n\u5c06\u53e6\u5916\u751f\u6210\u4ee5\u4e0bURL\u6a21\u5f0f\uff1a\n\n\n\n\nURL pattern: \n^users/{pk}/set_password/$\n  Name: \n'user-set-password'\n\n\n\n\n\u5982\u679c\u4f60\u4e0d\u60f3\u8ba9\u81ea\u5b9a\u4e49\u7684\u64cd\u4f5c\u4f7f\u7528\u81ea\u52a8\u751f\u6210\u7684\u9ed8\u8ba4URL\uff0c\u4f60\u53ef\u4ee5\u6539\u7528url_path\u53c2\u6570\u8fdb\u884c\u81ea\u5b9a\u4e49\u3002\n\n\n\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u8981\u5c06\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684URL\u66f4\u6539\u4e3a\n^users/{pk}/change-password/$\n, \u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a\n\n\nfrom myapp.permissions import IsAdminOrIsSelf\nfrom rest_framework.decorators import detail_route\n\nclass UserViewSet(ModelViewSet):\n    ...\n\n    @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf], url_path='change-password')\n    def set_password(self, request, pk=None):\n        ...\n\n\n\n\u4ee5\u4e0a\u793a\u4f8b\u5c06\u751f\u6210\u4ee5\u4e0bURL\u683c\u5f0f\uff1a\n\n\n\n\nURL pattern: \n^users/{pk}/change-password/$\n  Name: \n'user-change-password'\n\n\n\n\n\u5728\u4f60\u4e0d\u60f3\u4f7f\u7528\u4e3a\u81ea\u5b9a\u4e49\u64cd\u4f5c\u751f\u6210\u7684\u9ed8\u8ba4\u540d\u79f0\u7684\u60c5\u51b5\u4e0b\uff0cni\u53ef\u4ee5\u4f7f\u7528url_name\u53c2\u6570\u6765\u81ea\u5b9a\u4e49\u5b83\u3002\n\n\n\u4f8b\u5982\uff0c\u5982\u679c\u8981\u5c06\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684\u540d\u79f0\u66f4\u6539\u4e3a\n'user-change-password'\n\uff0c\u5219\u53ef\u4ee5\u5199\u4e3a\uff1a\n\n\nfrom myapp.permissions import IsAdminOrIsSelf\nfrom rest_framework.decorators import detail_route\n\nclass UserViewSet(ModelViewSet):\n    ...\n\n    @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf], url_name='change-password')\n    def set_password(self, request, pk=None):\n        ...\n\n\n\n\u4ee5\u4e0a\u793a\u4f8b\u73b0\u5728\u5c06\u751f\u6210\u4ee5\u4e0bURL\u683c\u5f0f\uff1a\n\n\n\n\nURL pattern: \n^users/{pk}/set_password/$\n  Name: \n'user-change-password'\n\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u540c\u65f6\u8bbe\u7f6eurl_path\u548curl_name\u53c2\u6570\u5bf9\u81ea\u5b9a\u4e49\u89c6\u56fe\u7684URL\u751f\u6210\u8fdb\u884c\u989d\u5916\u7684\u63a7\u5236\u3002\n\n\n\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605viewset\u6587\u6863 [\u6807\u8bb0\u8def\u7531\u7684\u989d\u5916\u64cd\u4f5c][route-decorators].\n\n\nAPI \u5411\u5bfc\n\n\nSimpleRouter\n\n\n\u8be5\u8def\u7531\u5668\u5305\u62ec\u6807\u51c6\u96c6\u5408\nlist\n, \ncreate\n, \nretrieve\n, \nupdate\n, \npartial_update\n \u548c \ndestroy\n\u52a8\u4f5c\u7684\u8def\u7531\u3002\u89c6\u56fe\u96c6\u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528\n@ detail_route\n\u6216\n@ list_route\n\u88c5\u9970\u5668\u6807\u8bb0\u8981\u88ab\u8def\u7531\u7684\u5176\u4ed6\u65b9\u6cd5\u3002\n\n\n\n    \nURL \u6837\u5f0f\nHTTP \u65b9\u6cd5\n\u52a8\u4f5c\nURL \u540d\n\n    \n{prefix}/\nGET\nlist\n{basename}-list\n\n    \nPOST\ncreate\n\n    \n{prefix}/{methodname}/\nGET, or as specified by `methods` argument\n`@list_route` decorated method\n{basename}-{methodname}\n\n    \n{prefix}/{lookup}/\nGET\nretrieve\n{basename}-detail\n\n    \nPUT\nupdate\n\n    \nPATCH\npartial_update\n\n    \nDELETE\ndestroy\n\n    \n{prefix}/{lookup}/{methodname}/\nGET, or as specified by `methods` argument\n`@detail_route` decorated method\n{basename}-{methodname}\n\n\n\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531\nSimpleRouter\n\u521b\u5efa\u7684URL\u5c06\u9644\u52a0\u5c3e\u90e8\u659c\u6760\u3002\n\u5728\u5b9e\u4f8b\u5316\u8def\u7531\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\ntrailing_slash\n\u53c2\u6570\u8bbe\u7f6e\u4e3a`False'\u6765\u4fee\u6539\u6b64\u884c\u4e3a\u3002\u6bd4\u5982\uff1a\n\n\nrouter = SimpleRouter(trailing_slash=False)\n\n\n\n\u5c3e\u90e8\u659c\u6760\u5728Django\u4e2d\u662f\u5e38\u89c1\u7684\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u4e00\u4e9b\u6846\u67b6\uff08\u5982Rails\uff09\u4e2d\u9ed8\u8ba4\u4e0d\u4f7f\u7528\u3002\u4f60\u9009\u62e9\u4f7f\u7528\u54ea\u79cd\u98ce\u683c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4f60\u4e2a\u4eba\u504f\u597d\u95ee\u9898\uff0c\u867d\u7136\u4e00\u4e9bjavascript\u6846\u67b6\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u7279\u5b9a\u7684\u8def\u7531\u98ce\u683c\u3002\n\n\n\u8def\u7531\u5668\u5c06\u5339\u914d\u5305\u542b\u9664\u659c\u6760\u548c\u53e5\u70b9\u5b57\u7b26\u4ee5\u5916\u7684\u4efb\u4f55\u5b57\u7b26\u7684\u67e5\u627e\u503c\u3002\u5bf9\u4e8e\u66f4\u4e25\u683c\uff08\u6216\u66f4\u5bbd\u677e\uff09\u7684\u67e5\u627e\u6a21\u5f0f\uff0c\u8bf7\u5728\u89c6\u56fe\u96c6\u4e0a\u8bbe\u7f6e\nlookup_value_regex\n\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\u67e5\u627e\u9650\u5236\u4e3a\u6709\u6548\u7684UUID\uff1a\n\n\nclass MyModelViewSet(mixins.RetrieveModelMixin, viewsets.GenericViewSet):\n    lookup_field = 'my_model_id'\n    lookup_value_regex = '[0-9a-f]{32}'\n\n\n\nDefaultRouter\n\n\n\u8fd9\u4e2a\u8def\u7531\u5668\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\nSimpleRouter\n\uff0c\u4f46\u662f\u8fd8\u5305\u62ec\u4e00\u4e2a\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5217\u8868\u89c6\u56fe\u7684\u8d85\u94fe\u63a5\u7684API\u6839\u89c6\u56fe\u3002\u5b83\u8fd8\u751f\u6210\u53ef\u9009\u7684\n.json\n\u6837\u5f0f\u683c\u5f0f\u540e\u7f00\u7684\u8def\u7531\u3002\n\n\n\n    \nURL \u6837\u5f0f\nHTTP \u65b9\u6cd5\n\u52a8\u4f5c\nURL \u540d\u79f0\n\n    \n[.format]\nGET\nautomatically generated root view\napi-root\n\n    \n{prefix}/[.format]\nGET\nlist\n{basename}-list\n\n    \nPOST\ncreate\n\n    \n{prefix}/{methodname}/[.format]\nGET, or as specified by `methods` argument\n`@list_route` decorated method\n{basename}-{methodname}\n\n    \n{prefix}/{lookup}/[.format]\nGET\nretrieve\n{basename}-detail\n\n    \nPUT\nupdate\n\n    \nPATCH\npartial_update\n\n    \nDELETE\ndestroy\n\n    \n{prefix}/{lookup}/{methodname}/[.format]\nGET, or as specified by `methods` argument\n`@detail_route` decorated method\n{basename}-{methodname}\n\n\n\n\n\n\u4e0e\nSimpleRouter\n\u4e00\u6837\uff0c\u5728\u5b9e\u4f8b\u5316\u8def\u7531\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\ntrailing_slash\n\u53c2\u6570\u8bbe\u7f6e\u4e3a`False'\u6765\u5220\u9664URL\u8def\u7531\u7684\u5c3e\u90e8\u659c\u6760\u3002\n\n\nrouter = DefaultRouter(trailing_slash=False)\n\n\n\n\u81ea\u5b9a\u4e49 Routers\n\n\n\u901a\u5e38\u4f60\u5e76\u4e0d\u9700\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8def\u7531\u5668\uff0c\u4f46\u5982\u679c\u4f60\u5bf9API\u7684\u7f51\u5740\u7ed3\u6784\u6709\u7279\u5b9a\u7684\u8981\u6c42\uff0c\u90a3\u5b83\u5c31\u5341\u5206\u6709\u7528\u4e86\u3002\u8fd9\u6837\u505a\u5141\u8bb8\u4f60\u4ee5\u53ef\u91cd\u7528\u7684\u65b9\u5f0f\u5c01\u88c5URL\u7ed3\u6784\uff0c\u786e\u4fdd\u4f60\u4e0d\u5fc5\u4e3a\u6bcf\u4e2a\u65b0\u89c6\u56fe\u663e\u5f0f\u5730\u7f16\u5199URL\u6a21\u5f0f\u3002\n\n\n\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8def\u7531\u5668\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7ee7\u627f\u4e00\u4e2a\u73b0\u6709\u7684\u8def\u7531\u5668\u7c7b\u3002\n.routes\n\u5c5e\u6027\u7528\u4e8e\u6a21\u677f\u5c06\u88ab\u6620\u5c04\u5230\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684URL\u6a21\u5f0f\u3002\n.routes\n\u5c5e\u6027\u662f\u4e00\u4e2a\u540d\u4e3atuples\u7684Route\u5bf9\u8c61\u7684\u5217\u8868\u3002\n\n\nRoute\n\u547d\u540d\u5143\u7ec4\u7684\u53c2\u6570\u662f\uff1a\n\n\nurl\n: \u8868\u793a\u8981\u8def\u7531\u7684URL\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a\n\n\n\n\n{prefix}\n - \u7528\u4e8e\u6b64\u7ec4\u8def\u7531\u7684URL\u524d\u7f00\u3002\n\n\n{lookup}\n - \u7528\u4e8e\u4e0e\u5355\u4e2a\u5b9e\u4f8b\u8fdb\u884c\u5339\u914d\u7684\u67e5\u627e\u5b57\u6bb5\u3002\n\n\n{trailing_slash}\n - \u53ef\u4ee5\u662f\u4e00\u4e2a'/'\u6216\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd9\u53d6\u51b3\u4e8e\ntrailing_slash\n\u53c2\u6570\u3002\n\n\n\n\nmapping\n: HTTP\u65b9\u6cd5\u540d\u79f0\u5230\u89c6\u56fe\u65b9\u6cd5\u7684\u6620\u5c04\n\n\nname\n: \u5728\nreverse\n\u8c03\u7528\u4e2d\u4f7f\u7528\u7684URL\u7684\u540d\u79f0\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a\n\n\n\n\n{basename}\n - \u7528\u4e8e\u521b\u5efa\u7684URL\u540d\u79f0\u7684\u57fa\u672c\u540d\u79f0\n\n\n\n\ninitkwargs\n: \u5b9e\u4f8b\u5316\u89c6\u56fe\u65f6\u5e94\u4f20\u9012\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u7684\u5b57\u5178\u3002\u6ce8\u610f\uff0c\nsuffix\n\u53c2\u6570\u88ab\u4fdd\u7559\u7528\u4e8e\u6807\u8bc6\u89c6\u56fe\u96c6\u7c7b\u578b\uff0c\u5728\u751f\u6210\u89c6\u56fe\u540d\u79f0\u548c\u9762\u5305\u5c51\u94fe\u63a5\u65f6\u4f7f\u7528\u3002\n\n\n\u81ea\u5b9a\u4e49\u52a8\u6001\u8def\u7531\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u5b9a\u5236\n@ list_route\n\u548c\n@detail_route\n\u88c5\u9970\u5668\u7684\u8def\u7531\u3002\u8981\u8def\u7531\u8fd9\u4e9b\u88c5\u9970\u5668\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\uff0c\u8bf7\u5728\n.routes\n\u5217\u8868\u4e2d\u5305\u542b\u4e00\u4e2a\nDynamicListRoute\n\u548c/\u6216\nDynamicDetailRoute\n\u547d\u540d\u7684\u5143\u7ec4\u3002\n\n\nDynamicListRoute\n\u548c\nDynamicDetailRoute\n\u7684\u53c2\u6570\u662f\uff1a\n\n\nurl\n: \u8868\u793a\u8981\u8def\u7531\u7684URL\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u4ee5\u5305\u62ec\u4e0e\u201cRoute\u201d\u76f8\u540c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53e6\u5916\u63a5\u53d7\n{methodname}\n\u548c\n{methodnamehyphen}\n\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\n\n\nname\n: \u5728\nreverse\n\u8c03\u7528\u4e2d\u4f7f\u7528\u7684URL\u7684\u540d\u79f0\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a\n{basename}\n\uff0c\n{methodname}\n\u548c\n{methodnamehyphen}\n\u3002\n\n\ninitkwargs\n: \u5b9e\u4f8b\u5316\u89c6\u56fe\u65f6\u5e94\u4f20\u9012\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u7684\u5b57\u5178\u3002\n\n\n\u4f8b\u5b50\n\n\n\u4ee5\u4e0b\u793a\u4f8b\u5c06\u53ea\u8def\u7531\u5230\nlist\n\u548c\nretrieve\n\u64cd\u4f5c\uff0c\u5e76\u4e14\u4e0d\u4f7f\u7528\u5c3e\u90e8\u659c\u7ebf\u7ea6\u5b9a\u3002\n\n\nfrom rest_framework.routers import Route, DynamicDetailRoute, SimpleRouter\n\nclass CustomReadOnlyRouter(SimpleRouter):\n    \"\"\"\n    A router for read-only APIs, which doesn't use trailing slashes.\n    \"\"\"\n    routes = [\n        Route(\n            url=r'^{prefix}$',\n            mapping={'get': 'list'},\n            name='{basename}-list',\n            initkwargs={'suffix': 'List'}\n        ),\n        Route(\n            url=r'^{prefix}/{lookup}$',\n            mapping={'get': 'retrieve'},\n            name='{basename}-detail',\n            initkwargs={'suffix': 'Detail'}\n        ),\n        DynamicDetailRoute(\n            url=r'^{prefix}/{lookup}/{methodnamehyphen}$',\n            name='{basename}-{methodnamehyphen}',\n            initkwargs={}\n        )\n    ]\n\n\n\n\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u5b9a\u4e49\u7684\nCustomReadOnlyRouter\n\u4e3a\u7b80\u5355\u89c6\u56fe\u751f\u6210\u7684\u8def\u7531\u3002\n\n\nviews.py\n:\n\n\nclass UserViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    A viewset that provides the standard actions\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    lookup_field = 'username'\n\n    @detail_route()\n    def group_names(self, request):\n        \"\"\"\n        Returns a list of all the group names that the given\n        user belongs to.\n        \"\"\"\n        user = self.get_object()\n        groups = user.groups.all()\n        return Response([group.name for group in groups])\n\n\n\nurls.py\n:\n\n\nrouter = CustomReadOnlyRouter()\nrouter.register('users', UserViewSet)\nurlpatterns = router.urls\n\n\n\n\u5c06\u751f\u6210\u4ee5\u4e0b\u6620\u5c04...\n\n\n\n    \nURL\nHTTP \u65b9\u6cd5\n\u52a8\u4f5c\nURL \u540d\u79f0\n\n    \n/users\nGET\nlist\nuser-list\n\n    \n/users/{username}\nGET\nretrieve\nuser-detail\n\n    \n/users/{username}/group-names\nGET\ngroup_names\nuser-group-names",
            "title": "Routers"
        },
        {
            "location": "/api-guide/routers_zh/#routers",
            "text": "\u8d44\u6e90\u8def\u7531\u5141\u8bb8\u4f60\u5feb\u901f\u58f0\u660e\u7ed9\u5b9a\u7684\u6709\u8db3\u591f\u63a7\u5236\u5668\u7684\u6240\u6709\u516c\u5171\u8def\u7531\u3002\u800c\u4e0d\u662f\u4e3a\u4f60\u7684index...\u58f0\u660e\u5355\u72ec\u7684\u8def\u7531\uff0c\u4e00\u4e2a\u5f3a\u5927\u7684\u8def\u7531\u80fd\u5728\u4e00\u884c\u4ee3\u7801\u4e2d\u58f0\u660e\u5b83\u4eec\u3002  \u2014 [Ruby on Rails \u6587\u6863][cite]   \u67d0\u4e9bWeb\u6846\u67b6\uff08\u5982Rails\uff09\u63d0\u4f9b\u4e86\u81ea\u52a8\u786e\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684URL\u5e94\u5982\u4f55\u6620\u5c04\u5230\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u7684\u903b\u8f91\u7684\u529f\u80fd\u3002  REST\u6846\u67b6\u6dfb\u52a0\u4e86\u5bf9\u81ea\u52a8URL\u8def\u7531\u5230Django\u7684\u652f\u6301\uff0c\u5e76\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u3001\u5feb\u901f\u548c\u4e00\u81f4\u7684\u65b9\u5f0f\u6765\u5c06\u89c6\u56fe\u903b\u8f91\u8fde\u63a5\u5230\u4e00\u7ec4URL\u3002",
            "title": "Routers"
        },
        {
            "location": "/api-guide/routers_zh/#usage",
            "text": "\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684URL conf\u7684\u4f8b\u5b50\uff0c\u5b83\u4f7f\u7528  SimpleRouter \u3002  from rest_framework import routers\n\nrouter = routers.SimpleRouter()\nrouter.register(r'users', UserViewSet)\nrouter.register(r'accounts', AccountViewSet)\nurlpatterns = router.urls  register()  \u65b9\u6cd5\u6709\u4e24\u4e2a\u5f3a\u5236\u53c2\u6570\uff1a   prefix  - \u7528\u4e8e\u6b64\u7ec4\u8def\u7531\u7684URL\u524d\u7f00\u3002  viewset  - \u5904\u7406\u8bf7\u6c42\u7684viewset\u7c7b\u3002   \u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u9644\u52a0\u53c2\u6570\uff08\u53ef\u9009\uff09\uff1a   base_name  - \u7528\u4e8e\u521b\u5efa\u7684URL\u540d\u79f0\u7684\u57fa\u672c\u540d\u79f0\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u53c2\u6570\uff0c\u5c06\u6839\u636e\u89c6\u56fe\u96c6\u7684 queryset \u5c5e\u6027\uff08\u5982\u679c\u6709\uff09\u6765\u81ea\u52a8\u751f\u6210\u57fa\u672c\u540d\u79f0\u3002\u6ce8\u610f\uff0c\u5982\u679c\u89c6\u56fe\u96c6\u4e0d\u5305\u62ec queryset \u5c5e\u6027\uff0c\u90a3\u4e48\u5728\u6ce8\u518c\u89c6\u56fe\u96c6\u65f6\u5fc5\u987b\u8bbe\u7f6e base_name \u3002   \u4e0a\u9762\u7684\u793a\u4f8b\u5c06\u751f\u6210\u4ee5\u4e0bURL\u6a21\u5f0f\uff1a   URL pattern:  ^users/$   Name:  'user-list'  URL pattern:  ^users/{pk}/$   Name:  'user-detail'  URL pattern:  ^accounts/$   Name:  'account-list'  URL pattern:  ^accounts/{pk}/$   Name:  'account-detail'    \u6ce8\u610f :  base_name  \u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u89c6\u56fe\u540d\u79f0\u6a21\u5f0f\u7684\u521d\u59cb\u90e8\u5206\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f\u6307  user  \u6216  account  \u90e8\u5206\u3002  \u901a\u5e38\uff0c\u4f60 \u4e0d\u9700\u8981 \u6307\u5b9a base_name \u53c2\u6570\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709\u81ea\u5b9a\u4e49 get_queryset \u65b9\u6cd5\u7684\u89c6\u56fe\u96c6\uff0c\u90a3\u4e48\u90a3\u4e2a\u89c6\u56fe\u96c6\u53ef\u80fd\u6ca1\u6709\u8bbe\u7f6e .queryset \u5c5e\u6027\u3002\u5f53\u4f60\u6ce8\u518c\u8fd9\u4e2a\u89c6\u56fe\u96c6\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u6709\u53ef\u80fd\u4f1a\u770b\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u9519\u8bef\uff1a  'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.  \u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u5728\u6ce8\u518c\u89c6\u56fe\u96c6\u65f6\u663e\u5f0f\u8bbe\u7f6e base_name \u53c2\u6570\uff0c\u56e0\u4e3a\u65e0\u6cd5\u4ecemodel\u540d\u81ea\u52a8\u786e\u5b9a\u3002",
            "title": "Usage"
        },
        {
            "location": "/api-guide/routers_zh/#include",
            "text": "\u8def\u7531\u5668\u5b9e\u4f8b\u4e0a\u7684 .urls \u5c5e\u6027\u53ea\u662f\u4e00\u4e2aURL\u6a21\u5f0f\u7684\u6807\u51c6\u5217\u8868\u3002\u5bf9\u4e8e\u5982\u4f55\u6dfb\u52a0\u8fd9\u4e9bURL\uff0c\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5199\u6cd5\u3002  \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06 router.urls \u9644\u52a0\u5230\u73b0\u6709\u89c6\u56fe\u7684\u5217\u8868\u4e2d...  router = routers.SimpleRouter()\nrouter.register(r'users', UserViewSet)\nrouter.register(r'accounts', AccountViewSet)\n\nurlpatterns = [\n    url(r'^forgot-password/$', ForgotPasswordFormView.as_view()),\n]\n\nurlpatterns += router.urls  \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528Django\u7684 include \u51fd\u6570\uff0c\u50cf\u8fd9\u6837...  urlpatterns = [\n    url(r'^forgot-password/$', ForgotPasswordFormView.as_view()),\n    url(r'^', include(router.urls)),\n]  \u8def\u7531\u5668URL\u6a21\u5f0f\u4e5f\u652f\u6301\u547d\u540d\u7a7a\u95f4\u7684\u5199\u6cd5\u3002  urlpatterns = [\n    url(r'^forgot-password/$', ForgotPasswordFormView.as_view()),\n    url(r'^api/', include(router.urls, namespace='api')),\n]  \u5982\u679c\u4f7f\u7528\u5e26\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u5668\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u4efb\u4f55 view_name \u53c2\u6570\u6b63\u786e\u5730\u53cd\u6620\u547d\u540d\u7a7a\u95f4\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u4f60\u9700\u8981\u8ba9\u8d85\u94fe\u63a5\u5230\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u89c6\u56fe\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u5305\u542b\u4e00\u4e2a\u53c2\u6570\uff0c\u4f8b\u5982 view_name ='api\uff1auser-detail' \u3002",
            "title": "\u5728\u8def\u7531\u4e2d\u4f7f\u7528 include"
        },
        {
            "location": "/api-guide/routers_zh/#_1",
            "text": "\u7528 @detail_route \u6216 @list_route \u88c5\u9970\u7684\u89c6\u56fe\u96c6\u4e0a\u7684\u4efb\u4f55\u65b9\u6cd5\u4e5f\u5c06\u88ab\u8def\u7531\u3002\n\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u65b9\u6cd5\u5728 UserViewSet \u7c7b\uff1a  from myapp.permissions import IsAdminOrIsSelf\nfrom rest_framework.decorators import detail_route\n\nclass UserViewSet(ModelViewSet):\n    ...\n\n    @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf])\n    def set_password(self, request, pk=None):\n        ...  \u5c06\u53e6\u5916\u751f\u6210\u4ee5\u4e0bURL\u6a21\u5f0f\uff1a   URL pattern:  ^users/{pk}/set_password/$   Name:  'user-set-password'   \u5982\u679c\u4f60\u4e0d\u60f3\u8ba9\u81ea\u5b9a\u4e49\u7684\u64cd\u4f5c\u4f7f\u7528\u81ea\u52a8\u751f\u6210\u7684\u9ed8\u8ba4URL\uff0c\u4f60\u53ef\u4ee5\u6539\u7528url_path\u53c2\u6570\u8fdb\u884c\u81ea\u5b9a\u4e49\u3002  \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u8981\u5c06\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684URL\u66f4\u6539\u4e3a ^users/{pk}/change-password/$ , \u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a  from myapp.permissions import IsAdminOrIsSelf\nfrom rest_framework.decorators import detail_route\n\nclass UserViewSet(ModelViewSet):\n    ...\n\n    @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf], url_path='change-password')\n    def set_password(self, request, pk=None):\n        ...  \u4ee5\u4e0a\u793a\u4f8b\u5c06\u751f\u6210\u4ee5\u4e0bURL\u683c\u5f0f\uff1a   URL pattern:  ^users/{pk}/change-password/$   Name:  'user-change-password'   \u5728\u4f60\u4e0d\u60f3\u4f7f\u7528\u4e3a\u81ea\u5b9a\u4e49\u64cd\u4f5c\u751f\u6210\u7684\u9ed8\u8ba4\u540d\u79f0\u7684\u60c5\u51b5\u4e0b\uff0cni\u53ef\u4ee5\u4f7f\u7528url_name\u53c2\u6570\u6765\u81ea\u5b9a\u4e49\u5b83\u3002  \u4f8b\u5982\uff0c\u5982\u679c\u8981\u5c06\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684\u540d\u79f0\u66f4\u6539\u4e3a 'user-change-password' \uff0c\u5219\u53ef\u4ee5\u5199\u4e3a\uff1a  from myapp.permissions import IsAdminOrIsSelf\nfrom rest_framework.decorators import detail_route\n\nclass UserViewSet(ModelViewSet):\n    ...\n\n    @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf], url_name='change-password')\n    def set_password(self, request, pk=None):\n        ...  \u4ee5\u4e0a\u793a\u4f8b\u73b0\u5728\u5c06\u751f\u6210\u4ee5\u4e0bURL\u683c\u5f0f\uff1a   URL pattern:  ^users/{pk}/set_password/$   Name:  'user-change-password'   \u4f60\u8fd8\u53ef\u4ee5\u540c\u65f6\u8bbe\u7f6eurl_path\u548curl_name\u53c2\u6570\u5bf9\u81ea\u5b9a\u4e49\u89c6\u56fe\u7684URL\u751f\u6210\u8fdb\u884c\u989d\u5916\u7684\u63a7\u5236\u3002  \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605viewset\u6587\u6863 [\u6807\u8bb0\u8def\u7531\u7684\u989d\u5916\u64cd\u4f5c][route-decorators].",
            "title": "\u989d\u5916\u94fe\u63a5\u548c\u64cd\u4f5c"
        },
        {
            "location": "/api-guide/routers_zh/#api",
            "text": "",
            "title": "API \u5411\u5bfc"
        },
        {
            "location": "/api-guide/routers_zh/#simplerouter",
            "text": "\u8be5\u8def\u7531\u5668\u5305\u62ec\u6807\u51c6\u96c6\u5408 list ,  create ,  retrieve ,  update ,  partial_update  \u548c  destroy \u52a8\u4f5c\u7684\u8def\u7531\u3002\u89c6\u56fe\u96c6\u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528 @ detail_route \u6216 @ list_route \u88c5\u9970\u5668\u6807\u8bb0\u8981\u88ab\u8def\u7531\u7684\u5176\u4ed6\u65b9\u6cd5\u3002  \n     URL \u6837\u5f0f HTTP \u65b9\u6cd5 \u52a8\u4f5c URL \u540d \n     {prefix}/ GET list {basename}-list \n     POST create \n     {prefix}/{methodname}/ GET, or as specified by `methods` argument `@list_route` decorated method {basename}-{methodname} \n     {prefix}/{lookup}/ GET retrieve {basename}-detail \n     PUT update \n     PATCH partial_update \n     DELETE destroy \n     {prefix}/{lookup}/{methodname}/ GET, or as specified by `methods` argument `@detail_route` decorated method {basename}-{methodname}   \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531 SimpleRouter \u521b\u5efa\u7684URL\u5c06\u9644\u52a0\u5c3e\u90e8\u659c\u6760\u3002\n\u5728\u5b9e\u4f8b\u5316\u8def\u7531\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06 trailing_slash \u53c2\u6570\u8bbe\u7f6e\u4e3a`False'\u6765\u4fee\u6539\u6b64\u884c\u4e3a\u3002\u6bd4\u5982\uff1a  router = SimpleRouter(trailing_slash=False)  \u5c3e\u90e8\u659c\u6760\u5728Django\u4e2d\u662f\u5e38\u89c1\u7684\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u4e00\u4e9b\u6846\u67b6\uff08\u5982Rails\uff09\u4e2d\u9ed8\u8ba4\u4e0d\u4f7f\u7528\u3002\u4f60\u9009\u62e9\u4f7f\u7528\u54ea\u79cd\u98ce\u683c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4f60\u4e2a\u4eba\u504f\u597d\u95ee\u9898\uff0c\u867d\u7136\u4e00\u4e9bjavascript\u6846\u67b6\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u7279\u5b9a\u7684\u8def\u7531\u98ce\u683c\u3002  \u8def\u7531\u5668\u5c06\u5339\u914d\u5305\u542b\u9664\u659c\u6760\u548c\u53e5\u70b9\u5b57\u7b26\u4ee5\u5916\u7684\u4efb\u4f55\u5b57\u7b26\u7684\u67e5\u627e\u503c\u3002\u5bf9\u4e8e\u66f4\u4e25\u683c\uff08\u6216\u66f4\u5bbd\u677e\uff09\u7684\u67e5\u627e\u6a21\u5f0f\uff0c\u8bf7\u5728\u89c6\u56fe\u96c6\u4e0a\u8bbe\u7f6e lookup_value_regex \u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\u67e5\u627e\u9650\u5236\u4e3a\u6709\u6548\u7684UUID\uff1a  class MyModelViewSet(mixins.RetrieveModelMixin, viewsets.GenericViewSet):\n    lookup_field = 'my_model_id'\n    lookup_value_regex = '[0-9a-f]{32}'",
            "title": "SimpleRouter"
        },
        {
            "location": "/api-guide/routers_zh/#defaultrouter",
            "text": "\u8fd9\u4e2a\u8def\u7531\u5668\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684 SimpleRouter \uff0c\u4f46\u662f\u8fd8\u5305\u62ec\u4e00\u4e2a\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5217\u8868\u89c6\u56fe\u7684\u8d85\u94fe\u63a5\u7684API\u6839\u89c6\u56fe\u3002\u5b83\u8fd8\u751f\u6210\u53ef\u9009\u7684 .json \u6837\u5f0f\u683c\u5f0f\u540e\u7f00\u7684\u8def\u7531\u3002  \n     URL \u6837\u5f0f HTTP \u65b9\u6cd5 \u52a8\u4f5c URL \u540d\u79f0 \n     [.format] GET automatically generated root view api-root \n     {prefix}/[.format] GET list {basename}-list \n     POST create \n     {prefix}/{methodname}/[.format] GET, or as specified by `methods` argument `@list_route` decorated method {basename}-{methodname} \n     {prefix}/{lookup}/[.format] GET retrieve {basename}-detail \n     PUT update \n     PATCH partial_update \n     DELETE destroy \n     {prefix}/{lookup}/{methodname}/[.format] GET, or as specified by `methods` argument `@detail_route` decorated method {basename}-{methodname}   \u4e0e SimpleRouter \u4e00\u6837\uff0c\u5728\u5b9e\u4f8b\u5316\u8def\u7531\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06 trailing_slash \u53c2\u6570\u8bbe\u7f6e\u4e3a`False'\u6765\u5220\u9664URL\u8def\u7531\u7684\u5c3e\u90e8\u659c\u6760\u3002  router = DefaultRouter(trailing_slash=False)",
            "title": "DefaultRouter"
        },
        {
            "location": "/api-guide/routers_zh/#routers_1",
            "text": "\u901a\u5e38\u4f60\u5e76\u4e0d\u9700\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8def\u7531\u5668\uff0c\u4f46\u5982\u679c\u4f60\u5bf9API\u7684\u7f51\u5740\u7ed3\u6784\u6709\u7279\u5b9a\u7684\u8981\u6c42\uff0c\u90a3\u5b83\u5c31\u5341\u5206\u6709\u7528\u4e86\u3002\u8fd9\u6837\u505a\u5141\u8bb8\u4f60\u4ee5\u53ef\u91cd\u7528\u7684\u65b9\u5f0f\u5c01\u88c5URL\u7ed3\u6784\uff0c\u786e\u4fdd\u4f60\u4e0d\u5fc5\u4e3a\u6bcf\u4e2a\u65b0\u89c6\u56fe\u663e\u5f0f\u5730\u7f16\u5199URL\u6a21\u5f0f\u3002  \u5b9e\u73b0\u81ea\u5b9a\u4e49\u8def\u7531\u5668\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7ee7\u627f\u4e00\u4e2a\u73b0\u6709\u7684\u8def\u7531\u5668\u7c7b\u3002 .routes \u5c5e\u6027\u7528\u4e8e\u6a21\u677f\u5c06\u88ab\u6620\u5c04\u5230\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684URL\u6a21\u5f0f\u3002 .routes \u5c5e\u6027\u662f\u4e00\u4e2a\u540d\u4e3atuples\u7684Route\u5bf9\u8c61\u7684\u5217\u8868\u3002  Route \u547d\u540d\u5143\u7ec4\u7684\u53c2\u6570\u662f\uff1a  url : \u8868\u793a\u8981\u8def\u7531\u7684URL\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a   {prefix}  - \u7528\u4e8e\u6b64\u7ec4\u8def\u7531\u7684URL\u524d\u7f00\u3002  {lookup}  - \u7528\u4e8e\u4e0e\u5355\u4e2a\u5b9e\u4f8b\u8fdb\u884c\u5339\u914d\u7684\u67e5\u627e\u5b57\u6bb5\u3002  {trailing_slash}  - \u53ef\u4ee5\u662f\u4e00\u4e2a'/'\u6216\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd9\u53d6\u51b3\u4e8e trailing_slash \u53c2\u6570\u3002   mapping : HTTP\u65b9\u6cd5\u540d\u79f0\u5230\u89c6\u56fe\u65b9\u6cd5\u7684\u6620\u5c04  name : \u5728 reverse \u8c03\u7528\u4e2d\u4f7f\u7528\u7684URL\u7684\u540d\u79f0\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a   {basename}  - \u7528\u4e8e\u521b\u5efa\u7684URL\u540d\u79f0\u7684\u57fa\u672c\u540d\u79f0   initkwargs : \u5b9e\u4f8b\u5316\u89c6\u56fe\u65f6\u5e94\u4f20\u9012\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u7684\u5b57\u5178\u3002\u6ce8\u610f\uff0c suffix \u53c2\u6570\u88ab\u4fdd\u7559\u7528\u4e8e\u6807\u8bc6\u89c6\u56fe\u96c6\u7c7b\u578b\uff0c\u5728\u751f\u6210\u89c6\u56fe\u540d\u79f0\u548c\u9762\u5305\u5c51\u94fe\u63a5\u65f6\u4f7f\u7528\u3002",
            "title": "\u81ea\u5b9a\u4e49 Routers"
        },
        {
            "location": "/api-guide/routers_zh/#_2",
            "text": "\u4f60\u8fd8\u53ef\u4ee5\u5b9a\u5236 @ list_route \u548c @detail_route \u88c5\u9970\u5668\u7684\u8def\u7531\u3002\u8981\u8def\u7531\u8fd9\u4e9b\u88c5\u9970\u5668\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\uff0c\u8bf7\u5728 .routes \u5217\u8868\u4e2d\u5305\u542b\u4e00\u4e2a DynamicListRoute \u548c/\u6216 DynamicDetailRoute \u547d\u540d\u7684\u5143\u7ec4\u3002  DynamicListRoute \u548c DynamicDetailRoute \u7684\u53c2\u6570\u662f\uff1a  url : \u8868\u793a\u8981\u8def\u7531\u7684URL\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u4ee5\u5305\u62ec\u4e0e\u201cRoute\u201d\u76f8\u540c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53e6\u5916\u63a5\u53d7 {methodname} \u548c {methodnamehyphen} \u683c\u5f0f\u5b57\u7b26\u4e32\u3002  name : \u5728 reverse \u8c03\u7528\u4e2d\u4f7f\u7528\u7684URL\u7684\u540d\u79f0\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a {basename} \uff0c {methodname} \u548c {methodnamehyphen} \u3002  initkwargs : \u5b9e\u4f8b\u5316\u89c6\u56fe\u65f6\u5e94\u4f20\u9012\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u7684\u5b57\u5178\u3002",
            "title": "\u81ea\u5b9a\u4e49\u52a8\u6001\u8def\u7531"
        },
        {
            "location": "/api-guide/routers_zh/#_3",
            "text": "\u4ee5\u4e0b\u793a\u4f8b\u5c06\u53ea\u8def\u7531\u5230 list \u548c retrieve \u64cd\u4f5c\uff0c\u5e76\u4e14\u4e0d\u4f7f\u7528\u5c3e\u90e8\u659c\u7ebf\u7ea6\u5b9a\u3002  from rest_framework.routers import Route, DynamicDetailRoute, SimpleRouter\n\nclass CustomReadOnlyRouter(SimpleRouter):\n    \"\"\"\n    A router for read-only APIs, which doesn't use trailing slashes.\n    \"\"\"\n    routes = [\n        Route(\n            url=r'^{prefix}$',\n            mapping={'get': 'list'},\n            name='{basename}-list',\n            initkwargs={'suffix': 'List'}\n        ),\n        Route(\n            url=r'^{prefix}/{lookup}$',\n            mapping={'get': 'retrieve'},\n            name='{basename}-detail',\n            initkwargs={'suffix': 'Detail'}\n        ),\n        DynamicDetailRoute(\n            url=r'^{prefix}/{lookup}/{methodnamehyphen}$',\n            name='{basename}-{methodnamehyphen}',\n            initkwargs={}\n        )\n    ]  \u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u5b9a\u4e49\u7684 CustomReadOnlyRouter \u4e3a\u7b80\u5355\u89c6\u56fe\u751f\u6210\u7684\u8def\u7531\u3002  views.py :  class UserViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    A viewset that provides the standard actions\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    lookup_field = 'username'\n\n    @detail_route()\n    def group_names(self, request):\n        \"\"\"\n        Returns a list of all the group names that the given\n        user belongs to.\n        \"\"\"\n        user = self.get_object()\n        groups = user.groups.all()\n        return Response([group.name for group in groups])  urls.py :  router = CustomReadOnlyRouter()\nrouter.register('users', UserViewSet)\nurlpatterns = router.urls  \u5c06\u751f\u6210\u4ee5\u4e0b\u6620\u5c04...  \n     URL HTTP \u65b9\u6cd5 \u52a8\u4f5c URL \u540d\u79f0 \n     /users GET list user-list \n     /users/{username} GET retrieve user-detail \n     /users/{username}/group-names GET group_names user-group-names  < /table\n\n\u6709\u5173\u8bbe\u7f6e`.routes`\u5c5e\u6027\u7684\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605`SimpleRouter`\u7c7b\u7684\u6e90\u4ee3\u7801\u3002\n\n## \u9ad8\u7ea7\u81ea\u5b9a\u4e49\u8def\u7531\u5668\n\n\u5982\u679c\u4f60\u60f3\u63d0\u4f9b\u5b8c\u5168\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\uff0c\u4f60\u53ef\u4ee5\u8986\u5199`BaseRouter`\u5e76\u5199`get_urls\uff08self\uff09`\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5e94\u8be5\u68c0\u67e5\u6ce8\u518c\u7684\u89c6\u56fe\u5e76\u8fd4\u56de\u4e00\u4e2aURL\u6a21\u5f0f\u5217\u8868\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee`self.registry`\u5c5e\u6027\u6765\u68c0\u67e5\u6ce8\u518c\u7684\u524d\u7f00\uff0c\u89c6\u56fe\u96c6\u548c\u57fa\u672c\u540d\u5143\u7ec4\u3002\n\n\u4f60\u53ef\u80fd\u8fd8\u60f3\u8986\u76d6`get_default_base_name\uff08self\uff0cviewset\uff09`\u65b9\u6cd5\uff0c\u6216\u8005\u5728\u8def\u7531\u5668\u6ce8\u518c\u4f60\u7684\u89c6\u56fe\u65f6\u603b\u662f\u663e\u5f0f\u5730\u8bbe\u7f6e`base_name`\u53c2\u6570\u3002\n\n# \u7b2c\u4e09\u65b9\u5305\n\n\u8fd8\u63d0\u4f9b\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u3002\n\n## DRF\u5d4c\u5957\u8def\u7531\u5668\n\n[drf-nested-routers \u5305][drf-nested-routers] \u63d0\u4f9b\u4e86\u4f7f\u7528\u5d4c\u5957\u8d44\u6e90\u7684\u8def\u7531\u5668\u548c\u5173\u7cfb\u5b57\u6bb5\u3002\n\n## ModelRouter (wq.db.rest)\n\nThe [wq.db \u5305][wq.db] \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528`register_model()`API\u6269\u5c55`DefaultRouter`\u7684\u9ad8\u7ea7[ModelRouter] [wq.db-router]\u7c7b\uff08\u548csingleton\u5b9e\u4f8b\uff09\u3002\u5f88\u50cfDjango\u7684`admin.site.register`\uff0c`rest.router.register_model`\u552f\u4e00\u9700\u8981\u7684\u53c2\u6570\u662f\u4e00\u4e2amodel\u7c7b\u3002url\u524d\u7f00\uff0c\u5e8f\u5217\u5316\u5668\u548c\u89c6\u56fe\u96c6\u7684\u5408\u7406\u9ed8\u8ba4\u503c\u5c06\u4ece\u6a21\u578b\u548c\u5168\u5c40\u914d\u7f6e\u4e2d\u63a8\u65ad\u51fa\u6765\u3002\n\n    from wq.db import rest\n    from myapp.models import MyModel\n\n    rest.router.register_model(MyModel)\n\n## DRF-extensions\n\n[`DRF-extensions`\u5305][drf-extensions] \u63d0\u4f9b\u7528\u4e8e\u521b\u5efa [\u5d4c\u5957\u89c6\u56fe][drf-extensions-nested-viewsets]\u7684[\u8def\u7531\u5668][drf-extensions-routers],  \u5177\u6709 [\u53ef\u5b9a\u5236\u7aef\u70b9\u540d\u79f0][drf-extensions-customizable-endpoint-names]\u7684[\u96c6\u5408\u7ea7\u522b\u63a7\u5236\u5668][drf-extensions-collection-level-controllers]\u3002\n\n[cite]: http://guides.rubyonrails.org/routing.html\n[route-decorators]: viewsets.md#marking-extra-actions-for-routing\n[drf-nested-routers]: https://github.com/alanjds/drf-nested-routers\n[wq.db]: http://wq.io/wq.db\n[wq.db-router]: http://wq.io/docs/router\n[drf-extensions]: http://chibisov.github.io/drf-extensions/docs/\n[drf-extensions-routers]: http://chibisov.github.io/drf-extensions/docs/#routers\n[drf-extensions-nested-viewsets]: http://chibisov.github.io/drf-extensions/docs/#nested-routes\n[drf-extensions-collection-level-controllers]: http://chibisov.github.io/drf-extensions/docs/#collection-level-controllers\n[drf-extensions-customizable-endpoint-names]: http://chibisov.github.io/drf-extensions/docs/#controller-endpoint-name",
            "title": "\u4f8b\u5b50"
        },
        {
            "location": "/api-guide/parsers_zh/",
            "text": "\u89e3\u6790\u5668\n\n\n\n\n\u673a\u5668\u4e92\u52a8\u7684Web\u670d\u52a1\u5f80\u5f80\u4f7f\u7528\u66f4\u591a\u7ed3\u6784\u5316\u7684\u683c\u5f0f\u53d1\u9001\u6570\u636e\u800c\u4e0d\u662f\u4f7f\u7528\u8868\u5355\u7f16\u7801\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d1\u9001\u7684\u662f\u6bd4\u7b80\u5355\u5f62\u5f0f\u66f4\u590d\u6742\u7684\u6570\u636e\u3002\n\n\n\u2014 Malcom Tredinnick, \nDjango developers group\n\n\n\n\nREST \u6846\u67b6\u5305\u62ec\u4e00\u4e9b\u5185\u7f6e\u7684Parser\u7c7b\uff0c\u5141\u8bb8\u4f60\u63a5\u53d7\u5404\u79cd\u5a92\u4f53\u7c7b\u578b\u7684\u8bf7\u6c42\u3002\u8fd8\u652f\u6301\u5b9a\u4e49\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff0c\u8fd9\u4f7f\u4f60\u53ef\u4ee5\u7075\u6d3b\u5730\u8bbe\u8ba1API\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u3002\n\n\n\u89e3\u6790\u5668\u5982\u4f55\u786e\u5b9a\n\n\n\u4e00\u7ec4\u89c6\u56fe\u7684\u6709\u6548\u89e3\u6790\u5668\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7c7b\u7684\u5217\u8868\u3002\u5f53\u8bbf\u95ee\nrequest.data\n\u65f6\uff0cREST\u6846\u67b6\u5c06\u68c0\u67e5\u4f20\u5165\u8bf7\u6c42\u4e2d\u7684\nContent-Type\n\u5934\uff0c\u5e76\u786e\u5b9a\u7528\u4e8e\u89e3\u6790\u8bf7\u6c42\u5185\u5bb9\u7684\u89e3\u6790\u5668\u3002\n\n\n\n\n\u6ce8\u610f\n: \u5f00\u53d1\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u65f6\u5e94\u8be5\u59cb\u7ec8\u8bb0\u4f4f\u5728HTTP\u8bf7\u6c42\u4e2d\u53d1\u9001\u6570\u636e\u65f6\u786e\u4fdd\u8bbe\u7f6e\nContent-Type\n\u5934\u3002\n\n\n\u5982\u679c\u4f60\u4e0d\u8bbe\u7f6e\u5185\u5bb9\u7c7b\u578b\uff0c\u5927\u591a\u6570\u5ba2\u6237\u7aef\u5c06\u9ed8\u8ba4\u4f7f\u7528\n'application/x-www-form-urlencoded'\n\uff0c\u800c\u8fd9\u53ef\u80fd\u5e76\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u3002\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4f60\u4f7f\u7528jQuery\u7684\n.ajax() \u65b9\u6cd5\n\u53d1\u9001\njson\n\u7f16\u7801\u6570\u636e\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u5305\u542b\ncontentType\uff1a'application / json'\n\u8bbe\u7f6e\u3002\n\n\n\n\n\u8bbe\u7f6e\u89e3\u6790\u5668\n\n\n\u53ef\u4ee5\u4f7f\u7528\nDEFAULT_PARSER_CLASSES\n\u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u7684\u89e3\u6790\u5668\u96c6\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4ec5\u5141\u8bb8\u5177\u6709\nJSON\n\u5185\u5bb9\u7684\u8bf7\u6c42\uff0c\u800c\u4e0d\u662fJSON\u6216\u8868\u5355\u6570\u636e\u7684\u9ed8\u8ba4\u503c\u3002\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework.parsers.JSONParser',\n    )\n}\n\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u89e3\u6790\u5668\uff0c \u4f7f\u7528\nAPIView\n\u7c7b\u89c6\u56fe\u3002\n\n\nfrom rest_framework.parsers import JSONParser\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    \"\"\"\n    \u53ef\u4ee5\u63a5\u6536JSON\u5185\u5bb9POST\u8bf7\u6c42\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    parser_classes = (JSONParser,)\n\n    def post(self, request, format=None):\n        return Response({'received data': request.data})\n\n\n\n\n\u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u65b9\u6cd5\u7684\u89c6\u56fe\u7684\n@api_view\n\u88c5\u9970\u5668\u3002\n\n\nfrom rest_framework.decorators import api_view\nfrom rest_framework.decorators import parser_classes\n\n@api_view(['POST'])\n@parser_classes((JSONParser,))\ndef example_view(request, format=None):\n    \"\"\"\n    \u53ef\u4ee5\u63a5\u6536JSON\u5185\u5bb9POST\u8bf7\u6c42\u7684\u89c6\u56fe\n    \"\"\"\n    return Response({'received data': request.data})\n\n\n\n\n\n\nAPI\u53c2\u8003\n\n\nJSONParser\n\n\n\u89e3\u6790 \nJSON\n \u8bf7\u6c42\u5185\u5bb9\u3002\n\n\n.media_type\n: \napplication/json\n\n\nFormParser\n\n\n\u89e3\u6790 HTML \u8868\u5355\u5185\u5bb9\u3002\nrequest.data\n\u5c06\u88ab\u586b\u5145\u4e00\u4e2a\nQueryDict\n\u7684\u6570\u636e\u3002\n\n\n\u901a\u5e38\uff0c\u4f60\u9700\u8981\u4f7f\u7528\nFormParser\n\u548c\nMultiPartParser\n\u4e24\u8005\uff0c\u4ee5\u4fbf\u5b8c\u5168\u652f\u6301HTML\u8868\u5355\u6570\u636e\u3002\n\n\n.media_type\n: \napplication/x-www-form-urlencoded\n\n\nMultiPartParser\n\n\n\u89e3\u6790\u591a\u90e8\u5206HTML\u8868\u5355\u5185\u5bb9\uff0c\u652f\u6301\u6587\u4ef6\u4e0a\u4f20\u3002\nrequest.data\n \u90fd\u5c06\u88ab\u4e00\u4e2a \nQueryDict\n\u586b\u5145\u3002\n\n\n\u4f60\u901a\u5e38\u4f1a\u540c\u65f6\u4f7f\u7528\nFormParser\n\u548c\nMultiPartParser\n\u4e24\u8005\uff0c\u4ee5\u4fbf\u5b8c\u5168\u652f\u6301HTML\u8868\u5355\u6570\u636e\u3002\n\n\n.media_type\n: \nmultipart/form-data\n\n\nFileUploadParser\n\n\n\u89e3\u6790\u539f\u59cb\u6587\u4ef6\u4e0a\u4f20\u5185\u5bb9\u3002 \nrequest.data\n \u5c5e\u6027\u5c06\u662f\u6709\u5355\u4e2akey \n'file'\n\u7684\u5305\u542b\u4e0a\u4f20\u6587\u4ef6\u7684\u5b57\u5178\u3002\n\n\n\u5982\u679c\u4e0e\nFileUploadParser\n\u4e00\u8d77\u4f7f\u7528\u7684\u89c6\u56fe\u4f7f\u7528\nfilename\n URL\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\uff0c\u5219\u8be5\u53c2\u6570\u5c06\u7528\u4f5c\u6587\u4ef6\u540d\u3002\n\n\n\u5982\u679c\u6ca1\u6709\nfilename\n URL\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5fc5\u987b\u5728\nContent-Disposition\n HTTP\u5934\u4e2d\u8bbe\u7f6e\u6587\u4ef6\u540d\u3002\u4f8b\u5982 \nContent-Disposition: attachment; filename=upload.jpg\n.\n\n\n.media_type\n: \n*/*\n\n\n\u8bf4\u660e:\n\n\n\n\nFileUploadParser\n \u7528\u4e8e\u4e0e\u539f\u59cb\u6570\u636e\u8bf7\u6c42\u4e00\u8d77\u4e0a\u4f20\u6587\u4ef6\u7684\u672c\u673a\u5ba2\u6237\u7aef\u3002\u5bf9\u4e8e\u57fa\u4e8eWeb\u7684\u4e0a\u4f20\uff0c\u6216\u8005\u5bf9\u4e8e\u5177\u6709\u591a\u90e8\u5206\u4e0a\u4f20\u652f\u6301\u7684\u672c\u673a\u5ba2\u6237\u7aef\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528\nMultiPartParser\n\u89e3\u6790\u5668\u3002\n\n\n\u7531\u4e8e\u8be5\u89e3\u6790\u5668\u7684\nmedia_type\n\u4e0e\u4efb\u4f55\u5185\u5bb9\u7c7b\u578b\u5339\u914d\uff0c\u6240\u4ee5\nFileUploadParser\n\u901a\u5e38\u5e94\u8be5\u662fAPI\u89c6\u56fe\u4e2d\u552f\u4e00\u7684\u89e3\u6790\u5668\u3002\n\n\nFileUploadParser\n \u9075\u5faa Django \u7684\u6807\u51c6 \nFILE_UPLOAD_HANDLERS\n \u8bbe\u7f6e\uff0c\u548c \nrequest.upload_handlers\n \u5c5e\u6027\u3002\u53c2\u89c1 \nDjango \u6587\u6863\n \u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u3002\n\n\n\n\n\u57fa\u672c\u7528\u6cd5\u793a\u4f8b\uff1a\n\n\n# views.py\nclass FileUploadView(views.APIView):\n    parser_classes = (FileUploadParser,)\n\n    def put(self, request, filename, format=None):\n        file_obj = request.data['file']\n        # ...\n        # do some stuff with uploaded file\n        # ...\n        return Response(status=204)\n\n# urls.py\nurlpatterns = [\n    # ...\n    url(r'^upload/(?P<filename>[^/]+)$', FileUploadView.as_view())\n]\n\n\n\n\n\n\n\u81ea\u5b9a\u4e49\u89e3\u6790\u5668\n\n\n\u8981\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff0c\u4f60\u5e94\u8be5\u91cd\u5199\nBaseParser\n\uff0c\u8bbe\u7f6e\n.media_type\n\u5c5e\u6027\uff0c\u5e76\u5b9e\u73b0\n.parse(self\uff0cstream\uff0cmedia_type\uff0cparser_context)\n\u65b9\u6cd5\u3002\n\n\n\u8be5\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u7528\u4e8e\u586b\u5145\nrequest.data\n \u5c5e\u6027\u7684\u6570\u636e\u3002\n\n\n\u4f20\u9012\u7ed9 \n.parse()\n \u7684\u53c2\u6570\u662f:\n\n\nstream\n\n\n\u8868\u793a\u8bf7\u6c42\u4f53\u7684\u6570\u636e\u6d41\u3002\n\n\nmedia_type\n\n\n\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u4f20\u5165\u8bf7\u6c42\u5185\u5bb9\u7684\u5a92\u4f53\u7c7b\u578b\u3002\n\n\n\u57fa\u4e8e\u8bf7\u6c42\u7684\nContent-Type:\n\u5934\uff0c\u8fd9\u53ef\u80fd\u6bd4\u6e32\u67d3\u5668\u7684\nmedia_type\n\u5c5e\u6027\u66f4\u5177\u4f53\uff0c\u53ef\u80fd\u5305\u62ec\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u3002\u4f8b\u5982 \n\"text/plain; charset=utf-8\"\n\u3002\n\n\nparser_context\n\n\n\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8be5\u53c2\u6570\u5c06\u662f\u4e00\u4e2a\u5305\u542b\u89e3\u6790\u8bf7\u6c42\u5185\u5bb9\u53ef\u80fd\u9700\u8981\u7684\u4efb\u4f55\u9644\u52a0\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u5305\u542b\u4ee5\u4e0bkeys: \nview\n, \nrequest\n, \nargs\n, \nkwargs\n\u3002\n\n\n\u4f8b\u5b50\n\n\n\u4ee5\u4e0b\u662f\u4e00\u4e2aPlain text\u7684\u793a\u4f8b\uff0c\u5b83\u5c06\u4f7f\u7528\u8868\u793a\u8bf7\u6c42\u6b63\u6587\u7684\u5b57\u7b26\u4e32\u586b\u5145\nrequest.data\n\u5c5e\u6027\u3002\n\n\nclass PlainTextParser(BaseParser):\n    \"\"\"\n    Plain text \u89e3\u6790\u5668\u3002\n    \"\"\"\n    media_type = 'text/plain'\n\n    def parse(self, stream, media_type=None, parser_context=None):\n        \"\"\"\n        \u53ea\u9700\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u6b63\u6587\u7684\u5b57\u7b26\u4e32\u3002\n        \"\"\"\n        return stream.read()\n\n\n\n\n\n\n\u7b2c\u4e09\u65b9\u5305\n\n\n\u4ee5\u4e0b\u662f\u53ef\u7528\u7684\u7b2c\u4e09\u65b9\u5305\u3002\n\n\nYAML\n\n\nREST framework YAML\n \u63d0\u4f9b\u4e86 \nYAML\n \u89e3\u6790\u548c\u5448\u73b0\u7684\u652f\u6301\u3002\u4e4b\u524d\u5b83\u662f\u76f4\u63a5\u5305\u542b\u5728REST\u6846\u67b6\u5305\u4e2d\u7684\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002\n\n\n\u5b89\u88c5\u548c\u914d\u7f6e\n\n\n\u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5\u3002\n\n\n$ pip install djangorestframework-yaml\n\n\n\n\n\u4fee\u6539\u4f60\u7684 REST framework settings\u3002\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_yaml.parsers.YAMLParser',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_yaml.renderers.YAMLRenderer',\n    ),\n}\n\n\n\n\nXML\n\n\nREST Framework XML\n \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u975e\u6b63\u5f0fXML\u683c\u5f0f\u3002\u5b83\u4ee5\u524d\u662f\u76f4\u63a5\u5305\u542b\u5728REST\u6846\u67b6\u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002\n\n\n\u5b89\u88c5\u548c\u914d\u7f6e\n\n\n\u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5\u3002\n\n\n$ pip install djangorestframework-xml\n\n\n\n\n\u4fee\u6539\u4f60\u7684 REST framework settings.\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_xml.parsers.XMLParser',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_xml.renderers.XMLRenderer',\n    ),\n}\n\n\n\n\nMessagePack\n\n\nMessagePack\n \u662f\u4e00\u79cd\u5feb\u901f\uff0c\u9ad8\u6548\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\u3002 \nJuan Riaza\n \u7ef4\u62a4\u4e86 \ndjangorestframework-msgpack\n \u5305\uff0c\u5b83\u4e3aREST\u6846\u67b6\u63d0\u4f9bMessagePack\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u652f\u6301\u3002\n\n\nCamelCase JSON\n\n\ndjangorestframework-camel-case\n \u4e3aREST framework\u63d0\u4f9b\u4e86\u9a7c\u5cf0\u7c7b\u578bJSON \u751f\u6210\u548c\u89e3\u6790\u3002\u8fd9\u4e2a\u5e93\u5141\u8bb8\u5e8f\u5217\u5316\u7a0b\u5e8f\u4f7f\u7528Python\u98ce\u683c\u7684\u4e0b\u5212\u7ebf\u5b57\u6bb5\u540d\u79f0\uff0c\u5e76\u4e14\u5c06\u5176\u8f6c\u53d8\u4e3aJavascript\u98ce\u683c\u7684\u9a7c\u5cf0\u5b57\u6bb5\u540d\u79f0\u5728API\u4e2d\u516c\u5f00\u3002\u8fd9\u4e2a\u5e93\u7531 \nVitaly Babiy\n\u7ef4\u62a4\u3002",
            "title": "Parsers"
        },
        {
            "location": "/api-guide/parsers_zh/#_1",
            "text": "\u673a\u5668\u4e92\u52a8\u7684Web\u670d\u52a1\u5f80\u5f80\u4f7f\u7528\u66f4\u591a\u7ed3\u6784\u5316\u7684\u683c\u5f0f\u53d1\u9001\u6570\u636e\u800c\u4e0d\u662f\u4f7f\u7528\u8868\u5355\u7f16\u7801\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d1\u9001\u7684\u662f\u6bd4\u7b80\u5355\u5f62\u5f0f\u66f4\u590d\u6742\u7684\u6570\u636e\u3002  \u2014 Malcom Tredinnick,  Django developers group   REST \u6846\u67b6\u5305\u62ec\u4e00\u4e9b\u5185\u7f6e\u7684Parser\u7c7b\uff0c\u5141\u8bb8\u4f60\u63a5\u53d7\u5404\u79cd\u5a92\u4f53\u7c7b\u578b\u7684\u8bf7\u6c42\u3002\u8fd8\u652f\u6301\u5b9a\u4e49\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff0c\u8fd9\u4f7f\u4f60\u53ef\u4ee5\u7075\u6d3b\u5730\u8bbe\u8ba1API\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u3002",
            "title": "\u89e3\u6790\u5668"
        },
        {
            "location": "/api-guide/parsers_zh/#_2",
            "text": "\u4e00\u7ec4\u89c6\u56fe\u7684\u6709\u6548\u89e3\u6790\u5668\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7c7b\u7684\u5217\u8868\u3002\u5f53\u8bbf\u95ee request.data \u65f6\uff0cREST\u6846\u67b6\u5c06\u68c0\u67e5\u4f20\u5165\u8bf7\u6c42\u4e2d\u7684 Content-Type \u5934\uff0c\u5e76\u786e\u5b9a\u7528\u4e8e\u89e3\u6790\u8bf7\u6c42\u5185\u5bb9\u7684\u89e3\u6790\u5668\u3002   \u6ce8\u610f : \u5f00\u53d1\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u65f6\u5e94\u8be5\u59cb\u7ec8\u8bb0\u4f4f\u5728HTTP\u8bf7\u6c42\u4e2d\u53d1\u9001\u6570\u636e\u65f6\u786e\u4fdd\u8bbe\u7f6e Content-Type \u5934\u3002  \u5982\u679c\u4f60\u4e0d\u8bbe\u7f6e\u5185\u5bb9\u7c7b\u578b\uff0c\u5927\u591a\u6570\u5ba2\u6237\u7aef\u5c06\u9ed8\u8ba4\u4f7f\u7528 'application/x-www-form-urlencoded' \uff0c\u800c\u8fd9\u53ef\u80fd\u5e76\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u3002  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4f60\u4f7f\u7528jQuery\u7684 .ajax() \u65b9\u6cd5 \u53d1\u9001 json \u7f16\u7801\u6570\u636e\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u5305\u542b contentType\uff1a'application / json' \u8bbe\u7f6e\u3002",
            "title": "\u89e3\u6790\u5668\u5982\u4f55\u786e\u5b9a"
        },
        {
            "location": "/api-guide/parsers_zh/#_3",
            "text": "\u53ef\u4ee5\u4f7f\u7528 DEFAULT_PARSER_CLASSES \u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u7684\u89e3\u6790\u5668\u96c6\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4ec5\u5141\u8bb8\u5177\u6709 JSON \u5185\u5bb9\u7684\u8bf7\u6c42\uff0c\u800c\u4e0d\u662fJSON\u6216\u8868\u5355\u6570\u636e\u7684\u9ed8\u8ba4\u503c\u3002  REST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework.parsers.JSONParser',\n    )\n}  \u4f60\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u89e3\u6790\u5668\uff0c \u4f7f\u7528 APIView \u7c7b\u89c6\u56fe\u3002  from rest_framework.parsers import JSONParser\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    \"\"\"\n    \u53ef\u4ee5\u63a5\u6536JSON\u5185\u5bb9POST\u8bf7\u6c42\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    parser_classes = (JSONParser,)\n\n    def post(self, request, format=None):\n        return Response({'received data': request.data})  \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u65b9\u6cd5\u7684\u89c6\u56fe\u7684 @api_view \u88c5\u9970\u5668\u3002  from rest_framework.decorators import api_view\nfrom rest_framework.decorators import parser_classes\n\n@api_view(['POST'])\n@parser_classes((JSONParser,))\ndef example_view(request, format=None):\n    \"\"\"\n    \u53ef\u4ee5\u63a5\u6536JSON\u5185\u5bb9POST\u8bf7\u6c42\u7684\u89c6\u56fe\n    \"\"\"\n    return Response({'received data': request.data})",
            "title": "\u8bbe\u7f6e\u89e3\u6790\u5668"
        },
        {
            "location": "/api-guide/parsers_zh/#api",
            "text": "",
            "title": "API\u53c2\u8003"
        },
        {
            "location": "/api-guide/parsers_zh/#jsonparser",
            "text": "\u89e3\u6790  JSON  \u8bf7\u6c42\u5185\u5bb9\u3002  .media_type :  application/json",
            "title": "JSONParser"
        },
        {
            "location": "/api-guide/parsers_zh/#formparser",
            "text": "\u89e3\u6790 HTML \u8868\u5355\u5185\u5bb9\u3002 request.data \u5c06\u88ab\u586b\u5145\u4e00\u4e2a QueryDict \u7684\u6570\u636e\u3002  \u901a\u5e38\uff0c\u4f60\u9700\u8981\u4f7f\u7528 FormParser \u548c MultiPartParser \u4e24\u8005\uff0c\u4ee5\u4fbf\u5b8c\u5168\u652f\u6301HTML\u8868\u5355\u6570\u636e\u3002  .media_type :  application/x-www-form-urlencoded",
            "title": "FormParser"
        },
        {
            "location": "/api-guide/parsers_zh/#multipartparser",
            "text": "\u89e3\u6790\u591a\u90e8\u5206HTML\u8868\u5355\u5185\u5bb9\uff0c\u652f\u6301\u6587\u4ef6\u4e0a\u4f20\u3002 request.data  \u90fd\u5c06\u88ab\u4e00\u4e2a  QueryDict \u586b\u5145\u3002  \u4f60\u901a\u5e38\u4f1a\u540c\u65f6\u4f7f\u7528 FormParser \u548c MultiPartParser \u4e24\u8005\uff0c\u4ee5\u4fbf\u5b8c\u5168\u652f\u6301HTML\u8868\u5355\u6570\u636e\u3002  .media_type :  multipart/form-data",
            "title": "MultiPartParser"
        },
        {
            "location": "/api-guide/parsers_zh/#fileuploadparser",
            "text": "\u89e3\u6790\u539f\u59cb\u6587\u4ef6\u4e0a\u4f20\u5185\u5bb9\u3002  request.data  \u5c5e\u6027\u5c06\u662f\u6709\u5355\u4e2akey  'file' \u7684\u5305\u542b\u4e0a\u4f20\u6587\u4ef6\u7684\u5b57\u5178\u3002  \u5982\u679c\u4e0e FileUploadParser \u4e00\u8d77\u4f7f\u7528\u7684\u89c6\u56fe\u4f7f\u7528 filename  URL\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\uff0c\u5219\u8be5\u53c2\u6570\u5c06\u7528\u4f5c\u6587\u4ef6\u540d\u3002  \u5982\u679c\u6ca1\u6709 filename  URL\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5fc5\u987b\u5728 Content-Disposition  HTTP\u5934\u4e2d\u8bbe\u7f6e\u6587\u4ef6\u540d\u3002\u4f8b\u5982  Content-Disposition: attachment; filename=upload.jpg .  .media_type :  */*",
            "title": "FileUploadParser"
        },
        {
            "location": "/api-guide/parsers_zh/#_4",
            "text": "FileUploadParser  \u7528\u4e8e\u4e0e\u539f\u59cb\u6570\u636e\u8bf7\u6c42\u4e00\u8d77\u4e0a\u4f20\u6587\u4ef6\u7684\u672c\u673a\u5ba2\u6237\u7aef\u3002\u5bf9\u4e8e\u57fa\u4e8eWeb\u7684\u4e0a\u4f20\uff0c\u6216\u8005\u5bf9\u4e8e\u5177\u6709\u591a\u90e8\u5206\u4e0a\u4f20\u652f\u6301\u7684\u672c\u673a\u5ba2\u6237\u7aef\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528 MultiPartParser \u89e3\u6790\u5668\u3002  \u7531\u4e8e\u8be5\u89e3\u6790\u5668\u7684 media_type \u4e0e\u4efb\u4f55\u5185\u5bb9\u7c7b\u578b\u5339\u914d\uff0c\u6240\u4ee5 FileUploadParser \u901a\u5e38\u5e94\u8be5\u662fAPI\u89c6\u56fe\u4e2d\u552f\u4e00\u7684\u89e3\u6790\u5668\u3002  FileUploadParser  \u9075\u5faa Django \u7684\u6807\u51c6  FILE_UPLOAD_HANDLERS  \u8bbe\u7f6e\uff0c\u548c  request.upload_handlers  \u5c5e\u6027\u3002\u53c2\u89c1  Django \u6587\u6863  \u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u3002",
            "title": "\u8bf4\u660e:"
        },
        {
            "location": "/api-guide/parsers_zh/#_5",
            "text": "# views.py\nclass FileUploadView(views.APIView):\n    parser_classes = (FileUploadParser,)\n\n    def put(self, request, filename, format=None):\n        file_obj = request.data['file']\n        # ...\n        # do some stuff with uploaded file\n        # ...\n        return Response(status=204)\n\n# urls.py\nurlpatterns = [\n    # ...\n    url(r'^upload/(?P<filename>[^/]+)$', FileUploadView.as_view())\n]",
            "title": "\u57fa\u672c\u7528\u6cd5\u793a\u4f8b\uff1a"
        },
        {
            "location": "/api-guide/parsers_zh/#_6",
            "text": "\u8981\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff0c\u4f60\u5e94\u8be5\u91cd\u5199 BaseParser \uff0c\u8bbe\u7f6e .media_type \u5c5e\u6027\uff0c\u5e76\u5b9e\u73b0 .parse(self\uff0cstream\uff0cmedia_type\uff0cparser_context) \u65b9\u6cd5\u3002  \u8be5\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u7528\u4e8e\u586b\u5145 request.data  \u5c5e\u6027\u7684\u6570\u636e\u3002  \u4f20\u9012\u7ed9  .parse()  \u7684\u53c2\u6570\u662f:",
            "title": "\u81ea\u5b9a\u4e49\u89e3\u6790\u5668"
        },
        {
            "location": "/api-guide/parsers_zh/#stream",
            "text": "\u8868\u793a\u8bf7\u6c42\u4f53\u7684\u6570\u636e\u6d41\u3002",
            "title": "stream"
        },
        {
            "location": "/api-guide/parsers_zh/#media95type",
            "text": "\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u4f20\u5165\u8bf7\u6c42\u5185\u5bb9\u7684\u5a92\u4f53\u7c7b\u578b\u3002  \u57fa\u4e8e\u8bf7\u6c42\u7684 Content-Type: \u5934\uff0c\u8fd9\u53ef\u80fd\u6bd4\u6e32\u67d3\u5668\u7684 media_type \u5c5e\u6027\u66f4\u5177\u4f53\uff0c\u53ef\u80fd\u5305\u62ec\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u3002\u4f8b\u5982  \"text/plain; charset=utf-8\" \u3002",
            "title": "media_type"
        },
        {
            "location": "/api-guide/parsers_zh/#parser95context",
            "text": "\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8be5\u53c2\u6570\u5c06\u662f\u4e00\u4e2a\u5305\u542b\u89e3\u6790\u8bf7\u6c42\u5185\u5bb9\u53ef\u80fd\u9700\u8981\u7684\u4efb\u4f55\u9644\u52a0\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u5305\u542b\u4ee5\u4e0bkeys:  view ,  request ,  args ,  kwargs \u3002",
            "title": "parser_context"
        },
        {
            "location": "/api-guide/parsers_zh/#_7",
            "text": "\u4ee5\u4e0b\u662f\u4e00\u4e2aPlain text\u7684\u793a\u4f8b\uff0c\u5b83\u5c06\u4f7f\u7528\u8868\u793a\u8bf7\u6c42\u6b63\u6587\u7684\u5b57\u7b26\u4e32\u586b\u5145 request.data \u5c5e\u6027\u3002  class PlainTextParser(BaseParser):\n    \"\"\"\n    Plain text \u89e3\u6790\u5668\u3002\n    \"\"\"\n    media_type = 'text/plain'\n\n    def parse(self, stream, media_type=None, parser_context=None):\n        \"\"\"\n        \u53ea\u9700\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u6b63\u6587\u7684\u5b57\u7b26\u4e32\u3002\n        \"\"\"\n        return stream.read()",
            "title": "\u4f8b\u5b50"
        },
        {
            "location": "/api-guide/parsers_zh/#_8",
            "text": "\u4ee5\u4e0b\u662f\u53ef\u7528\u7684\u7b2c\u4e09\u65b9\u5305\u3002",
            "title": "\u7b2c\u4e09\u65b9\u5305"
        },
        {
            "location": "/api-guide/parsers_zh/#yaml",
            "text": "REST framework YAML  \u63d0\u4f9b\u4e86  YAML  \u89e3\u6790\u548c\u5448\u73b0\u7684\u652f\u6301\u3002\u4e4b\u524d\u5b83\u662f\u76f4\u63a5\u5305\u542b\u5728REST\u6846\u67b6\u5305\u4e2d\u7684\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002",
            "title": "YAML"
        },
        {
            "location": "/api-guide/parsers_zh/#_9",
            "text": "\u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5\u3002  $ pip install djangorestframework-yaml  \u4fee\u6539\u4f60\u7684 REST framework settings\u3002  REST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_yaml.parsers.YAMLParser',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_yaml.renderers.YAMLRenderer',\n    ),\n}",
            "title": "\u5b89\u88c5\u548c\u914d\u7f6e"
        },
        {
            "location": "/api-guide/parsers_zh/#xml",
            "text": "REST Framework XML  \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u975e\u6b63\u5f0fXML\u683c\u5f0f\u3002\u5b83\u4ee5\u524d\u662f\u76f4\u63a5\u5305\u542b\u5728REST\u6846\u67b6\u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002",
            "title": "XML"
        },
        {
            "location": "/api-guide/parsers_zh/#_10",
            "text": "\u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5\u3002  $ pip install djangorestframework-xml  \u4fee\u6539\u4f60\u7684 REST framework settings.  REST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_xml.parsers.XMLParser',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_xml.renderers.XMLRenderer',\n    ),\n}",
            "title": "\u5b89\u88c5\u548c\u914d\u7f6e"
        },
        {
            "location": "/api-guide/parsers_zh/#messagepack",
            "text": "MessagePack  \u662f\u4e00\u79cd\u5feb\u901f\uff0c\u9ad8\u6548\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\u3002  Juan Riaza  \u7ef4\u62a4\u4e86  djangorestframework-msgpack  \u5305\uff0c\u5b83\u4e3aREST\u6846\u67b6\u63d0\u4f9bMessagePack\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u652f\u6301\u3002",
            "title": "MessagePack"
        },
        {
            "location": "/api-guide/parsers_zh/#camelcase-json",
            "text": "djangorestframework-camel-case  \u4e3aREST framework\u63d0\u4f9b\u4e86\u9a7c\u5cf0\u7c7b\u578bJSON \u751f\u6210\u548c\u89e3\u6790\u3002\u8fd9\u4e2a\u5e93\u5141\u8bb8\u5e8f\u5217\u5316\u7a0b\u5e8f\u4f7f\u7528Python\u98ce\u683c\u7684\u4e0b\u5212\u7ebf\u5b57\u6bb5\u540d\u79f0\uff0c\u5e76\u4e14\u5c06\u5176\u8f6c\u53d8\u4e3aJavascript\u98ce\u683c\u7684\u9a7c\u5cf0\u5b57\u6bb5\u540d\u79f0\u5728API\u4e2d\u516c\u5f00\u3002\u8fd9\u4e2a\u5e93\u7531  Vitaly Babiy \u7ef4\u62a4\u3002",
            "title": "CamelCase JSON"
        },
        {
            "location": "/api-guide/renderers_zh/",
            "text": "\u6e32\u67d3\u5668\n\n\n\n\n\u5728\u5c06TemplateResponse\u5b9e\u4f8b\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u5fc5\u987b\u6e32\u67d3\u5b83\u3002\u6e32\u67d3\u8fc7\u7a0b\u91c7\u7528\u6a21\u677f\u548c\u4e0a\u4e0b\u6587\u7684\u4e2d\u95f4\u8868\u793a\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u7684\u6700\u7ec8\u5b57\u8282\u6d41\u3002\n\n\n\u2014 \nDjango \u6587\u6863\n\n\n\n\nREST\u6846\u67b6\u5305\u62ec\u8bb8\u591a\u5185\u7f6e\u7684Renderer\u7c7b\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u5404\u79cd\u5a92\u4f53\u7c7b\u578b\u8fd4\u56de\u54cd\u5e94\u3002\u8fd8\u652f\u6301\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u8fd9\u6837\u53ef\u4ee5\u7075\u6d3b\u5730\u8bbe\u8ba1\u4f60\u81ea\u5df1\u7684\u5a92\u4f53\u7c7b\u578b\u3002\n\n\n\u6e32\u67d3\u5668\u7684\u786e\u5b9a\u65b9\u5f0f\n\n\n\u89c6\u56fe\u7684\u6709\u6548\u6e32\u67d3\u5668\u96c6\u5408\u59cb\u7ec8\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u7c7b\u7684\u5217\u8868\u3002\u5f53\u8f93\u5165\u89c6\u56fe\u65f6\uff0cREST\u6846\u67b6\u5c06\u5bf9\u4f20\u5165\u8bf7\u6c42\u6267\u884c\u5185\u5bb9\u534f\u5546\uff0c\u5e76\u786e\u5b9a\u6700\u9002\u5408\u7684\u6e32\u67d3\u5668\u6765\u6ee1\u8db3\u8bf7\u6c42\u3002\n\n\n\u5185\u5bb9\u534f\u5546\u7684\u57fa\u672c\u8fc7\u7a0b\u5305\u62ec\u68c0\u67e5\u8bf7\u6c42\u7684\nAccept\n\u5934\uff0c\u4ee5\u786e\u5b9a\u54cd\u5e94\u4e2d\u671f\u671b\u7684\u5a92\u4f53\u7c7b\u578b\u3002URL\u4e0a\u53ef\u9009\u7684\u683c\u5f0f\u540e\u7f00\u53ef\u4ee5\u7528\u4e8e\u663e\u5f0f\u8bf7\u6c42\u7279\u5b9a\u8868\u793a\u3002\u4f8b\u5982URL\nhttp://example.com/api/users_count.json\n\u53ef\u80fd\u662f\u59cb\u7ec8\u8fd4\u56deJSON\u6570\u636e\u7684\u8def\u5f84\u3002\n\n\n\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6709\u5173\n\u5185\u5bb9\u534f\u5546\n\u7684\u6587\u6863\u3002\n\n\n\u8bbe\u7f6e\u6e32\u67d3\u5668\n\n\n\u53ef\u4ee5\u4f7f\u7528\nDEFAULT_RENDERER_CLASSES\n\u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\u96c6\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4f7f\u7528\nJSON\n\u4f5c\u4e3a\u4e3b\u8981\u5a92\u4f53\u7c7b\u578b\uff0c\u5e76\u4e14\u8fd8\u5305\u62ec\u81ea\u63cf\u8ff0API\u3002\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    )\n}\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u6e32\u67d3\u5668\uff0c\u4f7f\u7528\nAPIView\n\u7c7b\u89c6\u56fe\u3002\n\n\nfrom django.contrib.auth.models import User\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass UserCountView(APIView):\n    \"\"\"\n    \u8fd4\u56deJSON\u683c\u5f0f\u6d3b\u52a8\u7528\u6237\u6570\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    renderer_classes = (JSONRenderer, )\n\n    def get(self, request, format=None):\n        user_count = User.objects.filter(active=True).count()\n        content = {'user_count': user_count}\n        return Response(content)\n\n\n\n\u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u529f\u80fd\u7684\u89c6\u56fe\u7684\n@api_view\n\u88c5\u9970\u5668\u3002\n\n\n@api_view(['GET'])\n@renderer_classes((JSONRenderer,))\ndef user_count_view(request, format=None):\n    \"\"\"\n    \u8fd4\u56deJSON\u683c\u5f0f\u6d3b\u52a8\u7528\u6237\u6570\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    user_count = User.objects.filter(active=True).count()\n    content = {'user_count': user_count}\n    return Response(content)\n\n\n\n\u6e32\u67d3\u5668\u7c7b\u7684\u6392\u5e8f\n\n\n\u6307\u5b9a\u4f60\u7684API\u7684\u6e32\u67d3\u5668\u7c7b\u65f6\u8981\u8003\u8651\u5230\u6bcf\u4e2a\u5a92\u4f53\u7c7b\u578b\u8981\u5206\u914d\u54ea\u4e9b\u4f18\u5148\u7ea7\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\u3002\u5982\u679c\u4e00\u4e2a\u5ba2\u6237\u7aef\u4e0d\u80fd\u6307\u5b9a\u5b83\u53ef\u4ee5\u63a5\u53d7\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u4f8b\u5982\u53d1\u9001\u4e00\u4e2a\nAccept: */*\n\u5934\uff0c\u6216\u8005\u4e0d\u5305\u542b\u4e00\u4e2a\nAccept\n\u5934\uff0c\u90a3\u4e48REST\u6846\u67b6\u5c06\u9009\u62e9\u5217\u8868\u4e2d\u7528\u4e8e\u54cd\u5e94\u7684\u7b2c\u4e00\u4e2a\u6e32\u67d3\u5668\u3002\n\n\n\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684API\u63d0\u4f9bJSON\u54cd\u5e94\u548cHTML\u53ef\u6d4f\u89c8\u7684API\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5c06\nJSONRenderer\n\u8bbe\u7f6e\u4e3a\u4f60\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\uff0c\u4ee5\u4fbf\u5411\u4e0d\u6307\u5b9a\nAccept\n\u6807\u5934\u7684\u5ba2\u6237\u7aef\u53d1\u9001\nJSON\n\u54cd\u5e94\u3002\n\n\n\u5982\u679c\u4f60\u7684API\u5305\u542b\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u63d0\u4f9b\u5e38\u89c4\u7f51\u9875\u548cAPI\u54cd\u5e94\u7684\u89c6\u56fe\uff0c\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\nTemplateHTMLRenderer\n\u4f5c\u4e3a\u4f60\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\uff0c\u4ee5\u4fbf\u80fd\u5728\u90a3\u4e9b\u53d1\u9001\n\u7834\u574f\u7684\u63a5\u6536\u5934\n\u7684\u65e7\u7248\u672c\u7684\u6d4f\u89c8\u5668\u4e0a\u80fd\u5f88\u597d\u7684\u5c55\u793a\u3002 \n\n\n\n\nAPI \u53c2\u8003\n\n\nJSONRenderer\n\n\n\u4f7f\u7528utf-8\u7f16\u7801\u5c06\u8bf7\u6c42\u7684\u6570\u636e\u6e32\u67d3\u6210\nJSON\n\u3002\n\n\n\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u6837\u5f0f\u662f\u5305\u62ecunicode\u5b57\u7b26\uff0c\u5e76\u4f7f\u7528\u6ca1\u6709\u4e0d\u5fc5\u8981\u7a7a\u683c\u7684\u7d27\u51d1\u6837\u5f0f\u6e32\u67d3\u54cd\u5e94:\n\n\n{\"unicode black star\":\"\u2605\",\"value\":999}\n\n\n\n\u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u5305\u542b\n'indent'\n\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u7684\nJSON\n\u5c06\u88ab\u7f29\u8fdb\u3002\u4f8b\u5982\nAccept: application/json; indent=4\n\u3002\n\n\n{\n    \"unicode black star\": \"\u2605\",\n    \"value\": 999\n}\n\n\n\n\u53ef\u4ee5\u4f7f\u7528\nUNICODE_JSON\n\u548c\nCOMPACT_JSON\n\u66f4\u6539\u9ed8\u8ba4JSON\u7f16\u7801\u6837\u5f0f\u3002\n\n\n.media_type\n: \napplication/json\n\n\n.format\n: \n'.json'\n\n\n.charset\n: \nNone\n\n\nTemplateHTMLRenderer\n\n\n\u4f7f\u7528Django\u7684\u6807\u51c6\u6a21\u677f\u5c06\u6570\u636e\u6e32\u67d3\u6210HTML\u3002\n\n\n\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f20\u9012\u7ed9\nResponse\n\u7684\u6570\u636e\u4e0d\u9700\u8981\u5e8f\u5217\u5316\u3002\u6b64\u5916\uff0c\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u521b\u5efa\nResponse\n\u65f6\u5305\u542b\u4e00\u4e2a\ntemplate_name\n\u53c2\u6570\u3002\n\n\nTemplateHTMLRenderer\u5c06\u521b\u5efa\u4e00\u4e2a\nRequestContext\n\uff0c\u4f7f\u7528\nresponse.data\n\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5b57\u5178\uff0c\u5e76\u786e\u5b9a\u7528\u4e8e\u6e32\u67d3\u4e0a\u4e0b\u6587\u7684\u6a21\u677f\u540d\u79f0\u3002\n\n\n\u6a21\u677f\u540d\u79f0\u7531\uff08\u6309\u4f18\u5148\u987a\u5e8f\uff09\u786e\u5b9a\uff1a\n\n\n\n\n\u4e00\u4e2a\u663e\u5f0f\u7684\ntemplate_name\n\u53c2\u6570\u4f20\u9012\u7ed9\u54cd\u5e94\u3002\n\n\n\u5728\u7c7b\u4e2d\u663e\u5f0f\u5b9a\u4e49\n.template_name\n\u5c5e\u6027\u3002\n\n\n\u8c03\u7528\nview.get_template_names\uff08\uff09\n\u7684\u8fd4\u56de\u7ed3\u679c\u3002\n\n\n\n\n\u4f7f\u7528 \nTemplateHTMLRenderer\n\u7684\u89c6\u56fe\u7684\u4f8b\u5b50\uff1a\n\n\nclass UserDetail(generics.RetrieveAPIView):\n    \"\"\"\n    \u8fd4\u56de\u7ed9\u5b9a\u7528\u6237\u7684\u6a21\u677fHTML\u8868\u793a\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    queryset = User.objects.all()\n    renderer_classes = (TemplateHTMLRenderer,)\n\n    def get(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        return Response({'user': self.object}, template_name='user_detail.html')\n\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\nTemplateHTMLRenderer\n\u6765\u8fd4\u56de\u4f7f\u7528REST\u6846\u67b6\u7684\u5e38\u89c4HTML\u9875\u9762\uff0c\u6216\u8005\u4ece\u5355\u4e2a\u8def\u5f84\u8fd4\u56deHTML\u548cAPI\u54cd\u5e94\u3002\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4f7f\u7528 \nTemplateHTMLRenderer\n \u548c\u5176\u4ed6\u6e32\u67d3\u7c7b\u7684\u7f51\u7ad9\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u5c06\nTemplateHTMLRenderer\n\u5217\u4e3a\nrenderer_classes\n\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u6837\u5373\u4f7f\u5bf9\u4e8e\u53d1\u9001\u683c\u5f0f\u4e0d\u6b63\u786e\u7684\nACCEPT:\n\u5934\u6587\u4ef6\u7684\u6d4f\u89c8\u5668\u5b83\u4e5f\u5c06\u88ab\u4f18\u5148\u6392\u5e8f\u3002\n\n\n\u6709\u5173\nTemplateHTMLRenderer\n\u7528\u6cd5\u7684\u66f4\u591a\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\n_HTML&Forms_\u4e3b\u9898\u9875\n\u3002\n\n\n.media_type\n: \ntext/html\n\n\n.format\n: \n'.html'\n\n\n.charset\n: \nutf-8\n\n\n\u4e5f\u53ef\u4ee5\u770b\u770b: \nStaticHTMLRenderer\n\n\nStaticHTMLRenderer\n\n\n\u4e00\u4e2a\u7b80\u5355\u7684\u6e32\u67d3\u5668\uff0c\u53ea\u9700\u8fd4\u56de\u9884\u6e32\u67d3\u7684HTML\u3002\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f20\u9012\u7ed9\u54cd\u5e94\u5bf9\u8c61\u7684\u6570\u636e\u5e94\u8be5\u662f\u8868\u793a\u8981\u8fd4\u56de\u7684\u5185\u5bb9\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u4e00\u4e2a\u4f7f\u7528 \nStaticHTMLRenderer\n\u7684\u89c6\u56fe\u7684\u4f8b\u5b50\uff1a\n\n\n@api_view(('GET',))\n@renderer_classes((StaticHTMLRenderer,))\ndef simple_html_view(request):\n    data = '<html><body><h1>Hello, world</h1></body></html>'\n    return Response(data)\n\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\nStaticHTMLRenderer\n\u4f7f\u7528REST\u6846\u67b6\u8fd4\u56de\u5e38\u89c4HTML\u9875\u9762\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5355\u4e2a\u8def\u5f84\u8fd4\u56deHTML\u548cAPI\u54cd\u5e94\u3002\n\n\n.media_type\n: \ntext/html\n\n\n.format\n: \n'.html'\n\n\n.charset\n: \nutf-8\n\n\n\u4e5f\u53ef\u4ee5\u770b\u770b\uff1a \nTemplateHTMLRenderer\n\n\nBrowsableAPIRenderer\n\n\n\u5c06\u6570\u636e\u6e32\u67d3\u6210\u53ef\u6d4f\u89c8\u7684API\uff1a\n\n\n\n\n\u6b64\u6e32\u67d3\u5668\u5c06\u786e\u5b9a\u54ea\u4e2a\u5176\u4ed6\u6e32\u67d3\u5668\u5c06\u88ab\u8d4b\u4e88\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u5e76\u4f7f\u7528\u5b83\u5728HTML\u9875\u9762\u4e2d\u663e\u793aAPI\u3002\n\n\n.media_type\n: \ntext/html\n\n\n.format\n: \n'.api'\n\n\n.charset\n: \nutf-8\n\n\n.template\n: \n'rest_framework/api.html'\n\n\n\u81ea\u5b9a\u4e49 BrowsableAPIRenderer\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u54cd\u5e94\u5185\u5bb9\u5c06\u4ee5\u4e0e\nBrowsableAPIRenderer\n\u4e0d\u540c\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\u6e32\u67d3\u5668\u6e32\u67d3\u3002\u5982\u679c\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u6b64\u884c\u4e3a\uff0c\u4f8b\u5982\u4f7f\u7528HTML\u4f5c\u4e3a\u9ed8\u8ba4\u8fd4\u56de\u683c\u5f0f\uff0c\u4f46\u5728\u53ef\u6d4f\u89c8\u7684API\u4e2d\u4f7f\u7528JSON\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\nget_default_renderer()\n\u65b9\u6cd5\u6765\u5b9e\u73b0\u3002\u4f8b\u5982\uff1a\n\n\nclass CustomBrowsableAPIRenderer(BrowsableAPIRenderer):\n    def get_default_renderer(self, view):\n        return JSONRenderer()\n\n\n\nAdminRenderer\n\n\n\u5c06\u6570\u636e\u6e32\u67d3\u7ed9HTML\u4ee5\u8fdb\u884c\u7c7b\u4f3c\u7ba1\u7406\u7684\u663e\u793a\uff1a\n\n\n\n\n\u6b64\u6e32\u67d3\u5668\u9002\u7528\u4e8eCRUD\u98ce\u683c\u7684Web API\uff0c\u8fd8\u5e94\u63d0\u4f9b\u7528\u4e8e\u7ba1\u7406\u6570\u636e\u7684\u7528\u6237\u53cb\u597d\u754c\u9762\u3002\n\n\n\u8bf7\u6ce8\u610f\uff0c\u5305\u542b\u5d4c\u5957\u6216\u5217\u8868\u5e8f\u5217\u5316\u5668\u7684\u8f93\u5165\u89c6\u56fe\u5bf9\u4e8e\nAdminRenderer\n\u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u56e0\u4e3aHTML\u8868\u5355\u65e0\u6cd5\u6b63\u786e\u652f\u6301\u5b83\u4eec\u3002\n\n\n\u6ce8\u610f\n: \u5f53\u6570\u636e\u4e2d\u5b58\u5728\u6b63\u786e\u914d\u7f6e\u7684\nURL_FIELD_NAME\n\uff08\u7f3a\u7701\nurl\n\uff09\u5c5e\u6027\u65f6\uff0c\nAdminRenderer\n\u624d\u80fd\u591f\u5305\u542b\u6307\u5411\u8be6\u7ec6\u9875\u9762\u7684\u94fe\u63a5\u3002\u5bf9\u4e8e\nHyperlinkedModelSerializer\n\uff0c\u8fd9\u5c06\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u662f\u5bf9\u4e8e\nModelSerializer\n \u6216\u8005\u7b80\u5355\u7684\nSerializer\n\u7c7b\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u660e\u786e\u5730\u5305\u542b\u8be5\u5b57\u6bb5\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u6a21\u578b\nget_absolute_url\n\u65b9\u6cd5\uff1a\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    url = serializers.CharField(source='get_absolute_url', read_only=True)\n\n    class Meta:\n        model = Account\n\n\n\n.media_type\n: \ntext/html\n\n\n.format\n: \n'.admin'\n\n\n.charset\n: \nutf-8\n\n\n.template\n: \n'rest_framework/admin.html'\n\n\nHTMLFormRenderer\n\n\n\u5c06\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\u7684\u6570\u636e\u6e32\u67d3\u4e3aHTML\u8868\u5355\u3002\u6b64\u6e32\u67d3\u5668\u7684\u8f93\u51fa\u4e0d\u5305\u62ec\u5c01\u95ed\u7684\n<form>\n\u6807\u7b7e\uff0c\u9690\u85cf\u7684CSRF\u8f93\u5165\u6216\u4efb\u4f55\u63d0\u4ea4\u6309\u94ae\u3002\n\n\n\u6b64\u6e32\u67d3\u5668\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\uff0c\u800c\u662f\u53ef\u4ee5\u901a\u8fc7\u5c06\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\u4f20\u9012\u7ed9\nrender_form\n\u6a21\u677f\u6807\u8bb0\u6765\u66ff\u4ee3\u6a21\u677f\u3002\n\n\n{% load rest_framework %}\n\n<form action=\"/submit-report/\" method=\"post\">\n    {% csrf_token %}\n    {% render_form serializer %}\n    <input type=\"submit\" value=\"Save\" />\n</form>\n\n\n\n\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\nHTML\u548c\u8868\u5355\n\u6587\u6863\u3002\n\n\n.media_type\n: \ntext/html\n\n\n.format\n: \n'.form'\n\n\n.charset\n: \nutf-8\n\n\n.template\n: \n'rest_framework/horizontal/form.html'\n\n\nMultiPartRenderer\n\n\n\u6b64\u6e32\u67d3\u5668\u7528\u4e8e\u6e32\u67d3HTML multipart\u8868\u5355\u6570\u636e\u3002 \n\u5b83\u4e0d\u9002\u5408\u4f5c\u4e3a\u54cd\u5e94\u6e32\u67d3\u5668\n\uff0c\u800c\u662f\u7528\u4e8e\u521b\u5efa\u6d4b\u8bd5\u8bf7\u6c42\uff0c\u4f7f\u7528REST framework\u7684 \n\u6d4b\u8bd5\u5ba2\u6237\u7aef\u548c\u6d4b\u8bd5\u8bf7\u6c42\u5de5\u5382\n\u3002\n\n\n.media_type\n: \nmultipart/form-data; boundary=BoUnDaRyStRiNg\n\n\n.format\n: \n'.multipart'\n\n\n.charset\n: \nutf-8\n\n\n\n\nCustom renderers\n\n\n\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u4f60\u5e94\u8be5\u91cd\u5199\nBaseRenderer\n\uff0c\u8bbe\u7f6e \n.media_type\n\u548c\n.format\n\u5c5e\u6027\uff0c\u5e76\u4e14\u5b9e\u73b0 \n.render(self, data, media_type=None, renderer_context=None)\n \u65b9\u6cd5\u3002\n\n\n\u8fd9\u4e2a\u65b9\u6cd5\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5b57\u8282bytestring\uff0c\u5b83\u5c06\u88ab\u7528\u4e8eHTTP\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\n\n\n\u4f20\u9012\u7ed9 \n.render()\n \u65b9\u6cd5\u7684\u53c2\u6570\u662f\uff1a\n\n\ndata\n\n\n\u8bf7\u6c42\u6570\u636e\uff0c\u7531 \nResponse()\n \u5b9e\u4f8b\u5316\u8bbe\u7f6e\u3002\n\n\nmedia_type=None\n\n\n\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u786e\u5b9a\u7684\u6240\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u3002\n\n\n\u6839\u636e\u5ba2\u6237\u7aef\u7684 \nAccept:\n \u5934\uff0c\u8fd9\u53ef\u80fd\u6bd4\u6e32\u67d3\u5668\u7684 \nmedia_type\n \u5c5e\u6027\u66f4\u5177\u4f53\uff0c\u53ef\u80fd\u5305\u62ec\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u3002\u4f8b\u5982 \n\"application/json; nested=true\"\n\u3002\n\n\nrenderer_context=None\n\n\n\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u4e00\u4e2a\u7531view\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u7684\u5b57\u5178\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u5b57\u5178\u4f1a\u5305\u62ec\u4ee5\u4e0b\u952e\uff1a \nview\n, \nrequest\n, \nresponse\n, \nargs\n, \nkwargs\n\u3002\n\n\n\u4f8b\u5b50\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u660e\u6587\u6e32\u67d3\u5668\uff0c\u5b83\u5c06\u4f7f\u7528\u53c2\u6570\u4f5c\u4e3a\u54cd\u5e94 \ndata\n \u7684\u5185\u5bb9\u8fd4\u56de\u54cd\u5e94\u3002 \n\n\nfrom django.utils.encoding import smart_unicode\nfrom rest_framework import renderers\n\n\nclass PlainTextRenderer(renderers.BaseRenderer):\n    media_type = 'text/plain'\n    format = 'txt'\n\n    def render(self, data, media_type=None, renderer_context=None):\n        return data.encode(self.charset)\n\n\n\n\u8bbe\u7f6e\u5b57\u7b26\u96c6\n\n\n\u5047\u8bbe\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\u7c7b\u6b63\u5728\u4f7f\u7528 \nUTF-8\n \u7f16\u7801\u3002\u8981\u4f7f\u7528\u5176\u4ed6\u7f16\u7801\uff0c\u8bf7\u5728\u6e32\u67d3\u5668\u8bbe\u7f6e \ncharset\n \u5c5e\u6027\u3002\n\n\nclass PlainTextRenderer(renderers.BaseRenderer):\n    media_type = 'text/plain'\n    format = 'txt'\n    charset = 'iso-8859-1'\n\n    def render(self, data, media_type=None, renderer_context=None):\n        return data.encode(self.charset)\n\n\n\n\u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u6e32\u67d3\u7c7b\u8fd4\u56de\u4e86\u4e00\u4e2aunicode\u5b57\u7b26\u4e32\uff0c\u5219\u54cd\u5e94\u5185\u5bb9\u5c06\u88ab\nResponse\n\u7c7b\u5f3a\u5236\u8f6c\u6362\u6210bytestring\uff0c\u6e32\u67d3\u5668\u4e0a\u7684\u8bbe\u7f6e\u7684 \ncharset\n \u5c5e\u6027\u5c06\u7528\u4e8e\u786e\u5b9a\u7f16\u7801\u3002\n\n\n\u5982\u679c\u6e32\u67d3\u5668\u8fd4\u56de\u4e00\u4e2abytestring\u8868\u793a\u539f\u59cb\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\uff0c\u5219\u5e94\u8be5\u8bbe\u7f6e\u5b57\u7b26\u96c6\u7684\u503c\u4e3a \nNone\n\uff0c\u786e\u4fdd\u54cd\u5e94\u8bf7\u6c42\u5934\u7684 \nContent-Type\n \u4e2d\u4e0d\u4f1a\u8bbe\u7f6e \ncharset\n \u503c\u3002\n\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u5c06 \nrender_style\n \u5c5e\u6027\u8bbe\u7f6e\u6210 \n'binary'\n\u3002\u8fd9\u4e48\u505a\u4e5f\u5c06\u786e\u4fdd\u53ef\u6d4f\u89c8\u7684API\u4e0d\u4f1a\u5c1d\u8bd5\u5c06\u4e8c\u8fdb\u5236\u5185\u5bb9\u663e\u793a\u4e3a\u5b57\u7b26\u4e32\u3002\n\n\nclass JPEGRenderer(renderers.BaseRenderer):\n    media_type = 'image/jpeg'\n    format = 'jpg'\n    charset = None\n    render_style = 'binary'\n\n    def render(self, data, media_type=None, renderer_context=None):\n        return data\n\n\n\n\n\n\u9ad8\u7ea7\u6e32\u67d3\u5668\u4f7f\u7528\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528REST framework\u7684\u6e32\u67d3\u5668\u505a\u4e00\u4e9b\u975e\u5e38\u7075\u6d3b\u7684\u4e8b\u60c5\u3002\u4e00\u4e9b\u4f8b\u5b50...\n\n\n\n\n\u6839\u636e\u8bf7\u6c42\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4ece\u540c\u4e00\u4e2a\u8def\u5f84\u65e2\u80fd\u63d0\u4f9b\u5355\u72ec\u7684\u6216\u8005\u5d4c\u5957\u7684\u8868\u793a\u3002\n\n\n\u63d0\u4f9b\u5e38\u89c4HTML\u7f51\u9875\u548c\u6765\u81ea\u540c\u4e00\u8def\u5f84\u7684\u57fa\u4e8eJSON\u7684API\u54cd\u5e94\u3002\n\n\n\u4e3aAPI\u5ba2\u6237\u7aef\u6307\u5b9a\u8981\u4f7f\u7528\u7684\u591a\u79cd\u7c7b\u578b\u7684HTML\u8868\u793a\u5f62\u5f0f\u3002\n\n\n\u672a\u6307\u5b9a\u6e32\u67d3\u5668\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4f8b\u5982\u4f7f\u7528 \nmedia_type = 'image/*'\n\uff0c\u5e76\u4f7f\u7528 \nAccept\n \u6807\u5934\u6765\u66f4\u6539\u54cd\u5e94\u7684\u7f16\u7801\u3002\n\n\n\n\n\u5a92\u4f53\u7c7b\u578b\u7684\u4e0d\u540c\u884c\u4e3a\n\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u89c6\u56fe\u6839\u636e\u6240\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u3002\u5982\u679c\u4f60\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u6839\u636e \nrequest.accepted_renderer\n \u6765\u786e\u5b9a\u5c06\u7528\u4e8e\u54cd\u5e94\u7684\u534f\u5546\u6e32\u67d3\u5668\u3002\n\n\n\u4f8b\u5982:\n\n\n@api_view(('GET',))\n@renderer_classes((TemplateHTMLRenderer, JSONRenderer))\ndef list_users(request):\n    \"\"\"\n    \u4e00\u4e2a\u53ef\u4ee5\u8fd4\u56de\u7cfb\u7edf\u4e2d\u7528\u6237\u7684JSON\u6216HTML\u8868\u793a\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    queryset = Users.objects.filter(active=True)\n\n    if request.accepted_renderer.format == 'html':\n        # TemplateHTMLRenderer \u91c7\u7528\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\uff0c\n        # \u5e76\u4e14\u989d\u5916\u9700\u8981\u4e00\u4e2a 'template_name'\u3002\n        # \u5b83\u4e0d\u9700\u8981\u5e8f\u5217\u5316\u3002\n        data = {'users': queryset}\n        return Response(data, template_name='list_users.html')\n\n    # JSONRenderer \u9700\u8981\u6b63\u5e38\u7684\u5e8f\u5217\u5316\u6570\u636e\u3002\n    serializer = UserSerializer(instance=queryset)\n    data = serializer.data\n    return Response(data)\n\n\n\n\u4e0d\u660e\u786e\u7684\u5a92\u4f53\u7c7b\u578b\n\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u5e0c\u671b\u6e32\u67d3\u5668\u63d0\u4f9b\u4e00\u4e9b\u5217\u5a92\u4f53\u7c7b\u578b\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e3a \nmedia_type\n \u8bbe\u7f6e\u8bf8\u5982 \nimage/*\n \u6216 \n*/*\n\u8fd9\u6837\u7684\u503c\u6765\u6307\u5b9a\u5e94\u8be5\u54cd\u5e94\u7684\u5a92\u4f53\u7c7b\u578b\u3002\n\n\n\u5982\u679c\u4f60\u6307\u5b9a\u4e86\u6e32\u67d3\u5668\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u5728\u8fd4\u56de\u54cd\u5e94\u65f6\u4f7f\u7528 \ncontent_type\n \u5c5e\u6027\u660e\u786e\u6307\u5b9a\u5a92\u4f53\u7c7b\u578b\u3002 \u4f8b\u5982:\n\n\nreturn Response(data, content_type='image/png')\n\n\n\n\u8bbe\u8ba1\u4f60\u7684\u5a92\u4f53\u7c7b\u578b\n\n\n\u8bb8\u591aWeb API\u7684\u76ee\u6807\uff0c\u7b80\u5355\u7684\u5177\u6709\u8d85\u94fe\u63a5\u7684 \nJSON\n \u54cd\u5e94\u53ef\u80fd\u5c31\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u5982\u679c\u4f60\u60f3\u5b8c\u5168\u62e5\u62b1RESTful\u8bbe\u8ba1\u548c\nHATEOAS\n\u5219\u9700\u8981\u66f4\u8be6\u7ec6\u5730\u8003\u8651\u5a92\u4f53\u7c7b\u578b\u7684\u8bbe\u8ba1\u548c\u4f7f\u7528\u3002\n\n\n\u7528\nRoy Fielding\u7684\u8bdd\n\u6765\u8bf4\uff0c\"REST API \u5e94\u8be5\u82b1\u8d39\u6240\u6709\u7684\u63cf\u8ff0\u6027\u52aa\u529b\u6765\u5b9a\u4e49\u7528\u4e8e\u8868\u793a\u8d44\u6e90\u548c\u9a71\u52a8\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u7684\u5a92\u4f53\u7c7b\u578b\uff08\u4eec\uff09\uff0c\u6216\u8005\u4e3a\u73b0\u6709\u7684\u6807\u51c6\u5a92\u4f53\u7c7b\u578b\u5b9a\u4e49\u6269\u5c55\u5173\u7cfb\u540d\u79f0\u548c/\u6216\u8d85\u6587\u672c\u542f\u7528\u6807\u8bb0\u3002\"\u3002\n\n\n\u6709\u5173\u81ea\u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684\u4f18\u79c0\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605GitHub\u5173\u4e8e\u81ea\u5b9a\u4e49 \napplication/vnd.github+json\n \u5a92\u4f53\u7c7b\u578b\u7684\u5e94\u7528\u4ee5\u53ca Mike Amundsen\u7684IANA\u8ba4\u53ef\u7684 \napplication/vnd.collection+json\n JSON\u8d85\u5a92\u4f53\u3002\n\n\nHTML\u9519\u8bef\u89c6\u56fe\n\n\n\u901a\u5e38\u6e32\u67d3\u5668\u90fd\u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u65e0\u8bba\u5b83\u5904\u7406\u7684\u662f\u6b63\u5e38\u7684\u54cd\u5e94\u8fd8\u662f\u7531\u5f02\u5e38\u5f15\u8d77\u7684\u54cd\u5e94\uff0c\u5982 \nHttp404\n \u6216 \nPermissionDenied\n \u5f02\u5e38\uff0c\u6216\u8005\u4e00\u4e2a \nAPIException\n \u7684\u5b50\u7c7b\u3002\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 \nTemplateHTMLRenderer\n \u6216 \nStaticHTMLRenderer\n \u65f6\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u884c\u4e3a\u7565\u6709\u4e0d\u540c\u3002\u5e76\u4e14\u53cd\u6620 \nDjango\u5bf9\u9519\u8bef\u89c6\u56fe\u7684\u9ed8\u8ba4\u5904\u7406\n.\n\n\n\u7531HTML\u6e32\u67d3\u5668\u5f15\u53d1\u548c\u5904\u7406\u7684\u5f02\u5e38\u5c06\u5c1d\u8bd5\u6309\u7167\u4f18\u5148\u987a\u5e8f\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u4e4b\u4e00\u8fdb\u884c\u6e32\u67d3\u3002\n\n\n\n\n\u52a0\u8f7d\u5e76\u6e32\u67d3\u4e00\u4e2a\u540d\u4e3a \n{status_code}.html\n\u7684\u6a21\u677f\u3002\n\n\n\u52a0\u8f7d\u5e76\u6e32\u67d3\u4e00\u4e2a\u540d\u4e3a \napi_exception.html\n\u7684\u6a21\u677f\u3002\n\n\n\u6e32\u67d3HTTP\u72b6\u6001\u7801\u548c\u6587\u672c\uff0c\u4f8b\u5982 \"404 Not Found\"\u3002\n\n\n\n\n\u6a21\u677f\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5305\u62ec\nstatus_code\n\u548c\ndetails\n\u7684 \nRequestContext\n \u6e32\u67d3\u3002\n\n\n\u6ce8\u610f\n: \u5982\u679c\u8bbe\u7f6e\u4e86 \nDEBUG=True\n\uff0cDjango\u5c06\u5c55\u793a\u5b83\u7684\u6807\u51c6\u56de\u6eaf\u9519\u8bef\u9875\u9762\u800c\u4e0d\u662f\u6e32\u67d3HTTP\u72b6\u6001\u7801\u548c\u6587\u672c\u3002\n\n\n\n\n\u7b2c\u4e09\u65b9\u5305\n\n\n\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u662f\u53ef\u7528\u7684\u3002\n\n\nYAML\n\n\nREST framework YAML\n \u63d0\u4f9b \nYAML\n \u89e3\u6790\u548c\u6e32\u67d3\u652f\u6301\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002\n\n\n\u5b89\u88c5\u548c\u914d\u7f6e\n\n\n\u4f7f\u7528pip\u5b89\u88c5\u3002\n\n\n$ pip install djangorestframework-yaml\n\n\n\n\u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_yaml.parsers.YAMLParser',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_yaml.renderers.YAMLRenderer',\n    ),\n}\n\n\n\nXML\n\n\nREST Framework XML\n \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u975e\u6b63\u5f0fXML\u683c\u5f0f\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002\n\n\n\u5b89\u88c5\u548c\u914d\u7f6e\n\n\n\u4f7f\u7528pip\u5b89\u88c5\u3002\n\n\n$ pip install djangorestframework-xml\n\n\n\n\u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_xml.parsers.XMLParser',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_xml.renderers.XMLRenderer',\n    ),\n}\n\n\n\nJSONP\n\n\nREST framework JSONP\n \u63d0\u4f9bJSONP\u6e32\u67d3\u652f\u6301\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002\n\n\n\n\n\u8b66\u544a\n: \u5982\u679c\u4f60\u9700\u8981\u8de8\u57df\u7684AJAX\u8bf7\u6c42\uff0c\u4f60\u901a\u5e38\u5e94\u8be5\u4f7f\u7528\u66f4\u73b0\u4ee3\u5316\u7684\nCORS\n\u65b9\u6cd5\u4ee3\u66ff\nJSONP\n\u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u9605\nCORS\u6587\u6863\n\u3002\n\n\njsonp\n \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6d4f\u89c8\u5668hack\u65b9\u6cd5\uff0c\n\u4ec5\u9002\u7528\u4e8e\u5168\u5c40\u53ef\u8bfb\u7684API\u8def\u5f84\n\uff0c\u5176\u4e2d\nGET\n\u8bf7\u6c42\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u7528\u6237\u6743\u9650\u3002\n\n\n\n\n\u5b89\u88c5\u548c\u914d\u7f6e\n\n\n\u4f7f\u7528pip\u5b89\u88c5\u3002\n\n\n$ pip install djangorestframework-jsonp\n\n\n\n\u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_jsonp.renderers.JSONPRenderer',\n    ),\n}\n\n\n\nMessagePack\n\n\nMessagePack\n\u662f\u4e00\u79cd\u5feb\u901f\uff0c\u9ad8\u6548\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\u3002\nJuan Riaza\n\u7ef4\u62a4\u7740\ndjangorestframework-msgpack\n \u5305\uff0c\u5b83\u4e3aREST framework\u63d0\u4f9bMessagePack\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u652f\u6301\u3002\n\n\nCSV\n\n\n\u9017\u53f7\u5206\u9694\u7684\u503c\u662f\u7eaf\u6587\u672c\u6570\u636e\u683c\u5f0f\uff0c\u53ef\u4ee5\u8f7b\u677e\u5bfc\u5165\u5230\u7535\u5b50\u8868\u683c\u5e94\u7528\u4e2d\u3002\nMjumbe Poe\n\u7ef4\u62a4\u7740\ndjangorestframework-csv\n\u5305\uff0c\u5b83\u4e3aREST framework\u63d0\u4f9b\u4e86CSV\u6e32\u67d3\u5668\u652f\u6301\u3002\n\n\nUltraJSON\n\n\nUltraJSON\n\u662f\u4e00\u4e2a\u4f18\u5316\u7684C JSON\u7f16\u7801\u5668\uff0c\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8JSON\u6e32\u67d3\u901f\u5ea6\u3002\nJacob Haslehurst\n\u7ef4\u62a4\u7740\u4f7f\u7528UJSON\u5305\u5b9e\u73b0JSON\u6e32\u67d3\u7684\ndrf-ujson-renderer\n\u5305\u3002\n\n\nCamelCase JSON\n\n\ndjangorestframework-camel-case\n\u4e3aREST framework\u63d0\u4f9b\u4e86\u9a7c\u5cf0\u6837\u5f0f\u7684JSON\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u3002\u8fd9\u4f7f\u5e8f\u5217\u5316\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528Python\u98ce\u683c\u7684\u4e0b\u5212\u7ebf\u5b57\u6bb5\u540d\uff0c\u4f46\u662f\u5728API\u4e2d\u663e\u793a\u6210Javascript\u6837\u5f0f\u7684\u9a7c\u5cf0\u5b57\u6bb5\u540d\u3002\u5b83\u88ab\nVitaly Babiy\n\u7ef4\u62a4\u7740\u3002\n\n\nPandas (CSV, Excel, PNG)\n\n\nDjango REST Pandas\n\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u548c\u6e32\u67d3\u5668\uff0c\u901a\u8fc7\nPandas\n DataFrame API\u63d0\u4f9b\u989d\u5916\u7684\u6570\u636e\u5904\u7406\u548c\u8f93\u51fa\u3002Django REST Pandas\u5305\u62ecPandas\u98ce\u683c\u7684CSV\u6587\u4ef6\uff0cExcel\u8868\u683c(\u5305\u62ec \n.xls\n \u548c \n.xlsx\n)\u4ee5\u53ca\u8bb8\u591a\n\u5176\u4ed6\u683c\u5f0f\n\u7684\u6e32\u67d3\u5668\u3002\u4f5c\u4e3a\nwq \u9879\u76ee\n\u7684\u4e00\u90e8\u5206\u7531\nS. Andrew Sheppard\n\u7ef4\u62a4\u7740\u3002\n\n\nLaTeX\n\n\nRest Framework Latex\n\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528Laulatex\u8f93\u51faPDF\u7684\u6e32\u67d3\u5668\u3002\u5b83\u7531\nPebble (S/F Software)\n\u7ef4\u62a4\u7740\u3002",
            "title": "Renderers"
        },
        {
            "location": "/api-guide/renderers_zh/#_1",
            "text": "\u5728\u5c06TemplateResponse\u5b9e\u4f8b\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u5fc5\u987b\u6e32\u67d3\u5b83\u3002\u6e32\u67d3\u8fc7\u7a0b\u91c7\u7528\u6a21\u677f\u548c\u4e0a\u4e0b\u6587\u7684\u4e2d\u95f4\u8868\u793a\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u7684\u6700\u7ec8\u5b57\u8282\u6d41\u3002  \u2014  Django \u6587\u6863   REST\u6846\u67b6\u5305\u62ec\u8bb8\u591a\u5185\u7f6e\u7684Renderer\u7c7b\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u5404\u79cd\u5a92\u4f53\u7c7b\u578b\u8fd4\u56de\u54cd\u5e94\u3002\u8fd8\u652f\u6301\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u8fd9\u6837\u53ef\u4ee5\u7075\u6d3b\u5730\u8bbe\u8ba1\u4f60\u81ea\u5df1\u7684\u5a92\u4f53\u7c7b\u578b\u3002",
            "title": "\u6e32\u67d3\u5668"
        },
        {
            "location": "/api-guide/renderers_zh/#_2",
            "text": "\u89c6\u56fe\u7684\u6709\u6548\u6e32\u67d3\u5668\u96c6\u5408\u59cb\u7ec8\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u7c7b\u7684\u5217\u8868\u3002\u5f53\u8f93\u5165\u89c6\u56fe\u65f6\uff0cREST\u6846\u67b6\u5c06\u5bf9\u4f20\u5165\u8bf7\u6c42\u6267\u884c\u5185\u5bb9\u534f\u5546\uff0c\u5e76\u786e\u5b9a\u6700\u9002\u5408\u7684\u6e32\u67d3\u5668\u6765\u6ee1\u8db3\u8bf7\u6c42\u3002  \u5185\u5bb9\u534f\u5546\u7684\u57fa\u672c\u8fc7\u7a0b\u5305\u62ec\u68c0\u67e5\u8bf7\u6c42\u7684 Accept \u5934\uff0c\u4ee5\u786e\u5b9a\u54cd\u5e94\u4e2d\u671f\u671b\u7684\u5a92\u4f53\u7c7b\u578b\u3002URL\u4e0a\u53ef\u9009\u7684\u683c\u5f0f\u540e\u7f00\u53ef\u4ee5\u7528\u4e8e\u663e\u5f0f\u8bf7\u6c42\u7279\u5b9a\u8868\u793a\u3002\u4f8b\u5982URL http://example.com/api/users_count.json \u53ef\u80fd\u662f\u59cb\u7ec8\u8fd4\u56deJSON\u6570\u636e\u7684\u8def\u5f84\u3002  \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6709\u5173 \u5185\u5bb9\u534f\u5546 \u7684\u6587\u6863\u3002",
            "title": "\u6e32\u67d3\u5668\u7684\u786e\u5b9a\u65b9\u5f0f"
        },
        {
            "location": "/api-guide/renderers_zh/#_3",
            "text": "\u53ef\u4ee5\u4f7f\u7528 DEFAULT_RENDERER_CLASSES \u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\u96c6\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4f7f\u7528 JSON \u4f5c\u4e3a\u4e3b\u8981\u5a92\u4f53\u7c7b\u578b\uff0c\u5e76\u4e14\u8fd8\u5305\u62ec\u81ea\u63cf\u8ff0API\u3002  REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    )\n}  \u4f60\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u6e32\u67d3\u5668\uff0c\u4f7f\u7528 APIView \u7c7b\u89c6\u56fe\u3002  from django.contrib.auth.models import User\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass UserCountView(APIView):\n    \"\"\"\n    \u8fd4\u56deJSON\u683c\u5f0f\u6d3b\u52a8\u7528\u6237\u6570\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    renderer_classes = (JSONRenderer, )\n\n    def get(self, request, format=None):\n        user_count = User.objects.filter(active=True).count()\n        content = {'user_count': user_count}\n        return Response(content)  \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u529f\u80fd\u7684\u89c6\u56fe\u7684 @api_view \u88c5\u9970\u5668\u3002  @api_view(['GET'])\n@renderer_classes((JSONRenderer,))\ndef user_count_view(request, format=None):\n    \"\"\"\n    \u8fd4\u56deJSON\u683c\u5f0f\u6d3b\u52a8\u7528\u6237\u6570\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    user_count = User.objects.filter(active=True).count()\n    content = {'user_count': user_count}\n    return Response(content)",
            "title": "\u8bbe\u7f6e\u6e32\u67d3\u5668"
        },
        {
            "location": "/api-guide/renderers_zh/#_4",
            "text": "\u6307\u5b9a\u4f60\u7684API\u7684\u6e32\u67d3\u5668\u7c7b\u65f6\u8981\u8003\u8651\u5230\u6bcf\u4e2a\u5a92\u4f53\u7c7b\u578b\u8981\u5206\u914d\u54ea\u4e9b\u4f18\u5148\u7ea7\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\u3002\u5982\u679c\u4e00\u4e2a\u5ba2\u6237\u7aef\u4e0d\u80fd\u6307\u5b9a\u5b83\u53ef\u4ee5\u63a5\u53d7\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u4f8b\u5982\u53d1\u9001\u4e00\u4e2a Accept: */* \u5934\uff0c\u6216\u8005\u4e0d\u5305\u542b\u4e00\u4e2a Accept \u5934\uff0c\u90a3\u4e48REST\u6846\u67b6\u5c06\u9009\u62e9\u5217\u8868\u4e2d\u7528\u4e8e\u54cd\u5e94\u7684\u7b2c\u4e00\u4e2a\u6e32\u67d3\u5668\u3002  \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684API\u63d0\u4f9bJSON\u54cd\u5e94\u548cHTML\u53ef\u6d4f\u89c8\u7684API\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5c06 JSONRenderer \u8bbe\u7f6e\u4e3a\u4f60\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\uff0c\u4ee5\u4fbf\u5411\u4e0d\u6307\u5b9a Accept \u6807\u5934\u7684\u5ba2\u6237\u7aef\u53d1\u9001 JSON \u54cd\u5e94\u3002  \u5982\u679c\u4f60\u7684API\u5305\u542b\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u63d0\u4f9b\u5e38\u89c4\u7f51\u9875\u548cAPI\u54cd\u5e94\u7684\u89c6\u56fe\uff0c\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 TemplateHTMLRenderer \u4f5c\u4e3a\u4f60\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\uff0c\u4ee5\u4fbf\u80fd\u5728\u90a3\u4e9b\u53d1\u9001 \u7834\u574f\u7684\u63a5\u6536\u5934 \u7684\u65e7\u7248\u672c\u7684\u6d4f\u89c8\u5668\u4e0a\u80fd\u5f88\u597d\u7684\u5c55\u793a\u3002",
            "title": "\u6e32\u67d3\u5668\u7c7b\u7684\u6392\u5e8f"
        },
        {
            "location": "/api-guide/renderers_zh/#api",
            "text": "",
            "title": "API \u53c2\u8003"
        },
        {
            "location": "/api-guide/renderers_zh/#jsonrenderer",
            "text": "\u4f7f\u7528utf-8\u7f16\u7801\u5c06\u8bf7\u6c42\u7684\u6570\u636e\u6e32\u67d3\u6210 JSON \u3002  \u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u6837\u5f0f\u662f\u5305\u62ecunicode\u5b57\u7b26\uff0c\u5e76\u4f7f\u7528\u6ca1\u6709\u4e0d\u5fc5\u8981\u7a7a\u683c\u7684\u7d27\u51d1\u6837\u5f0f\u6e32\u67d3\u54cd\u5e94:  {\"unicode black star\":\"\u2605\",\"value\":999}  \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u5305\u542b 'indent' \u5a92\u4f53\u7c7b\u578b\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u7684 JSON \u5c06\u88ab\u7f29\u8fdb\u3002\u4f8b\u5982 Accept: application/json; indent=4 \u3002  {\n    \"unicode black star\": \"\u2605\",\n    \"value\": 999\n}  \u53ef\u4ee5\u4f7f\u7528 UNICODE_JSON \u548c COMPACT_JSON \u66f4\u6539\u9ed8\u8ba4JSON\u7f16\u7801\u6837\u5f0f\u3002  .media_type :  application/json  .format :  '.json'  .charset :  None",
            "title": "JSONRenderer"
        },
        {
            "location": "/api-guide/renderers_zh/#templatehtmlrenderer",
            "text": "\u4f7f\u7528Django\u7684\u6807\u51c6\u6a21\u677f\u5c06\u6570\u636e\u6e32\u67d3\u6210HTML\u3002  \u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f20\u9012\u7ed9 Response \u7684\u6570\u636e\u4e0d\u9700\u8981\u5e8f\u5217\u5316\u3002\u6b64\u5916\uff0c\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u521b\u5efa Response \u65f6\u5305\u542b\u4e00\u4e2a template_name \u53c2\u6570\u3002  TemplateHTMLRenderer\u5c06\u521b\u5efa\u4e00\u4e2a RequestContext \uff0c\u4f7f\u7528 response.data \u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5b57\u5178\uff0c\u5e76\u786e\u5b9a\u7528\u4e8e\u6e32\u67d3\u4e0a\u4e0b\u6587\u7684\u6a21\u677f\u540d\u79f0\u3002  \u6a21\u677f\u540d\u79f0\u7531\uff08\u6309\u4f18\u5148\u987a\u5e8f\uff09\u786e\u5b9a\uff1a   \u4e00\u4e2a\u663e\u5f0f\u7684 template_name \u53c2\u6570\u4f20\u9012\u7ed9\u54cd\u5e94\u3002  \u5728\u7c7b\u4e2d\u663e\u5f0f\u5b9a\u4e49 .template_name \u5c5e\u6027\u3002  \u8c03\u7528 view.get_template_names\uff08\uff09 \u7684\u8fd4\u56de\u7ed3\u679c\u3002   \u4f7f\u7528  TemplateHTMLRenderer \u7684\u89c6\u56fe\u7684\u4f8b\u5b50\uff1a  class UserDetail(generics.RetrieveAPIView):\n    \"\"\"\n    \u8fd4\u56de\u7ed9\u5b9a\u7528\u6237\u7684\u6a21\u677fHTML\u8868\u793a\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    queryset = User.objects.all()\n    renderer_classes = (TemplateHTMLRenderer,)\n\n    def get(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        return Response({'user': self.object}, template_name='user_detail.html')  \u4f60\u53ef\u4ee5\u4f7f\u7528 TemplateHTMLRenderer \u6765\u8fd4\u56de\u4f7f\u7528REST\u6846\u67b6\u7684\u5e38\u89c4HTML\u9875\u9762\uff0c\u6216\u8005\u4ece\u5355\u4e2a\u8def\u5f84\u8fd4\u56deHTML\u548cAPI\u54cd\u5e94\u3002  \u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4f7f\u7528  TemplateHTMLRenderer  \u548c\u5176\u4ed6\u6e32\u67d3\u7c7b\u7684\u7f51\u7ad9\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u5c06 TemplateHTMLRenderer \u5217\u4e3a renderer_classes \u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u6837\u5373\u4f7f\u5bf9\u4e8e\u53d1\u9001\u683c\u5f0f\u4e0d\u6b63\u786e\u7684 ACCEPT: \u5934\u6587\u4ef6\u7684\u6d4f\u89c8\u5668\u5b83\u4e5f\u5c06\u88ab\u4f18\u5148\u6392\u5e8f\u3002  \u6709\u5173 TemplateHTMLRenderer \u7528\u6cd5\u7684\u66f4\u591a\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605 _HTML&Forms_\u4e3b\u9898\u9875 \u3002  .media_type :  text/html  .format :  '.html'  .charset :  utf-8  \u4e5f\u53ef\u4ee5\u770b\u770b:  StaticHTMLRenderer",
            "title": "TemplateHTMLRenderer"
        },
        {
            "location": "/api-guide/renderers_zh/#statichtmlrenderer",
            "text": "\u4e00\u4e2a\u7b80\u5355\u7684\u6e32\u67d3\u5668\uff0c\u53ea\u9700\u8fd4\u56de\u9884\u6e32\u67d3\u7684HTML\u3002\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f20\u9012\u7ed9\u54cd\u5e94\u5bf9\u8c61\u7684\u6570\u636e\u5e94\u8be5\u662f\u8868\u793a\u8981\u8fd4\u56de\u7684\u5185\u5bb9\u7684\u5b57\u7b26\u4e32\u3002  \u4e00\u4e2a\u4f7f\u7528  StaticHTMLRenderer \u7684\u89c6\u56fe\u7684\u4f8b\u5b50\uff1a  @api_view(('GET',))\n@renderer_classes((StaticHTMLRenderer,))\ndef simple_html_view(request):\n    data = '<html><body><h1>Hello, world</h1></body></html>'\n    return Response(data)  \u4f60\u53ef\u4ee5\u4f7f\u7528 StaticHTMLRenderer \u4f7f\u7528REST\u6846\u67b6\u8fd4\u56de\u5e38\u89c4HTML\u9875\u9762\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5355\u4e2a\u8def\u5f84\u8fd4\u56deHTML\u548cAPI\u54cd\u5e94\u3002  .media_type :  text/html  .format :  '.html'  .charset :  utf-8  \u4e5f\u53ef\u4ee5\u770b\u770b\uff1a  TemplateHTMLRenderer",
            "title": "StaticHTMLRenderer"
        },
        {
            "location": "/api-guide/renderers_zh/#browsableapirenderer",
            "text": "\u5c06\u6570\u636e\u6e32\u67d3\u6210\u53ef\u6d4f\u89c8\u7684API\uff1a   \u6b64\u6e32\u67d3\u5668\u5c06\u786e\u5b9a\u54ea\u4e2a\u5176\u4ed6\u6e32\u67d3\u5668\u5c06\u88ab\u8d4b\u4e88\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u5e76\u4f7f\u7528\u5b83\u5728HTML\u9875\u9762\u4e2d\u663e\u793aAPI\u3002  .media_type :  text/html  .format :  '.api'  .charset :  utf-8  .template :  'rest_framework/api.html'",
            "title": "BrowsableAPIRenderer"
        },
        {
            "location": "/api-guide/renderers_zh/#browsableapirenderer_1",
            "text": "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u54cd\u5e94\u5185\u5bb9\u5c06\u4ee5\u4e0e BrowsableAPIRenderer \u4e0d\u540c\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\u6e32\u67d3\u5668\u6e32\u67d3\u3002\u5982\u679c\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u6b64\u884c\u4e3a\uff0c\u4f8b\u5982\u4f7f\u7528HTML\u4f5c\u4e3a\u9ed8\u8ba4\u8fd4\u56de\u683c\u5f0f\uff0c\u4f46\u5728\u53ef\u6d4f\u89c8\u7684API\u4e2d\u4f7f\u7528JSON\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 get_default_renderer() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002\u4f8b\u5982\uff1a  class CustomBrowsableAPIRenderer(BrowsableAPIRenderer):\n    def get_default_renderer(self, view):\n        return JSONRenderer()",
            "title": "\u81ea\u5b9a\u4e49 BrowsableAPIRenderer"
        },
        {
            "location": "/api-guide/renderers_zh/#adminrenderer",
            "text": "\u5c06\u6570\u636e\u6e32\u67d3\u7ed9HTML\u4ee5\u8fdb\u884c\u7c7b\u4f3c\u7ba1\u7406\u7684\u663e\u793a\uff1a   \u6b64\u6e32\u67d3\u5668\u9002\u7528\u4e8eCRUD\u98ce\u683c\u7684Web API\uff0c\u8fd8\u5e94\u63d0\u4f9b\u7528\u4e8e\u7ba1\u7406\u6570\u636e\u7684\u7528\u6237\u53cb\u597d\u754c\u9762\u3002  \u8bf7\u6ce8\u610f\uff0c\u5305\u542b\u5d4c\u5957\u6216\u5217\u8868\u5e8f\u5217\u5316\u5668\u7684\u8f93\u5165\u89c6\u56fe\u5bf9\u4e8e AdminRenderer \u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u56e0\u4e3aHTML\u8868\u5355\u65e0\u6cd5\u6b63\u786e\u652f\u6301\u5b83\u4eec\u3002  \u6ce8\u610f : \u5f53\u6570\u636e\u4e2d\u5b58\u5728\u6b63\u786e\u914d\u7f6e\u7684 URL_FIELD_NAME \uff08\u7f3a\u7701 url \uff09\u5c5e\u6027\u65f6\uff0c AdminRenderer \u624d\u80fd\u591f\u5305\u542b\u6307\u5411\u8be6\u7ec6\u9875\u9762\u7684\u94fe\u63a5\u3002\u5bf9\u4e8e HyperlinkedModelSerializer \uff0c\u8fd9\u5c06\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u662f\u5bf9\u4e8e ModelSerializer  \u6216\u8005\u7b80\u5355\u7684 Serializer \u7c7b\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u660e\u786e\u5730\u5305\u542b\u8be5\u5b57\u6bb5\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u6a21\u578b get_absolute_url \u65b9\u6cd5\uff1a  class AccountSerializer(serializers.ModelSerializer):\n    url = serializers.CharField(source='get_absolute_url', read_only=True)\n\n    class Meta:\n        model = Account  .media_type :  text/html  .format :  '.admin'  .charset :  utf-8  .template :  'rest_framework/admin.html'",
            "title": "AdminRenderer"
        },
        {
            "location": "/api-guide/renderers_zh/#htmlformrenderer",
            "text": "\u5c06\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\u7684\u6570\u636e\u6e32\u67d3\u4e3aHTML\u8868\u5355\u3002\u6b64\u6e32\u67d3\u5668\u7684\u8f93\u51fa\u4e0d\u5305\u62ec\u5c01\u95ed\u7684 <form> \u6807\u7b7e\uff0c\u9690\u85cf\u7684CSRF\u8f93\u5165\u6216\u4efb\u4f55\u63d0\u4ea4\u6309\u94ae\u3002  \u6b64\u6e32\u67d3\u5668\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\uff0c\u800c\u662f\u53ef\u4ee5\u901a\u8fc7\u5c06\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\u4f20\u9012\u7ed9 render_form \u6a21\u677f\u6807\u8bb0\u6765\u66ff\u4ee3\u6a21\u677f\u3002  {% load rest_framework %}\n\n<form action=\"/submit-report/\" method=\"post\">\n    {% csrf_token %}\n    {% render_form serializer %}\n    <input type=\"submit\" value=\"Save\" />\n</form>  \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 HTML\u548c\u8868\u5355 \u6587\u6863\u3002  .media_type :  text/html  .format :  '.form'  .charset :  utf-8  .template :  'rest_framework/horizontal/form.html'",
            "title": "HTMLFormRenderer"
        },
        {
            "location": "/api-guide/renderers_zh/#multipartrenderer",
            "text": "\u6b64\u6e32\u67d3\u5668\u7528\u4e8e\u6e32\u67d3HTML multipart\u8868\u5355\u6570\u636e\u3002  \u5b83\u4e0d\u9002\u5408\u4f5c\u4e3a\u54cd\u5e94\u6e32\u67d3\u5668 \uff0c\u800c\u662f\u7528\u4e8e\u521b\u5efa\u6d4b\u8bd5\u8bf7\u6c42\uff0c\u4f7f\u7528REST framework\u7684  \u6d4b\u8bd5\u5ba2\u6237\u7aef\u548c\u6d4b\u8bd5\u8bf7\u6c42\u5de5\u5382 \u3002  .media_type :  multipart/form-data; boundary=BoUnDaRyStRiNg  .format :  '.multipart'  .charset :  utf-8",
            "title": "MultiPartRenderer"
        },
        {
            "location": "/api-guide/renderers_zh/#custom-renderers",
            "text": "\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u4f60\u5e94\u8be5\u91cd\u5199 BaseRenderer \uff0c\u8bbe\u7f6e  .media_type \u548c .format \u5c5e\u6027\uff0c\u5e76\u4e14\u5b9e\u73b0  .render(self, data, media_type=None, renderer_context=None)  \u65b9\u6cd5\u3002  \u8fd9\u4e2a\u65b9\u6cd5\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5b57\u8282bytestring\uff0c\u5b83\u5c06\u88ab\u7528\u4e8eHTTP\u54cd\u5e94\u7684\u4e3b\u4f53\u3002  \u4f20\u9012\u7ed9  .render()  \u65b9\u6cd5\u7684\u53c2\u6570\u662f\uff1a",
            "title": "Custom renderers"
        },
        {
            "location": "/api-guide/renderers_zh/#data",
            "text": "\u8bf7\u6c42\u6570\u636e\uff0c\u7531  Response()  \u5b9e\u4f8b\u5316\u8bbe\u7f6e\u3002",
            "title": "data"
        },
        {
            "location": "/api-guide/renderers_zh/#media_typenone",
            "text": "\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u786e\u5b9a\u7684\u6240\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u3002  \u6839\u636e\u5ba2\u6237\u7aef\u7684  Accept:  \u5934\uff0c\u8fd9\u53ef\u80fd\u6bd4\u6e32\u67d3\u5668\u7684  media_type  \u5c5e\u6027\u66f4\u5177\u4f53\uff0c\u53ef\u80fd\u5305\u62ec\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u3002\u4f8b\u5982  \"application/json; nested=true\" \u3002",
            "title": "media_type=None"
        },
        {
            "location": "/api-guide/renderers_zh/#renderer_contextnone",
            "text": "\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u4e00\u4e2a\u7531view\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u7684\u5b57\u5178\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u5b57\u5178\u4f1a\u5305\u62ec\u4ee5\u4e0b\u952e\uff1a  view ,  request ,  response ,  args ,  kwargs \u3002",
            "title": "renderer_context=None"
        },
        {
            "location": "/api-guide/renderers_zh/#_5",
            "text": "\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u660e\u6587\u6e32\u67d3\u5668\uff0c\u5b83\u5c06\u4f7f\u7528\u53c2\u6570\u4f5c\u4e3a\u54cd\u5e94  data  \u7684\u5185\u5bb9\u8fd4\u56de\u54cd\u5e94\u3002   from django.utils.encoding import smart_unicode\nfrom rest_framework import renderers\n\n\nclass PlainTextRenderer(renderers.BaseRenderer):\n    media_type = 'text/plain'\n    format = 'txt'\n\n    def render(self, data, media_type=None, renderer_context=None):\n        return data.encode(self.charset)",
            "title": "\u4f8b\u5b50"
        },
        {
            "location": "/api-guide/renderers_zh/#_6",
            "text": "\u5047\u8bbe\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\u7c7b\u6b63\u5728\u4f7f\u7528  UTF-8  \u7f16\u7801\u3002\u8981\u4f7f\u7528\u5176\u4ed6\u7f16\u7801\uff0c\u8bf7\u5728\u6e32\u67d3\u5668\u8bbe\u7f6e  charset  \u5c5e\u6027\u3002  class PlainTextRenderer(renderers.BaseRenderer):\n    media_type = 'text/plain'\n    format = 'txt'\n    charset = 'iso-8859-1'\n\n    def render(self, data, media_type=None, renderer_context=None):\n        return data.encode(self.charset)  \u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u6e32\u67d3\u7c7b\u8fd4\u56de\u4e86\u4e00\u4e2aunicode\u5b57\u7b26\u4e32\uff0c\u5219\u54cd\u5e94\u5185\u5bb9\u5c06\u88ab Response \u7c7b\u5f3a\u5236\u8f6c\u6362\u6210bytestring\uff0c\u6e32\u67d3\u5668\u4e0a\u7684\u8bbe\u7f6e\u7684  charset  \u5c5e\u6027\u5c06\u7528\u4e8e\u786e\u5b9a\u7f16\u7801\u3002  \u5982\u679c\u6e32\u67d3\u5668\u8fd4\u56de\u4e00\u4e2abytestring\u8868\u793a\u539f\u59cb\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\uff0c\u5219\u5e94\u8be5\u8bbe\u7f6e\u5b57\u7b26\u96c6\u7684\u503c\u4e3a  None \uff0c\u786e\u4fdd\u54cd\u5e94\u8bf7\u6c42\u5934\u7684  Content-Type  \u4e2d\u4e0d\u4f1a\u8bbe\u7f6e  charset  \u503c\u3002  \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u5c06  render_style  \u5c5e\u6027\u8bbe\u7f6e\u6210  'binary' \u3002\u8fd9\u4e48\u505a\u4e5f\u5c06\u786e\u4fdd\u53ef\u6d4f\u89c8\u7684API\u4e0d\u4f1a\u5c1d\u8bd5\u5c06\u4e8c\u8fdb\u5236\u5185\u5bb9\u663e\u793a\u4e3a\u5b57\u7b26\u4e32\u3002  class JPEGRenderer(renderers.BaseRenderer):\n    media_type = 'image/jpeg'\n    format = 'jpg'\n    charset = None\n    render_style = 'binary'\n\n    def render(self, data, media_type=None, renderer_context=None):\n        return data",
            "title": "\u8bbe\u7f6e\u5b57\u7b26\u96c6"
        },
        {
            "location": "/api-guide/renderers_zh/#_7",
            "text": "\u4f60\u53ef\u4ee5\u4f7f\u7528REST framework\u7684\u6e32\u67d3\u5668\u505a\u4e00\u4e9b\u975e\u5e38\u7075\u6d3b\u7684\u4e8b\u60c5\u3002\u4e00\u4e9b\u4f8b\u5b50...   \u6839\u636e\u8bf7\u6c42\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4ece\u540c\u4e00\u4e2a\u8def\u5f84\u65e2\u80fd\u63d0\u4f9b\u5355\u72ec\u7684\u6216\u8005\u5d4c\u5957\u7684\u8868\u793a\u3002  \u63d0\u4f9b\u5e38\u89c4HTML\u7f51\u9875\u548c\u6765\u81ea\u540c\u4e00\u8def\u5f84\u7684\u57fa\u4e8eJSON\u7684API\u54cd\u5e94\u3002  \u4e3aAPI\u5ba2\u6237\u7aef\u6307\u5b9a\u8981\u4f7f\u7528\u7684\u591a\u79cd\u7c7b\u578b\u7684HTML\u8868\u793a\u5f62\u5f0f\u3002  \u672a\u6307\u5b9a\u6e32\u67d3\u5668\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4f8b\u5982\u4f7f\u7528  media_type = 'image/*' \uff0c\u5e76\u4f7f\u7528  Accept  \u6807\u5934\u6765\u66f4\u6539\u54cd\u5e94\u7684\u7f16\u7801\u3002",
            "title": "\u9ad8\u7ea7\u6e32\u67d3\u5668\u4f7f\u7528"
        },
        {
            "location": "/api-guide/renderers_zh/#_8",
            "text": "\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u89c6\u56fe\u6839\u636e\u6240\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u3002\u5982\u679c\u4f60\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u6839\u636e  request.accepted_renderer  \u6765\u786e\u5b9a\u5c06\u7528\u4e8e\u54cd\u5e94\u7684\u534f\u5546\u6e32\u67d3\u5668\u3002  \u4f8b\u5982:  @api_view(('GET',))\n@renderer_classes((TemplateHTMLRenderer, JSONRenderer))\ndef list_users(request):\n    \"\"\"\n    \u4e00\u4e2a\u53ef\u4ee5\u8fd4\u56de\u7cfb\u7edf\u4e2d\u7528\u6237\u7684JSON\u6216HTML\u8868\u793a\u7684\u89c6\u56fe\u3002\n    \"\"\"\n    queryset = Users.objects.filter(active=True)\n\n    if request.accepted_renderer.format == 'html':\n        # TemplateHTMLRenderer \u91c7\u7528\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\uff0c\n        # \u5e76\u4e14\u989d\u5916\u9700\u8981\u4e00\u4e2a 'template_name'\u3002\n        # \u5b83\u4e0d\u9700\u8981\u5e8f\u5217\u5316\u3002\n        data = {'users': queryset}\n        return Response(data, template_name='list_users.html')\n\n    # JSONRenderer \u9700\u8981\u6b63\u5e38\u7684\u5e8f\u5217\u5316\u6570\u636e\u3002\n    serializer = UserSerializer(instance=queryset)\n    data = serializer.data\n    return Response(data)",
            "title": "\u5a92\u4f53\u7c7b\u578b\u7684\u4e0d\u540c\u884c\u4e3a"
        },
        {
            "location": "/api-guide/renderers_zh/#_9",
            "text": "\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u5e0c\u671b\u6e32\u67d3\u5668\u63d0\u4f9b\u4e00\u4e9b\u5217\u5a92\u4f53\u7c7b\u578b\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e3a  media_type  \u8bbe\u7f6e\u8bf8\u5982  image/*  \u6216  */* \u8fd9\u6837\u7684\u503c\u6765\u6307\u5b9a\u5e94\u8be5\u54cd\u5e94\u7684\u5a92\u4f53\u7c7b\u578b\u3002  \u5982\u679c\u4f60\u6307\u5b9a\u4e86\u6e32\u67d3\u5668\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u5728\u8fd4\u56de\u54cd\u5e94\u65f6\u4f7f\u7528  content_type  \u5c5e\u6027\u660e\u786e\u6307\u5b9a\u5a92\u4f53\u7c7b\u578b\u3002 \u4f8b\u5982:  return Response(data, content_type='image/png')",
            "title": "\u4e0d\u660e\u786e\u7684\u5a92\u4f53\u7c7b\u578b"
        },
        {
            "location": "/api-guide/renderers_zh/#_10",
            "text": "\u8bb8\u591aWeb API\u7684\u76ee\u6807\uff0c\u7b80\u5355\u7684\u5177\u6709\u8d85\u94fe\u63a5\u7684  JSON  \u54cd\u5e94\u53ef\u80fd\u5c31\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u5982\u679c\u4f60\u60f3\u5b8c\u5168\u62e5\u62b1RESTful\u8bbe\u8ba1\u548c HATEOAS \u5219\u9700\u8981\u66f4\u8be6\u7ec6\u5730\u8003\u8651\u5a92\u4f53\u7c7b\u578b\u7684\u8bbe\u8ba1\u548c\u4f7f\u7528\u3002  \u7528 Roy Fielding\u7684\u8bdd \u6765\u8bf4\uff0c\"REST API \u5e94\u8be5\u82b1\u8d39\u6240\u6709\u7684\u63cf\u8ff0\u6027\u52aa\u529b\u6765\u5b9a\u4e49\u7528\u4e8e\u8868\u793a\u8d44\u6e90\u548c\u9a71\u52a8\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u7684\u5a92\u4f53\u7c7b\u578b\uff08\u4eec\uff09\uff0c\u6216\u8005\u4e3a\u73b0\u6709\u7684\u6807\u51c6\u5a92\u4f53\u7c7b\u578b\u5b9a\u4e49\u6269\u5c55\u5173\u7cfb\u540d\u79f0\u548c/\u6216\u8d85\u6587\u672c\u542f\u7528\u6807\u8bb0\u3002\"\u3002  \u6709\u5173\u81ea\u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684\u4f18\u79c0\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605GitHub\u5173\u4e8e\u81ea\u5b9a\u4e49  application/vnd.github+json  \u5a92\u4f53\u7c7b\u578b\u7684\u5e94\u7528\u4ee5\u53ca Mike Amundsen\u7684IANA\u8ba4\u53ef\u7684  application/vnd.collection+json  JSON\u8d85\u5a92\u4f53\u3002",
            "title": "\u8bbe\u8ba1\u4f60\u7684\u5a92\u4f53\u7c7b\u578b"
        },
        {
            "location": "/api-guide/renderers_zh/#html",
            "text": "\u901a\u5e38\u6e32\u67d3\u5668\u90fd\u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u65e0\u8bba\u5b83\u5904\u7406\u7684\u662f\u6b63\u5e38\u7684\u54cd\u5e94\u8fd8\u662f\u7531\u5f02\u5e38\u5f15\u8d77\u7684\u54cd\u5e94\uff0c\u5982  Http404  \u6216  PermissionDenied  \u5f02\u5e38\uff0c\u6216\u8005\u4e00\u4e2a  APIException  \u7684\u5b50\u7c7b\u3002  \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528  TemplateHTMLRenderer  \u6216  StaticHTMLRenderer  \u65f6\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u884c\u4e3a\u7565\u6709\u4e0d\u540c\u3002\u5e76\u4e14\u53cd\u6620  Django\u5bf9\u9519\u8bef\u89c6\u56fe\u7684\u9ed8\u8ba4\u5904\u7406 .  \u7531HTML\u6e32\u67d3\u5668\u5f15\u53d1\u548c\u5904\u7406\u7684\u5f02\u5e38\u5c06\u5c1d\u8bd5\u6309\u7167\u4f18\u5148\u987a\u5e8f\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u4e4b\u4e00\u8fdb\u884c\u6e32\u67d3\u3002   \u52a0\u8f7d\u5e76\u6e32\u67d3\u4e00\u4e2a\u540d\u4e3a  {status_code}.html \u7684\u6a21\u677f\u3002  \u52a0\u8f7d\u5e76\u6e32\u67d3\u4e00\u4e2a\u540d\u4e3a  api_exception.html \u7684\u6a21\u677f\u3002  \u6e32\u67d3HTTP\u72b6\u6001\u7801\u548c\u6587\u672c\uff0c\u4f8b\u5982 \"404 Not Found\"\u3002   \u6a21\u677f\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5305\u62ec status_code \u548c details \u7684  RequestContext  \u6e32\u67d3\u3002  \u6ce8\u610f : \u5982\u679c\u8bbe\u7f6e\u4e86  DEBUG=True \uff0cDjango\u5c06\u5c55\u793a\u5b83\u7684\u6807\u51c6\u56de\u6eaf\u9519\u8bef\u9875\u9762\u800c\u4e0d\u662f\u6e32\u67d3HTTP\u72b6\u6001\u7801\u548c\u6587\u672c\u3002",
            "title": "HTML\u9519\u8bef\u89c6\u56fe"
        },
        {
            "location": "/api-guide/renderers_zh/#_11",
            "text": "\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u662f\u53ef\u7528\u7684\u3002",
            "title": "\u7b2c\u4e09\u65b9\u5305"
        },
        {
            "location": "/api-guide/renderers_zh/#yaml",
            "text": "REST framework YAML  \u63d0\u4f9b  YAML  \u89e3\u6790\u548c\u6e32\u67d3\u652f\u6301\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002",
            "title": "YAML"
        },
        {
            "location": "/api-guide/renderers_zh/#_12",
            "text": "\u4f7f\u7528pip\u5b89\u88c5\u3002  $ pip install djangorestframework-yaml  \u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002  REST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_yaml.parsers.YAMLParser',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_yaml.renderers.YAMLRenderer',\n    ),\n}",
            "title": "\u5b89\u88c5\u548c\u914d\u7f6e"
        },
        {
            "location": "/api-guide/renderers_zh/#xml",
            "text": "REST Framework XML  \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u975e\u6b63\u5f0fXML\u683c\u5f0f\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002",
            "title": "XML"
        },
        {
            "location": "/api-guide/renderers_zh/#_13",
            "text": "\u4f7f\u7528pip\u5b89\u88c5\u3002  $ pip install djangorestframework-xml  \u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002  REST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework_xml.parsers.XMLParser',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_xml.renderers.XMLRenderer',\n    ),\n}",
            "title": "\u5b89\u88c5\u548c\u914d\u7f6e"
        },
        {
            "location": "/api-guide/renderers_zh/#jsonp",
            "text": "REST framework JSONP  \u63d0\u4f9bJSONP\u6e32\u67d3\u652f\u6301\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002   \u8b66\u544a : \u5982\u679c\u4f60\u9700\u8981\u8de8\u57df\u7684AJAX\u8bf7\u6c42\uff0c\u4f60\u901a\u5e38\u5e94\u8be5\u4f7f\u7528\u66f4\u73b0\u4ee3\u5316\u7684 CORS \u65b9\u6cd5\u4ee3\u66ff JSONP \u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u9605 CORS\u6587\u6863 \u3002  jsonp  \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6d4f\u89c8\u5668hack\u65b9\u6cd5\uff0c \u4ec5\u9002\u7528\u4e8e\u5168\u5c40\u53ef\u8bfb\u7684API\u8def\u5f84 \uff0c\u5176\u4e2d GET \u8bf7\u6c42\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u7528\u6237\u6743\u9650\u3002",
            "title": "JSONP"
        },
        {
            "location": "/api-guide/renderers_zh/#_14",
            "text": "\u4f7f\u7528pip\u5b89\u88c5\u3002  $ pip install djangorestframework-jsonp  \u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002  REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework_jsonp.renderers.JSONPRenderer',\n    ),\n}",
            "title": "\u5b89\u88c5\u548c\u914d\u7f6e"
        },
        {
            "location": "/api-guide/renderers_zh/#messagepack",
            "text": "MessagePack \u662f\u4e00\u79cd\u5feb\u901f\uff0c\u9ad8\u6548\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\u3002 Juan Riaza \u7ef4\u62a4\u7740 djangorestframework-msgpack  \u5305\uff0c\u5b83\u4e3aREST framework\u63d0\u4f9bMessagePack\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u652f\u6301\u3002",
            "title": "MessagePack"
        },
        {
            "location": "/api-guide/renderers_zh/#csv",
            "text": "\u9017\u53f7\u5206\u9694\u7684\u503c\u662f\u7eaf\u6587\u672c\u6570\u636e\u683c\u5f0f\uff0c\u53ef\u4ee5\u8f7b\u677e\u5bfc\u5165\u5230\u7535\u5b50\u8868\u683c\u5e94\u7528\u4e2d\u3002 Mjumbe Poe \u7ef4\u62a4\u7740 djangorestframework-csv \u5305\uff0c\u5b83\u4e3aREST framework\u63d0\u4f9b\u4e86CSV\u6e32\u67d3\u5668\u652f\u6301\u3002",
            "title": "CSV"
        },
        {
            "location": "/api-guide/renderers_zh/#ultrajson",
            "text": "UltraJSON \u662f\u4e00\u4e2a\u4f18\u5316\u7684C JSON\u7f16\u7801\u5668\uff0c\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8JSON\u6e32\u67d3\u901f\u5ea6\u3002 Jacob Haslehurst \u7ef4\u62a4\u7740\u4f7f\u7528UJSON\u5305\u5b9e\u73b0JSON\u6e32\u67d3\u7684 drf-ujson-renderer \u5305\u3002",
            "title": "UltraJSON"
        },
        {
            "location": "/api-guide/renderers_zh/#camelcase-json",
            "text": "djangorestframework-camel-case \u4e3aREST framework\u63d0\u4f9b\u4e86\u9a7c\u5cf0\u6837\u5f0f\u7684JSON\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u3002\u8fd9\u4f7f\u5e8f\u5217\u5316\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528Python\u98ce\u683c\u7684\u4e0b\u5212\u7ebf\u5b57\u6bb5\u540d\uff0c\u4f46\u662f\u5728API\u4e2d\u663e\u793a\u6210Javascript\u6837\u5f0f\u7684\u9a7c\u5cf0\u5b57\u6bb5\u540d\u3002\u5b83\u88ab Vitaly Babiy \u7ef4\u62a4\u7740\u3002",
            "title": "CamelCase JSON"
        },
        {
            "location": "/api-guide/renderers_zh/#pandas-csv-excel-png",
            "text": "Django REST Pandas \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u548c\u6e32\u67d3\u5668\uff0c\u901a\u8fc7 Pandas  DataFrame API\u63d0\u4f9b\u989d\u5916\u7684\u6570\u636e\u5904\u7406\u548c\u8f93\u51fa\u3002Django REST Pandas\u5305\u62ecPandas\u98ce\u683c\u7684CSV\u6587\u4ef6\uff0cExcel\u8868\u683c(\u5305\u62ec  .xls  \u548c  .xlsx )\u4ee5\u53ca\u8bb8\u591a \u5176\u4ed6\u683c\u5f0f \u7684\u6e32\u67d3\u5668\u3002\u4f5c\u4e3a wq \u9879\u76ee \u7684\u4e00\u90e8\u5206\u7531 S. Andrew Sheppard \u7ef4\u62a4\u7740\u3002",
            "title": "Pandas (CSV, Excel, PNG)"
        },
        {
            "location": "/api-guide/renderers_zh/#latex",
            "text": "Rest Framework Latex \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528Laulatex\u8f93\u51faPDF\u7684\u6e32\u67d3\u5668\u3002\u5b83\u7531 Pebble (S/F Software) \u7ef4\u62a4\u7740\u3002",
            "title": "LaTeX"
        },
        {
            "location": "/api-guide/serializers_zh/",
            "text": "\u5e8f\u5217\u5316\u5668\n\n\n\n\n\u6269\u5c55serializers\u7684\u6709\u7528\u6027\u662f\u6211\u4eec\u60f3\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u95ee\u9898\uff0c\u800c\u662f\u9700\u8981\u4e00\u4e9b\u4e25\u8083\u7684\u8bbe\u8ba1\u5de5\u4f5c\u3002\n\n\n\u2014 Russell Keith-Magee, \nDjango\u7528\u6237\u7ec4\n\n\n\n\n\u5e8f\u5217\u5316\u5668\u5141\u8bb8\u628a\u50cf\u67e5\u8be2\u96c6\u548c\u6a21\u578b\u5b9e\u4f8b\u8fd9\u6837\u7684\u590d\u6742\u6570\u636e\u8f6c\u6362\u4e3a\u53ef\u4ee5\u8f7b\u677e\u6e32\u67d3\u6210\nJSON\n\uff0c\nXML\n\u6216\u5176\u4ed6\u5185\u5bb9\u7c7b\u578b\u7684\u539f\u751fPython\u7c7b\u578b\u3002\u5e8f\u5217\u5316\u5668\u8fd8\u63d0\u4f9b\u53cd\u5e8f\u5217\u5316\uff0c\u5728\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u4e4b\u540e\u5141\u8bb8\u89e3\u6790\u6570\u636e\u8f6c\u6362\u56de\u590d\u6742\u7c7b\u578b\u3002 \n\n\nREST framework\u4e2d\u7684serializers\u4e0eDjango\u7684\nForm\n\u548c\nModelForm\n\u7c7b\u975e\u5e38\u50cf\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\nSerializer\n\u7c7b\uff0c\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u901a\u7528\u65b9\u6cd5\u6765\u63a7\u5236\u54cd\u5e94\u7684\u8f93\u51fa\uff0c\u4ee5\u53ca\u4e00\u4e2a\nModelSerializer\n\u7c7b\uff0c\u5b83\u4e3a\u521b\u5efa\u7528\u4e8e\u5904\u7406\u6a21\u578b\u5b9e\u4f8b\u548c\u67e5\u8be2\u96c6\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6709\u7528\u7684\u5feb\u6377\u5b9e\u73b0\u65b9\u5f0f\u3002\n\n\n\u58f0\u660e\u5e8f\u5217\u5316\u5668\n\n\n\u8ba9\u6211\u4eec\u4ece\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u8c61\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a\n\n\nfrom datetime import datetime\n\nclass Comment(object):\n    def __init__(self, email, content, created=None):\n        self.email = email\n        self.content = content\n        self.created = created or datetime.now()\n\ncomment = Comment(email='leila@example.com', content='foo bar')\n\n\n\n\u6211\u4eec\u5c06\u58f0\u660e\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e0e\nComment\n\u5bf9\u8c61\u76f8\u5e94\u7684\u6570\u636e\u3002\n\n\n\u58f0\u660e\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u770b\u8d77\u6765\u975e\u5e38\u50cf\u58f0\u660e\u4e00\u4e2aform\uff1a\n\n\nfrom rest_framework import serializers\n\nclass CommentSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()\n\n\n\n\u5e8f\u5217\u5316\u5bf9\u8c61\n\n\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u7528\nCommentSerializer\n\u53bb\u5e8f\u5217\u5316\u4e00\u4e2acomment\u6216comment\u5217\u8868\u3002\u540c\u6837\uff0c\u4f7f\u7528\nSerializer\n\u7c7b\u770b\u8d77\u6765\u5f88\u50cf\u4f7f\u7528\nForm\n\u7c7b\u3002\n\n\nserializer = CommentSerializer(comment)\nserializer.data\n# {'email': 'leila@example.com', 'content': 'foo bar', 'created': '2016-01-27T15:17:10.375877'}\n\n\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8f6c\u5316\u4e3a\njson\n\u3002\n\n\nfrom rest_framework.renderers import JSONRenderer\n\njson = JSONRenderer().render(serializer.data)\njson\n# b'{\"email\":\"leila@example.com\",\"content\":\"foo bar\",\"created\":\"2016-01-27T15:17:10.375877\"}'\n\n\n\n\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\n\n\n\u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\u6211\u4eec\u5c06\u4e00\u4e2a\u6d41\u89e3\u6790\u4e3aPython\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b...\n\n\nfrom django.utils.six import BytesIO\nfrom rest_framework.parsers import JSONParser\n\nstream = BytesIO(json)\ndata = JSONParser().parse(stream)\n\n\n\n...\u7136\u540e\u6211\u4eec\u5c06\u8fd9\u4e9b\u539f\u751f\u6570\u636e\u7c7b\u578b\u6062\u590d\u5230\u5df2\u9a8c\u8bc1\u6570\u636e\u7684\u5b57\u5178\u4e2d\u3002\n\n\nserializer = CommentSerializer(data=data)\nserializer.is_valid()\n# True\nserializer.validated_data\n# {'content': 'foo bar', 'email': 'leila@example.com', 'created': datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)}\n\n\n\n\u4fdd\u5b58\u5b9e\u4f8b\n\n\n\u5982\u679c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u8fd4\u56de\u57fa\u4e8e\u9a8c\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5176\u4e2d\u4e00\u4e2a\u6216\u5168\u90e8\u5b9e\u73b0\n.create()\n\u548c\nupdate()\n\u65b9\u6cd5\u3002\u4f8b\u5982\uff1a\n\n\nclass CommentSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()\n\n    def create(self, validated_data):\n        return Comment(**validated_data)\n\n    def update(self, instance, validated_data):\n        instance.email = validated_data.get('email', instance.email)\n        instance.content = validated_data.get('content', instance.content)\n        instance.created = validated_data.get('created', instance.created)\n        return instance\n\n\n\n\u5982\u679c\u4f60\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5bf9\u5e94Django\u7684\u6a21\u578b\uff0c\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5bf9\u8c61\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u3002\u4f8b\u5982\uff0c\u5982\u679c\nComment\n\u662f\u4e00\u4e2aDjango\u6a21\u578b\u7684\u8bdd\uff0c\u5177\u4f53\u7684\u65b9\u6cd5\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n\n\n    def create(self, validated_data):\n        return Comment.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        instance.email = validated_data.get('email', instance.email)\n        instance.content = validated_data.get('content', instance.content)\n        instance.created = validated_data.get('created', instance.created)\n        instance.save()\n        return instance\n\n\n\n\u73b0\u5728\u5f53\u6211\u4eec\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u65f6\u5019\uff0c\u57fa\u4e8e\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\n.save()\n\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u3002\n\n\ncomment = serializer.save()\n\n\n\n\u8c03\u7528\n.save()\n\u65b9\u6cd5\u5c06\u521b\u5efa\u65b0\u5b9e\u4f8b\u6216\u8005\u66f4\u65b0\u73b0\u6709\u5b9e\u4f8b\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u65f6\u5019\u662f\u5426\u4f20\u9012\u4e86\u73b0\u6709\u5b9e\u4f8b\uff1a\n\n\n# .save() will create a new instance.\nserializer = CommentSerializer(data=data)\n\n# .save() will update the existing `comment` instance.\nserializer = CommentSerializer(comment, data=data)\n\n\n\n.create()\n\u548c\n.update()\n\u65b9\u6cd5\u90fd\u662f\u53ef\u9009\u7684\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u7528\u4f8b\u4e0d\u5b9e\u73b0\u3001\u5b9e\u73b0\u5b83\u4eec\u4e4b\u4e00\u6216\u90fd\u5b9e\u73b0\u3002\n\n\n\u4f20\u9012\u9644\u52a0\u5c5e\u6027\u5230\n.save()\n\n\n\u6709\u65f6\u4f60\u4f1a\u5e0c\u671b\u4f60\u7684\u89c6\u56fe\u4ee3\u7801\u80fd\u591f\u5728\u4fdd\u5b58\u5b9e\u4f8b\u65f6\u6ce8\u5165\u989d\u5916\u7684\u6570\u636e\u3002\u6b64\u989d\u5916\u6570\u636e\u53ef\u80fd\u5305\u62ec\u5f53\u524d\u7528\u6237\uff0c\u5f53\u524d\u65f6\u95f4\u6216\u4e0d\u662f\u8bf7\u6c42\u6570\u636e\u4e00\u90e8\u5206\u7684\u5176\u4ed6\u4fe1\u606f\u3002\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u8c03\u7528\n.save()\n\u65f6\u6dfb\u52a0\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a\n\n\nserializer.save(owner=request.user)\n\n\n\n\u5728\n.create()\n\u6216\n.update()\n\u88ab\u8c03\u7528\u65f6\uff0c\u4efb\u4f55\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u5c06\u88ab\u5305\u542b\u5728\nvalidated_data\n\u53c2\u6570\u4e2d\u3002\n\n\n\u76f4\u63a5\u91cd\u5199\n.save()\n\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\n.create()\n\u548c\n.update()\n\u65b9\u6cd5\u53ef\u80fd\u65e0\u610f\u4e49\u3002\u4f8b\u5982\u5728contact form\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\uff0c\u800c\u662f\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u6216\u5176\u4ed6\u6d88\u606f\u3002\n\n\n\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u91cd\u5199\n.save()\n\u65b9\u6cd5\uff0c\u56e0\u4e3a\u90a3\u6837\u66f4\u53ef\u8bfb\u548c\u6709\u610f\u4e49\u3002\n\n\n\u4f8b\u5982\uff1a\n\n\nclass ContactForm(serializers.Serializer):\n    email = serializers.EmailField()\n    message = serializers.CharField()\n\n    def save(self):\n        email = self.validated_data['email']\n        message = self.validated_data['message']\n        send_email(from=email, message=message)\n\n\n\n\u8bf7\u6ce8\u610f\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u73b0\u5728\u4e0d\u5f97\u4e0d\u76f4\u63a5\u8bbf\u95eeserializer\u7684\n.validated_data\n\u5c5e\u6027\u3002\n\n\n\u9a8c\u8bc1\n\n\n\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f60\u59cb\u7ec8\u9700\u8981\u5148\u8c03\u7528\nis_valid()\n\u65b9\u6cd5\uff0c\u7136\u540e\u518d\u5c1d\u8bd5\u53bb\u8bbf\u95ee\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e\u6216\u4fdd\u5b58\u5bf9\u8c61\u5b9e\u4f8b\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9a8c\u8bc1\u9519\u8bef\uff0c\n.errors\n\u5c5e\u6027\u5c06\u5305\u542b\u8868\u793a\u751f\u6210\u7684\u9519\u8bef\u6d88\u606f\u7684\u5b57\u5178\u3002\u4f8b\u5982\uff1a\n\n\nserializer = CommentSerializer(data={'email': 'foobar', 'content': 'baz'})\nserializer.is_valid()\n# False\nserializer.errors\n# {'email': [u'Enter a valid e-mail address.'], 'created': [u'This field is required.']}\n\n\n\n\u5b57\u5178\u91cc\u7684\u6bcf\u4e00\u4e2a\u952e\u90fd\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u662f\u4e0e\u8be5\u5b57\u6bb5\u5bf9\u5e94\u7684\u4efb\u4f55\u9519\u8bef\u6d88\u606f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002\nnon_field_errors\n\u952e\u53ef\u80fd\u5b58\u5728\uff0c\u5b83\u5c06\u5217\u51fa\u4efb\u4f55\u4e00\u822c\u9a8c\u8bc1\u9519\u8bef\u4fe1\u606f\u3002\nnon_field_errors\n\u7684\u540d\u79f0\u53ef\u4ee5\u901a\u8fc7REST framework\u8bbe\u7f6e\u4e2d\u7684\nNON_FIELD_ERRORS_KEY\n\u6765\u81ea\u5b9a\u4e49\u3002\n\u5f53\u5bf9\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u5e8f\u5217\u5316\u65f6\uff0c\u8fd4\u56de\u7684\u9519\u8bef\u662f\u6bcf\u4e2a\u53cd\u5e8f\u5217\u5316\u9879\u7684\u5b57\u5178\u5217\u8868\u3002\n\n\n\u629b\u51fa\u65e0\u6548\u6570\u636e\u7684\u5f02\u5e38\n\n\n.is_valid()\n\u65b9\u6cd5\u4f7f\u7528\u53ef\u9009\u7684\nraise_exception\n\u6807\u5fd7\uff0c\u5982\u679c\u5b58\u5728\u9a8c\u8bc1\u9519\u8bef\u5c06\u4f1a\u629b\u51fa\u4e00\u4e2a\nserializers.ValidationError\n\u5f02\u5e38\u3002\n\n\n\u8fd9\u4e9b\u5f02\u5e38\u7531REST framework\u63d0\u4f9b\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u81ea\u52a8\u5904\u7406\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u8fd4\u56de\nHTTP 400 Bad Request\n\u54cd\u5e94\u3002\n\n\n# \u5982\u679c\u6570\u636e\u65e0\u6548\u5c31\u8fd4\u56de400\u54cd\u5e94\nserializer.is_valid(raise_exception=True)\n\n\n\n\u5b57\u6bb5\u7ea7\u522b\u7684\u9a8c\u8bc1\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u5411\u4f60\u7684\nSerializer\n\u5b50\u7c7b\u4e2d\u6dfb\u52a0\n.validate_<field_name>\n\u65b9\u6cd5\u6765\u6307\u5b9a\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u522b\u7684\u9a8c\u8bc1\u3002\u8fd9\u4e9b\u7c7b\u4f3c\u4e8eDjango\u8868\u5355\u4e2d\u7684\n.clean_<field_name>\n\u65b9\u6cd5\u3002\n\n\n\u8fd9\u4e9b\u65b9\u6cd5\u91c7\u7528\u5355\u4e2a\u53c2\u6570\uff0c\u5373\u9700\u8981\u9a8c\u8bc1\u7684\u5b57\u6bb5\u503c\u3002\n\n\n\u4f60\u7684\nvalidate_<field_name>\n\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u6216\u8005\u629b\u51fa\u4e00\u4e2a\nserializers.ValidationError\n\u5f02\u5e38\u3002\u4f8b\u5982\uff1a\n\n\nfrom rest_framework import serializers\n\nclass BlogPostSerializer(serializers.Serializer):\n    title = serializers.CharField(max_length=100)\n    content = serializers.CharField()\n\n    def validate_title(self, value):\n        \"\"\"\n        Check that the blog post is about Django.\n        \"\"\"\n        if 'django' not in value.lower():\n            raise serializers.ValidationError(\"Blog post is not about Django\")\n        return value\n\n\n\n\n\n\u6ce8\u610f\uff1a\n \u5982\u679c\u4f60\u5728\u5e8f\u5217\u5316\u5668\u4e2d\u58f0\u660e\n<field_name>\n\u7684\u65f6\u5019\u5e26\u6709\nrequired=False\n\u53c2\u6570\uff0c\u5b57\u6bb5\u4e0d\u88ab\u5305\u542b\u7684\u65f6\u5019\u8fd9\u4e2a\u9a8c\u8bc1\u6b65\u9aa4\u5c31\u4e0d\u4f1a\u6267\u884c\u3002\n\n\n\n\n\u5bf9\u8c61\u7ea7\u522b\u7684\u9a8c\u8bc1\n\n\n\u8981\u6267\u884c\u9700\u8981\u8bbf\u95ee\u591a\u4e2a\u5b57\u6bb5\u7684\u4efb\u4f55\u5176\u4ed6\u9a8c\u8bc1\uff0c\u8bf7\u6dfb\u52a0\u4e00\u4e2a\n.validate()\n\u65b9\u6cd5\u5230\u4f60\u7684\nSerializer\n\u5b50\u7c7b\u4e2d\u3002\u8fd9\u4e2a\u65b9\u6cd5\u91c7\u7528\u5b57\u6bb5\u503c\u5b57\u5178\u7684\u5355\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u9700\u8981\u5e94\u8be5\u629b\u51fa\u4e00\u4e2a \nValidationError\n\u5f02\u5e38\uff0c\u6216\u8005\u77e5\u8bc6\u8fd4\u56de\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u503c\u3002\u4f8b\u5982\uff1a\n\n\nfrom rest_framework import serializers\n\nclass EventSerializer(serializers.Serializer):\n    description = serializers.CharField(max_length=100)\n    start = serializers.DateTimeField()\n    finish = serializers.DateTimeField()\n\n    def validate(self, data):\n        \"\"\"\n        Check that the start is before the stop.\n        \"\"\"\n        if data['start'] > data['finish']:\n            raise serializers.ValidationError(\"finish must occur after start\")\n        return data\n\n\n\n\u9a8c\u8bc1\u5668\n\n\n\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5404\u4e2a\u5b57\u6bb5\u90fd\u53ef\u4ee5\u5305\u542b\u9a8c\u8bc1\u5668\uff0c\u901a\u8fc7\u5728\u5b57\u6bb5\u5b9e\u4f8b\u4e0a\u58f0\u660e\uff0c\u4f8b\u5982\uff1a\n\n\ndef multiple_of_ten(value):\n    if value % 10 != 0:\n        raise serializers.ValidationError('Not a multiple of ten')\n\nclass GameRecord(serializers.Serializer):\n    score = IntegerField(validators=[multiple_of_ten])\n    ...\n\n\n\n\u5e8f\u5217\u5316\u5668\u7c7b\u8fd8\u53ef\u4ee5\u5305\u62ec\u5e94\u7528\u4e8e\u4e00\u7ec4\u5b57\u6bb5\u6570\u636e\u7684\u53ef\u91cd\u7528\u7684\u9a8c\u8bc1\u5668\u3002\u8fd9\u4e9b\u9a8c\u8bc1\u5668\u8981\u5728\u5185\u90e8\u7684\nMeta\n\u7c7b\u4e2d\u58f0\u660e\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\nclass EventSerializer(serializers.Serializer):\n    name = serializers.CharField()\n    room_number = serializers.IntegerField(choices=[101, 102, 103, 201])\n    date = serializers.DateField()\n\n    class Meta:\n        # \u6bcf\u95f4\u5c4b\u5b50\u6bcf\u5929\u53ea\u80fd\u67091\u4e2a\u6d3b\u52a8\u3002\n        validators = UniqueTogetherValidator(\n            queryset=Event.objects.all(),\n            fields=['room_number', 'date']\n        )\n\n\n\n\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605 \nvalidators\u6587\u6863\n\u3002\n\n\n\u8bbf\u95ee\u521d\u59cb\u6570\u636e\u548c\u5b9e\u4f8b\n\n\n\u5c06\u521d\u59cb\u5316\u5bf9\u8c61\u6216\u8005\u67e5\u8be2\u96c6\u4f20\u9012\u7ed9\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\n.instance\n\u8bbf\u95ee\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012\u521d\u59cb\u5316\u5bf9\u8c61\uff0c\u90a3\u4e48\n.instance\n\u5c5e\u6027\u5c06\u662f\nNone\n\u3002\n\n\n\u5c06\u6570\u636e\u4f20\u9012\u7ed9\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\u65f6\uff0c\u672a\u4fee\u6539\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\n.initial_data\n\u83b7\u53d6\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012data\u5173\u952e\u5b57\u53c2\u6570\uff0c\u90a3\u4e48\n.initial_data\n\u5c5e\u6027\u5c31\u4e0d\u5b58\u5728\u3002\n\n\n\u90e8\u5206\u66f4\u65b0\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u5fc5\u987b\u4f20\u9012\u6240\u6709\u5fc5\u586b\u5b57\u6bb5\u7684\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 \npartial\n\u53c2\u6570\u6765\u5141\u8bb8\u90e8\u5206\u66f4\u65b0\u3002\n\n\n# \u4f7f\u7528\u90e8\u5206\u6570\u636e\u66f4\u65b0`comment` \nserializer = CommentSerializer(comment, data={'content': u'foo bar'}, partial=True)\n\n\n\n\u5904\u7406\u5d4c\u5957\u5bf9\u8c61\n\n\n\u524d\u9762\u7684\u5b9e\u4f8b\u9002\u7528\u4e8e\u5904\u7406\u53ea\u6709\u7b80\u5355\u6570\u636e\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u9700\u8981\u8868\u793a\u66f4\u590d\u6742\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u5bf9\u8c61\u7684\u67d0\u4e9b\u5c5e\u6027\u53ef\u80fd\u4e0d\u662f\u5b57\u7b26\u4e32\u3001\u65e5\u671f\u3001\u6574\u6570\u8fd9\u6837\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\u3002\n\n\nSerializer\n\u7c7b\u672c\u8eab\u4e5f\u662f\u4e00\u79cd\nField\n\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5bf9\u8c61\u7c7b\u578b\u5d4c\u5957\u5728\u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u5173\u7cfb\u3002\n\n\nclass UserSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    username = serializers.CharField(max_length=100)\n\nclass CommentSerializer(serializers.Serializer):\n    user = UserSerializer()\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()\n\n\n\n\u5982\u679c\u5d4c\u5957\u8868\u793a\u53ef\u4ee5\u63a5\u6536 \nNone\n\u503c\uff0c\u5219\u5e94\u8be5\u5c06 \nrequired=False\n\u6807\u5fd7\u4f20\u9012\u7ed9\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u3002\n\n\nclass CommentSerializer(serializers.Serializer):\n    user = UserSerializer(required=False)  # \u53ef\u80fd\u662f\u533f\u540d\u7528\u6237\u3002\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()\n\n\n\n\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u5d4c\u5957\u7684\u5173\u8054\u5b57\u6bb5\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u5217\u8868\uff0c\u90a3\u4e48\u5e94\u8be5\u5c06\nmany=True\n\u6807\u5fd7\u4f20\u9012\u7ed9\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u3002\n\n\nclass CommentSerializer(serializers.Serializer):\n    user = UserSerializer(required=False)\n    edits = EditItemSerializer(many=True)  # edit'\u9879\u7684\u5d4c\u5957\u5217\u8868\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()\n\n\n\n\u53ef\u5199\u7684\u5d4c\u5957\u8868\u793a\n\n\n\u5f53\u5904\u7406\u652f\u6301\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u5d4c\u5957\u8868\u793a\u65f6\uff0c\u5d4c\u5957\u5bf9\u8c61\u7684\u4efb\u4f55\u9519\u8bef\u90fd\u5d4c\u5957\u5728\u5d4c\u5957\u5bf9\u8c61\u7684\u5b57\u6bb5\u540d\u4e0b\u3002\n\n\nserializer = CommentSerializer(data={'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'})\nserializer.is_valid()\n# False\nserializer.errors\n# {'user': {'email': [u'Enter a valid e-mail address.']}, 'created': [u'This field is required.']}\n\n\n\n\u7c7b\u4f3c\u7684\uff0c\n.validated_data\n \u5c5e\u6027\u5c06\u5305\u62ec\u5d4c\u5957\u6570\u636e\u7ed3\u6784\u3002\n\n\n\u4e3a\u5d4c\u5957\u5173\u7cfb\u5b9a\u4e49\n.create()\n\u65b9\u6cd5\n\n\n\u5982\u679c\u4f60\u652f\u6301\u53ef\u5199\u7684\u5d4c\u5957\u8868\u793a\uff0c\u5219\u9700\u8981\u7f16\u5199\n.create()\n\u6216\n.update()\n\u5904\u7406\u4fdd\u5b58\u591a\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002\n\n\n\u4e0b\u9762\u7684\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u5904\u7406\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u5d4c\u5957\u7684\u6982\u8981\u4fe1\u606f\u5bf9\u8c61\u7684\u7528\u6237\u3002\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    profile = ProfileSerializer()\n\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'profile')\n\n    def create(self, validated_data):\n        profile_data = validated_data.pop('profile')\n        user = User.objects.create(**validated_data)\n        Profile.objects.create(user=user, **profile_data)\n        return user\n\n\n\n\u4e3a\u5d4c\u5957\u5173\u7cfb\u5b9a\u4e49\n.update()\n\u65b9\u6cd5\n\n\n\u5bf9\u4e8e\u66f4\u65b0\uff0c\u4f60\u9700\u8981\u4ed4\u7ec6\u8003\u8651\u5982\u4f55\u5904\u7406\u5173\u8054\u5b57\u6bb5\u7684\u66f4\u65b0\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5173\u8054\u5b57\u6bb5\u7684\u503c\u662f\nNone\n\uff0c\u6216\u8005\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4e0b\u9762\u54ea\u4e00\u9879\uff1f\n\n\n\n\n\u5728\u6570\u636e\u5e93\u4e2d\u5c06\u5173\u8054\u5b57\u6bb5\u8bbe\u7f6e\u6210\nNULL\n\u3002\n\n\n\u5220\u9664\u5173\u8054\u7684\u5b9e\u4f8b\u3002\n\n\n\u5ffd\u7565\u6570\u636e\u5e76\u4fdd\u7559\u8fd9\u4e2a\u5b9e\u4f8b\u3002\n\n\n\u629b\u51fa\u9a8c\u8bc1\u9519\u8bef\u3002\n\n\n\n\n\u4e0b\u9762\u662f\u6211\u4eec\u4e4b\u524d\nUserSerializer\n\u7c7b\u4e2d\nupdate()\n\u65b9\u6cd5\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 \n\n\n    def update(self, instance, validated_data):\n        profile_data = validated_data.pop('profile')\n        # \u9664\u975e\u5e94\u7528\u7a0b\u5e8f\u6b63\u786e\u6267\u884c\uff0c\n        # \u4fdd\u8bc1\u8fd9\u4e2a\u5b57\u6bb5\u4e00\u76f4\u88ab\u8bbe\u7f6e\uff0c\n        # \u5426\u5219\u5c31\u5e94\u8be5\u629b\u51fa\u4e00\u4e2a\u9700\u8981\u5904\u7406\u7684`DoesNotExist`\u3002\n        profile = instance.profile\n\n        instance.username = validated_data.get('username', instance.username)\n        instance.email = validated_data.get('email', instance.email)\n        instance.save()\n\n        profile.is_premium_member = profile_data.get(\n            'is_premium_member',\n            profile.is_premium_member\n        )\n        profile.has_support_contract = profile_data.get(\n            'has_support_contract',\n            profile.has_support_contract\n         )\n        profile.save()\n\n        return instance\n\n\n\n\u56e0\u4e3a\u5d4c\u5957\u5173\u7cfb\u7684\u521b\u5efa\u548c\u66f4\u65b0\u884c\u4e3a\u53ef\u80fd\u4e0d\u660e\u786e\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u5173\u8054\u6a21\u578b\u95f4\u7684\u590d\u6742\u4f9d\u8d56\u5173\u7cfb\uff0cREST framework 3 \u8981\u6c42\u4f60\u59cb\u7ec8\u660e\u786e\u7684\u5b9a\u4e49\u8fd9\u4e9b\u65b9\u6cd5\u3002\u9ed8\u8ba4\u7684\nModelSerializer\n \n.create()\n\u548c\n.update()\n\u65b9\u6cd5\u4e0d\u5305\u62ec\u5bf9\u53ef\u5199\u5d4c\u5957\u5173\u8054\u7684\u652f\u6301\u3002\n\n\n\u63d0\u4f9b\u81ea\u52a8\u652f\u6301\u67d0\u79cd\u7c7b\u578b\u7684\u81ea\u52a8\u5199\u5165\u5d4c\u5957\u5173\u8054\u7684\u7b2c\u4e09\u65b9\u5305\u53ef\u80fd\u4e0e3.1\u7248\u672c\u4e00\u540c\u653e\u51fa\u3002\n\n\n\u5904\u7406\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u4fdd\u5b58\u5173\u8054\u5b9e\u4f8b\n\n\n\u5728\u5e8f\u5217\u5316\u5668\u4e2d\u4fdd\u5b58\u591a\u4e2a\u76f8\u5173\u5b9e\u4f8b\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u7f16\u5199\u5904\u7406\u521b\u5efa\u6b63\u786e\u5b9e\u4f8b\u7684\u81ea\u5b9a\u4e49\u6a21\u578b\u7ba1\u7406\u5668\u7c7b\u3002\n\n\n\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u786e\u4fdd\nUser\n\u5b9e\u4f8b\u548c\nProfile\n\u5b9e\u4f8b\u603b\u662f\u4f5c\u4e3a\u4e00\u5bf9\u4e00\u8d77\u521b\u5efa\u3002\u6211\u4eec\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u81ea\u5b9a\u4e49\u7ba1\u7406\u5668\u7c7b\uff1a\n\n\nclass UserManager(models.Manager):\n    ...\n\n    def create(self, username, email, is_premium_member=False, has_support_contract=False):\n        user = User(username=username, email=email)\n        user.save()\n        profile = Profile(\n            user=user,\n            is_premium_member=is_premium_member,\n            has_support_contract=has_support_contract\n        )\n        profile.save()\n        return user\n\n\n\n\u8fd9\u4e2a\u7ba1\u7406\u5668\u7c7b\u73b0\u5728\u66f4\u597d\u7684\u5c01\u88c5\u4e86\u7528\u6237\u5b9e\u4f8b\u548c\u7528\u6237\u4fe1\u606f\u5b9e\u4f8b\u603b\u662f\u5728\u540c\u4e00\u65f6\u95f4\u521b\u5efa\u3002\u6211\u4eec\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e0a\u7684\n.create()\n\u65b9\u6cd5\u73b0\u5728\u80fd\u591f\u7528\u65b0\u7684\u7ba1\u7406\u5668\u65b9\u6cd5\u91cd\u5199\u3002\n\n\ndef create(self, validated_data):\n    return User.objects.create(\n        username=validated_data['username'],\n        email=validated_data['email']\n        is_premium_member=validated_data['profile']['is_premium_member']\n        has_support_contract=validated_data['profile']['has_support_contract']\n    )\n\n\n\n\u6709\u5173\u6b64\u65b9\u6cd5\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605Django\u6587\u6863\u4e2d\u7684 \n\u6a21\u578b\u7ba1\u7406\u5668\n\u548c\n\u4f7f\u7528\u6a21\u578b\u548c\u7ba1\u7406\u5668\u7c7b\u7684\u76f8\u5173\u535a\u5ba2\n\u3002\n\n\n\u5904\u7406\u591a\u4e2a\u5bf9\u8c61\n\n\nSerializer\n\u7c7b\u8fd8\u53ef\u4ee5\u5e8f\u5217\u5316\u6216\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u7684\u5217\u8868\u3002\n\n\n\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61\n\n\n\u4e3a\u4e86\u80fd\u591f\u5e8f\u5217\u5316\u4e00\u4e2a\u67e5\u8be2\u96c6\u6216\u8005\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u800c\u4e0d\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5bf9\u8c61\uff0c\u5e94\u8be5\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u65f6\u5019\u4f20\u4e00\u4e2a\nmany=True\n\u53c2\u6570\u3002\u8fd9\u6837\u5c31\u80fd\u5e8f\u5217\u5316\u4e00\u4e2a\u67e5\u8be2\u96c6\u6216\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u3002\n\n\nqueryset = Book.objects.all()\nserializer = BookSerializer(queryset, many=True)\nserializer.data\n# [\n#     {'id': 0, 'title': 'The electric kool-aid acid test', 'author': 'Tom Wolfe'},\n#     {'id': 1, 'title': 'If this is a man', 'author': 'Primo Levi'},\n#     {'id': 2, 'title': 'The wind-up bird chronicle', 'author': 'Haruki Murakami'}\n# ]\n\n\n\n\u53cd\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61\n\n\n\u53cd\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61\u9ed8\u8ba4\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u6709\u5173\u5982\u4f55\u652f\u6301\u6216\u81ea\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605\u8fd9\u4e2a\u6587\u6863\nListSerializer\n\u3002\n\n\n\u5305\u62ec\u989d\u5916\u7684\u4e0a\u4e0b\u6587\n\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9664\u4e86\u8981\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u4e3a\u5e8f\u5217\u5316\u7a0b\u5e8f\u63d0\u4f9b\u989d\u5916\u7684\u4e0a\u4e0b\u6587\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u5305\u542b\u8d85\u94fe\u63a5\u5173\u7cfb\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u8fd9\u9700\u8981\u5e8f\u5217\u5316\u5668\u80fd\u591f\u8bbf\u95ee\u5f53\u524d\u7684\u8bf7\u6c42\u4ee5\u4fbf\u6b63\u786e\u751f\u6210\u5b8c\u5168\u9650\u5b9a\u7684URL\u3002\n\n\n\u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7684\u65f6\u5019\u4f20\u9012\u4e00\u4e2a\ncontext\n\u53c2\u6570\u6765\u4f20\u9012\u4efb\u610f\u7684\u9644\u52a0\u4e0a\u4e0b\u6587\u3002\u4f8b\u5982\uff1a\n\n\nserializer = AccountSerializer(account, context={'request': request})\nserializer.data\n# {'id': 6, 'owner': u'denvercoder9', 'created': datetime.datetime(2013, 2, 12, 09, 44, 56, 678870), 'details': 'http://example.com/accounts/6/details'}\n\n\n\n\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u53ef\u4ee5\u5728\u4efb\u4f55\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7684\u903b\u8f91\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982\n.to_representation()\n\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\nself.context\n\u5c5e\u6027\u83b7\u53d6\u4e0a\u4e0b\u6587\u5b57\u5178\u3002\n\n\n\n\nModelSerializer\n\n\n\u901a\u5e38\u4f60\u4f1a\u60f3\u8981\u4e0eDjango\u6a21\u578b\u76f8\u5bf9\u5e94\u7684\u5e8f\u5217\u5316\u7c7b\u3002\n\n\nModelSerializer\n\u7c7b\u80fd\u591f\u8ba9\u4f60\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u6a21\u578b\u4e2d\u76f8\u5e94\u5b57\u6bb5\u7684\nSerializer\n\u7c7b\u3002\n\n\n\u8fd9\u4e2a\nModelSerializer\n\u7c7b\u548c\u5e38\u89c4\u7684\nSerializer\n\u7c7b\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f\n\uff1a\n\n\n\n\n\u5b83\u6839\u636e\u6a21\u578b\u81ea\u52a8\u751f\u6210\u4e00\u7ec4\u5b57\u6bb5\u3002\n\n\n\u5b83\u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7684\u9a8c\u8bc1\u5668\uff0c\u6bd4\u5982unique_together\u9a8c\u8bc1\u5668\u3002\n\n\n\u5b83\u9ed8\u8ba4\u7b80\u5355\u5b9e\u73b0\u4e86\n.create()\n\u65b9\u6cd5\u548c\n.update()\n\u65b9\u6cd5\u3002\n\n\n\n\n\u58f0\u660e\u4e00\u4e2a\nModelSerializer\n\u5982\u4e0b\uff1a\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'users', 'created')\n\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u6a21\u578b\u7684\u5b57\u6bb5\u90fd\u5c06\u6620\u5c04\u5230\u5e8f\u5217\u5316\u5668\u4e0a\u76f8\u5e94\u7684\u5b57\u6bb5\u3002\n\n\n\u6a21\u578b\u4e2d\u4efb\u4f55\u5173\u8054\u5b57\u6bb5\u6bd4\u5982\u5916\u952e\u90fd\u5c06\u6620\u5c04\u5230\nPrimaryKeyRelatedField\n\u5b57\u6bb5\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u5305\u62ec\u53cd\u5411\u5173\u8054\uff0c\u9664\u975e\u50cf\nserializer relations\n\u6587\u6863\u4e2d\u89c4\u5b9a\u7684\u90a3\u6837\u663e\u5f0f\u5305\u542b\u3002\n\n\n\u68c0\u67e5\nModelSerializer\n\n\n\u5e8f\u5217\u5316\u7c7b\u751f\u6210\u6709\u7528\u7684\u8be6\u7ec6\u8868\u793a\u5b57\u7b26\u4e32\uff0c\u5141\u8bb8\u4f60\u5168\u9762\u68c0\u67e5\u5176\u5b57\u6bb5\u7684\u72b6\u6001\u3002 \u8fd9\u5728\u4f7f\u7528\nModelSerializers\n\u65f6\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u60f3\u786e\u5b9a\u81ea\u52a8\u521b\u5efa\u4e86\u54ea\u4e9b\u5b57\u6bb5\u548c\u9a8c\u8bc1\u5668\u3002\n\n\n\u8981\u68c0\u67e5\u7684\u8bdd\uff0c\u6253\u5f00Django shell,\u6267\u884c \npython manage.py shell\n\uff0c\u7136\u540e\u5bfc\u5165\u5e8f\u5217\u5316\u5668\u7c7b\uff0c\u5b9e\u4f8b\u5316\u5b83\uff0c\u5e76\u6253\u5370\u5bf9\u8c61\u7684\u8868\u793a\uff1a\n\n\n>>> from myapp.serializers import AccountSerializer\n>>> serializer = AccountSerializer()\n>>> print(repr(serializer))\nAccountSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    name = CharField(allow_blank=True, max_length=100, required=False)\n    owner = PrimaryKeyRelatedField(queryset=User.objects.all())\n\n\n\n\u6307\u5b9a\u8981\u5305\u62ec\u7684\u5b57\u6bb5\n\n\n\u5982\u679c\u4f60\u5e0c\u671b\u5728\u6a21\u578b\u5e8f\u5217\u5316\u5668\u4e2d\u4f7f\u7528\u9ed8\u8ba4\u5b57\u6bb5\u7684\u4e00\u90e8\u5206\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\nfields\n\u6216\nexclude\n\u9009\u9879\u6765\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5c31\u50cf\u4f7f\u7528\nModelForm\n\u4e00\u6837\u3002\u5f3a\u70c8\u5efa\u8bae\u4f60\u4f7f\u7528\nfields\n\u5c5e\u6027\u663e\u5f0f\u7684\u8bbe\u7f6e\u8981\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002\u8fd9\u6837\u5c31\u4e0d\u592a\u53ef\u80fd\u56e0\u4e3a\u4f60\u4fee\u6539\u4e86\u6a21\u578b\u800c\u65e0\u610f\u4e2d\u66b4\u9732\u4e86\u6570\u636e\u3002\n\n\n\u4f8b\u5982\uff1a\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'users', 'created')\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u5c06\nfields\n\u5c5e\u6027\u8bbe\u7f6e\u6210\n'__all__'\n\u6765\u8868\u660e\u4f7f\u7528\u6a21\u578b\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u3002\n\n\n\u4f8b\u5982\uff1a\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = '__all__'\n\n\n\n\u4f60\u53ef\u4ee5\u5c06\nexclude\n\u5c5e\u6027\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4ece\u5e8f\u5217\u5316\u5668\u4e2d\u6392\u9664\u7684\u5b57\u6bb5\u5217\u8868\u3002\n\n\n\u4f8b\u5982\uff1a\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        exclude = ('users',)\n\n\n\n\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\nAccount\n\u6a21\u578b\u6709\u4e09\u4e2a\u5b57\u6bb5\naccount_name\n\uff0c\nusers\n\u548c\ncreated\n\uff0c\u90a3\u4e48\u53ea\u6709 \naccount_name\n\u548c\ncreated\n\u4f1a\u88ab\u5e8f\u5217\u5316\u3002\n\n\n\u5728\nfields\n\u548c\nexclude\n\u5c5e\u6027\u4e2d\u7684\u540d\u79f0\uff0c\u901a\u5e38\u4f1a\u6620\u5c04\u5230\u6a21\u578b\u7c7b\u4e2d\u7684\u6a21\u578b\u5b57\u6bb5\u3002\n\n\n\u6216\u8005\nfields\n\u9009\u9879\u4e2d\u7684\u540d\u79f0\u53ef\u4ee5\u6620\u5c04\u5230\u6a21\u578b\u7c7b\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u53c2\u6570\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\u3002\n\n\n\u6307\u5b9a\u5d4c\u5957\u5e8f\u5217\u5316\n\n\n\u9ed8\u8ba4\nModelSerializer\n\u4f7f\u7528\u4e3b\u952e\u8fdb\u884c\u5173\u8054\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\ndepth\n\u9009\u9879\u8f7b\u677e\u751f\u6210\u5d4c\u5957\u5173\u8054\uff1a\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'users', 'created')\n        depth = 1\n\n\n\ndepth\n\u9009\u9879\u5e94\u8be5\u8bbe\u7f6e\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u8868\u660e\u5e94\u8be5\u904d\u5386\u7684\u5173\u8054\u6df1\u5ea6\u3002\n\n\n\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u8be5\u5b50\u6bb5\u3002\n\n\n\u660e\u786e\u6307\u5b9a\u5b57\u6bb5\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\nModelSerializer\n\u7c7b\u4e0a\u58f0\u660e\u5b57\u6bb5\u6765\u589e\u52a0\u989d\u5916\u7684\u5b57\u6bb5\u6216\u8005\u91cd\u5199\u9ed8\u8ba4\u7684\u5b57\u6bb5\uff0c\u5c31\u548c\u5728\nSerializer\n\u7c7b\u4e00\u6837\u7684\u3002\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    url = serializers.CharField(source='get_absolute_url', read_only=True)\n    groups = serializers.PrimaryKeyRelatedField(many=True)\n\n    class Meta:\n        model = Account\n\n\n\n\u989d\u5916\u7684\u5b57\u6bb5\u53ef\u4ee5\u5bf9\u5e94\u6a21\u578b\u4e0a\u4efb\u4f55\u5c5e\u6027\u6216\u53ef\u8c03\u7528\u7684\u65b9\u6cd5\u3002\n\n\n\u6307\u5b9a\u53ea\u8bfb\u5b57\u6bb5\n\n\n\u4f60\u53ef\u80fd\u5e0c\u671b\u5c06\u591a\u4e2a\u5b57\u6bb5\u6307\u5b9a\u4e3a\u53ea\u8bfb\uff0c\u800c\u4e0d\u662f\u663e\u5f0f\u7684\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u6dfb\u52a0\nread_only=True\n\u5c5e\u6027\uff0c\u8fd9\u79cd\u60c5\u51b5\u4f60\u53ef\u4ee5\u4f7f\u7528Meta\u7684\nread_only_fields\n\u9009\u9879\u3002\n\n\n\u8be5\u9009\u9879\u5e94\u8be5\u662f\u5b57\u6bb5\u540d\u79f0\u7684\u5217\u8868\u6216\u5143\u7956\uff0c\u5e76\u50cf\u4e0b\u9762\u8fd9\u6837\u58f0\u660e\uff1a\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'users', 'created')\n        read_only_fields = ('account_name',)\n\n\n\n\u6a21\u578b\u4e2d\u5df2\u7ecf\u8bbe\u7f6e\neditable=False\n\u7684\u5b57\u6bb5\u548c\u9ed8\u8ba4\u5c31\u88ab\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\u7684\nAutoField\n\u5b57\u6bb5\u90fd\u4e0d\u9700\u8981\u6dfb\u52a0\u5230\nread_only_fields\n\u9009\u9879\u4e2d\u3002\n\n\n\n\n\u6ce8\u610f\n: \u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4e2d\u4e00\u4e2a\u53ea\u8bfb\u5b57\u6bb5\u662f\u6a21\u578b\u7ea7\u522b\nunique_together\n\u7ea6\u675f\u7684\u4e00\u90e8\u5206\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u7c7b\u9700\u8981\u8be5\u5b57\u6bb5\u624d\u80fd\u9a8c\u8bc1\u7ea6\u675f\uff0c\u4f46\u4e5f\u4e0d\u80fd\u7531\u7528\u6237\u7f16\u8f91\u3002\n\n\n\u5904\u7406\u6b64\u95ee\u9898\u7684\u6b63\u786e\u65b9\u6cd5\u662f\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u663e\u5f0f\u6307\u5b9a\u8be5\u5b57\u6bb5\uff0c\u540c\u65f6\u63d0\u4f9b\nread_only=True\n\u548c\ndefault=\u2026\n\u5173\u952e\u5b57\u53c2\u6570\u3002\n\n\n\u8fd9\u79cd\u60c5\u51b5\u7684\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u548c\u5176\u4ed6\u6807\u8bc6\u7b26\nunique_together\n\u7684\u5f53\u524d\u8ba4\u8bc1\u7684\nUser\n\u662f\u53ea\u8bfb\u7684\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u58f0\u660euser\u5b57\u6bb5\uff1a\n\n\nuser = serializers.PrimaryKeyRelatedField(read_only=True, default=serializers.CurrentUserDefault())\n\n\n\n\u6709\u5173\nUniqueTogetherValidator\n\u548c\nCurrentUserDefault\n\u7c7b\u7684\u8be6\u7ec6\u6587\u6863\uff0c\u8bf7\u67e5\u9605\n\u9a8c\u8bc1\u5668\u7684\u6587\u6863\n\u3002\n\n\n\n\n\u9644\u52a0\u5173\u952e\u5b57\u53c2\u6570\n\n\n\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\nextra_kwargs\n\u9009\u9879\u5feb\u6377\u5730\u5728\u5b57\u6bb5\u4e0a\u6307\u5b9a\u4efb\u610f\u9644\u52a0\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\u5728\nread_only_fields\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e0d\u9700\u8981\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u5f0f\u7684\u58f0\u660e\u8be5\u5b57\u6bb5\u3002\n\n\n\u8fd9\u4e2a\u9009\u9879\u662f\u4e00\u4e2a\u5c06\u5177\u4f53\u5b57\u6bb5\u540d\u79f0\u5f53\u4f5c\u952e\u503c\u7684\u5b57\u5178\u3002\u4f8b\u5982\uff1a\n\n\nclass CreateUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('email', 'username', 'password')\n        extra_kwargs = {'password': {'write_only': True}}\n\n    def create(self, validated_data):\n        user = User(\n            email=validated_data['email'],\n            username=validated_data['username']\n        )\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n\n\n\n\u5173\u8054\u5b57\u6bb5\n\n\n\u5728\u5e8f\u5217\u5316\u6a21\u578b\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u8868\u793a\u5173\u8054\u5173\u7cfb\u3002\u5bf9\u4e8e\nModelSerializer\n\u9ed8\u8ba4\u662f\u4f7f\u7528\u76f8\u5173\u5b9e\u4f8b\u7684\u4e3b\u952e\u3002\n\n\n\u66ff\u4ee3\u7684\u5176\u4ed6\u65b9\u6cd5\u5305\u62ec\u4f7f\u7528\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\uff0c\u5e8f\u5217\u5316\u5b8c\u6574\u7684\u5d4c\u5957\u8868\u793a\u6216\u8005\u4f7f\u7528\u81ea\u5b9a\u4e49\u8868\u793a\u7684\u5e8f\u5217\u5316\u3002\n\n\n\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605\nserializer relations\n\u6587\u6863\u3002\n\n\n\u81ea\u5b9a\u4e49\u5b57\u6bb5\u6620\u5c04\n\n\nModelSerializer\u7c7b\u8fd8\u516c\u5f00\u4e86\u4e00\u4e2a\u53ef\u4ee5\u8986\u76d6\u7684API\uff0c\u4ee5\u4fbf\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u65f6\u6539\u53d8\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7684\u81ea\u52a8\u786e\u5b9a\u3002\n\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\nModelSerializer\n\u6ca1\u6709\u751f\u6210\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f60\u9700\u8981\u7684\u5b57\u6bb5\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u5c06\u5b83\u4eec\u663e\u5f0f\u5730\u6dfb\u52a0\u5230\u7c7b\u4e2d\uff0c\u6216\u8005\u76f4\u63a5\u4f7f\u7528\u5e38\u89c4\u7684\nSerializer\n\u7c7b\u3002\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u57fa\u7c7b\uff0c\u6765\u5b9a\u4e49\u7ed9\u4efb\u610f\u6a21\u578b\u521b\u5efa\u5e8f\u5217\u5316\u5b57\u6bb5\u7684\u65b9\u5f0f\u3002\n\n\n.serializer_field_mapping\n\n\n\u5c06Django model\u7c7b\u6620\u5c04\u5230REST framework serializer\u7c7b\u3002\u4f60\u53ef\u4ee5\u8986\u5199\u8fd9\u4e2a\u6620\u5c04\u6765\u66f4\u6539\u6bcf\u4e2a\u6a21\u578b\u5e94\u8be5\u4f7f\u7528\u7684\u9ed8\u8ba4\u5e8f\u5217\u5316\u5668\u7c7b\u3002\n\n\n.serializer_related_field\n\n\n\u8fd9\u4e2a\u5c5e\u6027\u5e94\u662f\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7528\u4e8e\u5173\u8054\u5b57\u6bb5\u3002\n\n\n\u5bf9\u4e8e\nModelSerializer\n\u6b64\u5c5e\u6027\u9ed8\u8ba4\u662f\nPrimaryKeyRelatedField\n\u3002\n\n\n\u5bf9\u4e8e\nHyperlinkedModelSerializer\n\u6b64\u5c5e\u6027\u9ed8\u8ba4\u662f\nserializers.HyperlinkedRelatedField\n\u3002\n\n\nserializer_url_field\n\n\n\u5e94\u8be5\u7528\u4e8e\u5e8f\u5217\u5316\u5668\u4e0a\u4efb\u4f55\nurl\n\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\u3002\n\n\n\u9ed8\u8ba4\u662f \nserializers.HyperlinkedIdentityField\n\n\nserializer_choice_field\n\n\n\u5e94\u7528\u4e8e\u5e8f\u5217\u5316\u5668\u4e0a\u4efb\u4f55\u9009\u62e9\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\u3002\n\n\n\u9ed8\u8ba4\u662f\nserializers.ChoiceField\n\n\nThe field_class\u548cfield_kwargs API\n\n\n\u8c03\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u6765\u786e\u5b9a\u5e94\u8be5\u81ea\u52a8\u5305\u542b\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u548c\u5173\u952e\u5b57\u53c2\u6570\u3002\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u5e94\u8be5\u8fd4\u56de\u4e24\u4e2a \n(field_class, field_kwargs)\n\u5143\u7956\u3002\n\n\n.build_standard_field(self, field_name, model_field)\n\n\n\u8c03\u7528\u540e\u751f\u6210\u5bf9\u5e94\u6807\u51c6\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002\n\n\n\u9ed8\u8ba4\u5b9e\u73b0\u662f\u6839\u636e\nserializer_field_mapping\n\u5c5e\u6027\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u3002\n\n\n.build_relational_field(self, field_name, relation_info)\n\n\n\u8c03\u7528\u540e\u751f\u6210\u5bf9\u5e94\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002\n\n\n\u9ed8\u8ba4\u5b9e\u73b0\u662f\u6839\u636e\nserializer_relational_field\n\u5c5e\u6027\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u3002\n\n\n\u8fd9\u91cc\u7684\nrelation_info\n\u53c2\u6570\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7956\uff0c\u5305\u542b\nmodel_field\n\uff0c\nrelated_model\n\uff0c\nto_many\n\u548c\nhas_through_model\n\u5c5e\u6027\u3002\n\n\n.build_nested_field(self, field_name, relation_info, nested_depth)\n\n\n\u5f53\ndepth\n\u9009\u9879\u88ab\u8bbe\u7f6e\u65f6\uff0c\u88ab\u8c03\u7528\u540e\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u5230\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002\n\n\n\u9ed8\u8ba4\u5b9e\u73b0\u662f\u52a8\u6001\u7684\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e\nModelSerializer\n\u6216\nHyperlinkedModelSerializer\n\u7684\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u7c7b\u3002\n\n\nnested_depth\n\u7684\u503c\u662f\ndepth\n\u7684\u503c\u51cf1\u3002\n\n\nrelation_info\n\u53c2\u6570\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7956\uff0c\u5305\u542b \nmodel_field\n\uff0c\nrelated_model\n\uff0c\nto_many\n\u548c\nhas_through_model\n\u5c5e\u6027\u3002\n\n\n.build_property_field(self, field_name, model_class)\n\n\n\u88ab\u8c03\u7528\u540e\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u5230\u6a21\u578b\u7c7b\u4e2d\u5c5e\u6027\u6216\u65e0\u53c2\u6570\u65b9\u6cd5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002\n\n\n\u9ed8\u8ba4\u5b9e\u73b0\u662f\u8fd4\u56de\u4e00\u4e2a\nReadOnlyField\n\u7c7b\u3002\n\n\n.build_url_field(self, field_name, model_class)\n\n\n\u88ab\u8c03\u7528\u540e\u4e3a\u5e8f\u5217\u5316\u5668\u81ea\u5df1\u7684\nurl\n\u5b57\u6bb5\u751f\u6210\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002\u9ed8\u8ba4\u5b9e\u73b0\u662f\u8fd4\u56de\u4e00\u4e2a\nHyperlinkedIdentityField\n\u7c7b\u3002\n\n\n.build_unknown_field(self, field_name, model_class)\n\n\n\u5f53\u5b57\u6bb5\u540d\u79f0\u6ca1\u6709\u5bf9\u5e94\u5230\u4efb\u4f55\u6a21\u578b\u5b57\u6bb5\u6216\u8005\u6a21\u578b\u5c5e\u6027\u65f6\u8c03\u7528\u3002\n\u9ed8\u8ba4\u5b9e\u73b0\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u5c3d\u7ba1\u5b50\u7c7b\u53ef\u80fd\u4f1a\u81ea\u5b9a\u4e49\u8be5\u884c\u4e3a\u3002\n\n\n\n\nHyperlinkedModelSerializer\n\n\nHyperlinkedModelSerializer\n\u7c7b\u7c7b\u4f3c\u4e8e\nModelSerializer\n\u7c7b\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4f7f\u7528\u8d85\u94fe\u63a5\u6765\u8868\u793a\u5173\u8054\u5173\u7cfb\u800c\u4e0d\u662f\u4e3b\u952e\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e8f\u5217\u5316\u5668\u5c06\u5305\u542b\u4e00\u4e2a\nurl\n\u5b57\u6bb5\u800c\u4e0d\u662f\u4e3b\u952e\u5b57\u6bb5\u3002\n\n\nurl\u5b57\u6bb5\u5c06\u4f7f\u7528\nHyperlinkedIdentityField\n\u5b57\u6bb5\u6765\u8868\u793a\uff0c\u6a21\u578b\u7684\u4efb\u4f55\u5173\u8054\u90fd\u5c06\u4f7f\u7528\nHyperlinkedRelatedField\n\u5b57\u6bb5\u6765\u8868\u793a\u3002\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e3b\u952e\u6dfb\u52a0\u5230\nfields\n\u9009\u9879\u4e2d\u6765\u663e\u5f0f\u7684\u5305\u542b\uff0c\u4f8b\u5982\uff1a\n\n\nclass AccountSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('url', 'id', 'account_name', 'users', 'created')\n\n\n\n\u7edd\u5bf9\u548c\u76f8\u5bf9URL\n\n\n\u5f53\u5b9e\u4f8b\u5316\u4e00\u4e2a\nHyperlinkedModelSerializer\n\u65f6\uff0c\u4f60\u5fc5\u987b\u5728\u5e8f\u5217\u5316\u5668\u7684\u4e0a\u4e0b\u6587\u4e2d\u5305\u542b\u5f53\u524d\u7684\nrequest\n\u503c\uff0c\u4f8b\u5982\uff1a\n\n\nserializer = AccountSerializer(queryset, context={'request': request})\n\n\n\n\u8fd9\u6837\u505a\u5c06\u786e\u4fdd\u8d85\u94fe\u63a5\u53ef\u4ee5\u5305\u542b\u6070\u5f53\u7684\u4e3b\u673a\u540d\uff0c\u4e00\u8fb9\u751f\u6210\u5b8c\u5168\u9650\u5b9a\u7684URL\uff0c\u4f8b\u5982\uff1a\n\n\nhttp://api.example.com/accounts/1/\n\n\n\n\u800c\u4e0d\u662f\u76f8\u5bf9\u7684URL\uff0c\u4f8b\u5982\uff1a\n\n\n/accounts/1/\n\n\n\n\u5982\u679c\u4f60\n\u771f\u7684\n\u8981\u4f7f\u7528\u76f8\u5bf9URL\uff0c\u4f60\u5e94\u8be5\u660e\u786e\u7684\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u4e0b\u6587\u4e2d\u4f20\u9012\u4e00\u4e2a\n{'request': None}\n\u3002\n\n\n\u5982\u4f55\u786e\u5b9a\u8d85\u94fe\u63a5\u89c6\u56fe\n\n\n\u9700\u8981\u4e00\u79cd\u786e\u5b9a\u54ea\u4e9b\u89c6\u56fe\u80fd\u5e94\u7528\u8d85\u94fe\u63a5\u5230\u6a21\u578b\u5b9e\u4f8b\u7684\u65b9\u6cd5\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8d85\u94fe\u63a5\u671f\u671b\u5bf9\u5e94\u5230\u4e00\u4e2a\u6837\u5f0f\u80fd\u5339\u914d\n'{model_name}-detail'\n\u7684\u89c6\u56fe\uff0c\u5e76\u901a\u8fc7\npk\n\u5173\u952e\u5b57\u53c2\u6570\u67e5\u627e\u5b9e\u4f8b\u3002\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\nextra_kwargs\n\u4e2d\u8bbe\u7f6e\nview_name\n\u548c\nlookup_field\n\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u6765\u91cd\u5199URL\u5b57\u6bb5\u89c6\u56fe\u540d\u79f0\u548c\u67e5\u8be2\u5b57\u6bb5\u3002\u5982\u4e0b\u6240\u793a\uff1a\n\n\nclass AccountSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('account_url', 'account_name', 'users', 'created')\n        extra_kwargs = {\n            'url': {'view_name': 'accounts', 'lookup_field': 'account_name'},\n            'users': {'lookup_field': 'username'}\n        }\n\n\n\n\u6216\u8005\u4f60\u53ef\u4ee5\u663e\u5f0f\u7684\u8bbe\u7f6e\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a\n\n\nclass AccountSerializer(serializers.HyperlinkedModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='accounts',\n        lookup_field='slug'\n    )\n    users = serializers.HyperlinkedRelatedField(\n        view_name='user-detail',\n        lookup_field='username',\n        many=True,\n        read_only=True\n    )\n\n    class Meta:\n        model = Account\n        fields = ('url', 'account_name', 'users', 'created')\n\n\n\n\n\n\u63d0\u793a\n\uff1a\u6b63\u786e\u5339\u914d\u8d85\u94fe\u63a5\u8868\u793a\u548c\u4f60\u7684URL\u914d\u7f6e\u6709\u65f6\u53ef\u80fd\u4f1a\u6709\u70b9\u56f0\u96be\u3002\u6253\u5370\u4e00\u4e2a\nHyperlinkedModelSerializer\n\u5b9e\u4f8b\u7684\nrepr\n\u662f\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u65b9\u5f0f\u6765\u68c0\u67e5\u5173\u8054\u5173\u7cfb\u6620\u5c04\u7684\u90a3\u4e9b\u89c6\u56fe\u540d\u79f0\u548c\u67e5\u8be2\u5b57\u6bb5\u3002\n\n\n\n\n\u66f4\u6539URL\u5b57\u6bb5\u540d\u79f0\n\n\nURL\u5b57\u6bb5\u7684\u540d\u79f0\u9ed8\u8ba4\u4e3a'url'\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\nURL_FIELD_NAME\n\u8bbe\u7f6e\u8fdb\u884c\u5168\u5c40\u6027\u4fee\u6539\u3002\n\n\n\n\nListSerializer\n\n\nListSerializer\n\u7c7b\u80fd\u591f\u5e8f\u5217\u5316\u548c\u4e00\u6b21\u9a8c\u8bc1\u591a\u4e2a\u5bf9\u8c61\u3002\u4f60\n\u901a\u5e38\n\u4e0d\u9700\u8981\u76f4\u63a5\u4f7f\u7528\nListSerializer\n\uff0c\u800c\u662f\u5e94\u8be5\u5728\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u65f6\u7b80\u5355\u5730\u4f20\u9012\u4e00\u4e2a\nmany=True\n\u53c2\u6570\u3002\n\n\n\u5f53\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u5728\u5e26\u6709\nmany=True\n\u9009\u9879\u88ab\u5e8f\u5217\u5316\u65f6\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a\nListSerializer\n\u5b9e\u4f8b\u3002\u8be5\u5e8f\u5217\u5316\u5668\u7c7b\u5c06\u6210\u4e3a\nListSerializer\n\u7c7b\u7684\u5b50\u7c7b\u3002\n\n\n\u4e0b\u9762\u7684\u53c2\u6570\u4e5f\u53ef\u4ee5\u4f20\u9012\u7ed9\nListSerializer\n\u5b57\u6bb5\u6216\u8005\u4e00\u4e2a\u5e26\u6709\nmany=True\n\u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u3002\n\n\nallow_empty\n\n\n\u9ed8\u8ba4\u662f\nTrue\n\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u60f3\u628a\u7a7a\u5217\u8868\u5f53\u4f5c\u6709\u6548\u8f93\u5165\u7684\u8bdd\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u6210\nFalse\n\u3002\n\n\n\u81ea\u5b9a\u4e49\nListSerializer\n\u884c\u4e3a\n\n\n\u4e0b\u9762\u662f\u4f60\u53ef\u80fd\u5e0c\u671b\u8981\u5b9a\u5236\nListSerializer\n\u884c\u4e3a\u7684\n\u4e00\u4e9b\n\u60c5\u51b5\u3002\u4f8b\u5982\uff1a\n\n\n\n\n\u4f60\u5e0c\u671b\u63d0\u4f9b\u5217\u8868\u7684\u7279\u5b9a\u9a8c\u8bc1\uff0c\u4f8b\u5982\u68c0\u67e5\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u4e0e\u5217\u8868\u4e2d\u7684\u53e6\u5916\u4e00\u4e2a\u5143\u7d20\u51b2\u7a81\u3002\n\n\n\u4f60\u8981\u81ea\u5b9a\u4e49\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u6216\u66f4\u65b0\u884c\u4e3a\u3002\n\n\n\n\n\u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u5f53\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u7684\nMeta\n\u7c7b\u4e0b\u9762\u7684\nlist_serializer_class\n\u9009\u9879\u6765\u4fee\u6539\u5f53\nmany=True\n\u65f6\u6b63\u5728\u4f7f\u7528\u7684\u7c7b\u3002\n\n\n\u4f8b\u5982\uff1a\n\n\nclass CustomListSerializer(serializers.ListSerializer):\n    ...\n\nclass CustomSerializer(serializers.Serializer):\n    ...\n    class Meta:\n        list_serializer_class = CustomListSerializer\n\n\n\n\u81ea\u5b9a\u4e49\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\n\n\n\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u9ed8\u8ba4\u5b9e\u73b0\u662f\u7b80\u5355\u5730\u8c03\u7528\u5217\u8868\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u7684\n.create()\n\u65b9\u6cd5\u3002\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5b9e\u73b0\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u5f53\u88ab\u4f20\u9012\nmany=True\n\u53c2\u6570\u65f6\u4f7f\u7528\u7684\nListSerializer\n\u7c7b\u4e2d\u7684\n.create()\n\u65b9\u6cd5\u3002\n\n\n\u4f8b\u5982\uff1a\n\n\nclass BookListSerializer(serializers.ListSerializer):\n    def create(self, validated_data):\n        books = [Book(**item) for item in validated_data]\n        return Book.objects.bulk_create(books)\n\nclass BookSerializer(serializers.Serializer):\n    ...\n    class Meta:\n        list_serializer_class = BookListSerializer\n\n\n\n\u81ea\u5b9a\u4e49\u591a\u5bf9\u8c61\u7684\u66f4\u65b0\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\nListSerializer\n\u7c7b\u4e0d\u652f\u6301\u591a\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u8fd9\u662f\u56e0\u4e3a\u63d2\u5165\u548c\u5220\u9664\u7684\u9884\u671f\u884c\u4e3a\u662f\u4e0d\u660e\u786e\u7684\u3002\n\n\n\u8981\u652f\u6301\u591a\u5bf9\u8c61\u66f4\u65b0\u7684\u8bdd\u4f60\u9700\u8981\u81ea\u5df1\u660e\u786e\u5730\u5b9e\u73b0\u3002\u7f16\u5199\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u7684\u4ee3\u7801\u65f6\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a\n\n\n\n\n\u5982\u4f55\u786e\u5b9a\u6570\u636e\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u5bf9\u5e94\u66f4\u65b0\u54ea\u4e2a\u5b9e\u4f8b\uff1f\n\n\n\u5982\u4f55\u5904\u7406\u63d2\u5165\uff1f\u5b83\u4eec\u662f\u65e0\u6548\u7684\uff1f\u8fd8\u662f\u521b\u5efa\u65b0\u5bf9\u8c61\uff1f\n\n\n\u79fb\u9664\u5e94\u8be5\u5982\u4f55\u5904\u7406\uff1f\u5b83\u4eec\u662f\u8981\u5220\u9664\u5bf9\u8c61\u8fd8\u662f\u5220\u9664\u5173\u8054\u5173\u7cfb\uff1f\u5b83\u4eec\u5e94\u8be5\u88ab\u5ffd\u7565\u8fd8\u662f\u63d0\u793a\u65e0\u6548\u64cd\u4f5c\uff1f\n\n\n\u6392\u5e8f\u5982\u4f55\u5904\u7406\uff1f\u6539\u53d8\u4e24\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u662f\u5426\u610f\u5473\u7740\u4efb\u4f55\u72b6\u6001\u6539\u53d8\u6216\u8005\u5e94\u8be5\u88ab\u5ffd\u89c6\uff1f\n\n\n\n\n\u4f60\u9700\u8981\u5411\u5b9e\u4f8b\u5e8f\u5217\u5316\u5668\u4e2d\u663e\u5f0f\u6dfb\u52a0\u4e00\u4e2a\nid\n\u5b57\u6bb5\u3002\u9ed8\u8ba4\u9690\u5f0f\u751f\u6210\u7684\nid\n\u5b57\u6bb5\u662f\nread_only\n\u3002\u8fd9\u5c31\u5bfc\u81f4\u5b83\u5728\u66f4\u65b0\u65f6\u88ab\u5220\u9664\u3002\u4e00\u65e6\u4f60\u660e\u786e\u5730\u58f0\u660e\u5b83\uff0c\u5b83\u5c06\u5728\u5217\u8868\u5e8f\u5217\u5316\u5668\u7684\nupdate\n\u65b9\u6cd5\u4e2d\u53ef\u7528\u3002\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u9009\u62e9\u7528\u6765\u505a\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u7684\u793a\u4f8b\uff1a\n\n\nclass BookListSerializer(serializers.ListSerializer):\n    def update(self, instance, validated_data):\n        # Maps for id->instance and id->data item.\n        book_mapping = {book.id: book for book in instance}\n        data_mapping = {item['id']: item for item in validated_data}\n\n        # Perform creations and updates.\n        ret = []\n        for book_id, data in data_mapping.items():\n            book = book_mapping.get(book_id, None)\n            if book is None:\n                ret.append(self.child.create(data))\n            else:\n                ret.append(self.child.update(book, data))\n\n        # Perform deletions.\n        for book_id, book in book_mapping.items():\n            if book_id not in data_mapping:\n                book.delete()\n\n        return ret\n\nclass BookSerializer(serializers.Serializer):\n    # \u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e3b\u952e\u6765\u8bc6\u522b\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\n    # \u6240\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528\u53ef\u5199\u7684\u5b57\u6bb5\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684\u53ea\u8bfb\u5b57\u6bb5\u3002\n    id = serializers.IntegerField()\n\n    ...\n    id = serializers.IntegerField(required=False)\n\n    class Meta:\n        list_serializer_class = BookListSerializer\n\n\n\n\u7c7b\u4f3c\u4e8eREST framework 2\u4e2d\nallow_add_remove\n\u7684\u81ea\u52a8\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u64cd\u4f5c\u53ef\u80fd\u4f1a\u57283.1\u7248\u672c\u7684\u7b2c\u4e09\u65b9\u5305\u4e2d\u63d0\u4f9b\u3002\n\n\n\u81ea\u5b9a\u4e49ListSerializer\u521d\u59cb\u5316\n\n\n\u5f53\u5e26\u6709\nmany=True\n\u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u54ea\u4e9b\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\u5e94\u8be5\u88ab\u4f20\u9012\u7ed9\u5b50\u7c7b\nSerializer\n\u548c\u7236\u7c7b\nListSerializer\n\u7684\n.__init__()\n\u65b9\u6cd5\u3002\n\n\n\u9ed8\u8ba4\u5b9e\u73b0\u662f\u5c06\u6240\u6709\u53c2\u6570\u90fd\u4f20\u9012\u7ed9\u4e24\u4e2a\u7c7b\uff0c\u51fa\u4e86\nvalidators\n\u548c\u4efb\u4f55\u5173\u952e\u5b57\u53c2\u6570\u3002\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u5047\u5b9a\u7528\u4e8e\u5b50\u5e8f\u5217\u5316\u5668\u7c7b\u3002\n\n\n\u5076\u5c14\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u660e\u786e\u6307\u5b9a\u5f53\u88ab\u4f20\u9012\nmany=True\n\u53c2\u6570\u65f6\uff0c\u5b50\u7c7b\u548c\u7236\u7c7b\u5e94\u8be5\u5982\u4f55\u5b9e\u4f8b\u5316\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\nmany_init\n\u7c7b\u65b9\u6cd5\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\n\n\n    @classmethod\n    def many_init(cls, *args, **kwargs):\n        # \u5b9e\u4f8b\u5316\u5b50\u5e8f\u5217\u5316\u5668\u7c7b\u3002\n        kwargs['child'] = cls()\n        # \u5b9e\u4f8b\u5316\u5217\u8868\u5e8f\u5217\u5316\u7236\u7c7b\n        return CustomListSerializer(*args, **kwargs)\n\n\n\n\n\nBaseSerializer\n\n\nBaseSerializer\n \u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u7528\u6765\u66ff\u4ee3\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u6837\u5f0f\u3002\n\n\n\u8be5\u7c7b\u5b9e\u73b0\u4e0e\nSerializer\n\u7c7b\u76f8\u540c\u7684\u57fa\u672cAPI\uff1a\n\n\n\n\n.data\n - \u8fd4\u56de\u4f20\u51fa\u7684\u539f\u59cb\u6570\u636e\u3002\n\n\n.is_valid()\n - \u53cd\u5e8f\u5217\u5316\u5e76\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002\n\n\n.validated_data\n - \u8fd4\u56de\u7ecf\u8fc7\u9a8c\u8bc1\u540e\u7684\u4f20\u5165\u6570\u636e\u3002\n\n\n.errors\n - \u8fd4\u56de\u9a8c\u8bc1\u671f\u95f4\u7684\u9519\u8bef\u3002\n\n\n.save()\n - \u5c06\u9a8c\u8bc1\u7684\u6570\u636e\u4fdd\u7559\u5230\u5bf9\u8c61\u5b9e\u4f8b\u4e2d\u3002\n\n\n\n\n\u5b83\u8fd8\u6709\u53ef\u4ee5\u8986\u5199\u7684\u56db\u79cd\u65b9\u6cd5\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u4f60\u60f3\u8981\u5e8f\u5217\u5316\u7c7b\u652f\u6301\u7684\u529f\u80fd\uff1a\n\n\n\n\n.to_representation()\n - \u91cd\u5199\u6b64\u65b9\u6cd5\u6765\u6539\u53d8\u8bfb\u53d6\u64cd\u4f5c\u7684\u5e8f\u5217\u5316\u7ed3\u679c\u3002\n\n\n.to_internal_value()\n - \u91cd\u5199\u6b64\u65b9\u6cd5\u6765\u6539\u53d8\u5199\u5165\u64cd\u4f5c\u7684\u5e8f\u5217\u5316\u7ed3\u679c\u3002\n\n\n.create()\n \u548c \n.update()\n - \u91cd\u5199\u5176\u4e2d\u4e00\u4e2a\u6216\u4e24\u4e2a\u6765\u6539\u53d8\u4fdd\u5b58\u5b9e\u4f8b\u65f6\u7684\u52a8\u4f5c\u3002\n\n\n\n\n\u56e0\u4e3a\u6b64\u7c7b\u63d0\u4f9b\u4e0e\nSerializer\n\u7c7b\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5c06\u5b83\u4e0e\u73b0\u6709\u7684\u57fa\u4e8e\u7c7b\u7684\u901a\u7528\u89c6\u56fe\u4e00\u8d77\u4f7f\u7528\uff0c\u5c31\u50cf\u4f7f\u7528\u5e38\u89c4\nSerializer\n\u6216\nModelSerializer\n\u4e00\u6837\u3002\n\n\n\u8fd9\u6837\u505a\u65f6\u4f60\u9700\u8981\u6ce8\u610f\u5230\u7684\u552f\u4e00\u533a\u522b\u662f\nBaseSerializer\n\u7c7b\u5e76\u4e0d\u4f1a\u5728\u53ef\u6d4f\u89c8\u7684API\u9875\u9762\u4e2d\u751f\u6210HTML\u8868\u5355\u3002\n\n\n\u53ea\u8bfb\u7684 \nBaseSerializer\n classes\n\n\n\u8981\u4f7f\u7528\nBaseSerializer\n\u7c7b\u5b9e\u73b0\u53ea\u8bfb\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8986\u5199\n.to_representation()\n\u65b9\u6cd5\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7b80\u5355\u7684Django\u6a21\u578b\u7684\u793a\u4f8b\uff1a\n\n\nclass HighScore(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    player_name = models.CharField(max_length=10)\n    score = models.IntegerField()\n\n\n\n\u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u6765\u5c06\nHighScore\n\u5b9e\u4f8b\u8f6c\u6362\u4e3a\u539f\u59cb\u6570\u636e\u7c7b\u578b\u975e\u5e38\u7b80\u5355\u3002\n\n\nclass HighScoreSerializer(serializers.BaseSerializer):\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }\n\n\n\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u6765\u5e8f\u5217\u5316\u5355\u4e2a\nHighScore\n\u5b9e\u4f8b\uff1a\n\n\n@api_view(['GET'])\ndef high_score(request, pk):\n    instance = HighScore.objects.get(pk=pk)\n    serializer = HighScoreSerializer(instance)\n    return Response(serializer.data)\n\n\n\n\u6216\u8005\u4f7f\u7528\u5b83\u6765\u5e8f\u5217\u5316\u591a\u4e2a\u5b9e\u4f8b\uff1a\n\n\n@api_view(['GET'])\ndef all_high_scores(request):\n    queryset = HighScore.objects.order_by('-score')\n    serializer = HighScoreSerializer(queryset, many=True)\n    return Response(serializer.data)\n\n\n\nRead-write \nBaseSerializer\n classes\n\n\n\u8981\u521b\u5efa\u4e00\u4e2a\u8bfb\u5199\u90fd\u652f\u6301\u7684\u5e8f\u5217\u5316\u5668\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5b9e\u73b0\n.to_internal_value()\n\u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7528\u6765\u6784\u9020\u5bf9\u8c61\u5b9e\u4f8b\u7684\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u503c\uff0c\u5982\u679c\u63d0\u4f9b\u7684\u6570\u636e\u683c\u5f0f\u4e0d\u6b63\u786e\uff0c\u5219\u53ef\u80fd\u5f15\u53d1\nValidationError\n\u3002\n\n\n\u4e00\u65e6\u4f60\u5b9e\u73b0\u4e86\n.to_internal_value()\n\u65b9\u6cd5\uff0c\u90a3\u4e9b\u57fa\u7840\u7684\u9a8c\u8bc1API\u90fd\u4f1a\u5728\u5e8f\u5217\u5316\u5bf9\u8c61\u4e0a\u53ef\u7528\u4e86\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\n.is_valid()\n, \n.validated_data\n \u548c \n.errors\n \u65b9\u6cd5\u3002\n\n\n\u5982\u679c\u4f60\u8fd8\u60f3\u652f\u6301\n.save()\n\uff0c\u4f60\u8fd8\u9700\u8981\u5b9e\u73b0\n.create()\n\u548c\n.update()\n\u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u3002\n\n\n\u4e0b\u9762\u5c31\u662f\u5b8c\u6574\u7248\u7684\uff0c\u652f\u6301\u8bfb\u3001\u5199\u64cd\u4f5c\u7684 \nHighScoreSerializer\n \u5b8c\u6574\u793a\u4f8b\u4e86\u3002\n\n\nclass HighScoreSerializer(serializers.BaseSerializer):\n    def to_internal_value(self, data):\n        score = data.get('score')\n        player_name = data.get('player_name')\n\n        # \u6267\u884c\u6570\u636e\u6709\u6548\u6027\u6821\u9a8c\n        if not score:\n            raise ValidationError({\n                'score': 'This field is required.'\n            })\n        if not player_name:\n            raise ValidationError({\n                'player_name': 'This field is required.'\n            })\n        if len(player_name) > 10:\n            raise ValidationError({\n                'player_name': 'May not be more than 10 characters.'\n            })\n\n        # \u8fd4\u56de\u901a\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e \u8fd9\u7528\u6765\u4f5c\u4e3a `.validated_data` \u5c5e\u6027\u7684\u503c\u3002\n        return {\n            'score': int(score),\n            'player_name': player_name\n        }\n\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }\n\n    def create(self, validated_data):\n        return HighScore.objects.create(**validated_data)\n\n\n\n\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u57fa\u7c7b\n\n\nBaseSerializer\n\u7c7b\u8fd8\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u65b0\u7684\u901a\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u57fa\u7c7b\u6765\u5904\u7406\u7279\u5b9a\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u6216\u8005\u7528\u6765\u6574\u5408\u5907\u7528\u5b58\u50a8\u540e\u7aef\u3002\n\n\n\u4e0b\u9762\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u53ef\u4ee5\u5c06\u4efb\u610f\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u57fa\u672c\u8868\u793a\u7684\u901a\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u7684\u793a\u4f8b\u3002\n\n\nclass ObjectSerializer(serializers.BaseSerializer):\n    \"\"\"\n    \u4e00\u4e2a\u53ea\u8bfb\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u5b83\u5c06\u4efb\u610f\u590d\u6742\u7684\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u8868\u793a\u3002\n    \"\"\"\n    def to_representation(self, obj):\n        for attribute_name in dir(obj):\n            attribute = getattr(obj, attribute_name)\n            if attribute_name('_'):\n                # \u5ffd\u7565\u79c1\u6709\u5c5e\u6027\n                pass\n            elif hasattr(attribute, '__call__'):\n                # \u5ffd\u7565\u65b9\u6cd5\u548c\u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61\n                pass\n            elif isinstance(attribute, (str, int, bool, float, type(None))):\n                # \u5185\u7f6e\u7684\u539f\u59cb\u6570\u636e\u7c7b\u578b\u4e0d\u505a\u4fee\u6539\n                output[attribute_name] = attribute\n            elif isinstance(attribute, list):\n                # \u9012\u5f52\u5904\u7406\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n                output[attribute_name] = [\n                    self.to_representation(item) for item in attribute\n                ]\n            elif isinstance(attribute, dict):\n                # \u9012\u5f52\u5904\u7406\u5b57\u5178\u4e2d\u7684\u5bf9\u8c61\n                output[attribute_name] = {\n                    str(key): self.to_representation(value)\n                    for key, value in attribute.items()\n                }\n            else:\n                # \u5c06\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\n                output[attribute_name] = str(attribute)\n\n\n\n\n\nserializer\u8fdb\u9636\u7528\u6cd5\n\n\n\u91cd\u5199\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u884c\u4e3a\n\n\n\u5982\u679c\u4f60\u9700\u8981\u66f4\u6539\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u7684\u5e8f\u5217\u5316\uff0c\u53cd\u5e8f\u5217\u5316\u6216\u9a8c\u8bc1\u7684\u884c\u4e3a\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\n.to_representation()\n\u6216\n.to_internal_value()\n\u65b9\u6cd5\u6765\u5b8c\u6210\u3002\n\n\n\u6211\u4eec\u53ef\u80fd\u8fd9\u4e48\u505a\u7684\u4e00\u4e9b\u539f\u56e0\u5305\u62ec......\n\n\n\n\n\u4e3a\u65b0\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u57fa\u7c7b\u6dfb\u52a0\u65b0\u884c\u4e3a\u3002\n\n\n\u5bf9\u73b0\u6709\u7684\u7c7b\u7a0d\u4f5c\u4fee\u6539\u3002\n\n\n\u63d0\u9ad8\u9891\u7e41\u8bbf\u95ee\u8fd4\u56de\u5927\u91cf\u6570\u636e\u7684API\u7aef\u70b9\u7684\u5e8f\u5217\u5316\u6027\u80fd\u3002\n\n\n\n\n\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7b7e\u540d\u5982\u4e0b\uff1a\n\n\n.to_representation(self, obj)\n\n\n\u63a5\u6536\u4e00\u4e2a\u9700\u8981\u88ab\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u4e4b\u540e\u7684\u8868\u793a\u3002\u901a\u5e38\uff0c\u8fd9\u610f\u5473\u7740\u8fd4\u56de\u5185\u7f6ePython\u6570\u636e\u7c7b\u578b\u7684\u7ed3\u6784\u3002\u53ef\u4ee5\u5904\u7406\u7684\u786e\u5207\u7c7b\u578b\u53d6\u51b3\u4e8e\u4f60\u4e3aAPI\u914d\u7f6e\u7684\u6e32\u67d3\u7c7b\u3002\n\n\n.to_internal_value(self, data)\n\n\n\u5c06\u672a\u7ecf\u9a8c\u8bc1\u7684\u4f20\u5165\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u53ef\u4ee5\u901a\u8fc7\nserializer.validated_data\n\u6765\u8bbf\u95ee\u7684\u5df2\u9a8c\u8bc1\u7684\u6570\u636e\u3002\u5982\u679c\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u4e0a\u8c03\u7528\n.save()\n\uff0c\u5219\u8be5\u8fd4\u56de\u503c\u4e5f\u5c06\u4f20\u9012\u7ed9\n.create()\n\u6216\n.update()\n\u65b9\u6cd5\u3002\n\n\n\u5982\u679c\u4efb\u4f55\u9a8c\u8bc1\u6761\u4ef6\u5931\u8d25\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u4f1a\u5f15\u53d1\u4e00\u4e2a\nserializers.ValidationError(errors)\n\u3002\u901a\u5e38\uff0c\u6b64\u5904\u7684\nerrors\n\u53c2\u6570\u5c06\u662f\u9519\u8bef\u6d88\u606f\u5b57\u5178\u7684\u4e00\u4e2a\u6620\u5c04\u5b57\u6bb5\u3002\n\n\n\u4f20\u9012\u7ed9\u6b64\u65b9\u6cd5\u7684\ndata\n\u53c2\u6570\u901a\u5e38\u662f\nrequest.data\n\u7684\u503c\uff0c\u56e0\u6b64\u5b83\u63d0\u4f9b\u7684\u6570\u636e\u7c7b\u578b\u5c06\u53d6\u51b3\u4e8e\u4f60\u4e3aAPI\u914d\u7f6e\u7684\u89e3\u6790\u5668\u7c7b\u3002\n\n\nSerializer \u7ee7\u627f\n\n\n\u4e0eDjango\u8868\u5355\u7c7b\u4f3c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u6269\u5c55\u548c\u91cd\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u8fd9\u5141\u8bb8\u4f60\u5728\u7236\u7c7b\u4e0a\u58f0\u660e\u4e00\u7ec4\u516c\u5171\u5b57\u6bb5\u6216\u65b9\u6cd5\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u8bb8\u591a\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\n\n\nclass MyBaseSerializer(Serializer):\n    my_field = serializers.CharField()\n\n    def validate_my_field(self):\n        ...\n\nclass MySerializer(MyBaseSerializer):\n    ...\n\n\n\n\u50cfDjango\u7684\nModel\n\u548c\nModelForm\n\u7c7b\u4e00\u6837\uff0c\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5185\u90e8\nMeta\n\u7c7b\u4e0d\u4f1a\u9690\u5f0f\u5730\u7ee7\u627f\u5b83\u7684\u7236\u5143\u7d20\u5185\u90e8\u7684\nMeta\n\u7c7b\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4ece\u7236\u7c7b\u7ee7\u627f\nMeta\n\u7c7b\uff0c\u5219\u5fc5\u987b\u660e\u786e\u5730\u8fd9\u6837\u505a\u3002\u6bd4\u5982\uff1a\n\n\nclass AccountSerializer(MyBaseSerializer):\n    class Meta(MyBaseSerializer.Meta):\n        model = Account\n\n\n\n\u901a\u5e38\u6211\u4eec\u5efa\u8bae\n\u4e0d\u8981\n\u5728\u5185\u90e8Meta\u7c7b\u4e0a\u4f7f\u7528\u7ee7\u627f\uff0c\u800c\u662f\u660e\u786e\u58f0\u660e\u6240\u6709\u9009\u9879\u3002\n\n\n\u6b64\u5916\uff0c\u4ee5\u4e0b\u8b66\u544a\u9002\u7528\u4e8e\u5e8f\u5217\u5316\u7a0b\u5e8f\u7ee7\u627f\uff1a\n\n\n\n\n\u6b63\u5e38\u7684Python\u540d\u79f0\u89e3\u6790\u89c4\u5219\u9002\u7528\u3002\u5982\u679c\u4f60\u6709\u591a\u4e2a\u58f0\u660e\u4e86\nMeta\n\u7c7b\u7684\u57fa\u7c7b\uff0c\u5219\u53ea\u4f7f\u7528\u7b2c\u4e00\u4e2a\u7c7b\u3002\u8fd9\u610f\u5473\u8981\u4e48\u662f\u5b69\u5b50\u7684\nMeta\n\uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u5426\u5219\u5c31\u662f\u7b2c\u4e00\u4e2a\u7236\u6bcd\u7684\nMeta\n\u7b49\u3002\n\n\n\n\n\u901a\u8fc7\u5728\u5b50\u7c7b\u4e0a\u5c06\u540d\u79f0\u8bbe\u7f6e\u4e3a\nNone\n\uff0c\u53ef\u4ee5\u58f0\u660e\u6027\u5730\u5220\u9664\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\nField\n\u3002\n\n\nclass MyBaseSerializer(ModelSerializer):\n    my_field = serializers.CharField()\n\nclass MySerializer(MyBaseSerializer):\n    my_field = None\n\n\n\n\u4f46\u662f\uff0c\u4f60\u53ea\u80fd\u4f7f\u7528\u6b64\u6280\u672f\u53bb\u6389\u7236\u7c7b\u58f0\u660e\u6027\u5b9a\u4e49\u7684\u5b57\u6bb5\uff1b\u5b83\u4e0d\u4f1a\u963b\u6b62\nModelSerializer\n\u751f\u6210\u9ed8\u8ba4\u5b57\u6bb5\u3002\u60f3\u8981\u4ece\u9ed8\u8ba4\u5b57\u6bb5\u4e2d\u9009\u62e9\u53bb\u6389\u67d0\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u53c2\u9605 \n\u6307\u5b9a\u8981\u5305\u62ec\u7684\u5b57\u6bb5\n\u3002\n\n\n\n\n\n\nDynamically modifying fields\n\n\nOnce a serializer has been initialized, the dictionary of fields that are set on the serializer may be accessed using the \n.fields\n attribute.  Accessing and modifying this attribute allows you to dynamically modify the serializer.\n\n\nModifying the \nfields\n argument directly allows you to do interesting things such as changing the arguments on serializer fields at runtime, rather than at the point of declaring the serializer.\n\n\nExample\n\n\nFor example, if you wanted to be able to set which fields should be used by a serializer at the point of initializing it, you could create a serializer class like so:\n\n\nclass DynamicFieldsModelSerializer(serializers.ModelSerializer):\n    \"\"\"\n    A ModelSerializer that takes an additional `fields` argument that\n    controls which fields should be displayed.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        # Don't pass the 'fields' arg up to the superclass\n        fields = kwargs.pop('fields', None)\n\n        # Instantiate the superclass normally\n        super(DynamicFieldsModelSerializer, self).__init__(*args, **kwargs)\n\n        if fields is not None:\n            # Drop any fields that are not specified in the `fields` argument.\n            allowed = set(fields)\n            existing = set(self.fields.keys())\n            for field_name in existing - allowed:\n                self.fields.pop(field_name)\n\n\n\nThis would then allow you to do the following:\n\n\n>>> class UserSerializer(DynamicFieldsModelSerializer):\n>>>     class Meta:\n>>>         model = User\n>>>         fields = ('id', 'username', 'email')\n>>>\n>>> print UserSerializer(user)\n{'id': 2, 'username': 'jonwatts', 'email': 'jon@example.com'}\n>>>\n>>> print UserSerializer(user, fields=('id', 'email'))\n{'id': 2, 'email': 'jon@example.com'}\n\n\n\nCustomizing the default fields\n\n\nREST framework 2 provided an API to allow developers to override how a \nModelSerializer\n class would automatically generate the default set of fields.\n\n\nThis API included the \n.get_field()\n, \n.get_pk_field()\n and other methods.\n\n\nBecause the serializers have been fundamentally redesigned with 3.0 this API no longer exists. You can still modify the fields that get created but you'll need to refer to the source code, and be aware that if the changes you make are against private bits of API then they may be subject to change.\n\n\n\n\nThird party packages\n\n\nThe following third party packages are also available.\n\n\nDjango REST marshmallow\n\n\nThe \ndjango-rest-marshmallow\n package provides an alternative implementation for serializers, using the python \nmarshmallow\n library. It exposes the same API as the REST framework serializers, and can be used as a drop-in replacement in some use-cases.\n\n\nSerpy\n\n\nThe \nserpy\n package is an alternative implementation for serializers that is built for speed. \nSerpy\n serializes complex datatypes to simple native types. The native types can be easily converted to JSON or any other format needed.\n\n\nMongoengineModelSerializer\n\n\nThe \ndjango-rest-framework-mongoengine\n package provides a \nMongoEngineModelSerializer\n serializer class that supports using MongoDB as the storage layer for Django REST framework.\n\n\nGeoFeatureModelSerializer\n\n\nThe \ndjango-rest-framework-gis\n package provides a \nGeoFeatureModelSerializer\n serializer class that supports GeoJSON both for read and write operations.\n\n\nHStoreSerializer\n\n\nThe \ndjango-rest-framework-hstore\n package provides an \nHStoreSerializer\n to support \ndjango-hstore\n \nDictionaryField\n model field and its \nschema-mode\n feature.\n\n\nDynamic REST\n\n\nThe \ndynamic-rest\n package extends the ModelSerializer and ModelViewSet interfaces, adding API query parameters for filtering, sorting, and including / excluding all fields and relationships defined by your serializers.\n\n\nDynamic Fields Mixin\n\n\nThe \ndrf-dynamic-fields\n package provides a mixin to dynamically limit the fields per serializer to a subset specified by an URL parameter.\n\n\nDRF FlexFields\n\n\nThe \ndrf-flex-fields\n package extends the ModelSerializer and ModelViewSet to provide commonly used functionality for dynamically setting fields and expanding primitive fields to nested models, both from URL parameters and your serializer class definitions.\n\n\nSerializer Extensions\n\n\nThe \ndjango-rest-framework-serializer-extensions\n\npackage provides a collection of tools to DRY up your serializers, by allowing\nfields to be defined on a per-view/request basis. Fields can be whitelisted,\nblacklisted and child serializers can be optionally expanded.\n\n\nHTML JSON Forms\n\n\nThe \nhtml-json-forms\n package provides an algorithm and serializer for processing \n<form>\n submissions per the (inactive) \nHTML JSON Form specification\n.  The serializer facilitates processing of arbitrarily nested JSON structures within HTML.  For example, \n<input name=\"items[0][id]\" value=\"5\">\n will be interpreted as \n{\"items\": [{\"id\": \"5\"}]}\n.\n\n\nDRF-Base64\n\n\nDRF-Base64\n provides a set of field and model serializers that handles the upload of base64-encoded files.\n\n\nQueryFields\n\n\ndjangorestframework-queryfields\n allows API clients to specify which fields will be sent in the response via inclusion/exclusion query parameters.  \n\n\nDRF Writable Nested\n\n\nThe \ndrf-writable-nested\n package provides writable nested model serializer which allows to create/update models with nested related data.",
            "title": "Serializers"
        },
        {
            "location": "/api-guide/serializers_zh/#_1",
            "text": "\u6269\u5c55serializers\u7684\u6709\u7528\u6027\u662f\u6211\u4eec\u60f3\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u95ee\u9898\uff0c\u800c\u662f\u9700\u8981\u4e00\u4e9b\u4e25\u8083\u7684\u8bbe\u8ba1\u5de5\u4f5c\u3002  \u2014 Russell Keith-Magee,  Django\u7528\u6237\u7ec4   \u5e8f\u5217\u5316\u5668\u5141\u8bb8\u628a\u50cf\u67e5\u8be2\u96c6\u548c\u6a21\u578b\u5b9e\u4f8b\u8fd9\u6837\u7684\u590d\u6742\u6570\u636e\u8f6c\u6362\u4e3a\u53ef\u4ee5\u8f7b\u677e\u6e32\u67d3\u6210 JSON \uff0c XML \u6216\u5176\u4ed6\u5185\u5bb9\u7c7b\u578b\u7684\u539f\u751fPython\u7c7b\u578b\u3002\u5e8f\u5217\u5316\u5668\u8fd8\u63d0\u4f9b\u53cd\u5e8f\u5217\u5316\uff0c\u5728\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u4e4b\u540e\u5141\u8bb8\u89e3\u6790\u6570\u636e\u8f6c\u6362\u56de\u590d\u6742\u7c7b\u578b\u3002   REST framework\u4e2d\u7684serializers\u4e0eDjango\u7684 Form \u548c ModelForm \u7c7b\u975e\u5e38\u50cf\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a Serializer \u7c7b\uff0c\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u901a\u7528\u65b9\u6cd5\u6765\u63a7\u5236\u54cd\u5e94\u7684\u8f93\u51fa\uff0c\u4ee5\u53ca\u4e00\u4e2a ModelSerializer \u7c7b\uff0c\u5b83\u4e3a\u521b\u5efa\u7528\u4e8e\u5904\u7406\u6a21\u578b\u5b9e\u4f8b\u548c\u67e5\u8be2\u96c6\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6709\u7528\u7684\u5feb\u6377\u5b9e\u73b0\u65b9\u5f0f\u3002",
            "title": "\u5e8f\u5217\u5316\u5668"
        },
        {
            "location": "/api-guide/serializers_zh/#_2",
            "text": "\u8ba9\u6211\u4eec\u4ece\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u8c61\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a  from datetime import datetime\n\nclass Comment(object):\n    def __init__(self, email, content, created=None):\n        self.email = email\n        self.content = content\n        self.created = created or datetime.now()\n\ncomment = Comment(email='leila@example.com', content='foo bar')  \u6211\u4eec\u5c06\u58f0\u660e\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e0e Comment \u5bf9\u8c61\u76f8\u5e94\u7684\u6570\u636e\u3002  \u58f0\u660e\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u770b\u8d77\u6765\u975e\u5e38\u50cf\u58f0\u660e\u4e00\u4e2aform\uff1a  from rest_framework import serializers\n\nclass CommentSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()",
            "title": "\u58f0\u660e\u5e8f\u5217\u5316\u5668"
        },
        {
            "location": "/api-guide/serializers_zh/#_3",
            "text": "\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u7528 CommentSerializer \u53bb\u5e8f\u5217\u5316\u4e00\u4e2acomment\u6216comment\u5217\u8868\u3002\u540c\u6837\uff0c\u4f7f\u7528 Serializer \u7c7b\u770b\u8d77\u6765\u5f88\u50cf\u4f7f\u7528 Form \u7c7b\u3002  serializer = CommentSerializer(comment)\nserializer.data\n# {'email': 'leila@example.com', 'content': 'foo bar', 'created': '2016-01-27T15:17:10.375877'}  \u6b64\u65f6\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8f6c\u5316\u4e3a json \u3002  from rest_framework.renderers import JSONRenderer\n\njson = JSONRenderer().render(serializer.data)\njson\n# b'{\"email\":\"leila@example.com\",\"content\":\"foo bar\",\"created\":\"2016-01-27T15:17:10.375877\"}'",
            "title": "\u5e8f\u5217\u5316\u5bf9\u8c61"
        },
        {
            "location": "/api-guide/serializers_zh/#_4",
            "text": "\u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\u6211\u4eec\u5c06\u4e00\u4e2a\u6d41\u89e3\u6790\u4e3aPython\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b...  from django.utils.six import BytesIO\nfrom rest_framework.parsers import JSONParser\n\nstream = BytesIO(json)\ndata = JSONParser().parse(stream)  ...\u7136\u540e\u6211\u4eec\u5c06\u8fd9\u4e9b\u539f\u751f\u6570\u636e\u7c7b\u578b\u6062\u590d\u5230\u5df2\u9a8c\u8bc1\u6570\u636e\u7684\u5b57\u5178\u4e2d\u3002  serializer = CommentSerializer(data=data)\nserializer.is_valid()\n# True\nserializer.validated_data\n# {'content': 'foo bar', 'email': 'leila@example.com', 'created': datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)}",
            "title": "\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61"
        },
        {
            "location": "/api-guide/serializers_zh/#_5",
            "text": "\u5982\u679c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u8fd4\u56de\u57fa\u4e8e\u9a8c\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5176\u4e2d\u4e00\u4e2a\u6216\u5168\u90e8\u5b9e\u73b0 .create() \u548c update() \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a  class CommentSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()\n\n    def create(self, validated_data):\n        return Comment(**validated_data)\n\n    def update(self, instance, validated_data):\n        instance.email = validated_data.get('email', instance.email)\n        instance.content = validated_data.get('content', instance.content)\n        instance.created = validated_data.get('created', instance.created)\n        return instance  \u5982\u679c\u4f60\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5bf9\u5e94Django\u7684\u6a21\u578b\uff0c\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5bf9\u8c61\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u3002\u4f8b\u5982\uff0c\u5982\u679c Comment \u662f\u4e00\u4e2aDjango\u6a21\u578b\u7684\u8bdd\uff0c\u5177\u4f53\u7684\u65b9\u6cd5\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a      def create(self, validated_data):\n        return Comment.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        instance.email = validated_data.get('email', instance.email)\n        instance.content = validated_data.get('content', instance.content)\n        instance.created = validated_data.get('created', instance.created)\n        instance.save()\n        return instance  \u73b0\u5728\u5f53\u6211\u4eec\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u65f6\u5019\uff0c\u57fa\u4e8e\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 .save() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u3002  comment = serializer.save()  \u8c03\u7528 .save() \u65b9\u6cd5\u5c06\u521b\u5efa\u65b0\u5b9e\u4f8b\u6216\u8005\u66f4\u65b0\u73b0\u6709\u5b9e\u4f8b\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u65f6\u5019\u662f\u5426\u4f20\u9012\u4e86\u73b0\u6709\u5b9e\u4f8b\uff1a  # .save() will create a new instance.\nserializer = CommentSerializer(data=data)\n\n# .save() will update the existing `comment` instance.\nserializer = CommentSerializer(comment, data=data)  .create() \u548c .update() \u65b9\u6cd5\u90fd\u662f\u53ef\u9009\u7684\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u7528\u4f8b\u4e0d\u5b9e\u73b0\u3001\u5b9e\u73b0\u5b83\u4eec\u4e4b\u4e00\u6216\u90fd\u5b9e\u73b0\u3002",
            "title": "\u4fdd\u5b58\u5b9e\u4f8b"
        },
        {
            "location": "/api-guide/serializers_zh/#save",
            "text": "\u6709\u65f6\u4f60\u4f1a\u5e0c\u671b\u4f60\u7684\u89c6\u56fe\u4ee3\u7801\u80fd\u591f\u5728\u4fdd\u5b58\u5b9e\u4f8b\u65f6\u6ce8\u5165\u989d\u5916\u7684\u6570\u636e\u3002\u6b64\u989d\u5916\u6570\u636e\u53ef\u80fd\u5305\u62ec\u5f53\u524d\u7528\u6237\uff0c\u5f53\u524d\u65f6\u95f4\u6216\u4e0d\u662f\u8bf7\u6c42\u6570\u636e\u4e00\u90e8\u5206\u7684\u5176\u4ed6\u4fe1\u606f\u3002  \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u8c03\u7528 .save() \u65f6\u6dfb\u52a0\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a  serializer.save(owner=request.user)  \u5728 .create() \u6216 .update() \u88ab\u8c03\u7528\u65f6\uff0c\u4efb\u4f55\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u5c06\u88ab\u5305\u542b\u5728 validated_data \u53c2\u6570\u4e2d\u3002",
            "title": "\u4f20\u9012\u9644\u52a0\u5c5e\u6027\u5230.save()"
        },
        {
            "location": "/api-guide/serializers_zh/#save_1",
            "text": "\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b .create() \u548c .update() \u65b9\u6cd5\u53ef\u80fd\u65e0\u610f\u4e49\u3002\u4f8b\u5982\u5728contact form\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\uff0c\u800c\u662f\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u6216\u5176\u4ed6\u6d88\u606f\u3002  \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u91cd\u5199 .save() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u90a3\u6837\u66f4\u53ef\u8bfb\u548c\u6709\u610f\u4e49\u3002  \u4f8b\u5982\uff1a  class ContactForm(serializers.Serializer):\n    email = serializers.EmailField()\n    message = serializers.CharField()\n\n    def save(self):\n        email = self.validated_data['email']\n        message = self.validated_data['message']\n        send_email(from=email, message=message)  \u8bf7\u6ce8\u610f\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u73b0\u5728\u4e0d\u5f97\u4e0d\u76f4\u63a5\u8bbf\u95eeserializer\u7684 .validated_data \u5c5e\u6027\u3002",
            "title": "\u76f4\u63a5\u91cd\u5199.save()"
        },
        {
            "location": "/api-guide/serializers_zh/#_6",
            "text": "\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f60\u59cb\u7ec8\u9700\u8981\u5148\u8c03\u7528 is_valid() \u65b9\u6cd5\uff0c\u7136\u540e\u518d\u5c1d\u8bd5\u53bb\u8bbf\u95ee\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e\u6216\u4fdd\u5b58\u5bf9\u8c61\u5b9e\u4f8b\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9a8c\u8bc1\u9519\u8bef\uff0c .errors \u5c5e\u6027\u5c06\u5305\u542b\u8868\u793a\u751f\u6210\u7684\u9519\u8bef\u6d88\u606f\u7684\u5b57\u5178\u3002\u4f8b\u5982\uff1a  serializer = CommentSerializer(data={'email': 'foobar', 'content': 'baz'})\nserializer.is_valid()\n# False\nserializer.errors\n# {'email': [u'Enter a valid e-mail address.'], 'created': [u'This field is required.']}  \u5b57\u5178\u91cc\u7684\u6bcf\u4e00\u4e2a\u952e\u90fd\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u662f\u4e0e\u8be5\u5b57\u6bb5\u5bf9\u5e94\u7684\u4efb\u4f55\u9519\u8bef\u6d88\u606f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002 non_field_errors \u952e\u53ef\u80fd\u5b58\u5728\uff0c\u5b83\u5c06\u5217\u51fa\u4efb\u4f55\u4e00\u822c\u9a8c\u8bc1\u9519\u8bef\u4fe1\u606f\u3002 non_field_errors \u7684\u540d\u79f0\u53ef\u4ee5\u901a\u8fc7REST framework\u8bbe\u7f6e\u4e2d\u7684 NON_FIELD_ERRORS_KEY \u6765\u81ea\u5b9a\u4e49\u3002\n\u5f53\u5bf9\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u5e8f\u5217\u5316\u65f6\uff0c\u8fd4\u56de\u7684\u9519\u8bef\u662f\u6bcf\u4e2a\u53cd\u5e8f\u5217\u5316\u9879\u7684\u5b57\u5178\u5217\u8868\u3002",
            "title": "\u9a8c\u8bc1"
        },
        {
            "location": "/api-guide/serializers_zh/#_7",
            "text": ".is_valid() \u65b9\u6cd5\u4f7f\u7528\u53ef\u9009\u7684 raise_exception \u6807\u5fd7\uff0c\u5982\u679c\u5b58\u5728\u9a8c\u8bc1\u9519\u8bef\u5c06\u4f1a\u629b\u51fa\u4e00\u4e2a serializers.ValidationError \u5f02\u5e38\u3002  \u8fd9\u4e9b\u5f02\u5e38\u7531REST framework\u63d0\u4f9b\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u81ea\u52a8\u5904\u7406\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u8fd4\u56de HTTP 400 Bad Request \u54cd\u5e94\u3002  # \u5982\u679c\u6570\u636e\u65e0\u6548\u5c31\u8fd4\u56de400\u54cd\u5e94\nserializer.is_valid(raise_exception=True)",
            "title": "\u629b\u51fa\u65e0\u6548\u6570\u636e\u7684\u5f02\u5e38"
        },
        {
            "location": "/api-guide/serializers_zh/#_8",
            "text": "\u4f60\u53ef\u4ee5\u901a\u8fc7\u5411\u4f60\u7684 Serializer \u5b50\u7c7b\u4e2d\u6dfb\u52a0 .validate_<field_name> \u65b9\u6cd5\u6765\u6307\u5b9a\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u522b\u7684\u9a8c\u8bc1\u3002\u8fd9\u4e9b\u7c7b\u4f3c\u4e8eDjango\u8868\u5355\u4e2d\u7684 .clean_<field_name> \u65b9\u6cd5\u3002  \u8fd9\u4e9b\u65b9\u6cd5\u91c7\u7528\u5355\u4e2a\u53c2\u6570\uff0c\u5373\u9700\u8981\u9a8c\u8bc1\u7684\u5b57\u6bb5\u503c\u3002  \u4f60\u7684 validate_<field_name> \u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u6216\u8005\u629b\u51fa\u4e00\u4e2a serializers.ValidationError \u5f02\u5e38\u3002\u4f8b\u5982\uff1a  from rest_framework import serializers\n\nclass BlogPostSerializer(serializers.Serializer):\n    title = serializers.CharField(max_length=100)\n    content = serializers.CharField()\n\n    def validate_title(self, value):\n        \"\"\"\n        Check that the blog post is about Django.\n        \"\"\"\n        if 'django' not in value.lower():\n            raise serializers.ValidationError(\"Blog post is not about Django\")\n        return value   \u6ce8\u610f\uff1a  \u5982\u679c\u4f60\u5728\u5e8f\u5217\u5316\u5668\u4e2d\u58f0\u660e <field_name> \u7684\u65f6\u5019\u5e26\u6709 required=False \u53c2\u6570\uff0c\u5b57\u6bb5\u4e0d\u88ab\u5305\u542b\u7684\u65f6\u5019\u8fd9\u4e2a\u9a8c\u8bc1\u6b65\u9aa4\u5c31\u4e0d\u4f1a\u6267\u884c\u3002",
            "title": "\u5b57\u6bb5\u7ea7\u522b\u7684\u9a8c\u8bc1"
        },
        {
            "location": "/api-guide/serializers_zh/#_9",
            "text": "\u8981\u6267\u884c\u9700\u8981\u8bbf\u95ee\u591a\u4e2a\u5b57\u6bb5\u7684\u4efb\u4f55\u5176\u4ed6\u9a8c\u8bc1\uff0c\u8bf7\u6dfb\u52a0\u4e00\u4e2a .validate() \u65b9\u6cd5\u5230\u4f60\u7684 Serializer \u5b50\u7c7b\u4e2d\u3002\u8fd9\u4e2a\u65b9\u6cd5\u91c7\u7528\u5b57\u6bb5\u503c\u5b57\u5178\u7684\u5355\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u9700\u8981\u5e94\u8be5\u629b\u51fa\u4e00\u4e2a  ValidationError \u5f02\u5e38\uff0c\u6216\u8005\u77e5\u8bc6\u8fd4\u56de\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u503c\u3002\u4f8b\u5982\uff1a  from rest_framework import serializers\n\nclass EventSerializer(serializers.Serializer):\n    description = serializers.CharField(max_length=100)\n    start = serializers.DateTimeField()\n    finish = serializers.DateTimeField()\n\n    def validate(self, data):\n        \"\"\"\n        Check that the start is before the stop.\n        \"\"\"\n        if data['start'] > data['finish']:\n            raise serializers.ValidationError(\"finish must occur after start\")\n        return data",
            "title": "\u5bf9\u8c61\u7ea7\u522b\u7684\u9a8c\u8bc1"
        },
        {
            "location": "/api-guide/serializers_zh/#_10",
            "text": "\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5404\u4e2a\u5b57\u6bb5\u90fd\u53ef\u4ee5\u5305\u542b\u9a8c\u8bc1\u5668\uff0c\u901a\u8fc7\u5728\u5b57\u6bb5\u5b9e\u4f8b\u4e0a\u58f0\u660e\uff0c\u4f8b\u5982\uff1a  def multiple_of_ten(value):\n    if value % 10 != 0:\n        raise serializers.ValidationError('Not a multiple of ten')\n\nclass GameRecord(serializers.Serializer):\n    score = IntegerField(validators=[multiple_of_ten])\n    ...  \u5e8f\u5217\u5316\u5668\u7c7b\u8fd8\u53ef\u4ee5\u5305\u62ec\u5e94\u7528\u4e8e\u4e00\u7ec4\u5b57\u6bb5\u6570\u636e\u7684\u53ef\u91cd\u7528\u7684\u9a8c\u8bc1\u5668\u3002\u8fd9\u4e9b\u9a8c\u8bc1\u5668\u8981\u5728\u5185\u90e8\u7684 Meta \u7c7b\u4e2d\u58f0\u660e\uff0c\u5982\u4e0b\u6240\u793a\uff1a  class EventSerializer(serializers.Serializer):\n    name = serializers.CharField()\n    room_number = serializers.IntegerField(choices=[101, 102, 103, 201])\n    date = serializers.DateField()\n\n    class Meta:\n        # \u6bcf\u95f4\u5c4b\u5b50\u6bcf\u5929\u53ea\u80fd\u67091\u4e2a\u6d3b\u52a8\u3002\n        validators = UniqueTogetherValidator(\n            queryset=Event.objects.all(),\n            fields=['room_number', 'date']\n        )  \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605  validators\u6587\u6863 \u3002",
            "title": "\u9a8c\u8bc1\u5668"
        },
        {
            "location": "/api-guide/serializers_zh/#_11",
            "text": "\u5c06\u521d\u59cb\u5316\u5bf9\u8c61\u6216\u8005\u67e5\u8be2\u96c6\u4f20\u9012\u7ed9\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 .instance \u8bbf\u95ee\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012\u521d\u59cb\u5316\u5bf9\u8c61\uff0c\u90a3\u4e48 .instance \u5c5e\u6027\u5c06\u662f None \u3002  \u5c06\u6570\u636e\u4f20\u9012\u7ed9\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\u65f6\uff0c\u672a\u4fee\u6539\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7 .initial_data \u83b7\u53d6\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012data\u5173\u952e\u5b57\u53c2\u6570\uff0c\u90a3\u4e48 .initial_data \u5c5e\u6027\u5c31\u4e0d\u5b58\u5728\u3002",
            "title": "\u8bbf\u95ee\u521d\u59cb\u6570\u636e\u548c\u5b9e\u4f8b"
        },
        {
            "location": "/api-guide/serializers_zh/#_12",
            "text": "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u5fc5\u987b\u4f20\u9012\u6240\u6709\u5fc5\u586b\u5b57\u6bb5\u7684\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528  partial \u53c2\u6570\u6765\u5141\u8bb8\u90e8\u5206\u66f4\u65b0\u3002  # \u4f7f\u7528\u90e8\u5206\u6570\u636e\u66f4\u65b0`comment` \nserializer = CommentSerializer(comment, data={'content': u'foo bar'}, partial=True)",
            "title": "\u90e8\u5206\u66f4\u65b0"
        },
        {
            "location": "/api-guide/serializers_zh/#_13",
            "text": "\u524d\u9762\u7684\u5b9e\u4f8b\u9002\u7528\u4e8e\u5904\u7406\u53ea\u6709\u7b80\u5355\u6570\u636e\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u9700\u8981\u8868\u793a\u66f4\u590d\u6742\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u5bf9\u8c61\u7684\u67d0\u4e9b\u5c5e\u6027\u53ef\u80fd\u4e0d\u662f\u5b57\u7b26\u4e32\u3001\u65e5\u671f\u3001\u6574\u6570\u8fd9\u6837\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\u3002  Serializer \u7c7b\u672c\u8eab\u4e5f\u662f\u4e00\u79cd Field \uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5bf9\u8c61\u7c7b\u578b\u5d4c\u5957\u5728\u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u5173\u7cfb\u3002  class UserSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    username = serializers.CharField(max_length=100)\n\nclass CommentSerializer(serializers.Serializer):\n    user = UserSerializer()\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()  \u5982\u679c\u5d4c\u5957\u8868\u793a\u53ef\u4ee5\u63a5\u6536  None \u503c\uff0c\u5219\u5e94\u8be5\u5c06  required=False \u6807\u5fd7\u4f20\u9012\u7ed9\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u3002  class CommentSerializer(serializers.Serializer):\n    user = UserSerializer(required=False)  # \u53ef\u80fd\u662f\u533f\u540d\u7528\u6237\u3002\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()  \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u5d4c\u5957\u7684\u5173\u8054\u5b57\u6bb5\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u5217\u8868\uff0c\u90a3\u4e48\u5e94\u8be5\u5c06 many=True \u6807\u5fd7\u4f20\u9012\u7ed9\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u3002  class CommentSerializer(serializers.Serializer):\n    user = UserSerializer(required=False)\n    edits = EditItemSerializer(many=True)  # edit'\u9879\u7684\u5d4c\u5957\u5217\u8868\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()",
            "title": "\u5904\u7406\u5d4c\u5957\u5bf9\u8c61"
        },
        {
            "location": "/api-guide/serializers_zh/#_14",
            "text": "\u5f53\u5904\u7406\u652f\u6301\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u5d4c\u5957\u8868\u793a\u65f6\uff0c\u5d4c\u5957\u5bf9\u8c61\u7684\u4efb\u4f55\u9519\u8bef\u90fd\u5d4c\u5957\u5728\u5d4c\u5957\u5bf9\u8c61\u7684\u5b57\u6bb5\u540d\u4e0b\u3002  serializer = CommentSerializer(data={'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'})\nserializer.is_valid()\n# False\nserializer.errors\n# {'user': {'email': [u'Enter a valid e-mail address.']}, 'created': [u'This field is required.']}  \u7c7b\u4f3c\u7684\uff0c .validated_data  \u5c5e\u6027\u5c06\u5305\u62ec\u5d4c\u5957\u6570\u636e\u7ed3\u6784\u3002",
            "title": "\u53ef\u5199\u7684\u5d4c\u5957\u8868\u793a"
        },
        {
            "location": "/api-guide/serializers_zh/#create",
            "text": "\u5982\u679c\u4f60\u652f\u6301\u53ef\u5199\u7684\u5d4c\u5957\u8868\u793a\uff0c\u5219\u9700\u8981\u7f16\u5199 .create() \u6216 .update() \u5904\u7406\u4fdd\u5b58\u591a\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002  \u4e0b\u9762\u7684\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u5904\u7406\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u5d4c\u5957\u7684\u6982\u8981\u4fe1\u606f\u5bf9\u8c61\u7684\u7528\u6237\u3002  class UserSerializer(serializers.ModelSerializer):\n    profile = ProfileSerializer()\n\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'profile')\n\n    def create(self, validated_data):\n        profile_data = validated_data.pop('profile')\n        user = User.objects.create(**validated_data)\n        Profile.objects.create(user=user, **profile_data)\n        return user",
            "title": "\u4e3a\u5d4c\u5957\u5173\u7cfb\u5b9a\u4e49.create()\u65b9\u6cd5"
        },
        {
            "location": "/api-guide/serializers_zh/#update",
            "text": "\u5bf9\u4e8e\u66f4\u65b0\uff0c\u4f60\u9700\u8981\u4ed4\u7ec6\u8003\u8651\u5982\u4f55\u5904\u7406\u5173\u8054\u5b57\u6bb5\u7684\u66f4\u65b0\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5173\u8054\u5b57\u6bb5\u7684\u503c\u662f None \uff0c\u6216\u8005\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4e0b\u9762\u54ea\u4e00\u9879\uff1f   \u5728\u6570\u636e\u5e93\u4e2d\u5c06\u5173\u8054\u5b57\u6bb5\u8bbe\u7f6e\u6210 NULL \u3002  \u5220\u9664\u5173\u8054\u7684\u5b9e\u4f8b\u3002  \u5ffd\u7565\u6570\u636e\u5e76\u4fdd\u7559\u8fd9\u4e2a\u5b9e\u4f8b\u3002  \u629b\u51fa\u9a8c\u8bc1\u9519\u8bef\u3002   \u4e0b\u9762\u662f\u6211\u4eec\u4e4b\u524d UserSerializer \u7c7b\u4e2d update() \u65b9\u6cd5\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002       def update(self, instance, validated_data):\n        profile_data = validated_data.pop('profile')\n        # \u9664\u975e\u5e94\u7528\u7a0b\u5e8f\u6b63\u786e\u6267\u884c\uff0c\n        # \u4fdd\u8bc1\u8fd9\u4e2a\u5b57\u6bb5\u4e00\u76f4\u88ab\u8bbe\u7f6e\uff0c\n        # \u5426\u5219\u5c31\u5e94\u8be5\u629b\u51fa\u4e00\u4e2a\u9700\u8981\u5904\u7406\u7684`DoesNotExist`\u3002\n        profile = instance.profile\n\n        instance.username = validated_data.get('username', instance.username)\n        instance.email = validated_data.get('email', instance.email)\n        instance.save()\n\n        profile.is_premium_member = profile_data.get(\n            'is_premium_member',\n            profile.is_premium_member\n        )\n        profile.has_support_contract = profile_data.get(\n            'has_support_contract',\n            profile.has_support_contract\n         )\n        profile.save()\n\n        return instance  \u56e0\u4e3a\u5d4c\u5957\u5173\u7cfb\u7684\u521b\u5efa\u548c\u66f4\u65b0\u884c\u4e3a\u53ef\u80fd\u4e0d\u660e\u786e\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u5173\u8054\u6a21\u578b\u95f4\u7684\u590d\u6742\u4f9d\u8d56\u5173\u7cfb\uff0cREST framework 3 \u8981\u6c42\u4f60\u59cb\u7ec8\u660e\u786e\u7684\u5b9a\u4e49\u8fd9\u4e9b\u65b9\u6cd5\u3002\u9ed8\u8ba4\u7684 ModelSerializer   .create() \u548c .update() \u65b9\u6cd5\u4e0d\u5305\u62ec\u5bf9\u53ef\u5199\u5d4c\u5957\u5173\u8054\u7684\u652f\u6301\u3002  \u63d0\u4f9b\u81ea\u52a8\u652f\u6301\u67d0\u79cd\u7c7b\u578b\u7684\u81ea\u52a8\u5199\u5165\u5d4c\u5957\u5173\u8054\u7684\u7b2c\u4e09\u65b9\u5305\u53ef\u80fd\u4e0e3.1\u7248\u672c\u4e00\u540c\u653e\u51fa\u3002",
            "title": "\u4e3a\u5d4c\u5957\u5173\u7cfb\u5b9a\u4e49.update()\u65b9\u6cd5"
        },
        {
            "location": "/api-guide/serializers_zh/#_15",
            "text": "\u5728\u5e8f\u5217\u5316\u5668\u4e2d\u4fdd\u5b58\u591a\u4e2a\u76f8\u5173\u5b9e\u4f8b\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u7f16\u5199\u5904\u7406\u521b\u5efa\u6b63\u786e\u5b9e\u4f8b\u7684\u81ea\u5b9a\u4e49\u6a21\u578b\u7ba1\u7406\u5668\u7c7b\u3002  \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u786e\u4fdd User \u5b9e\u4f8b\u548c Profile \u5b9e\u4f8b\u603b\u662f\u4f5c\u4e3a\u4e00\u5bf9\u4e00\u8d77\u521b\u5efa\u3002\u6211\u4eec\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u81ea\u5b9a\u4e49\u7ba1\u7406\u5668\u7c7b\uff1a  class UserManager(models.Manager):\n    ...\n\n    def create(self, username, email, is_premium_member=False, has_support_contract=False):\n        user = User(username=username, email=email)\n        user.save()\n        profile = Profile(\n            user=user,\n            is_premium_member=is_premium_member,\n            has_support_contract=has_support_contract\n        )\n        profile.save()\n        return user  \u8fd9\u4e2a\u7ba1\u7406\u5668\u7c7b\u73b0\u5728\u66f4\u597d\u7684\u5c01\u88c5\u4e86\u7528\u6237\u5b9e\u4f8b\u548c\u7528\u6237\u4fe1\u606f\u5b9e\u4f8b\u603b\u662f\u5728\u540c\u4e00\u65f6\u95f4\u521b\u5efa\u3002\u6211\u4eec\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e0a\u7684 .create() \u65b9\u6cd5\u73b0\u5728\u80fd\u591f\u7528\u65b0\u7684\u7ba1\u7406\u5668\u65b9\u6cd5\u91cd\u5199\u3002  def create(self, validated_data):\n    return User.objects.create(\n        username=validated_data['username'],\n        email=validated_data['email']\n        is_premium_member=validated_data['profile']['is_premium_member']\n        has_support_contract=validated_data['profile']['has_support_contract']\n    )  \u6709\u5173\u6b64\u65b9\u6cd5\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605Django\u6587\u6863\u4e2d\u7684  \u6a21\u578b\u7ba1\u7406\u5668 \u548c \u4f7f\u7528\u6a21\u578b\u548c\u7ba1\u7406\u5668\u7c7b\u7684\u76f8\u5173\u535a\u5ba2 \u3002",
            "title": "\u5904\u7406\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u4fdd\u5b58\u5173\u8054\u5b9e\u4f8b"
        },
        {
            "location": "/api-guide/serializers_zh/#_16",
            "text": "Serializer \u7c7b\u8fd8\u53ef\u4ee5\u5e8f\u5217\u5316\u6216\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u7684\u5217\u8868\u3002",
            "title": "\u5904\u7406\u591a\u4e2a\u5bf9\u8c61"
        },
        {
            "location": "/api-guide/serializers_zh/#_17",
            "text": "\u4e3a\u4e86\u80fd\u591f\u5e8f\u5217\u5316\u4e00\u4e2a\u67e5\u8be2\u96c6\u6216\u8005\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u800c\u4e0d\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5bf9\u8c61\uff0c\u5e94\u8be5\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u65f6\u5019\u4f20\u4e00\u4e2a many=True \u53c2\u6570\u3002\u8fd9\u6837\u5c31\u80fd\u5e8f\u5217\u5316\u4e00\u4e2a\u67e5\u8be2\u96c6\u6216\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u3002  queryset = Book.objects.all()\nserializer = BookSerializer(queryset, many=True)\nserializer.data\n# [\n#     {'id': 0, 'title': 'The electric kool-aid acid test', 'author': 'Tom Wolfe'},\n#     {'id': 1, 'title': 'If this is a man', 'author': 'Primo Levi'},\n#     {'id': 2, 'title': 'The wind-up bird chronicle', 'author': 'Haruki Murakami'}\n# ]",
            "title": "\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61"
        },
        {
            "location": "/api-guide/serializers_zh/#_18",
            "text": "\u53cd\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61\u9ed8\u8ba4\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u6709\u5173\u5982\u4f55\u652f\u6301\u6216\u81ea\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605\u8fd9\u4e2a\u6587\u6863 ListSerializer \u3002",
            "title": "\u53cd\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61"
        },
        {
            "location": "/api-guide/serializers_zh/#_19",
            "text": "\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9664\u4e86\u8981\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u4e3a\u5e8f\u5217\u5316\u7a0b\u5e8f\u63d0\u4f9b\u989d\u5916\u7684\u4e0a\u4e0b\u6587\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u5305\u542b\u8d85\u94fe\u63a5\u5173\u7cfb\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u8fd9\u9700\u8981\u5e8f\u5217\u5316\u5668\u80fd\u591f\u8bbf\u95ee\u5f53\u524d\u7684\u8bf7\u6c42\u4ee5\u4fbf\u6b63\u786e\u751f\u6210\u5b8c\u5168\u9650\u5b9a\u7684URL\u3002  \u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7684\u65f6\u5019\u4f20\u9012\u4e00\u4e2a context \u53c2\u6570\u6765\u4f20\u9012\u4efb\u610f\u7684\u9644\u52a0\u4e0a\u4e0b\u6587\u3002\u4f8b\u5982\uff1a  serializer = AccountSerializer(account, context={'request': request})\nserializer.data\n# {'id': 6, 'owner': u'denvercoder9', 'created': datetime.datetime(2013, 2, 12, 09, 44, 56, 678870), 'details': 'http://example.com/accounts/6/details'}  \u8fd9\u4e2a\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u53ef\u4ee5\u5728\u4efb\u4f55\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7684\u903b\u8f91\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982 .to_representation() \u65b9\u6cd5\u4e2d\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee self.context \u5c5e\u6027\u83b7\u53d6\u4e0a\u4e0b\u6587\u5b57\u5178\u3002",
            "title": "\u5305\u62ec\u989d\u5916\u7684\u4e0a\u4e0b\u6587"
        },
        {
            "location": "/api-guide/serializers_zh/#modelserializer",
            "text": "\u901a\u5e38\u4f60\u4f1a\u60f3\u8981\u4e0eDjango\u6a21\u578b\u76f8\u5bf9\u5e94\u7684\u5e8f\u5217\u5316\u7c7b\u3002  ModelSerializer \u7c7b\u80fd\u591f\u8ba9\u4f60\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u6a21\u578b\u4e2d\u76f8\u5e94\u5b57\u6bb5\u7684 Serializer \u7c7b\u3002  \u8fd9\u4e2a ModelSerializer \u7c7b\u548c\u5e38\u89c4\u7684 Serializer \u7c7b\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f \uff1a   \u5b83\u6839\u636e\u6a21\u578b\u81ea\u52a8\u751f\u6210\u4e00\u7ec4\u5b57\u6bb5\u3002  \u5b83\u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7684\u9a8c\u8bc1\u5668\uff0c\u6bd4\u5982unique_together\u9a8c\u8bc1\u5668\u3002  \u5b83\u9ed8\u8ba4\u7b80\u5355\u5b9e\u73b0\u4e86 .create() \u65b9\u6cd5\u548c .update() \u65b9\u6cd5\u3002   \u58f0\u660e\u4e00\u4e2a ModelSerializer \u5982\u4e0b\uff1a  class AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'users', 'created')  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u6a21\u578b\u7684\u5b57\u6bb5\u90fd\u5c06\u6620\u5c04\u5230\u5e8f\u5217\u5316\u5668\u4e0a\u76f8\u5e94\u7684\u5b57\u6bb5\u3002  \u6a21\u578b\u4e2d\u4efb\u4f55\u5173\u8054\u5b57\u6bb5\u6bd4\u5982\u5916\u952e\u90fd\u5c06\u6620\u5c04\u5230 PrimaryKeyRelatedField \u5b57\u6bb5\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u5305\u62ec\u53cd\u5411\u5173\u8054\uff0c\u9664\u975e\u50cf serializer relations \u6587\u6863\u4e2d\u89c4\u5b9a\u7684\u90a3\u6837\u663e\u5f0f\u5305\u542b\u3002",
            "title": "ModelSerializer"
        },
        {
            "location": "/api-guide/serializers_zh/#modelserializer_1",
            "text": "\u5e8f\u5217\u5316\u7c7b\u751f\u6210\u6709\u7528\u7684\u8be6\u7ec6\u8868\u793a\u5b57\u7b26\u4e32\uff0c\u5141\u8bb8\u4f60\u5168\u9762\u68c0\u67e5\u5176\u5b57\u6bb5\u7684\u72b6\u6001\u3002 \u8fd9\u5728\u4f7f\u7528 ModelSerializers \u65f6\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u60f3\u786e\u5b9a\u81ea\u52a8\u521b\u5efa\u4e86\u54ea\u4e9b\u5b57\u6bb5\u548c\u9a8c\u8bc1\u5668\u3002  \u8981\u68c0\u67e5\u7684\u8bdd\uff0c\u6253\u5f00Django shell,\u6267\u884c  python manage.py shell \uff0c\u7136\u540e\u5bfc\u5165\u5e8f\u5217\u5316\u5668\u7c7b\uff0c\u5b9e\u4f8b\u5316\u5b83\uff0c\u5e76\u6253\u5370\u5bf9\u8c61\u7684\u8868\u793a\uff1a  >>> from myapp.serializers import AccountSerializer\n>>> serializer = AccountSerializer()\n>>> print(repr(serializer))\nAccountSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    name = CharField(allow_blank=True, max_length=100, required=False)\n    owner = PrimaryKeyRelatedField(queryset=User.objects.all())",
            "title": "\u68c0\u67e5ModelSerializer"
        },
        {
            "location": "/api-guide/serializers_zh/#_20",
            "text": "\u5982\u679c\u4f60\u5e0c\u671b\u5728\u6a21\u578b\u5e8f\u5217\u5316\u5668\u4e2d\u4f7f\u7528\u9ed8\u8ba4\u5b57\u6bb5\u7684\u4e00\u90e8\u5206\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 fields \u6216 exclude \u9009\u9879\u6765\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5c31\u50cf\u4f7f\u7528 ModelForm \u4e00\u6837\u3002\u5f3a\u70c8\u5efa\u8bae\u4f60\u4f7f\u7528 fields \u5c5e\u6027\u663e\u5f0f\u7684\u8bbe\u7f6e\u8981\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002\u8fd9\u6837\u5c31\u4e0d\u592a\u53ef\u80fd\u56e0\u4e3a\u4f60\u4fee\u6539\u4e86\u6a21\u578b\u800c\u65e0\u610f\u4e2d\u66b4\u9732\u4e86\u6570\u636e\u3002  \u4f8b\u5982\uff1a  class AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'users', 'created')  \u4f60\u8fd8\u53ef\u4ee5\u5c06 fields \u5c5e\u6027\u8bbe\u7f6e\u6210 '__all__' \u6765\u8868\u660e\u4f7f\u7528\u6a21\u578b\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u3002  \u4f8b\u5982\uff1a  class AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = '__all__'  \u4f60\u53ef\u4ee5\u5c06 exclude \u5c5e\u6027\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4ece\u5e8f\u5217\u5316\u5668\u4e2d\u6392\u9664\u7684\u5b57\u6bb5\u5217\u8868\u3002  \u4f8b\u5982\uff1a  class AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        exclude = ('users',)  \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c Account \u6a21\u578b\u6709\u4e09\u4e2a\u5b57\u6bb5 account_name \uff0c users \u548c created \uff0c\u90a3\u4e48\u53ea\u6709  account_name \u548c created \u4f1a\u88ab\u5e8f\u5217\u5316\u3002  \u5728 fields \u548c exclude \u5c5e\u6027\u4e2d\u7684\u540d\u79f0\uff0c\u901a\u5e38\u4f1a\u6620\u5c04\u5230\u6a21\u578b\u7c7b\u4e2d\u7684\u6a21\u578b\u5b57\u6bb5\u3002  \u6216\u8005 fields \u9009\u9879\u4e2d\u7684\u540d\u79f0\u53ef\u4ee5\u6620\u5c04\u5230\u6a21\u578b\u7c7b\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u53c2\u6570\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\u3002",
            "title": "\u6307\u5b9a\u8981\u5305\u62ec\u7684\u5b57\u6bb5"
        },
        {
            "location": "/api-guide/serializers_zh/#_21",
            "text": "\u9ed8\u8ba4 ModelSerializer \u4f7f\u7528\u4e3b\u952e\u8fdb\u884c\u5173\u8054\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 depth \u9009\u9879\u8f7b\u677e\u751f\u6210\u5d4c\u5957\u5173\u8054\uff1a  class AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'users', 'created')\n        depth = 1  depth \u9009\u9879\u5e94\u8be5\u8bbe\u7f6e\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u8868\u660e\u5e94\u8be5\u904d\u5386\u7684\u5173\u8054\u6df1\u5ea6\u3002  \u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u8be5\u5b50\u6bb5\u3002",
            "title": "\u6307\u5b9a\u5d4c\u5957\u5e8f\u5217\u5316"
        },
        {
            "location": "/api-guide/serializers_zh/#_22",
            "text": "\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 ModelSerializer \u7c7b\u4e0a\u58f0\u660e\u5b57\u6bb5\u6765\u589e\u52a0\u989d\u5916\u7684\u5b57\u6bb5\u6216\u8005\u91cd\u5199\u9ed8\u8ba4\u7684\u5b57\u6bb5\uff0c\u5c31\u548c\u5728 Serializer \u7c7b\u4e00\u6837\u7684\u3002  class AccountSerializer(serializers.ModelSerializer):\n    url = serializers.CharField(source='get_absolute_url', read_only=True)\n    groups = serializers.PrimaryKeyRelatedField(many=True)\n\n    class Meta:\n        model = Account  \u989d\u5916\u7684\u5b57\u6bb5\u53ef\u4ee5\u5bf9\u5e94\u6a21\u578b\u4e0a\u4efb\u4f55\u5c5e\u6027\u6216\u53ef\u8c03\u7528\u7684\u65b9\u6cd5\u3002",
            "title": "\u660e\u786e\u6307\u5b9a\u5b57\u6bb5"
        },
        {
            "location": "/api-guide/serializers_zh/#_23",
            "text": "\u4f60\u53ef\u80fd\u5e0c\u671b\u5c06\u591a\u4e2a\u5b57\u6bb5\u6307\u5b9a\u4e3a\u53ea\u8bfb\uff0c\u800c\u4e0d\u662f\u663e\u5f0f\u7684\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u6dfb\u52a0 read_only=True \u5c5e\u6027\uff0c\u8fd9\u79cd\u60c5\u51b5\u4f60\u53ef\u4ee5\u4f7f\u7528Meta\u7684 read_only_fields \u9009\u9879\u3002  \u8be5\u9009\u9879\u5e94\u8be5\u662f\u5b57\u6bb5\u540d\u79f0\u7684\u5217\u8868\u6216\u5143\u7956\uff0c\u5e76\u50cf\u4e0b\u9762\u8fd9\u6837\u58f0\u660e\uff1a  class AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'users', 'created')\n        read_only_fields = ('account_name',)  \u6a21\u578b\u4e2d\u5df2\u7ecf\u8bbe\u7f6e editable=False \u7684\u5b57\u6bb5\u548c\u9ed8\u8ba4\u5c31\u88ab\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\u7684 AutoField \u5b57\u6bb5\u90fd\u4e0d\u9700\u8981\u6dfb\u52a0\u5230 read_only_fields \u9009\u9879\u4e2d\u3002   \u6ce8\u610f : \u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4e2d\u4e00\u4e2a\u53ea\u8bfb\u5b57\u6bb5\u662f\u6a21\u578b\u7ea7\u522b unique_together \u7ea6\u675f\u7684\u4e00\u90e8\u5206\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u7c7b\u9700\u8981\u8be5\u5b57\u6bb5\u624d\u80fd\u9a8c\u8bc1\u7ea6\u675f\uff0c\u4f46\u4e5f\u4e0d\u80fd\u7531\u7528\u6237\u7f16\u8f91\u3002  \u5904\u7406\u6b64\u95ee\u9898\u7684\u6b63\u786e\u65b9\u6cd5\u662f\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u663e\u5f0f\u6307\u5b9a\u8be5\u5b57\u6bb5\uff0c\u540c\u65f6\u63d0\u4f9b read_only=True \u548c default=\u2026 \u5173\u952e\u5b57\u53c2\u6570\u3002  \u8fd9\u79cd\u60c5\u51b5\u7684\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u548c\u5176\u4ed6\u6807\u8bc6\u7b26 unique_together \u7684\u5f53\u524d\u8ba4\u8bc1\u7684 User \u662f\u53ea\u8bfb\u7684\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u58f0\u660euser\u5b57\u6bb5\uff1a  user = serializers.PrimaryKeyRelatedField(read_only=True, default=serializers.CurrentUserDefault())  \u6709\u5173 UniqueTogetherValidator \u548c CurrentUserDefault \u7c7b\u7684\u8be6\u7ec6\u6587\u6863\uff0c\u8bf7\u67e5\u9605 \u9a8c\u8bc1\u5668\u7684\u6587\u6863 \u3002",
            "title": "\u6307\u5b9a\u53ea\u8bfb\u5b57\u6bb5"
        },
        {
            "location": "/api-guide/serializers_zh/#_24",
            "text": "\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 extra_kwargs \u9009\u9879\u5feb\u6377\u5730\u5728\u5b57\u6bb5\u4e0a\u6307\u5b9a\u4efb\u610f\u9644\u52a0\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\u5728 read_only_fields \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e0d\u9700\u8981\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u5f0f\u7684\u58f0\u660e\u8be5\u5b57\u6bb5\u3002  \u8fd9\u4e2a\u9009\u9879\u662f\u4e00\u4e2a\u5c06\u5177\u4f53\u5b57\u6bb5\u540d\u79f0\u5f53\u4f5c\u952e\u503c\u7684\u5b57\u5178\u3002\u4f8b\u5982\uff1a  class CreateUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('email', 'username', 'password')\n        extra_kwargs = {'password': {'write_only': True}}\n\n    def create(self, validated_data):\n        user = User(\n            email=validated_data['email'],\n            username=validated_data['username']\n        )\n        user.set_password(validated_data['password'])\n        user.save()\n        return user",
            "title": "\u9644\u52a0\u5173\u952e\u5b57\u53c2\u6570"
        },
        {
            "location": "/api-guide/serializers_zh/#_25",
            "text": "\u5728\u5e8f\u5217\u5316\u6a21\u578b\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u8868\u793a\u5173\u8054\u5173\u7cfb\u3002\u5bf9\u4e8e ModelSerializer \u9ed8\u8ba4\u662f\u4f7f\u7528\u76f8\u5173\u5b9e\u4f8b\u7684\u4e3b\u952e\u3002  \u66ff\u4ee3\u7684\u5176\u4ed6\u65b9\u6cd5\u5305\u62ec\u4f7f\u7528\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\uff0c\u5e8f\u5217\u5316\u5b8c\u6574\u7684\u5d4c\u5957\u8868\u793a\u6216\u8005\u4f7f\u7528\u81ea\u5b9a\u4e49\u8868\u793a\u7684\u5e8f\u5217\u5316\u3002  \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 serializer relations \u6587\u6863\u3002",
            "title": "\u5173\u8054\u5b57\u6bb5"
        },
        {
            "location": "/api-guide/serializers_zh/#_26",
            "text": "ModelSerializer\u7c7b\u8fd8\u516c\u5f00\u4e86\u4e00\u4e2a\u53ef\u4ee5\u8986\u76d6\u7684API\uff0c\u4ee5\u4fbf\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u65f6\u6539\u53d8\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7684\u81ea\u52a8\u786e\u5b9a\u3002  \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c ModelSerializer \u6ca1\u6709\u751f\u6210\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f60\u9700\u8981\u7684\u5b57\u6bb5\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u5c06\u5b83\u4eec\u663e\u5f0f\u5730\u6dfb\u52a0\u5230\u7c7b\u4e2d\uff0c\u6216\u8005\u76f4\u63a5\u4f7f\u7528\u5e38\u89c4\u7684 Serializer \u7c7b\u3002\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u57fa\u7c7b\uff0c\u6765\u5b9a\u4e49\u7ed9\u4efb\u610f\u6a21\u578b\u521b\u5efa\u5e8f\u5217\u5316\u5b57\u6bb5\u7684\u65b9\u5f0f\u3002",
            "title": "\u81ea\u5b9a\u4e49\u5b57\u6bb5\u6620\u5c04"
        },
        {
            "location": "/api-guide/serializers_zh/#serializer_field_mapping",
            "text": "\u5c06Django model\u7c7b\u6620\u5c04\u5230REST framework serializer\u7c7b\u3002\u4f60\u53ef\u4ee5\u8986\u5199\u8fd9\u4e2a\u6620\u5c04\u6765\u66f4\u6539\u6bcf\u4e2a\u6a21\u578b\u5e94\u8be5\u4f7f\u7528\u7684\u9ed8\u8ba4\u5e8f\u5217\u5316\u5668\u7c7b\u3002",
            "title": ".serializer_field_mapping"
        },
        {
            "location": "/api-guide/serializers_zh/#serializer_related_field",
            "text": "\u8fd9\u4e2a\u5c5e\u6027\u5e94\u662f\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7528\u4e8e\u5173\u8054\u5b57\u6bb5\u3002  \u5bf9\u4e8e ModelSerializer \u6b64\u5c5e\u6027\u9ed8\u8ba4\u662f PrimaryKeyRelatedField \u3002  \u5bf9\u4e8e HyperlinkedModelSerializer \u6b64\u5c5e\u6027\u9ed8\u8ba4\u662f serializers.HyperlinkedRelatedField \u3002",
            "title": ".serializer_related_field"
        },
        {
            "location": "/api-guide/serializers_zh/#serializer_url_field",
            "text": "\u5e94\u8be5\u7528\u4e8e\u5e8f\u5217\u5316\u5668\u4e0a\u4efb\u4f55 url \u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\u3002  \u9ed8\u8ba4\u662f  serializers.HyperlinkedIdentityField",
            "title": "serializer_url_field"
        },
        {
            "location": "/api-guide/serializers_zh/#serializer_choice_field",
            "text": "\u5e94\u7528\u4e8e\u5e8f\u5217\u5316\u5668\u4e0a\u4efb\u4f55\u9009\u62e9\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\u3002  \u9ed8\u8ba4\u662f serializers.ChoiceField",
            "title": "serializer_choice_field"
        },
        {
            "location": "/api-guide/serializers_zh/#the-field_classfield_kwargs-api",
            "text": "\u8c03\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u6765\u786e\u5b9a\u5e94\u8be5\u81ea\u52a8\u5305\u542b\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u548c\u5173\u952e\u5b57\u53c2\u6570\u3002\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u5e94\u8be5\u8fd4\u56de\u4e24\u4e2a  (field_class, field_kwargs) \u5143\u7956\u3002",
            "title": "The field_class\u548cfield_kwargs API"
        },
        {
            "location": "/api-guide/serializers_zh/#build_standard_fieldself-field_name-model_field",
            "text": "\u8c03\u7528\u540e\u751f\u6210\u5bf9\u5e94\u6807\u51c6\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002  \u9ed8\u8ba4\u5b9e\u73b0\u662f\u6839\u636e serializer_field_mapping \u5c5e\u6027\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u3002",
            "title": ".build_standard_field(self, field_name, model_field)"
        },
        {
            "location": "/api-guide/serializers_zh/#build_relational_fieldself-field_name-relation_info",
            "text": "\u8c03\u7528\u540e\u751f\u6210\u5bf9\u5e94\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002  \u9ed8\u8ba4\u5b9e\u73b0\u662f\u6839\u636e serializer_relational_field \u5c5e\u6027\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u3002  \u8fd9\u91cc\u7684 relation_info \u53c2\u6570\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7956\uff0c\u5305\u542b model_field \uff0c related_model \uff0c to_many \u548c has_through_model \u5c5e\u6027\u3002",
            "title": ".build_relational_field(self, field_name, relation_info)"
        },
        {
            "location": "/api-guide/serializers_zh/#build_nested_fieldself-field_name-relation_info-nested_depth",
            "text": "\u5f53 depth \u9009\u9879\u88ab\u8bbe\u7f6e\u65f6\uff0c\u88ab\u8c03\u7528\u540e\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u5230\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002  \u9ed8\u8ba4\u5b9e\u73b0\u662f\u52a8\u6001\u7684\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e ModelSerializer \u6216 HyperlinkedModelSerializer \u7684\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u7c7b\u3002  nested_depth \u7684\u503c\u662f depth \u7684\u503c\u51cf1\u3002  relation_info \u53c2\u6570\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7956\uff0c\u5305\u542b  model_field \uff0c related_model \uff0c to_many \u548c has_through_model \u5c5e\u6027\u3002",
            "title": ".build_nested_field(self, field_name, relation_info, nested_depth)"
        },
        {
            "location": "/api-guide/serializers_zh/#build_property_fieldself-field_name-model_class",
            "text": "\u88ab\u8c03\u7528\u540e\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u5230\u6a21\u578b\u7c7b\u4e2d\u5c5e\u6027\u6216\u65e0\u53c2\u6570\u65b9\u6cd5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002  \u9ed8\u8ba4\u5b9e\u73b0\u662f\u8fd4\u56de\u4e00\u4e2a ReadOnlyField \u7c7b\u3002",
            "title": ".build_property_field(self, field_name, model_class)"
        },
        {
            "location": "/api-guide/serializers_zh/#build_url_fieldself-field_name-model_class",
            "text": "\u88ab\u8c03\u7528\u540e\u4e3a\u5e8f\u5217\u5316\u5668\u81ea\u5df1\u7684 url \u5b57\u6bb5\u751f\u6210\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002\u9ed8\u8ba4\u5b9e\u73b0\u662f\u8fd4\u56de\u4e00\u4e2a HyperlinkedIdentityField \u7c7b\u3002",
            "title": ".build_url_field(self, field_name, model_class)"
        },
        {
            "location": "/api-guide/serializers_zh/#build_unknown_fieldself-field_name-model_class",
            "text": "\u5f53\u5b57\u6bb5\u540d\u79f0\u6ca1\u6709\u5bf9\u5e94\u5230\u4efb\u4f55\u6a21\u578b\u5b57\u6bb5\u6216\u8005\u6a21\u578b\u5c5e\u6027\u65f6\u8c03\u7528\u3002\n\u9ed8\u8ba4\u5b9e\u73b0\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u5c3d\u7ba1\u5b50\u7c7b\u53ef\u80fd\u4f1a\u81ea\u5b9a\u4e49\u8be5\u884c\u4e3a\u3002",
            "title": ".build_unknown_field(self, field_name, model_class)"
        },
        {
            "location": "/api-guide/serializers_zh/#hyperlinkedmodelserializer",
            "text": "HyperlinkedModelSerializer \u7c7b\u7c7b\u4f3c\u4e8e ModelSerializer \u7c7b\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4f7f\u7528\u8d85\u94fe\u63a5\u6765\u8868\u793a\u5173\u8054\u5173\u7cfb\u800c\u4e0d\u662f\u4e3b\u952e\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e8f\u5217\u5316\u5668\u5c06\u5305\u542b\u4e00\u4e2a url \u5b57\u6bb5\u800c\u4e0d\u662f\u4e3b\u952e\u5b57\u6bb5\u3002  url\u5b57\u6bb5\u5c06\u4f7f\u7528 HyperlinkedIdentityField \u5b57\u6bb5\u6765\u8868\u793a\uff0c\u6a21\u578b\u7684\u4efb\u4f55\u5173\u8054\u90fd\u5c06\u4f7f\u7528 HyperlinkedRelatedField \u5b57\u6bb5\u6765\u8868\u793a\u3002  \u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e3b\u952e\u6dfb\u52a0\u5230 fields \u9009\u9879\u4e2d\u6765\u663e\u5f0f\u7684\u5305\u542b\uff0c\u4f8b\u5982\uff1a  class AccountSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('url', 'id', 'account_name', 'users', 'created')",
            "title": "HyperlinkedModelSerializer"
        },
        {
            "location": "/api-guide/serializers_zh/#url",
            "text": "\u5f53\u5b9e\u4f8b\u5316\u4e00\u4e2a HyperlinkedModelSerializer \u65f6\uff0c\u4f60\u5fc5\u987b\u5728\u5e8f\u5217\u5316\u5668\u7684\u4e0a\u4e0b\u6587\u4e2d\u5305\u542b\u5f53\u524d\u7684 request \u503c\uff0c\u4f8b\u5982\uff1a  serializer = AccountSerializer(queryset, context={'request': request})  \u8fd9\u6837\u505a\u5c06\u786e\u4fdd\u8d85\u94fe\u63a5\u53ef\u4ee5\u5305\u542b\u6070\u5f53\u7684\u4e3b\u673a\u540d\uff0c\u4e00\u8fb9\u751f\u6210\u5b8c\u5168\u9650\u5b9a\u7684URL\uff0c\u4f8b\u5982\uff1a  http://api.example.com/accounts/1/  \u800c\u4e0d\u662f\u76f8\u5bf9\u7684URL\uff0c\u4f8b\u5982\uff1a  /accounts/1/  \u5982\u679c\u4f60 \u771f\u7684 \u8981\u4f7f\u7528\u76f8\u5bf9URL\uff0c\u4f60\u5e94\u8be5\u660e\u786e\u7684\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u4e0b\u6587\u4e2d\u4f20\u9012\u4e00\u4e2a {'request': None} \u3002",
            "title": "\u7edd\u5bf9\u548c\u76f8\u5bf9URL"
        },
        {
            "location": "/api-guide/serializers_zh/#_27",
            "text": "\u9700\u8981\u4e00\u79cd\u786e\u5b9a\u54ea\u4e9b\u89c6\u56fe\u80fd\u5e94\u7528\u8d85\u94fe\u63a5\u5230\u6a21\u578b\u5b9e\u4f8b\u7684\u65b9\u6cd5\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8d85\u94fe\u63a5\u671f\u671b\u5bf9\u5e94\u5230\u4e00\u4e2a\u6837\u5f0f\u80fd\u5339\u914d '{model_name}-detail' \u7684\u89c6\u56fe\uff0c\u5e76\u901a\u8fc7 pk \u5173\u952e\u5b57\u53c2\u6570\u67e5\u627e\u5b9e\u4f8b\u3002  \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 extra_kwargs \u4e2d\u8bbe\u7f6e view_name \u548c lookup_field \u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u6765\u91cd\u5199URL\u5b57\u6bb5\u89c6\u56fe\u540d\u79f0\u548c\u67e5\u8be2\u5b57\u6bb5\u3002\u5982\u4e0b\u6240\u793a\uff1a  class AccountSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('account_url', 'account_name', 'users', 'created')\n        extra_kwargs = {\n            'url': {'view_name': 'accounts', 'lookup_field': 'account_name'},\n            'users': {'lookup_field': 'username'}\n        }  \u6216\u8005\u4f60\u53ef\u4ee5\u663e\u5f0f\u7684\u8bbe\u7f6e\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a  class AccountSerializer(serializers.HyperlinkedModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='accounts',\n        lookup_field='slug'\n    )\n    users = serializers.HyperlinkedRelatedField(\n        view_name='user-detail',\n        lookup_field='username',\n        many=True,\n        read_only=True\n    )\n\n    class Meta:\n        model = Account\n        fields = ('url', 'account_name', 'users', 'created')   \u63d0\u793a \uff1a\u6b63\u786e\u5339\u914d\u8d85\u94fe\u63a5\u8868\u793a\u548c\u4f60\u7684URL\u914d\u7f6e\u6709\u65f6\u53ef\u80fd\u4f1a\u6709\u70b9\u56f0\u96be\u3002\u6253\u5370\u4e00\u4e2a HyperlinkedModelSerializer \u5b9e\u4f8b\u7684 repr \u662f\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u65b9\u5f0f\u6765\u68c0\u67e5\u5173\u8054\u5173\u7cfb\u6620\u5c04\u7684\u90a3\u4e9b\u89c6\u56fe\u540d\u79f0\u548c\u67e5\u8be2\u5b57\u6bb5\u3002",
            "title": "\u5982\u4f55\u786e\u5b9a\u8d85\u94fe\u63a5\u89c6\u56fe"
        },
        {
            "location": "/api-guide/serializers_zh/#url_1",
            "text": "URL\u5b57\u6bb5\u7684\u540d\u79f0\u9ed8\u8ba4\u4e3a'url'\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 URL_FIELD_NAME \u8bbe\u7f6e\u8fdb\u884c\u5168\u5c40\u6027\u4fee\u6539\u3002",
            "title": "\u66f4\u6539URL\u5b57\u6bb5\u540d\u79f0"
        },
        {
            "location": "/api-guide/serializers_zh/#listserializer",
            "text": "ListSerializer \u7c7b\u80fd\u591f\u5e8f\u5217\u5316\u548c\u4e00\u6b21\u9a8c\u8bc1\u591a\u4e2a\u5bf9\u8c61\u3002\u4f60 \u901a\u5e38 \u4e0d\u9700\u8981\u76f4\u63a5\u4f7f\u7528 ListSerializer \uff0c\u800c\u662f\u5e94\u8be5\u5728\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u65f6\u7b80\u5355\u5730\u4f20\u9012\u4e00\u4e2a many=True \u53c2\u6570\u3002  \u5f53\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u5728\u5e26\u6709 many=True \u9009\u9879\u88ab\u5e8f\u5217\u5316\u65f6\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a ListSerializer \u5b9e\u4f8b\u3002\u8be5\u5e8f\u5217\u5316\u5668\u7c7b\u5c06\u6210\u4e3a ListSerializer \u7c7b\u7684\u5b50\u7c7b\u3002  \u4e0b\u9762\u7684\u53c2\u6570\u4e5f\u53ef\u4ee5\u4f20\u9012\u7ed9 ListSerializer \u5b57\u6bb5\u6216\u8005\u4e00\u4e2a\u5e26\u6709 many=True \u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u3002",
            "title": "ListSerializer"
        },
        {
            "location": "/api-guide/serializers_zh/#allow_empty",
            "text": "\u9ed8\u8ba4\u662f True \uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u60f3\u628a\u7a7a\u5217\u8868\u5f53\u4f5c\u6709\u6548\u8f93\u5165\u7684\u8bdd\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u6210 False \u3002",
            "title": "allow_empty"
        },
        {
            "location": "/api-guide/serializers_zh/#listserializer_1",
            "text": "\u4e0b\u9762\u662f\u4f60\u53ef\u80fd\u5e0c\u671b\u8981\u5b9a\u5236 ListSerializer \u884c\u4e3a\u7684 \u4e00\u4e9b \u60c5\u51b5\u3002\u4f8b\u5982\uff1a   \u4f60\u5e0c\u671b\u63d0\u4f9b\u5217\u8868\u7684\u7279\u5b9a\u9a8c\u8bc1\uff0c\u4f8b\u5982\u68c0\u67e5\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u4e0e\u5217\u8868\u4e2d\u7684\u53e6\u5916\u4e00\u4e2a\u5143\u7d20\u51b2\u7a81\u3002  \u4f60\u8981\u81ea\u5b9a\u4e49\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u6216\u66f4\u65b0\u884c\u4e3a\u3002   \u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u5f53\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u7684 Meta \u7c7b\u4e0b\u9762\u7684 list_serializer_class \u9009\u9879\u6765\u4fee\u6539\u5f53 many=True \u65f6\u6b63\u5728\u4f7f\u7528\u7684\u7c7b\u3002  \u4f8b\u5982\uff1a  class CustomListSerializer(serializers.ListSerializer):\n    ...\n\nclass CustomSerializer(serializers.Serializer):\n    ...\n    class Meta:\n        list_serializer_class = CustomListSerializer",
            "title": "\u81ea\u5b9a\u4e49ListSerializer\u884c\u4e3a"
        },
        {
            "location": "/api-guide/serializers_zh/#_28",
            "text": "\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u9ed8\u8ba4\u5b9e\u73b0\u662f\u7b80\u5355\u5730\u8c03\u7528\u5217\u8868\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u7684 .create() \u65b9\u6cd5\u3002\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5b9e\u73b0\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u5f53\u88ab\u4f20\u9012 many=True \u53c2\u6570\u65f6\u4f7f\u7528\u7684 ListSerializer \u7c7b\u4e2d\u7684 .create() \u65b9\u6cd5\u3002  \u4f8b\u5982\uff1a  class BookListSerializer(serializers.ListSerializer):\n    def create(self, validated_data):\n        books = [Book(**item) for item in validated_data]\n        return Book.objects.bulk_create(books)\n\nclass BookSerializer(serializers.Serializer):\n    ...\n    class Meta:\n        list_serializer_class = BookListSerializer",
            "title": "\u81ea\u5b9a\u4e49\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa"
        },
        {
            "location": "/api-guide/serializers_zh/#_29",
            "text": "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c ListSerializer \u7c7b\u4e0d\u652f\u6301\u591a\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u8fd9\u662f\u56e0\u4e3a\u63d2\u5165\u548c\u5220\u9664\u7684\u9884\u671f\u884c\u4e3a\u662f\u4e0d\u660e\u786e\u7684\u3002  \u8981\u652f\u6301\u591a\u5bf9\u8c61\u66f4\u65b0\u7684\u8bdd\u4f60\u9700\u8981\u81ea\u5df1\u660e\u786e\u5730\u5b9e\u73b0\u3002\u7f16\u5199\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u7684\u4ee3\u7801\u65f6\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a   \u5982\u4f55\u786e\u5b9a\u6570\u636e\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u5bf9\u5e94\u66f4\u65b0\u54ea\u4e2a\u5b9e\u4f8b\uff1f  \u5982\u4f55\u5904\u7406\u63d2\u5165\uff1f\u5b83\u4eec\u662f\u65e0\u6548\u7684\uff1f\u8fd8\u662f\u521b\u5efa\u65b0\u5bf9\u8c61\uff1f  \u79fb\u9664\u5e94\u8be5\u5982\u4f55\u5904\u7406\uff1f\u5b83\u4eec\u662f\u8981\u5220\u9664\u5bf9\u8c61\u8fd8\u662f\u5220\u9664\u5173\u8054\u5173\u7cfb\uff1f\u5b83\u4eec\u5e94\u8be5\u88ab\u5ffd\u7565\u8fd8\u662f\u63d0\u793a\u65e0\u6548\u64cd\u4f5c\uff1f  \u6392\u5e8f\u5982\u4f55\u5904\u7406\uff1f\u6539\u53d8\u4e24\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u662f\u5426\u610f\u5473\u7740\u4efb\u4f55\u72b6\u6001\u6539\u53d8\u6216\u8005\u5e94\u8be5\u88ab\u5ffd\u89c6\uff1f   \u4f60\u9700\u8981\u5411\u5b9e\u4f8b\u5e8f\u5217\u5316\u5668\u4e2d\u663e\u5f0f\u6dfb\u52a0\u4e00\u4e2a id \u5b57\u6bb5\u3002\u9ed8\u8ba4\u9690\u5f0f\u751f\u6210\u7684 id \u5b57\u6bb5\u662f read_only \u3002\u8fd9\u5c31\u5bfc\u81f4\u5b83\u5728\u66f4\u65b0\u65f6\u88ab\u5220\u9664\u3002\u4e00\u65e6\u4f60\u660e\u786e\u5730\u58f0\u660e\u5b83\uff0c\u5b83\u5c06\u5728\u5217\u8868\u5e8f\u5217\u5316\u5668\u7684 update \u65b9\u6cd5\u4e2d\u53ef\u7528\u3002  \u4e0b\u9762\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u9009\u62e9\u7528\u6765\u505a\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u7684\u793a\u4f8b\uff1a  class BookListSerializer(serializers.ListSerializer):\n    def update(self, instance, validated_data):\n        # Maps for id->instance and id->data item.\n        book_mapping = {book.id: book for book in instance}\n        data_mapping = {item['id']: item for item in validated_data}\n\n        # Perform creations and updates.\n        ret = []\n        for book_id, data in data_mapping.items():\n            book = book_mapping.get(book_id, None)\n            if book is None:\n                ret.append(self.child.create(data))\n            else:\n                ret.append(self.child.update(book, data))\n\n        # Perform deletions.\n        for book_id, book in book_mapping.items():\n            if book_id not in data_mapping:\n                book.delete()\n\n        return ret\n\nclass BookSerializer(serializers.Serializer):\n    # \u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e3b\u952e\u6765\u8bc6\u522b\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\n    # \u6240\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528\u53ef\u5199\u7684\u5b57\u6bb5\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684\u53ea\u8bfb\u5b57\u6bb5\u3002\n    id = serializers.IntegerField()\n\n    ...\n    id = serializers.IntegerField(required=False)\n\n    class Meta:\n        list_serializer_class = BookListSerializer  \u7c7b\u4f3c\u4e8eREST framework 2\u4e2d allow_add_remove \u7684\u81ea\u52a8\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u64cd\u4f5c\u53ef\u80fd\u4f1a\u57283.1\u7248\u672c\u7684\u7b2c\u4e09\u65b9\u5305\u4e2d\u63d0\u4f9b\u3002",
            "title": "\u81ea\u5b9a\u4e49\u591a\u5bf9\u8c61\u7684\u66f4\u65b0"
        },
        {
            "location": "/api-guide/serializers_zh/#listserializer_2",
            "text": "\u5f53\u5e26\u6709 many=True \u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u54ea\u4e9b\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\u5e94\u8be5\u88ab\u4f20\u9012\u7ed9\u5b50\u7c7b Serializer \u548c\u7236\u7c7b ListSerializer \u7684 .__init__() \u65b9\u6cd5\u3002  \u9ed8\u8ba4\u5b9e\u73b0\u662f\u5c06\u6240\u6709\u53c2\u6570\u90fd\u4f20\u9012\u7ed9\u4e24\u4e2a\u7c7b\uff0c\u51fa\u4e86 validators \u548c\u4efb\u4f55\u5173\u952e\u5b57\u53c2\u6570\u3002\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u5047\u5b9a\u7528\u4e8e\u5b50\u5e8f\u5217\u5316\u5668\u7c7b\u3002  \u5076\u5c14\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u660e\u786e\u6307\u5b9a\u5f53\u88ab\u4f20\u9012 many=True \u53c2\u6570\u65f6\uff0c\u5b50\u7c7b\u548c\u7236\u7c7b\u5e94\u8be5\u5982\u4f55\u5b9e\u4f8b\u5316\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 many_init \u7c7b\u65b9\u6cd5\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002      @classmethod\n    def many_init(cls, *args, **kwargs):\n        # \u5b9e\u4f8b\u5316\u5b50\u5e8f\u5217\u5316\u5668\u7c7b\u3002\n        kwargs['child'] = cls()\n        # \u5b9e\u4f8b\u5316\u5217\u8868\u5e8f\u5217\u5316\u7236\u7c7b\n        return CustomListSerializer(*args, **kwargs)",
            "title": "\u81ea\u5b9a\u4e49ListSerializer\u521d\u59cb\u5316"
        },
        {
            "location": "/api-guide/serializers_zh/#baseserializer",
            "text": "BaseSerializer  \u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u7528\u6765\u66ff\u4ee3\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u6837\u5f0f\u3002  \u8be5\u7c7b\u5b9e\u73b0\u4e0e Serializer \u7c7b\u76f8\u540c\u7684\u57fa\u672cAPI\uff1a   .data  - \u8fd4\u56de\u4f20\u51fa\u7684\u539f\u59cb\u6570\u636e\u3002  .is_valid()  - \u53cd\u5e8f\u5217\u5316\u5e76\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002  .validated_data  - \u8fd4\u56de\u7ecf\u8fc7\u9a8c\u8bc1\u540e\u7684\u4f20\u5165\u6570\u636e\u3002  .errors  - \u8fd4\u56de\u9a8c\u8bc1\u671f\u95f4\u7684\u9519\u8bef\u3002  .save()  - \u5c06\u9a8c\u8bc1\u7684\u6570\u636e\u4fdd\u7559\u5230\u5bf9\u8c61\u5b9e\u4f8b\u4e2d\u3002   \u5b83\u8fd8\u6709\u53ef\u4ee5\u8986\u5199\u7684\u56db\u79cd\u65b9\u6cd5\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u4f60\u60f3\u8981\u5e8f\u5217\u5316\u7c7b\u652f\u6301\u7684\u529f\u80fd\uff1a   .to_representation()  - \u91cd\u5199\u6b64\u65b9\u6cd5\u6765\u6539\u53d8\u8bfb\u53d6\u64cd\u4f5c\u7684\u5e8f\u5217\u5316\u7ed3\u679c\u3002  .to_internal_value()  - \u91cd\u5199\u6b64\u65b9\u6cd5\u6765\u6539\u53d8\u5199\u5165\u64cd\u4f5c\u7684\u5e8f\u5217\u5316\u7ed3\u679c\u3002  .create()  \u548c  .update()  - \u91cd\u5199\u5176\u4e2d\u4e00\u4e2a\u6216\u4e24\u4e2a\u6765\u6539\u53d8\u4fdd\u5b58\u5b9e\u4f8b\u65f6\u7684\u52a8\u4f5c\u3002   \u56e0\u4e3a\u6b64\u7c7b\u63d0\u4f9b\u4e0e Serializer \u7c7b\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5c06\u5b83\u4e0e\u73b0\u6709\u7684\u57fa\u4e8e\u7c7b\u7684\u901a\u7528\u89c6\u56fe\u4e00\u8d77\u4f7f\u7528\uff0c\u5c31\u50cf\u4f7f\u7528\u5e38\u89c4 Serializer \u6216 ModelSerializer \u4e00\u6837\u3002  \u8fd9\u6837\u505a\u65f6\u4f60\u9700\u8981\u6ce8\u610f\u5230\u7684\u552f\u4e00\u533a\u522b\u662f BaseSerializer \u7c7b\u5e76\u4e0d\u4f1a\u5728\u53ef\u6d4f\u89c8\u7684API\u9875\u9762\u4e2d\u751f\u6210HTML\u8868\u5355\u3002",
            "title": "BaseSerializer"
        },
        {
            "location": "/api-guide/serializers_zh/#baseserializer-classes",
            "text": "\u8981\u4f7f\u7528 BaseSerializer \u7c7b\u5b9e\u73b0\u53ea\u8bfb\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8986\u5199 .to_representation() \u65b9\u6cd5\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7b80\u5355\u7684Django\u6a21\u578b\u7684\u793a\u4f8b\uff1a  class HighScore(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    player_name = models.CharField(max_length=10)\n    score = models.IntegerField()  \u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u6765\u5c06 HighScore \u5b9e\u4f8b\u8f6c\u6362\u4e3a\u539f\u59cb\u6570\u636e\u7c7b\u578b\u975e\u5e38\u7b80\u5355\u3002  class HighScoreSerializer(serializers.BaseSerializer):\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }  \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u6765\u5e8f\u5217\u5316\u5355\u4e2a HighScore \u5b9e\u4f8b\uff1a  @api_view(['GET'])\ndef high_score(request, pk):\n    instance = HighScore.objects.get(pk=pk)\n    serializer = HighScoreSerializer(instance)\n    return Response(serializer.data)  \u6216\u8005\u4f7f\u7528\u5b83\u6765\u5e8f\u5217\u5316\u591a\u4e2a\u5b9e\u4f8b\uff1a  @api_view(['GET'])\ndef all_high_scores(request):\n    queryset = HighScore.objects.order_by('-score')\n    serializer = HighScoreSerializer(queryset, many=True)\n    return Response(serializer.data)",
            "title": "\u53ea\u8bfb\u7684 BaseSerializer classes"
        },
        {
            "location": "/api-guide/serializers_zh/#read-write-baseserializer-classes",
            "text": "\u8981\u521b\u5efa\u4e00\u4e2a\u8bfb\u5199\u90fd\u652f\u6301\u7684\u5e8f\u5217\u5316\u5668\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5b9e\u73b0 .to_internal_value() \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7528\u6765\u6784\u9020\u5bf9\u8c61\u5b9e\u4f8b\u7684\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u503c\uff0c\u5982\u679c\u63d0\u4f9b\u7684\u6570\u636e\u683c\u5f0f\u4e0d\u6b63\u786e\uff0c\u5219\u53ef\u80fd\u5f15\u53d1 ValidationError \u3002  \u4e00\u65e6\u4f60\u5b9e\u73b0\u4e86 .to_internal_value() \u65b9\u6cd5\uff0c\u90a3\u4e9b\u57fa\u7840\u7684\u9a8c\u8bc1API\u90fd\u4f1a\u5728\u5e8f\u5217\u5316\u5bf9\u8c61\u4e0a\u53ef\u7528\u4e86\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 .is_valid() ,  .validated_data  \u548c  .errors  \u65b9\u6cd5\u3002  \u5982\u679c\u4f60\u8fd8\u60f3\u652f\u6301 .save() \uff0c\u4f60\u8fd8\u9700\u8981\u5b9e\u73b0 .create() \u548c .update() \u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u3002  \u4e0b\u9762\u5c31\u662f\u5b8c\u6574\u7248\u7684\uff0c\u652f\u6301\u8bfb\u3001\u5199\u64cd\u4f5c\u7684  HighScoreSerializer  \u5b8c\u6574\u793a\u4f8b\u4e86\u3002  class HighScoreSerializer(serializers.BaseSerializer):\n    def to_internal_value(self, data):\n        score = data.get('score')\n        player_name = data.get('player_name')\n\n        # \u6267\u884c\u6570\u636e\u6709\u6548\u6027\u6821\u9a8c\n        if not score:\n            raise ValidationError({\n                'score': 'This field is required.'\n            })\n        if not player_name:\n            raise ValidationError({\n                'player_name': 'This field is required.'\n            })\n        if len(player_name) > 10:\n            raise ValidationError({\n                'player_name': 'May not be more than 10 characters.'\n            })\n\n        # \u8fd4\u56de\u901a\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e \u8fd9\u7528\u6765\u4f5c\u4e3a `.validated_data` \u5c5e\u6027\u7684\u503c\u3002\n        return {\n            'score': int(score),\n            'player_name': player_name\n        }\n\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }\n\n    def create(self, validated_data):\n        return HighScore.objects.create(**validated_data)",
            "title": "Read-write BaseSerializer classes"
        },
        {
            "location": "/api-guide/serializers_zh/#_30",
            "text": "BaseSerializer \u7c7b\u8fd8\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u65b0\u7684\u901a\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u57fa\u7c7b\u6765\u5904\u7406\u7279\u5b9a\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u6216\u8005\u7528\u6765\u6574\u5408\u5907\u7528\u5b58\u50a8\u540e\u7aef\u3002  \u4e0b\u9762\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u53ef\u4ee5\u5c06\u4efb\u610f\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u57fa\u672c\u8868\u793a\u7684\u901a\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u7684\u793a\u4f8b\u3002  class ObjectSerializer(serializers.BaseSerializer):\n    \"\"\"\n    \u4e00\u4e2a\u53ea\u8bfb\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u5b83\u5c06\u4efb\u610f\u590d\u6742\u7684\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u8868\u793a\u3002\n    \"\"\"\n    def to_representation(self, obj):\n        for attribute_name in dir(obj):\n            attribute = getattr(obj, attribute_name)\n            if attribute_name('_'):\n                # \u5ffd\u7565\u79c1\u6709\u5c5e\u6027\n                pass\n            elif hasattr(attribute, '__call__'):\n                # \u5ffd\u7565\u65b9\u6cd5\u548c\u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61\n                pass\n            elif isinstance(attribute, (str, int, bool, float, type(None))):\n                # \u5185\u7f6e\u7684\u539f\u59cb\u6570\u636e\u7c7b\u578b\u4e0d\u505a\u4fee\u6539\n                output[attribute_name] = attribute\n            elif isinstance(attribute, list):\n                # \u9012\u5f52\u5904\u7406\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\n                output[attribute_name] = [\n                    self.to_representation(item) for item in attribute\n                ]\n            elif isinstance(attribute, dict):\n                # \u9012\u5f52\u5904\u7406\u5b57\u5178\u4e2d\u7684\u5bf9\u8c61\n                output[attribute_name] = {\n                    str(key): self.to_representation(value)\n                    for key, value in attribute.items()\n                }\n            else:\n                # \u5c06\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\n                output[attribute_name] = str(attribute)",
            "title": "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u57fa\u7c7b"
        },
        {
            "location": "/api-guide/serializers_zh/#serializer",
            "text": "",
            "title": "serializer\u8fdb\u9636\u7528\u6cd5"
        },
        {
            "location": "/api-guide/serializers_zh/#_31",
            "text": "\u5982\u679c\u4f60\u9700\u8981\u66f4\u6539\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u7684\u5e8f\u5217\u5316\uff0c\u53cd\u5e8f\u5217\u5316\u6216\u9a8c\u8bc1\u7684\u884c\u4e3a\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 .to_representation() \u6216 .to_internal_value() \u65b9\u6cd5\u6765\u5b8c\u6210\u3002  \u6211\u4eec\u53ef\u80fd\u8fd9\u4e48\u505a\u7684\u4e00\u4e9b\u539f\u56e0\u5305\u62ec......   \u4e3a\u65b0\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u57fa\u7c7b\u6dfb\u52a0\u65b0\u884c\u4e3a\u3002  \u5bf9\u73b0\u6709\u7684\u7c7b\u7a0d\u4f5c\u4fee\u6539\u3002  \u63d0\u9ad8\u9891\u7e41\u8bbf\u95ee\u8fd4\u56de\u5927\u91cf\u6570\u636e\u7684API\u7aef\u70b9\u7684\u5e8f\u5217\u5316\u6027\u80fd\u3002   \u8fd9\u4e9b\u65b9\u6cd5\u7684\u7b7e\u540d\u5982\u4e0b\uff1a",
            "title": "\u91cd\u5199\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u884c\u4e3a"
        },
        {
            "location": "/api-guide/serializers_zh/#to_representationself-obj",
            "text": "\u63a5\u6536\u4e00\u4e2a\u9700\u8981\u88ab\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u4e4b\u540e\u7684\u8868\u793a\u3002\u901a\u5e38\uff0c\u8fd9\u610f\u5473\u7740\u8fd4\u56de\u5185\u7f6ePython\u6570\u636e\u7c7b\u578b\u7684\u7ed3\u6784\u3002\u53ef\u4ee5\u5904\u7406\u7684\u786e\u5207\u7c7b\u578b\u53d6\u51b3\u4e8e\u4f60\u4e3aAPI\u914d\u7f6e\u7684\u6e32\u67d3\u7c7b\u3002",
            "title": ".to_representation(self, obj)"
        },
        {
            "location": "/api-guide/serializers_zh/#to_internal_valueself-data",
            "text": "\u5c06\u672a\u7ecf\u9a8c\u8bc1\u7684\u4f20\u5165\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u53ef\u4ee5\u901a\u8fc7 serializer.validated_data \u6765\u8bbf\u95ee\u7684\u5df2\u9a8c\u8bc1\u7684\u6570\u636e\u3002\u5982\u679c\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u4e0a\u8c03\u7528 .save() \uff0c\u5219\u8be5\u8fd4\u56de\u503c\u4e5f\u5c06\u4f20\u9012\u7ed9 .create() \u6216 .update() \u65b9\u6cd5\u3002  \u5982\u679c\u4efb\u4f55\u9a8c\u8bc1\u6761\u4ef6\u5931\u8d25\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u4f1a\u5f15\u53d1\u4e00\u4e2a serializers.ValidationError(errors) \u3002\u901a\u5e38\uff0c\u6b64\u5904\u7684 errors \u53c2\u6570\u5c06\u662f\u9519\u8bef\u6d88\u606f\u5b57\u5178\u7684\u4e00\u4e2a\u6620\u5c04\u5b57\u6bb5\u3002  \u4f20\u9012\u7ed9\u6b64\u65b9\u6cd5\u7684 data \u53c2\u6570\u901a\u5e38\u662f request.data \u7684\u503c\uff0c\u56e0\u6b64\u5b83\u63d0\u4f9b\u7684\u6570\u636e\u7c7b\u578b\u5c06\u53d6\u51b3\u4e8e\u4f60\u4e3aAPI\u914d\u7f6e\u7684\u89e3\u6790\u5668\u7c7b\u3002",
            "title": ".to_internal_value(self, data)"
        },
        {
            "location": "/api-guide/serializers_zh/#serializer_1",
            "text": "\u4e0eDjango\u8868\u5355\u7c7b\u4f3c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u6269\u5c55\u548c\u91cd\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u8fd9\u5141\u8bb8\u4f60\u5728\u7236\u7c7b\u4e0a\u58f0\u660e\u4e00\u7ec4\u516c\u5171\u5b57\u6bb5\u6216\u65b9\u6cd5\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u8bb8\u591a\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c  class MyBaseSerializer(Serializer):\n    my_field = serializers.CharField()\n\n    def validate_my_field(self):\n        ...\n\nclass MySerializer(MyBaseSerializer):\n    ...  \u50cfDjango\u7684 Model \u548c ModelForm \u7c7b\u4e00\u6837\uff0c\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5185\u90e8 Meta \u7c7b\u4e0d\u4f1a\u9690\u5f0f\u5730\u7ee7\u627f\u5b83\u7684\u7236\u5143\u7d20\u5185\u90e8\u7684 Meta \u7c7b\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4ece\u7236\u7c7b\u7ee7\u627f Meta \u7c7b\uff0c\u5219\u5fc5\u987b\u660e\u786e\u5730\u8fd9\u6837\u505a\u3002\u6bd4\u5982\uff1a  class AccountSerializer(MyBaseSerializer):\n    class Meta(MyBaseSerializer.Meta):\n        model = Account  \u901a\u5e38\u6211\u4eec\u5efa\u8bae \u4e0d\u8981 \u5728\u5185\u90e8Meta\u7c7b\u4e0a\u4f7f\u7528\u7ee7\u627f\uff0c\u800c\u662f\u660e\u786e\u58f0\u660e\u6240\u6709\u9009\u9879\u3002  \u6b64\u5916\uff0c\u4ee5\u4e0b\u8b66\u544a\u9002\u7528\u4e8e\u5e8f\u5217\u5316\u7a0b\u5e8f\u7ee7\u627f\uff1a   \u6b63\u5e38\u7684Python\u540d\u79f0\u89e3\u6790\u89c4\u5219\u9002\u7528\u3002\u5982\u679c\u4f60\u6709\u591a\u4e2a\u58f0\u660e\u4e86 Meta \u7c7b\u7684\u57fa\u7c7b\uff0c\u5219\u53ea\u4f7f\u7528\u7b2c\u4e00\u4e2a\u7c7b\u3002\u8fd9\u610f\u5473\u8981\u4e48\u662f\u5b69\u5b50\u7684 Meta \uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u5426\u5219\u5c31\u662f\u7b2c\u4e00\u4e2a\u7236\u6bcd\u7684 Meta \u7b49\u3002   \u901a\u8fc7\u5728\u5b50\u7c7b\u4e0a\u5c06\u540d\u79f0\u8bbe\u7f6e\u4e3a None \uff0c\u53ef\u4ee5\u58f0\u660e\u6027\u5730\u5220\u9664\u4ece\u7236\u7c7b\u7ee7\u627f\u7684 Field \u3002  class MyBaseSerializer(ModelSerializer):\n    my_field = serializers.CharField()\n\nclass MySerializer(MyBaseSerializer):\n    my_field = None  \u4f46\u662f\uff0c\u4f60\u53ea\u80fd\u4f7f\u7528\u6b64\u6280\u672f\u53bb\u6389\u7236\u7c7b\u58f0\u660e\u6027\u5b9a\u4e49\u7684\u5b57\u6bb5\uff1b\u5b83\u4e0d\u4f1a\u963b\u6b62 ModelSerializer \u751f\u6210\u9ed8\u8ba4\u5b57\u6bb5\u3002\u60f3\u8981\u4ece\u9ed8\u8ba4\u5b57\u6bb5\u4e2d\u9009\u62e9\u53bb\u6389\u67d0\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u53c2\u9605  \u6307\u5b9a\u8981\u5305\u62ec\u7684\u5b57\u6bb5 \u3002",
            "title": "Serializer \u7ee7\u627f"
        },
        {
            "location": "/api-guide/serializers_zh/#dynamically-modifying-fields",
            "text": "Once a serializer has been initialized, the dictionary of fields that are set on the serializer may be accessed using the  .fields  attribute.  Accessing and modifying this attribute allows you to dynamically modify the serializer.  Modifying the  fields  argument directly allows you to do interesting things such as changing the arguments on serializer fields at runtime, rather than at the point of declaring the serializer.",
            "title": "Dynamically modifying fields"
        },
        {
            "location": "/api-guide/serializers_zh/#example",
            "text": "For example, if you wanted to be able to set which fields should be used by a serializer at the point of initializing it, you could create a serializer class like so:  class DynamicFieldsModelSerializer(serializers.ModelSerializer):\n    \"\"\"\n    A ModelSerializer that takes an additional `fields` argument that\n    controls which fields should be displayed.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        # Don't pass the 'fields' arg up to the superclass\n        fields = kwargs.pop('fields', None)\n\n        # Instantiate the superclass normally\n        super(DynamicFieldsModelSerializer, self).__init__(*args, **kwargs)\n\n        if fields is not None:\n            # Drop any fields that are not specified in the `fields` argument.\n            allowed = set(fields)\n            existing = set(self.fields.keys())\n            for field_name in existing - allowed:\n                self.fields.pop(field_name)  This would then allow you to do the following:  >>> class UserSerializer(DynamicFieldsModelSerializer):\n>>>     class Meta:\n>>>         model = User\n>>>         fields = ('id', 'username', 'email')\n>>>\n>>> print UserSerializer(user)\n{'id': 2, 'username': 'jonwatts', 'email': 'jon@example.com'}\n>>>\n>>> print UserSerializer(user, fields=('id', 'email'))\n{'id': 2, 'email': 'jon@example.com'}",
            "title": "Example"
        },
        {
            "location": "/api-guide/serializers_zh/#customizing-the-default-fields",
            "text": "REST framework 2 provided an API to allow developers to override how a  ModelSerializer  class would automatically generate the default set of fields.  This API included the  .get_field() ,  .get_pk_field()  and other methods.  Because the serializers have been fundamentally redesigned with 3.0 this API no longer exists. You can still modify the fields that get created but you'll need to refer to the source code, and be aware that if the changes you make are against private bits of API then they may be subject to change.",
            "title": "Customizing the default fields"
        },
        {
            "location": "/api-guide/serializers_zh/#third-party-packages",
            "text": "The following third party packages are also available.",
            "title": "Third party packages"
        },
        {
            "location": "/api-guide/serializers_zh/#django-rest-marshmallow",
            "text": "The  django-rest-marshmallow  package provides an alternative implementation for serializers, using the python  marshmallow  library. It exposes the same API as the REST framework serializers, and can be used as a drop-in replacement in some use-cases.",
            "title": "Django REST marshmallow"
        },
        {
            "location": "/api-guide/serializers_zh/#serpy",
            "text": "The  serpy  package is an alternative implementation for serializers that is built for speed.  Serpy  serializes complex datatypes to simple native types. The native types can be easily converted to JSON or any other format needed.",
            "title": "Serpy"
        },
        {
            "location": "/api-guide/serializers_zh/#mongoenginemodelserializer",
            "text": "The  django-rest-framework-mongoengine  package provides a  MongoEngineModelSerializer  serializer class that supports using MongoDB as the storage layer for Django REST framework.",
            "title": "MongoengineModelSerializer"
        },
        {
            "location": "/api-guide/serializers_zh/#geofeaturemodelserializer",
            "text": "The  django-rest-framework-gis  package provides a  GeoFeatureModelSerializer  serializer class that supports GeoJSON both for read and write operations.",
            "title": "GeoFeatureModelSerializer"
        },
        {
            "location": "/api-guide/serializers_zh/#hstoreserializer",
            "text": "The  django-rest-framework-hstore  package provides an  HStoreSerializer  to support  django-hstore   DictionaryField  model field and its  schema-mode  feature.",
            "title": "HStoreSerializer"
        },
        {
            "location": "/api-guide/serializers_zh/#dynamic-rest",
            "text": "The  dynamic-rest  package extends the ModelSerializer and ModelViewSet interfaces, adding API query parameters for filtering, sorting, and including / excluding all fields and relationships defined by your serializers.",
            "title": "Dynamic REST"
        },
        {
            "location": "/api-guide/serializers_zh/#dynamic-fields-mixin",
            "text": "The  drf-dynamic-fields  package provides a mixin to dynamically limit the fields per serializer to a subset specified by an URL parameter.",
            "title": "Dynamic Fields Mixin"
        },
        {
            "location": "/api-guide/serializers_zh/#drf-flexfields",
            "text": "The  drf-flex-fields  package extends the ModelSerializer and ModelViewSet to provide commonly used functionality for dynamically setting fields and expanding primitive fields to nested models, both from URL parameters and your serializer class definitions.",
            "title": "DRF FlexFields"
        },
        {
            "location": "/api-guide/serializers_zh/#serializer-extensions",
            "text": "The  django-rest-framework-serializer-extensions \npackage provides a collection of tools to DRY up your serializers, by allowing\nfields to be defined on a per-view/request basis. Fields can be whitelisted,\nblacklisted and child serializers can be optionally expanded.",
            "title": "Serializer Extensions"
        },
        {
            "location": "/api-guide/serializers_zh/#html-json-forms",
            "text": "The  html-json-forms  package provides an algorithm and serializer for processing  <form>  submissions per the (inactive)  HTML JSON Form specification .  The serializer facilitates processing of arbitrarily nested JSON structures within HTML.  For example,  <input name=\"items[0][id]\" value=\"5\">  will be interpreted as  {\"items\": [{\"id\": \"5\"}]} .",
            "title": "HTML JSON Forms"
        },
        {
            "location": "/api-guide/serializers_zh/#drf-base64",
            "text": "DRF-Base64  provides a set of field and model serializers that handles the upload of base64-encoded files.",
            "title": "DRF-Base64"
        },
        {
            "location": "/api-guide/serializers_zh/#queryfields",
            "text": "djangorestframework-queryfields  allows API clients to specify which fields will be sent in the response via inclusion/exclusion query parameters.",
            "title": "QueryFields"
        },
        {
            "location": "/api-guide/serializers_zh/#drf-writable-nested",
            "text": "The  drf-writable-nested  package provides writable nested model serializer which allows to create/update models with nested related data.",
            "title": "DRF Writable Nested"
        },
        {
            "location": "/api-guide/fields/",
            "text": "Serializer fields\n\n\n\n\nEach field in a Form class is responsible not only for validating data, but also for \"cleaning\" it \u2014 normalizing it to a consistent format.\n\n\n\u2014 \nDjango documentation\n\n\n\n\nSerializer fields handle converting between primitive values and internal datatypes.  They also deal with validating input values, as well as retrieving and setting the values from their parent objects.\n\n\n\n\nNote:\n The serializer fields are declared in \nfields.py\n, but by convention you should import them using \nfrom rest_framework import serializers\n and refer to fields as \nserializers.<FieldName>\n.\n\n\n\n\nCore arguments\n\n\nEach serializer field class constructor takes at least these arguments.  Some Field classes take additional, field-specific arguments, but the following should always be accepted:\n\n\nread_only\n\n\nRead-only fields are included in the API output, but should not be included in the input during create or update operations. Any 'read_only' fields that are incorrectly included in the serializer input will be ignored.\n\n\nSet this to \nTrue\n to ensure that the field is used when serializing a representation, but is not used when creating or updating an instance during deserialization.\n\n\nDefaults to \nFalse\n\n\nwrite_only\n\n\nSet this to \nTrue\n to ensure that the field may be used when updating or creating an instance, but is not included when serializing the representation.\n\n\nDefaults to \nFalse\n\n\nrequired\n\n\nNormally an error will be raised if a field is not supplied during deserialization.\nSet to false if this field is not required to be present during deserialization.\n\n\nSetting this to \nFalse\n also allows the object attribute or dictionary key to be omitted from output when serializing the instance. If the key is not present it will simply not be included in the output representation.\n\n\nDefaults to \nTrue\n.\n\n\nallow_null\n\n\nNormally an error will be raised if \nNone\n is passed to a serializer field. Set this keyword argument to \nTrue\n if \nNone\n should be considered a valid value.\n\n\nDefaults to \nFalse\n\n\ndefault\n\n\nIf set, this gives the default value that will be used for the field if no input value is supplied. If not set the default behaviour is to not populate the attribute at all.\n\n\nThe \ndefault\n is not applied during partial update operations. In the partial update case only fields that are provided in the incoming data will have a validated value returned.\n\n\nMay be set to a function or other callable, in which case the value will be evaluated each time it is used. When called, it will receive no arguments. If the callable has a \nset_context\n method, that will be called each time before getting the value with the field instance as only argument. This works the same way as for \nvalidators\n.\n\n\nNote that setting a \ndefault\n value implies that the field is not required. Including both the \ndefault\n and \nrequired\n keyword arguments is invalid and will raise an error.\n\n\nsource\n\n\nThe name of the attribute that will be used to populate the field.  May be a method that only takes a \nself\n argument, such as \nURLField(source='get_absolute_url')\n, or may use dotted notation to traverse attributes, such as \nEmailField(source='user.email')\n.\n\n\nThe value \nsource='*'\n has a special meaning, and is used to indicate that the entire object should be passed through to the field.  This can be useful for creating nested representations, or for fields which require access to the complete object in order to determine the output representation.\n\n\nDefaults to the name of the field.\n\n\nvalidators\n\n\nA list of validator functions which should be applied to the incoming field input, and which either raise a validation error or simply return. Validator functions should typically raise \nserializers.ValidationError\n, but Django's built-in \nValidationError\n is also supported for compatibility with validators defined in the Django codebase or third party Django packages.\n\n\nerror_messages\n\n\nA dictionary of error codes to error messages.\n\n\nlabel\n\n\nA short text string that may be used as the name of the field in HTML form fields or other descriptive elements.\n\n\nhelp_text\n\n\nA text string that may be used as a description of the field in HTML form fields or other descriptive elements.\n\n\ninitial\n\n\nA value that should be used for pre-populating the value of HTML form fields. You may pass a callable to it, just as\nyou may do with any regular Django \nField\n:\n\n\nimport datetime\nfrom rest_framework import serializers\nclass ExampleSerializer(serializers.Serializer):\n    day = serializers.DateField(initial=datetime.date.today)\n\n\n\nstyle\n\n\nA dictionary of key-value pairs that can be used to control how renderers should render the field.\n\n\nTwo examples here are \n'input_type'\n and \n'base_template'\n:\n\n\n# Use <input type=\"password\"> for the input.\npassword = serializers.CharField(\n    style={'input_type': 'password'}\n)\n\n# Use a radio input instead of a select input.\ncolor_channel = serializers.ChoiceField(\n    choices=['red', 'green', 'blue'],\n    style={'base_template': 'radio.html'}\n)\n\n\n\nFor more details see the \nHTML & Forms\n documentation.\n\n\n\n\nBoolean fields\n\n\nBooleanField\n\n\nA boolean representation.\n\n\nWhen using HTML encoded form input be aware that omitting a value will always be treated as setting a field to \nFalse\n, even if it has a \ndefault=True\n option specified. This is because HTML checkbox inputs represent the unchecked state by omitting the value, so REST framework treats omission as if it is an empty checkbox input.\n\n\nCorresponds to \ndjango.db.models.fields.BooleanField\n.\n\n\nSignature:\n \nBooleanField()\n\n\nNullBooleanField\n\n\nA boolean representation that also accepts \nNone\n as a valid value.\n\n\nCorresponds to \ndjango.db.models.fields.NullBooleanField\n.\n\n\nSignature:\n \nNullBooleanField()\n\n\n\n\nString fields\n\n\nCharField\n\n\nA text representation. Optionally validates the text to be shorter than \nmax_length\n and longer than \nmin_length\n.\n\n\nCorresponds to \ndjango.db.models.fields.CharField\n or \ndjango.db.models.fields.TextField\n.\n\n\nSignature:\n \nCharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)\n\n\n\n\nmax_length\n - Validates that the input contains no more than this number of characters.\n\n\nmin_length\n - Validates that the input contains no fewer than this number of characters.\n\n\nallow_blank\n - If set to \nTrue\n then the empty string should be considered a valid value. If set to \nFalse\n then the empty string is considered invalid and will raise a validation error. Defaults to \nFalse\n.\n\n\ntrim_whitespace\n - If set to \nTrue\n then leading and trailing whitespace is trimmed. Defaults to \nTrue\n.\n\n\n\n\nThe \nallow_null\n option is also available for string fields, although its usage is discouraged in favor of \nallow_blank\n. It is valid to set both \nallow_blank=True\n and \nallow_null=True\n, but doing so means that there will be two differing types of empty value permissible for string representations, which can lead to data inconsistencies and subtle application bugs.\n\n\nEmailField\n\n\nA text representation, validates the text to be a valid e-mail address.\n\n\nCorresponds to \ndjango.db.models.fields.EmailField\n\n\nSignature:\n \nEmailField(max_length=None, min_length=None, allow_blank=False)\n\n\nRegexField\n\n\nA text representation, that validates the given value matches against a certain regular expression.\n\n\nCorresponds to \ndjango.forms.fields.RegexField\n.\n\n\nSignature:\n \nRegexField(regex, max_length=None, min_length=None, allow_blank=False)\n\n\nThe mandatory \nregex\n argument may either be a string, or a compiled python regular expression object.\n\n\nUses Django's \ndjango.core.validators.RegexValidator\n for validation.\n\n\nSlugField\n\n\nA \nRegexField\n that validates the input against the pattern \n[a-zA-Z0-9_-]+\n.\n\n\nCorresponds to \ndjango.db.models.fields.SlugField\n.\n\n\nSignature:\n \nSlugField(max_length=50, min_length=None, allow_blank=False)\n\n\nURLField\n\n\nA \nRegexField\n that validates the input against a URL matching pattern. Expects fully qualified URLs of the form \nhttp://<host>/<path>\n.\n\n\nCorresponds to \ndjango.db.models.fields.URLField\n.  Uses Django's \ndjango.core.validators.URLValidator\n for validation.\n\n\nSignature:\n \nURLField(max_length=200, min_length=None, allow_blank=False)\n\n\nUUIDField\n\n\nA field that ensures the input is a valid UUID string. The \nto_internal_value\n method will return a \nuuid.UUID\n instance. On output the field will return a string in the canonical hyphenated format, for example:\n\n\n\"de305d54-75b4-431b-adb2-eb6b9e546013\"\n\n\n\nSignature:\n \nUUIDField(format='hex_verbose')\n\n\n\n\nformat\n: Determines the representation format of the uuid value\n\n\n'hex_verbose'\n - The cannoncical hex representation, including hyphens: \n\"5ce0e9a5-5ffa-654b-cee0-1238041fb31a\"\n\n\n'hex'\n - The compact hex representation of the UUID, not including hyphens: \n\"5ce0e9a55ffa654bcee01238041fb31a\"\n\n\n'int'\n - A 128 bit integer representation of the UUID: \n\"123456789012312313134124512351145145114\"\n\n\n'urn'\n - RFC 4122 URN representation of the UUID: \n\"urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a\"\n\n  Changing the \nformat\n parameters only affects representation values. All formats are accepted by \nto_internal_value\n\n\n\n\n\n\n\n\nFilePathField\n\n\nA field whose choices are limited to the filenames in a certain directory on the filesystem\n\n\nCorresponds to \ndjango.forms.fields.FilePathField\n.\n\n\nSignature:\n \nFilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs)\n\n\n\n\npath\n - The absolute filesystem path to a directory from which this FilePathField should get its choice.\n\n\nmatch\n - A regular expression, as a string, that FilePathField will use to filter filenames.\n\n\nrecursive\n - Specifies whether all subdirectories of path should be included.  Default is \nFalse\n.\n\n\nallow_files\n - Specifies whether files in the specified location should be included. Default is \nTrue\n. Either this or \nallow_folders\n must be \nTrue\n.\n\n\nallow_folders\n - Specifies whether folders in the specified location should be included. Default is \nFalse\n. Either this or \nallow_files\n must be \nTrue\n.\n\n\n\n\nIPAddressField\n\n\nA field that ensures the input is a valid IPv4 or IPv6 string.\n\n\nCorresponds to \ndjango.forms.fields.IPAddressField\n and \ndjango.forms.fields.GenericIPAddressField\n.\n\n\nSignature\n: \nIPAddressField(protocol='both', unpack_ipv4=False, **options)\n\n\n\n\nprotocol\n Limits valid inputs to the specified protocol. Accepted values are 'both' (default), 'IPv4' or 'IPv6'. Matching is case insensitive.\n\n\nunpack_ipv4\n Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'.\n\n\n\n\n\n\nNumeric fields\n\n\nIntegerField\n\n\nAn integer representation.\n\n\nCorresponds to \ndjango.db.models.fields.IntegerField\n, \ndjango.db.models.fields.SmallIntegerField\n, \ndjango.db.models.fields.PositiveIntegerField\n and \ndjango.db.models.fields.PositiveSmallIntegerField\n.\n\n\nSignature\n: \nIntegerField(max_value=None, min_value=None)\n\n\n\n\nmax_value\n Validate that the number provided is no greater than this value.\n\n\nmin_value\n Validate that the number provided is no less than this value.\n\n\n\n\nFloatField\n\n\nA floating point representation.\n\n\nCorresponds to \ndjango.db.models.fields.FloatField\n.\n\n\nSignature\n: \nFloatField(max_value=None, min_value=None)\n\n\n\n\nmax_value\n Validate that the number provided is no greater than this value.\n\n\nmin_value\n Validate that the number provided is no less than this value.\n\n\n\n\nDecimalField\n\n\nA decimal representation, represented in Python by a \nDecimal\n instance.\n\n\nCorresponds to \ndjango.db.models.fields.DecimalField\n.\n\n\nSignature\n: \nDecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None)\n\n\n\n\nmax_digits\n The maximum number of digits allowed in the number. It must be either \nNone\n or an integer greater than or equal to \ndecimal_places\n.\n\n\ndecimal_places\n The number of decimal places to store with the number.\n\n\ncoerce_to_string\n Set to \nTrue\n if string values should be returned for the representation, or \nFalse\n if \nDecimal\n objects should be returned. Defaults to the same value as the \nCOERCE_DECIMAL_TO_STRING\n settings key, which will be \nTrue\n unless overridden. If \nDecimal\n objects are returned by the serializer, then the final output format will be determined by the renderer. Note that setting \nlocalize\n will force the value to \nTrue\n.\n\n\nmax_value\n Validate that the number provided is no greater than this value.\n\n\nmin_value\n Validate that the number provided is no less than this value.\n\n\nlocalize\n Set to \nTrue\n to enable localization of input and output based on the current locale. This will also force \ncoerce_to_string\n to \nTrue\n. Defaults to \nFalse\n. Note that data formatting is enabled if you have set \nUSE_L10N=True\n in your settings file.\n\n\n\n\nExample usage\n\n\nTo validate numbers up to 999 with a resolution of 2 decimal places, you would use:\n\n\nserializers.DecimalField(max_digits=5, decimal_places=2)\n\n\n\nAnd to validate numbers up to anything less than one billion with a resolution of 10 decimal places:\n\n\nserializers.DecimalField(max_digits=19, decimal_places=10)\n\n\n\nThis field also takes an optional argument, \ncoerce_to_string\n. If set to \nTrue\n the representation will be output as a string. If set to \nFalse\n the representation will be left as a \nDecimal\n instance and the final representation will be determined by the renderer.\n\n\nIf unset, this will default to the same value as the \nCOERCE_DECIMAL_TO_STRING\n setting, which is \nTrue\n unless set otherwise.\n\n\n\n\nDate and time fields\n\n\nDateTimeField\n\n\nA date and time representation.\n\n\nCorresponds to \ndjango.db.models.fields.DateTimeField\n.\n\n\nSignature:\n \nDateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)\n\n\n\n\nformat\n - A string representing the output format. If not specified, this defaults to the same value as the \nDATETIME_FORMAT\n settings key, which will be \n'iso-8601'\n unless set. Setting to a format string indicates that \nto_representation\n return values should be coerced to string output. Format strings are described below. Setting this value to \nNone\n indicates that Python \ndatetime\n objects should be returned by \nto_representation\n. In this case the datetime encoding will be determined by the renderer.\n\n\ninput_formats\n - A list of strings representing the input formats which may be used to parse the date.  If not specified, the \nDATETIME_INPUT_FORMATS\n setting will be used, which defaults to \n['iso-8601']\n.\n\n\n\n\nDateTimeField\n format strings.\n\n\nFormat strings may either be \nPython strftime formats\n which explicitly specify the format, or the special string \n'iso-8601'\n, which indicates that \nISO 8601\n style datetimes should be used. (eg \n'2013-01-29T12:34:56.000000Z'\n)\n\n\nWhen a value of \nNone\n is used for the format \ndatetime\n objects will be returned by \nto_representation\n and the final output representation will determined by the renderer class.\n\n\nauto_now\n and \nauto_now_add\n model fields.\n\n\nWhen using \nModelSerializer\n or \nHyperlinkedModelSerializer\n, note that any model fields with \nauto_now=True\n or \nauto_now_add=True\n will use serializer fields that are \nread_only=True\n by default.\n\n\nIf you want to override this behavior, you'll need to declare the \nDateTimeField\n explicitly on the serializer.  For example:\n\n\nclass CommentSerializer(serializers.ModelSerializer):\n    created = serializers.DateTimeField()\n\n    class Meta:\n        model = Comment\n\n\n\nDateField\n\n\nA date representation.\n\n\nCorresponds to \ndjango.db.models.fields.DateField\n\n\nSignature:\n \nDateField(format=api_settings.DATE_FORMAT, input_formats=None)\n\n\n\n\nformat\n - A string representing the output format.  If not specified, this defaults to the same value as the \nDATE_FORMAT\n settings key, which will be \n'iso-8601'\n unless set. Setting to a format string indicates that \nto_representation\n return values should be coerced to string output. Format strings are described below. Setting this value to \nNone\n indicates that Python \ndate\n objects should be returned by \nto_representation\n. In this case the date encoding will be determined by the renderer.\n\n\ninput_formats\n - A list of strings representing the input formats which may be used to parse the date.  If not specified, the \nDATE_INPUT_FORMATS\n setting will be used, which defaults to \n['iso-8601']\n.\n\n\n\n\nDateField\n format strings\n\n\nFormat strings may either be \nPython strftime formats\n which explicitly specify the format, or the special string \n'iso-8601'\n, which indicates that \nISO 8601\n style dates should be used. (eg \n'2013-01-29'\n)\n\n\nTimeField\n\n\nA time representation.\n\n\nCorresponds to \ndjango.db.models.fields.TimeField\n\n\nSignature:\n \nTimeField(format=api_settings.TIME_FORMAT, input_formats=None)\n\n\n\n\nformat\n - A string representing the output format.  If not specified, this defaults to the same value as the \nTIME_FORMAT\n settings key, which will be \n'iso-8601'\n unless set. Setting to a format string indicates that \nto_representation\n return values should be coerced to string output. Format strings are described below. Setting this value to \nNone\n indicates that Python \ntime\n objects should be returned by \nto_representation\n. In this case the time encoding will be determined by the renderer.\n\n\ninput_formats\n - A list of strings representing the input formats which may be used to parse the date.  If not specified, the \nTIME_INPUT_FORMATS\n setting will be used, which defaults to \n['iso-8601']\n.\n\n\n\n\nTimeField\n format strings\n\n\nFormat strings may either be \nPython strftime formats\n which explicitly specify the format, or the special string \n'iso-8601'\n, which indicates that \nISO 8601\n style times should be used. (eg \n'12:34:56.000000'\n)\n\n\nDurationField\n\n\nA Duration representation.\nCorresponds to \ndjango.db.models.fields.DurationField\n\n\nThe \nvalidated_data\n for these fields will contain a \ndatetime.timedelta\n instance.\nThe representation is a string following this format \n'[DD] [HH:[MM:]]ss[.uuuuuu]'\n.\n\n\nNote:\n This field is only available with Django versions >= 1.8.\n\n\nSignature:\n \nDurationField()\n\n\n\n\nChoice selection fields\n\n\nChoiceField\n\n\nA field that can accept a value out of a limited set of choices.\n\n\nUsed by \nModelSerializer\n to automatically generate fields if the corresponding model field includes a \nchoices=\u2026\n argument.\n\n\nSignature:\n \nChoiceField(choices)\n\n\n\n\nchoices\n - A list of valid values, or a list of \n(key, display_name)\n tuples.\n\n\nallow_blank\n - If set to \nTrue\n then the empty string should be considered a valid value. If set to \nFalse\n then the empty string is considered invalid and will raise a validation error. Defaults to \nFalse\n.\n\n\nhtml_cutoff\n - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Can be used to ensure that automatically generated ChoiceFields with very large possible selections do not prevent a template from rendering. Defaults to \nNone\n.\n\n\nhtml_cutoff_text\n - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to \n\"More than {count} items\u2026\"\n\n\n\n\nBoth the \nallow_blank\n and \nallow_null\n are valid options on \nChoiceField\n, although it is highly recommended that you only use one and not both. \nallow_blank\n should be preferred for textual choices, and \nallow_null\n should be preferred for numeric or other non-textual choices.\n\n\nMultipleChoiceField\n\n\nA field that can accept a set of zero, one or many values, chosen from a limited set of choices. Takes a single mandatory argument. \nto_internal_value\n returns a \nset\n containing the selected values.\n\n\nSignature:\n \nMultipleChoiceField(choices)\n\n\n\n\nchoices\n - A list of valid values, or a list of \n(key, display_name)\n tuples.\n\n\nallow_blank\n - If set to \nTrue\n then the empty string should be considered a valid value. If set to \nFalse\n then the empty string is considered invalid and will raise a validation error. Defaults to \nFalse\n.\n\n\nhtml_cutoff\n - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Can be used to ensure that automatically generated ChoiceFields with very large possible selections do not prevent a template from rendering. Defaults to \nNone\n.\n\n\nhtml_cutoff_text\n - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to \n\"More than {count} items\u2026\"\n\n\n\n\nAs with \nChoiceField\n, both the \nallow_blank\n and \nallow_null\n options are valid, although it is highly recommended that you only use one and not both. \nallow_blank\n should be preferred for textual choices, and \nallow_null\n should be preferred for numeric or other non-textual choices.\n\n\n\n\nFile upload fields\n\n\nParsers and file uploads.\n\n\nThe \nFileField\n and \nImageField\n classes are only suitable for use with \nMultiPartParser\n or \nFileUploadParser\n. Most parsers, such as e.g. JSON don't support file uploads.\nDjango's regular \nFILE_UPLOAD_HANDLERS\n are used for handling uploaded files.\n\n\nFileField\n\n\nA file representation.  Performs Django's standard FileField validation.\n\n\nCorresponds to \ndjango.forms.fields.FileField\n.\n\n\nSignature:\n \nFileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)\n\n\n\n\nmax_length\n - Designates the maximum length for the file name.\n\n\nallow_empty_file\n - Designates if empty files are allowed.\n\n\nuse_url\n - If set to \nTrue\n then URL string values will be used for the output representation. If set to \nFalse\n then filename string values will be used for the output representation. Defaults to the value of the \nUPLOADED_FILES_USE_URL\n settings key, which is \nTrue\n unless set otherwise.\n\n\n\n\nImageField\n\n\nAn image representation. Validates the uploaded file content as matching a known image format.\n\n\nCorresponds to \ndjango.forms.fields.ImageField\n.\n\n\nSignature:\n \nImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)\n\n\n\n\nmax_length\n - Designates the maximum length for the file name.\n\n\nallow_empty_file\n - Designates if empty files are allowed.\n\n\nuse_url\n - If set to \nTrue\n then URL string values will be used for the output representation. If set to \nFalse\n then filename string values will be used for the output representation. Defaults to the value of the \nUPLOADED_FILES_USE_URL\n settings key, which is \nTrue\n unless set otherwise.\n\n\n\n\nRequires either the \nPillow\n package or \nPIL\n package.  The \nPillow\n package is recommended, as \nPIL\n is no longer actively maintained.\n\n\n\n\nComposite fields\n\n\nListField\n\n\nA field class that validates a list of objects.\n\n\nSignature\n: \nListField(child, min_length=None, max_length=None)\n\n\n\n\nchild\n - A field instance that should be used for validating the objects in the list. If this argument is not provided then objects in the list will not be validated.\n\n\nmin_length\n - Validates that the list contains no fewer than this number of elements.\n\n\nmax_length\n - Validates that the list contains no more than this number of elements.\n\n\n\n\nFor example, to validate a list of integers you might use something like the following:\n\n\nscores = serializers.ListField(\n   child=serializers.IntegerField(min_value=0, max_value=100)\n)\n\n\n\nThe \nListField\n class also supports a declarative style that allows you to write reusable list field classes.\n\n\nclass StringListField(serializers.ListField):\n    child = serializers.CharField()\n\n\n\nWe can now reuse our custom \nStringListField\n class throughout our application, without having to provide a \nchild\n argument to it.\n\n\nDictField\n\n\nA field class that validates a dictionary of objects. The keys in \nDictField\n are always assumed to be string values.\n\n\nSignature\n: \nDictField(child)\n\n\n\n\nchild\n - A field instance that should be used for validating the values in the dictionary. If this argument is not provided then values in the mapping will not be validated.\n\n\n\n\nFor example, to create a field that validates a mapping of strings to strings, you would write something like this:\n\n\ndocument = DictField(child=CharField())\n\n\n\nYou can also use the declarative style, as with \nListField\n. For example:\n\n\nclass DocumentField(DictField):\n    child = CharField()\n\n\n\nJSONField\n\n\nA field class that validates that the incoming data structure consists of valid JSON primitives. In its alternate binary mode, it will represent and validate JSON-encoded binary strings.\n\n\nSignature\n: \nJSONField(binary)\n\n\n\n\nbinary\n - If set to \nTrue\n then the field will output and validate a JSON encoded string, rather than a primitive data structure. Defaults to \nFalse\n.\n\n\n\n\n\n\nMiscellaneous fields\n\n\nReadOnlyField\n\n\nA field class that simply returns the value of the field without modification.\n\n\nThis field is used by default with \nModelSerializer\n when including field names that relate to an attribute rather than a model field.\n\n\nSignature\n: \nReadOnlyField()\n\n\nFor example, if \nhas_expired\n was a property on the \nAccount\n model, then the following serializer would automatically generate it as a \nReadOnlyField\n:\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'has_expired')\n\n\n\nHiddenField\n\n\nA field class that does not take a value based on user input, but instead takes its value from a default value or callable.\n\n\nSignature\n: \nHiddenField()\n\n\nFor example, to include a field that always provides the current time as part of the serializer validated data, you would use the following:\n\n\nmodified = serializers.HiddenField(default=timezone.now)\n\n\n\nThe \nHiddenField\n class is usually only needed if you have some validation that needs to run based on some pre-provided field values, but you do not want to expose all of those fields to the end user.\n\n\nFor further examples on \nHiddenField\n see the \nvalidators\n documentation.\n\n\nModelField\n\n\nA generic field that can be tied to any arbitrary model field. The \nModelField\n class delegates the task of serialization/deserialization to its associated model field.  This field can be used to create serializer fields for custom model fields, without having to create a new custom serializer field.\n\n\nThis field is used by \nModelSerializer\n to correspond to custom model field classes.\n\n\nSignature:\n \nModelField(model_field=<Django ModelField instance>)\n\n\nThe \nModelField\n class is generally intended for internal use, but can be used by your API if needed.  In order to properly instantiate a \nModelField\n, it must be passed a field that is attached to an instantiated model.  For example: \nModelField(model_field=MyModel()._meta.get_field('custom_field'))\n\n\nSerializerMethodField\n\n\nThis is a read-only field. It gets its value by calling a method on the serializer class it is attached to. It can be used to add any sort of data to the serialized representation of your object.\n\n\nSignature\n: \nSerializerMethodField(method_name=None)\n\n\n\n\nmethod_name\n - The name of the method on the serializer to be called. If not included this defaults to \nget_<field_name>\n.\n\n\n\n\nThe serializer method referred to by the \nmethod_name\n argument should accept a single argument (in addition to \nself\n), which is the object being serialized. It should return whatever you want to be included in the serialized representation of the object. For example:\n\n\nfrom django.contrib.auth.models import User\nfrom django.utils.timezone import now\nfrom rest_framework import serializers\n\nclass UserSerializer(serializers.ModelSerializer):\n    days_since_joined = serializers.SerializerMethodField()\n\n    class Meta:\n        model = User\n\n    def get_days_since_joined(self, obj):\n        return (now() - obj.date_joined).days\n\n\n\n\n\nCustom fields\n\n\nIf you want to create a custom field, you'll need to subclass \nField\n and then override either one or both of the \n.to_representation()\n and \n.to_internal_value()\n methods.  These two methods are used to convert between the initial datatype, and a primitive, serializable datatype. Primitive datatypes will typically be any of a number, string, boolean, \ndate\n/\ntime\n/\ndatetime\n or \nNone\n. They may also be any list or dictionary like object that only contains other primitive objects. Other types might be supported, depending on the renderer that you are using.\n\n\nThe \n.to_representation()\n method is called to convert the initial datatype into a primitive, serializable datatype.\n\n\nThe \nto_internal_value()\n method is called to restore a primitive datatype into its internal python representation. This method should raise a \nserializers.ValidationError\n if the data is invalid.\n\n\nNote that the \nWritableField\n class that was present in version 2.x no longer exists. You should subclass \nField\n and override \nto_internal_value()\n if the field supports data input.\n\n\nExamples\n\n\nLet's look at an example of serializing a class that represents an RGB color value:\n\n\nclass Color(object):\n    \"\"\"\n    A color represented in the RGB colorspace.\n    \"\"\"\n    def __init__(self, red, green, blue):\n        assert(red >= 0 and green >= 0 and blue >= 0)\n        assert(red < 256 and green < 256 and blue < 256)\n        self.red, self.green, self.blue = red, green, blue\n\nclass ColorField(serializers.Field):\n    \"\"\"\n    Color objects are serialized into 'rgb(#, #, #)' notation.\n    \"\"\"\n    def to_representation(self, obj):\n        return \"rgb(%d, %d, %d)\" % (obj.red, obj.green, obj.blue)\n\n    def to_internal_value(self, data):\n        data = data.strip('rgb(').rstrip(')')\n        red, green, blue = [int(col) for col in data.split(',')]\n        return Color(red, green, blue)\n\n\n\nBy default field values are treated as mapping to an attribute on the object.  If you need to customize how the field value is accessed and set you need to override \n.get_attribute()\n and/or \n.get_value()\n.\n\n\nAs an example, let's create a field that can be used to represent the class name of the object being serialized:\n\n\nclass ClassNameField(serializers.Field):\n    def get_attribute(self, obj):\n        # We pass the object instance onto `to_representation`,\n        # not just the field attribute.\n        return obj\n\n    def to_representation(self, obj):\n        \"\"\"\n        Serialize the object's class name.\n        \"\"\"\n        return obj.__class__.__name__\n\n\n\nRaising validation errors\n\n\nOur \nColorField\n class above currently does not perform any data validation.\nTo indicate invalid data, we should raise a \nserializers.ValidationError\n, like so:\n\n\ndef to_internal_value(self, data):\n    if not isinstance(data, six.text_type):\n        msg = 'Incorrect type. Expected a string, but got %s'\n        raise ValidationError(msg % type(data).__name__)\n\n    if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data):\n        raise ValidationError('Incorrect format. Expected `rgb(#,#,#)`.')\n\n    data = data.strip('rgb(').rstrip(')')\n    red, green, blue = [int(col) for col in data.split(',')]\n\n    if any([col > 255 or col < 0 for col in (red, green, blue)]):\n        raise ValidationError('Value out of range. Must be between 0 and 255.')\n\n    return Color(red, green, blue)\n\n\n\nThe \n.fail()\n method is a shortcut for raising \nValidationError\n that takes a message string from the \nerror_messages\n dictionary. For example:\n\n\ndefault_error_messages = {\n    'incorrect_type': 'Incorrect type. Expected a string, but got {input_type}',\n    'incorrect_format': 'Incorrect format. Expected `rgb(#,#,#)`.',\n    'out_of_range': 'Value out of range. Must be between 0 and 255.'\n}\n\ndef to_internal_value(self, data):\n    if not isinstance(data, six.text_type):\n        self.fail('incorrect_type', input_type=type(data).__name__)\n\n    if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data):\n        self.fail('incorrect_format')\n\n    data = data.strip('rgb(').rstrip(')')\n    red, green, blue = [int(col) for col in data.split(',')]\n\n    if any([col > 255 or col < 0 for col in (red, green, blue)]):\n        self.fail('out_of_range')\n\n    return Color(red, green, blue)\n\n\n\nThis style keeps you error messages more cleanly separated from your code, and should be preferred.\n\n\nThird party packages\n\n\nThe following third party packages are also available.\n\n\nDRF Compound Fields\n\n\nThe \ndrf-compound-fields\n package provides \"compound\" serializer fields, such as lists of simple values, which can be described by other fields rather than serializers with the \nmany=True\n option. Also provided are fields for typed dictionaries and values that can be either a specific type or a list of items of that type.\n\n\nDRF Extra Fields\n\n\nThe \ndrf-extra-fields\n package provides extra serializer fields for REST framework, including \nBase64ImageField\n and \nPointField\n classes.\n\n\ndjangrestframework-recursive\n\n\nthe \ndjangorestframework-recursive\n package provides a \nRecursiveField\n for serializing and deserializing recursive structures\n\n\ndjango-rest-framework-gis\n\n\nThe \ndjango-rest-framework-gis\n package provides geographic addons for django rest framework like a  \nGeometryField\n field and a GeoJSON serializer.\n\n\ndjango-rest-framework-hstore\n\n\nThe \ndjango-rest-framework-hstore\n package provides an \nHStoreField\n to support \ndjango-hstore\n \nDictionaryField\n model field.",
            "title": "Serializer fields"
        },
        {
            "location": "/api-guide/fields/#serializer-fields",
            "text": "Each field in a Form class is responsible not only for validating data, but also for \"cleaning\" it \u2014 normalizing it to a consistent format.  \u2014  Django documentation   Serializer fields handle converting between primitive values and internal datatypes.  They also deal with validating input values, as well as retrieving and setting the values from their parent objects.   Note:  The serializer fields are declared in  fields.py , but by convention you should import them using  from rest_framework import serializers  and refer to fields as  serializers.<FieldName> .",
            "title": "Serializer fields"
        },
        {
            "location": "/api-guide/fields/#core-arguments",
            "text": "Each serializer field class constructor takes at least these arguments.  Some Field classes take additional, field-specific arguments, but the following should always be accepted:",
            "title": "Core arguments"
        },
        {
            "location": "/api-guide/fields/#read_only",
            "text": "Read-only fields are included in the API output, but should not be included in the input during create or update operations. Any 'read_only' fields that are incorrectly included in the serializer input will be ignored.  Set this to  True  to ensure that the field is used when serializing a representation, but is not used when creating or updating an instance during deserialization.  Defaults to  False",
            "title": "read_only"
        },
        {
            "location": "/api-guide/fields/#write_only",
            "text": "Set this to  True  to ensure that the field may be used when updating or creating an instance, but is not included when serializing the representation.  Defaults to  False",
            "title": "write_only"
        },
        {
            "location": "/api-guide/fields/#required",
            "text": "Normally an error will be raised if a field is not supplied during deserialization.\nSet to false if this field is not required to be present during deserialization.  Setting this to  False  also allows the object attribute or dictionary key to be omitted from output when serializing the instance. If the key is not present it will simply not be included in the output representation.  Defaults to  True .",
            "title": "required"
        },
        {
            "location": "/api-guide/fields/#allow_null",
            "text": "Normally an error will be raised if  None  is passed to a serializer field. Set this keyword argument to  True  if  None  should be considered a valid value.  Defaults to  False",
            "title": "allow_null"
        },
        {
            "location": "/api-guide/fields/#default",
            "text": "If set, this gives the default value that will be used for the field if no input value is supplied. If not set the default behaviour is to not populate the attribute at all.  The  default  is not applied during partial update operations. In the partial update case only fields that are provided in the incoming data will have a validated value returned.  May be set to a function or other callable, in which case the value will be evaluated each time it is used. When called, it will receive no arguments. If the callable has a  set_context  method, that will be called each time before getting the value with the field instance as only argument. This works the same way as for  validators .  Note that setting a  default  value implies that the field is not required. Including both the  default  and  required  keyword arguments is invalid and will raise an error.",
            "title": "default"
        },
        {
            "location": "/api-guide/fields/#source",
            "text": "The name of the attribute that will be used to populate the field.  May be a method that only takes a  self  argument, such as  URLField(source='get_absolute_url') , or may use dotted notation to traverse attributes, such as  EmailField(source='user.email') .  The value  source='*'  has a special meaning, and is used to indicate that the entire object should be passed through to the field.  This can be useful for creating nested representations, or for fields which require access to the complete object in order to determine the output representation.  Defaults to the name of the field.",
            "title": "source"
        },
        {
            "location": "/api-guide/fields/#validators",
            "text": "A list of validator functions which should be applied to the incoming field input, and which either raise a validation error or simply return. Validator functions should typically raise  serializers.ValidationError , but Django's built-in  ValidationError  is also supported for compatibility with validators defined in the Django codebase or third party Django packages.",
            "title": "validators"
        },
        {
            "location": "/api-guide/fields/#error_messages",
            "text": "A dictionary of error codes to error messages.",
            "title": "error_messages"
        },
        {
            "location": "/api-guide/fields/#label",
            "text": "A short text string that may be used as the name of the field in HTML form fields or other descriptive elements.",
            "title": "label"
        },
        {
            "location": "/api-guide/fields/#help_text",
            "text": "A text string that may be used as a description of the field in HTML form fields or other descriptive elements.",
            "title": "help_text"
        },
        {
            "location": "/api-guide/fields/#initial",
            "text": "A value that should be used for pre-populating the value of HTML form fields. You may pass a callable to it, just as\nyou may do with any regular Django  Field :  import datetime\nfrom rest_framework import serializers\nclass ExampleSerializer(serializers.Serializer):\n    day = serializers.DateField(initial=datetime.date.today)",
            "title": "initial"
        },
        {
            "location": "/api-guide/fields/#style",
            "text": "A dictionary of key-value pairs that can be used to control how renderers should render the field.  Two examples here are  'input_type'  and  'base_template' :  # Use <input type=\"password\"> for the input.\npassword = serializers.CharField(\n    style={'input_type': 'password'}\n)\n\n# Use a radio input instead of a select input.\ncolor_channel = serializers.ChoiceField(\n    choices=['red', 'green', 'blue'],\n    style={'base_template': 'radio.html'}\n)  For more details see the  HTML & Forms  documentation.",
            "title": "style"
        },
        {
            "location": "/api-guide/fields/#boolean-fields",
            "text": "",
            "title": "Boolean fields"
        },
        {
            "location": "/api-guide/fields/#booleanfield",
            "text": "A boolean representation.  When using HTML encoded form input be aware that omitting a value will always be treated as setting a field to  False , even if it has a  default=True  option specified. This is because HTML checkbox inputs represent the unchecked state by omitting the value, so REST framework treats omission as if it is an empty checkbox input.  Corresponds to  django.db.models.fields.BooleanField .  Signature:   BooleanField()",
            "title": "BooleanField"
        },
        {
            "location": "/api-guide/fields/#nullbooleanfield",
            "text": "A boolean representation that also accepts  None  as a valid value.  Corresponds to  django.db.models.fields.NullBooleanField .  Signature:   NullBooleanField()",
            "title": "NullBooleanField"
        },
        {
            "location": "/api-guide/fields/#string-fields",
            "text": "",
            "title": "String fields"
        },
        {
            "location": "/api-guide/fields/#charfield",
            "text": "A text representation. Optionally validates the text to be shorter than  max_length  and longer than  min_length .  Corresponds to  django.db.models.fields.CharField  or  django.db.models.fields.TextField .  Signature:   CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)   max_length  - Validates that the input contains no more than this number of characters.  min_length  - Validates that the input contains no fewer than this number of characters.  allow_blank  - If set to  True  then the empty string should be considered a valid value. If set to  False  then the empty string is considered invalid and will raise a validation error. Defaults to  False .  trim_whitespace  - If set to  True  then leading and trailing whitespace is trimmed. Defaults to  True .   The  allow_null  option is also available for string fields, although its usage is discouraged in favor of  allow_blank . It is valid to set both  allow_blank=True  and  allow_null=True , but doing so means that there will be two differing types of empty value permissible for string representations, which can lead to data inconsistencies and subtle application bugs.",
            "title": "CharField"
        },
        {
            "location": "/api-guide/fields/#emailfield",
            "text": "A text representation, validates the text to be a valid e-mail address.  Corresponds to  django.db.models.fields.EmailField  Signature:   EmailField(max_length=None, min_length=None, allow_blank=False)",
            "title": "EmailField"
        },
        {
            "location": "/api-guide/fields/#regexfield",
            "text": "A text representation, that validates the given value matches against a certain regular expression.  Corresponds to  django.forms.fields.RegexField .  Signature:   RegexField(regex, max_length=None, min_length=None, allow_blank=False)  The mandatory  regex  argument may either be a string, or a compiled python regular expression object.  Uses Django's  django.core.validators.RegexValidator  for validation.",
            "title": "RegexField"
        },
        {
            "location": "/api-guide/fields/#slugfield",
            "text": "A  RegexField  that validates the input against the pattern  [a-zA-Z0-9_-]+ .  Corresponds to  django.db.models.fields.SlugField .  Signature:   SlugField(max_length=50, min_length=None, allow_blank=False)",
            "title": "SlugField"
        },
        {
            "location": "/api-guide/fields/#urlfield",
            "text": "A  RegexField  that validates the input against a URL matching pattern. Expects fully qualified URLs of the form  http://<host>/<path> .  Corresponds to  django.db.models.fields.URLField .  Uses Django's  django.core.validators.URLValidator  for validation.  Signature:   URLField(max_length=200, min_length=None, allow_blank=False)",
            "title": "URLField"
        },
        {
            "location": "/api-guide/fields/#uuidfield",
            "text": "A field that ensures the input is a valid UUID string. The  to_internal_value  method will return a  uuid.UUID  instance. On output the field will return a string in the canonical hyphenated format, for example:  \"de305d54-75b4-431b-adb2-eb6b9e546013\"  Signature:   UUIDField(format='hex_verbose')   format : Determines the representation format of the uuid value  'hex_verbose'  - The cannoncical hex representation, including hyphens:  \"5ce0e9a5-5ffa-654b-cee0-1238041fb31a\"  'hex'  - The compact hex representation of the UUID, not including hyphens:  \"5ce0e9a55ffa654bcee01238041fb31a\"  'int'  - A 128 bit integer representation of the UUID:  \"123456789012312313134124512351145145114\"  'urn'  - RFC 4122 URN representation of the UUID:  \"urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" \n  Changing the  format  parameters only affects representation values. All formats are accepted by  to_internal_value",
            "title": "UUIDField"
        },
        {
            "location": "/api-guide/fields/#filepathfield",
            "text": "A field whose choices are limited to the filenames in a certain directory on the filesystem  Corresponds to  django.forms.fields.FilePathField .  Signature:   FilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs)   path  - The absolute filesystem path to a directory from which this FilePathField should get its choice.  match  - A regular expression, as a string, that FilePathField will use to filter filenames.  recursive  - Specifies whether all subdirectories of path should be included.  Default is  False .  allow_files  - Specifies whether files in the specified location should be included. Default is  True . Either this or  allow_folders  must be  True .  allow_folders  - Specifies whether folders in the specified location should be included. Default is  False . Either this or  allow_files  must be  True .",
            "title": "FilePathField"
        },
        {
            "location": "/api-guide/fields/#ipaddressfield",
            "text": "A field that ensures the input is a valid IPv4 or IPv6 string.  Corresponds to  django.forms.fields.IPAddressField  and  django.forms.fields.GenericIPAddressField .  Signature :  IPAddressField(protocol='both', unpack_ipv4=False, **options)   protocol  Limits valid inputs to the specified protocol. Accepted values are 'both' (default), 'IPv4' or 'IPv6'. Matching is case insensitive.  unpack_ipv4  Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'.",
            "title": "IPAddressField"
        },
        {
            "location": "/api-guide/fields/#numeric-fields",
            "text": "",
            "title": "Numeric fields"
        },
        {
            "location": "/api-guide/fields/#integerfield",
            "text": "An integer representation.  Corresponds to  django.db.models.fields.IntegerField ,  django.db.models.fields.SmallIntegerField ,  django.db.models.fields.PositiveIntegerField  and  django.db.models.fields.PositiveSmallIntegerField .  Signature :  IntegerField(max_value=None, min_value=None)   max_value  Validate that the number provided is no greater than this value.  min_value  Validate that the number provided is no less than this value.",
            "title": "IntegerField"
        },
        {
            "location": "/api-guide/fields/#floatfield",
            "text": "A floating point representation.  Corresponds to  django.db.models.fields.FloatField .  Signature :  FloatField(max_value=None, min_value=None)   max_value  Validate that the number provided is no greater than this value.  min_value  Validate that the number provided is no less than this value.",
            "title": "FloatField"
        },
        {
            "location": "/api-guide/fields/#decimalfield",
            "text": "A decimal representation, represented in Python by a  Decimal  instance.  Corresponds to  django.db.models.fields.DecimalField .  Signature :  DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None)   max_digits  The maximum number of digits allowed in the number. It must be either  None  or an integer greater than or equal to  decimal_places .  decimal_places  The number of decimal places to store with the number.  coerce_to_string  Set to  True  if string values should be returned for the representation, or  False  if  Decimal  objects should be returned. Defaults to the same value as the  COERCE_DECIMAL_TO_STRING  settings key, which will be  True  unless overridden. If  Decimal  objects are returned by the serializer, then the final output format will be determined by the renderer. Note that setting  localize  will force the value to  True .  max_value  Validate that the number provided is no greater than this value.  min_value  Validate that the number provided is no less than this value.  localize  Set to  True  to enable localization of input and output based on the current locale. This will also force  coerce_to_string  to  True . Defaults to  False . Note that data formatting is enabled if you have set  USE_L10N=True  in your settings file.",
            "title": "DecimalField"
        },
        {
            "location": "/api-guide/fields/#example-usage",
            "text": "To validate numbers up to 999 with a resolution of 2 decimal places, you would use:  serializers.DecimalField(max_digits=5, decimal_places=2)  And to validate numbers up to anything less than one billion with a resolution of 10 decimal places:  serializers.DecimalField(max_digits=19, decimal_places=10)  This field also takes an optional argument,  coerce_to_string . If set to  True  the representation will be output as a string. If set to  False  the representation will be left as a  Decimal  instance and the final representation will be determined by the renderer.  If unset, this will default to the same value as the  COERCE_DECIMAL_TO_STRING  setting, which is  True  unless set otherwise.",
            "title": "Example usage"
        },
        {
            "location": "/api-guide/fields/#date-and-time-fields",
            "text": "",
            "title": "Date and time fields"
        },
        {
            "location": "/api-guide/fields/#datetimefield",
            "text": "A date and time representation.  Corresponds to  django.db.models.fields.DateTimeField .  Signature:   DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)   format  - A string representing the output format. If not specified, this defaults to the same value as the  DATETIME_FORMAT  settings key, which will be  'iso-8601'  unless set. Setting to a format string indicates that  to_representation  return values should be coerced to string output. Format strings are described below. Setting this value to  None  indicates that Python  datetime  objects should be returned by  to_representation . In this case the datetime encoding will be determined by the renderer.  input_formats  - A list of strings representing the input formats which may be used to parse the date.  If not specified, the  DATETIME_INPUT_FORMATS  setting will be used, which defaults to  ['iso-8601'] .",
            "title": "DateTimeField"
        },
        {
            "location": "/api-guide/fields/#datetimefield-format-strings",
            "text": "Format strings may either be  Python strftime formats  which explicitly specify the format, or the special string  'iso-8601' , which indicates that  ISO 8601  style datetimes should be used. (eg  '2013-01-29T12:34:56.000000Z' )  When a value of  None  is used for the format  datetime  objects will be returned by  to_representation  and the final output representation will determined by the renderer class.",
            "title": "DateTimeField format strings."
        },
        {
            "location": "/api-guide/fields/#auto_now-and-auto_now_add-model-fields",
            "text": "When using  ModelSerializer  or  HyperlinkedModelSerializer , note that any model fields with  auto_now=True  or  auto_now_add=True  will use serializer fields that are  read_only=True  by default.  If you want to override this behavior, you'll need to declare the  DateTimeField  explicitly on the serializer.  For example:  class CommentSerializer(serializers.ModelSerializer):\n    created = serializers.DateTimeField()\n\n    class Meta:\n        model = Comment",
            "title": "auto_now and auto_now_add model fields."
        },
        {
            "location": "/api-guide/fields/#datefield",
            "text": "A date representation.  Corresponds to  django.db.models.fields.DateField  Signature:   DateField(format=api_settings.DATE_FORMAT, input_formats=None)   format  - A string representing the output format.  If not specified, this defaults to the same value as the  DATE_FORMAT  settings key, which will be  'iso-8601'  unless set. Setting to a format string indicates that  to_representation  return values should be coerced to string output. Format strings are described below. Setting this value to  None  indicates that Python  date  objects should be returned by  to_representation . In this case the date encoding will be determined by the renderer.  input_formats  - A list of strings representing the input formats which may be used to parse the date.  If not specified, the  DATE_INPUT_FORMATS  setting will be used, which defaults to  ['iso-8601'] .",
            "title": "DateField"
        },
        {
            "location": "/api-guide/fields/#datefield-format-strings",
            "text": "Format strings may either be  Python strftime formats  which explicitly specify the format, or the special string  'iso-8601' , which indicates that  ISO 8601  style dates should be used. (eg  '2013-01-29' )",
            "title": "DateField format strings"
        },
        {
            "location": "/api-guide/fields/#timefield",
            "text": "A time representation.  Corresponds to  django.db.models.fields.TimeField  Signature:   TimeField(format=api_settings.TIME_FORMAT, input_formats=None)   format  - A string representing the output format.  If not specified, this defaults to the same value as the  TIME_FORMAT  settings key, which will be  'iso-8601'  unless set. Setting to a format string indicates that  to_representation  return values should be coerced to string output. Format strings are described below. Setting this value to  None  indicates that Python  time  objects should be returned by  to_representation . In this case the time encoding will be determined by the renderer.  input_formats  - A list of strings representing the input formats which may be used to parse the date.  If not specified, the  TIME_INPUT_FORMATS  setting will be used, which defaults to  ['iso-8601'] .",
            "title": "TimeField"
        },
        {
            "location": "/api-guide/fields/#timefield-format-strings",
            "text": "Format strings may either be  Python strftime formats  which explicitly specify the format, or the special string  'iso-8601' , which indicates that  ISO 8601  style times should be used. (eg  '12:34:56.000000' )",
            "title": "TimeField format strings"
        },
        {
            "location": "/api-guide/fields/#durationfield",
            "text": "A Duration representation.\nCorresponds to  django.db.models.fields.DurationField  The  validated_data  for these fields will contain a  datetime.timedelta  instance.\nThe representation is a string following this format  '[DD] [HH:[MM:]]ss[.uuuuuu]' .  Note:  This field is only available with Django versions >= 1.8.  Signature:   DurationField()",
            "title": "DurationField"
        },
        {
            "location": "/api-guide/fields/#choice-selection-fields",
            "text": "",
            "title": "Choice selection fields"
        },
        {
            "location": "/api-guide/fields/#choicefield",
            "text": "A field that can accept a value out of a limited set of choices.  Used by  ModelSerializer  to automatically generate fields if the corresponding model field includes a  choices=\u2026  argument.  Signature:   ChoiceField(choices)   choices  - A list of valid values, or a list of  (key, display_name)  tuples.  allow_blank  - If set to  True  then the empty string should be considered a valid value. If set to  False  then the empty string is considered invalid and will raise a validation error. Defaults to  False .  html_cutoff  - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Can be used to ensure that automatically generated ChoiceFields with very large possible selections do not prevent a template from rendering. Defaults to  None .  html_cutoff_text  - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to  \"More than {count} items\u2026\"   Both the  allow_blank  and  allow_null  are valid options on  ChoiceField , although it is highly recommended that you only use one and not both.  allow_blank  should be preferred for textual choices, and  allow_null  should be preferred for numeric or other non-textual choices.",
            "title": "ChoiceField"
        },
        {
            "location": "/api-guide/fields/#multiplechoicefield",
            "text": "A field that can accept a set of zero, one or many values, chosen from a limited set of choices. Takes a single mandatory argument.  to_internal_value  returns a  set  containing the selected values.  Signature:   MultipleChoiceField(choices)   choices  - A list of valid values, or a list of  (key, display_name)  tuples.  allow_blank  - If set to  True  then the empty string should be considered a valid value. If set to  False  then the empty string is considered invalid and will raise a validation error. Defaults to  False .  html_cutoff  - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Can be used to ensure that automatically generated ChoiceFields with very large possible selections do not prevent a template from rendering. Defaults to  None .  html_cutoff_text  - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to  \"More than {count} items\u2026\"   As with  ChoiceField , both the  allow_blank  and  allow_null  options are valid, although it is highly recommended that you only use one and not both.  allow_blank  should be preferred for textual choices, and  allow_null  should be preferred for numeric or other non-textual choices.",
            "title": "MultipleChoiceField"
        },
        {
            "location": "/api-guide/fields/#file-upload-fields",
            "text": "",
            "title": "File upload fields"
        },
        {
            "location": "/api-guide/fields/#parsers-and-file-uploads",
            "text": "The  FileField  and  ImageField  classes are only suitable for use with  MultiPartParser  or  FileUploadParser . Most parsers, such as e.g. JSON don't support file uploads.\nDjango's regular  FILE_UPLOAD_HANDLERS  are used for handling uploaded files.",
            "title": "Parsers and file uploads."
        },
        {
            "location": "/api-guide/fields/#filefield",
            "text": "A file representation.  Performs Django's standard FileField validation.  Corresponds to  django.forms.fields.FileField .  Signature:   FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)   max_length  - Designates the maximum length for the file name.  allow_empty_file  - Designates if empty files are allowed.  use_url  - If set to  True  then URL string values will be used for the output representation. If set to  False  then filename string values will be used for the output representation. Defaults to the value of the  UPLOADED_FILES_USE_URL  settings key, which is  True  unless set otherwise.",
            "title": "FileField"
        },
        {
            "location": "/api-guide/fields/#imagefield",
            "text": "An image representation. Validates the uploaded file content as matching a known image format.  Corresponds to  django.forms.fields.ImageField .  Signature:   ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)   max_length  - Designates the maximum length for the file name.  allow_empty_file  - Designates if empty files are allowed.  use_url  - If set to  True  then URL string values will be used for the output representation. If set to  False  then filename string values will be used for the output representation. Defaults to the value of the  UPLOADED_FILES_USE_URL  settings key, which is  True  unless set otherwise.   Requires either the  Pillow  package or  PIL  package.  The  Pillow  package is recommended, as  PIL  is no longer actively maintained.",
            "title": "ImageField"
        },
        {
            "location": "/api-guide/fields/#composite-fields",
            "text": "",
            "title": "Composite fields"
        },
        {
            "location": "/api-guide/fields/#listfield",
            "text": "A field class that validates a list of objects.  Signature :  ListField(child, min_length=None, max_length=None)   child  - A field instance that should be used for validating the objects in the list. If this argument is not provided then objects in the list will not be validated.  min_length  - Validates that the list contains no fewer than this number of elements.  max_length  - Validates that the list contains no more than this number of elements.   For example, to validate a list of integers you might use something like the following:  scores = serializers.ListField(\n   child=serializers.IntegerField(min_value=0, max_value=100)\n)  The  ListField  class also supports a declarative style that allows you to write reusable list field classes.  class StringListField(serializers.ListField):\n    child = serializers.CharField()  We can now reuse our custom  StringListField  class throughout our application, without having to provide a  child  argument to it.",
            "title": "ListField"
        },
        {
            "location": "/api-guide/fields/#dictfield",
            "text": "A field class that validates a dictionary of objects. The keys in  DictField  are always assumed to be string values.  Signature :  DictField(child)   child  - A field instance that should be used for validating the values in the dictionary. If this argument is not provided then values in the mapping will not be validated.   For example, to create a field that validates a mapping of strings to strings, you would write something like this:  document = DictField(child=CharField())  You can also use the declarative style, as with  ListField . For example:  class DocumentField(DictField):\n    child = CharField()",
            "title": "DictField"
        },
        {
            "location": "/api-guide/fields/#jsonfield",
            "text": "A field class that validates that the incoming data structure consists of valid JSON primitives. In its alternate binary mode, it will represent and validate JSON-encoded binary strings.  Signature :  JSONField(binary)   binary  - If set to  True  then the field will output and validate a JSON encoded string, rather than a primitive data structure. Defaults to  False .",
            "title": "JSONField"
        },
        {
            "location": "/api-guide/fields/#miscellaneous-fields",
            "text": "",
            "title": "Miscellaneous fields"
        },
        {
            "location": "/api-guide/fields/#readonlyfield",
            "text": "A field class that simply returns the value of the field without modification.  This field is used by default with  ModelSerializer  when including field names that relate to an attribute rather than a model field.  Signature :  ReadOnlyField()  For example, if  has_expired  was a property on the  Account  model, then the following serializer would automatically generate it as a  ReadOnlyField :  class AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ('id', 'account_name', 'has_expired')",
            "title": "ReadOnlyField"
        },
        {
            "location": "/api-guide/fields/#hiddenfield",
            "text": "A field class that does not take a value based on user input, but instead takes its value from a default value or callable.  Signature :  HiddenField()  For example, to include a field that always provides the current time as part of the serializer validated data, you would use the following:  modified = serializers.HiddenField(default=timezone.now)  The  HiddenField  class is usually only needed if you have some validation that needs to run based on some pre-provided field values, but you do not want to expose all of those fields to the end user.  For further examples on  HiddenField  see the  validators  documentation.",
            "title": "HiddenField"
        },
        {
            "location": "/api-guide/fields/#modelfield",
            "text": "A generic field that can be tied to any arbitrary model field. The  ModelField  class delegates the task of serialization/deserialization to its associated model field.  This field can be used to create serializer fields for custom model fields, without having to create a new custom serializer field.  This field is used by  ModelSerializer  to correspond to custom model field classes.  Signature:   ModelField(model_field=<Django ModelField instance>)  The  ModelField  class is generally intended for internal use, but can be used by your API if needed.  In order to properly instantiate a  ModelField , it must be passed a field that is attached to an instantiated model.  For example:  ModelField(model_field=MyModel()._meta.get_field('custom_field'))",
            "title": "ModelField"
        },
        {
            "location": "/api-guide/fields/#serializermethodfield",
            "text": "This is a read-only field. It gets its value by calling a method on the serializer class it is attached to. It can be used to add any sort of data to the serialized representation of your object.  Signature :  SerializerMethodField(method_name=None)   method_name  - The name of the method on the serializer to be called. If not included this defaults to  get_<field_name> .   The serializer method referred to by the  method_name  argument should accept a single argument (in addition to  self ), which is the object being serialized. It should return whatever you want to be included in the serialized representation of the object. For example:  from django.contrib.auth.models import User\nfrom django.utils.timezone import now\nfrom rest_framework import serializers\n\nclass UserSerializer(serializers.ModelSerializer):\n    days_since_joined = serializers.SerializerMethodField()\n\n    class Meta:\n        model = User\n\n    def get_days_since_joined(self, obj):\n        return (now() - obj.date_joined).days",
            "title": "SerializerMethodField"
        },
        {
            "location": "/api-guide/fields/#custom-fields",
            "text": "If you want to create a custom field, you'll need to subclass  Field  and then override either one or both of the  .to_representation()  and  .to_internal_value()  methods.  These two methods are used to convert between the initial datatype, and a primitive, serializable datatype. Primitive datatypes will typically be any of a number, string, boolean,  date / time / datetime  or  None . They may also be any list or dictionary like object that only contains other primitive objects. Other types might be supported, depending on the renderer that you are using.  The  .to_representation()  method is called to convert the initial datatype into a primitive, serializable datatype.  The  to_internal_value()  method is called to restore a primitive datatype into its internal python representation. This method should raise a  serializers.ValidationError  if the data is invalid.  Note that the  WritableField  class that was present in version 2.x no longer exists. You should subclass  Field  and override  to_internal_value()  if the field supports data input.",
            "title": "Custom fields"
        },
        {
            "location": "/api-guide/fields/#examples",
            "text": "Let's look at an example of serializing a class that represents an RGB color value:  class Color(object):\n    \"\"\"\n    A color represented in the RGB colorspace.\n    \"\"\"\n    def __init__(self, red, green, blue):\n        assert(red >= 0 and green >= 0 and blue >= 0)\n        assert(red < 256 and green < 256 and blue < 256)\n        self.red, self.green, self.blue = red, green, blue\n\nclass ColorField(serializers.Field):\n    \"\"\"\n    Color objects are serialized into 'rgb(#, #, #)' notation.\n    \"\"\"\n    def to_representation(self, obj):\n        return \"rgb(%d, %d, %d)\" % (obj.red, obj.green, obj.blue)\n\n    def to_internal_value(self, data):\n        data = data.strip('rgb(').rstrip(')')\n        red, green, blue = [int(col) for col in data.split(',')]\n        return Color(red, green, blue)  By default field values are treated as mapping to an attribute on the object.  If you need to customize how the field value is accessed and set you need to override  .get_attribute()  and/or  .get_value() .  As an example, let's create a field that can be used to represent the class name of the object being serialized:  class ClassNameField(serializers.Field):\n    def get_attribute(self, obj):\n        # We pass the object instance onto `to_representation`,\n        # not just the field attribute.\n        return obj\n\n    def to_representation(self, obj):\n        \"\"\"\n        Serialize the object's class name.\n        \"\"\"\n        return obj.__class__.__name__",
            "title": "Examples"
        },
        {
            "location": "/api-guide/fields/#raising-validation-errors",
            "text": "Our  ColorField  class above currently does not perform any data validation.\nTo indicate invalid data, we should raise a  serializers.ValidationError , like so:  def to_internal_value(self, data):\n    if not isinstance(data, six.text_type):\n        msg = 'Incorrect type. Expected a string, but got %s'\n        raise ValidationError(msg % type(data).__name__)\n\n    if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data):\n        raise ValidationError('Incorrect format. Expected `rgb(#,#,#)`.')\n\n    data = data.strip('rgb(').rstrip(')')\n    red, green, blue = [int(col) for col in data.split(',')]\n\n    if any([col > 255 or col < 0 for col in (red, green, blue)]):\n        raise ValidationError('Value out of range. Must be between 0 and 255.')\n\n    return Color(red, green, blue)  The  .fail()  method is a shortcut for raising  ValidationError  that takes a message string from the  error_messages  dictionary. For example:  default_error_messages = {\n    'incorrect_type': 'Incorrect type. Expected a string, but got {input_type}',\n    'incorrect_format': 'Incorrect format. Expected `rgb(#,#,#)`.',\n    'out_of_range': 'Value out of range. Must be between 0 and 255.'\n}\n\ndef to_internal_value(self, data):\n    if not isinstance(data, six.text_type):\n        self.fail('incorrect_type', input_type=type(data).__name__)\n\n    if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data):\n        self.fail('incorrect_format')\n\n    data = data.strip('rgb(').rstrip(')')\n    red, green, blue = [int(col) for col in data.split(',')]\n\n    if any([col > 255 or col < 0 for col in (red, green, blue)]):\n        self.fail('out_of_range')\n\n    return Color(red, green, blue)  This style keeps you error messages more cleanly separated from your code, and should be preferred.",
            "title": "Raising validation errors"
        },
        {
            "location": "/api-guide/fields/#third-party-packages",
            "text": "The following third party packages are also available.",
            "title": "Third party packages"
        },
        {
            "location": "/api-guide/fields/#drf-compound-fields",
            "text": "The  drf-compound-fields  package provides \"compound\" serializer fields, such as lists of simple values, which can be described by other fields rather than serializers with the  many=True  option. Also provided are fields for typed dictionaries and values that can be either a specific type or a list of items of that type.",
            "title": "DRF Compound Fields"
        },
        {
            "location": "/api-guide/fields/#drf-extra-fields",
            "text": "The  drf-extra-fields  package provides extra serializer fields for REST framework, including  Base64ImageField  and  PointField  classes.",
            "title": "DRF Extra Fields"
        },
        {
            "location": "/api-guide/fields/#djangrestframework-recursive",
            "text": "the  djangorestframework-recursive  package provides a  RecursiveField  for serializing and deserializing recursive structures",
            "title": "djangrestframework-recursive"
        },
        {
            "location": "/api-guide/fields/#django-rest-framework-gis",
            "text": "The  django-rest-framework-gis  package provides geographic addons for django rest framework like a   GeometryField  field and a GeoJSON serializer.",
            "title": "django-rest-framework-gis"
        },
        {
            "location": "/api-guide/fields/#django-rest-framework-hstore",
            "text": "The  django-rest-framework-hstore  package provides an  HStoreField  to support  django-hstore   DictionaryField  model field.",
            "title": "django-rest-framework-hstore"
        },
        {
            "location": "/api-guide/relations/",
            "text": "Serializer relations\n\n\n\n\nBad programmers worry about the code.\nGood programmers worry about data structures and their relationships.\n\n\n\u2014 \nLinus Torvalds\n\n\n\n\nRelational fields are used to represent model relationships.  They can be applied to \nForeignKey\n, \nManyToManyField\n and \nOneToOneField\n relationships, as well as to reverse relationships, and custom relationships such as \nGenericForeignKey\n.\n\n\n\n\nNote:\n The relational fields are declared in \nrelations.py\n, but by convention you should import them from the \nserializers\n module, using \nfrom rest_framework import serializers\n and refer to fields as \nserializers.<FieldName>\n.\n\n\n\n\nInspecting relationships.\n\n\nWhen using the \nModelSerializer\n class, serializer fields and relationships will be automatically generated for you. Inspecting these automatically generated fields can be a useful tool for determining how to customize the relationship style.\n\n\nTo do so, open the Django shell, using \npython manage.py shell\n, then import the serializer class, instantiate it, and print the object representation\u2026\n\n\n>>> from myapp.serializers import AccountSerializer\n>>> serializer = AccountSerializer()\n>>> print repr(serializer)  # Or `print(repr(serializer))` in Python 3.x.\nAccountSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    name = CharField(allow_blank=True, max_length=100, required=False)\n    owner = PrimaryKeyRelatedField(queryset=User.objects.all())\n\n\n\nAPI Reference\n\n\nIn order to explain the various types of relational fields, we'll use a couple of simple models for our examples.  Our models will be for music albums, and the tracks listed on each album.\n\n\nclass Album(models.Model):\n    album_name = models.CharField(max_length=100)\n    artist = models.CharField(max_length=100)\n\nclass Track(models.Model):\n    album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE)\n    order = models.IntegerField()\n    title = models.CharField(max_length=100)\n    duration = models.IntegerField()\n\n    class Meta:\n        unique_together = ('album', 'order')\n        ordering = ['order']\n\n    def __unicode__(self):\n        return '%d: %s' % (self.order, self.title)\n\n\n\nStringRelatedField\n\n\nStringRelatedField\n may be used to represent the target of the relationship using its \n__unicode__\n method.\n\n\nFor example, the following serializer.\n\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.StringRelatedField(many=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n\n\n\nWould serialize to the following representation.\n\n\n{\n    'album_name': 'Things We Lost In The Fire',\n    'artist': 'Low',\n    'tracks': [\n        '1: Sunflower',\n        '2: Whitetail',\n        '3: Dinosaur Act',\n        ...\n    ]\n}\n\n\n\nThis field is read only.\n\n\nArguments\n:\n\n\n\n\nmany\n - If applied to a to-many relationship, you should set this argument to \nTrue\n.\n\n\n\n\nPrimaryKeyRelatedField\n\n\nPrimaryKeyRelatedField\n may be used to represent the target of the relationship using its primary key.\n\n\nFor example, the following serializer:\n\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.PrimaryKeyRelatedField(many=True, read_only=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n\n\n\nWould serialize to a representation like this:\n\n\n{\n    'album_name': 'Undun',\n    'artist': 'The Roots',\n    'tracks': [\n        89,\n        90,\n        91,\n        ...\n    ]\n}\n\n\n\nBy default this field is read-write, although you can change this behavior using the \nread_only\n flag.\n\n\nArguments\n:\n\n\n\n\nqueryset\n - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set \nread_only=True\n.\n\n\nmany\n - If applied to a to-many relationship, you should set this argument to \nTrue\n.\n\n\nallow_null\n - If set to \nTrue\n, the field will accept values of \nNone\n or the empty string for nullable relationships. Defaults to \nFalse\n.\n\n\npk_field\n - Set to a field to control serialization/deserialization of the primary key's value. For example, \npk_field=UUIDField(format='hex')\n would serialize a UUID primary key into its compact hex representation.\n\n\n\n\nHyperlinkedRelatedField\n\n\nHyperlinkedRelatedField\n may be used to represent the target of the relationship using a hyperlink.\n\n\nFor example, the following serializer:\n\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.HyperlinkedRelatedField(\n        many=True,\n        read_only=True,\n        view_name='track-detail'\n    )\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n\n\n\nWould serialize to a representation like this:\n\n\n{\n    'album_name': 'Graceland',\n    'artist': 'Paul Simon',\n    'tracks': [\n        'http://www.example.com/api/tracks/45/',\n        'http://www.example.com/api/tracks/46/',\n        'http://www.example.com/api/tracks/47/',\n        ...\n    ]\n}\n\n\n\nBy default this field is read-write, although you can change this behavior using the \nread_only\n flag.\n\n\n\n\nNote\n: This field is designed for objects that map to a URL that accepts a single URL keyword argument, as set using the \nlookup_field\n and \nlookup_url_kwarg\n arguments.\n\n\nThis is suitable for URLs that contain a single primary key or slug argument as part of the URL.\n\n\nIf you require more complex hyperlinked representation you'll need to customize the field, as described in the \ncustom hyperlinked fields\n section, below.\n\n\n\n\nArguments\n:\n\n\n\n\nview_name\n - The view name that should be used as the target of the relationship.  If you're using \nthe standard router classes\n this will be a string with the format \n<modelname>-detail\n. \nrequired\n.\n\n\nqueryset\n - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set \nread_only=True\n.\n\n\nmany\n - If applied to a to-many relationship, you should set this argument to \nTrue\n.\n\n\nallow_null\n - If set to \nTrue\n, the field will accept values of \nNone\n or the empty string for nullable relationships. Defaults to \nFalse\n.\n\n\nlookup_field\n - The field on the target that should be used for the lookup.  Should correspond to a URL keyword argument on the referenced view.  Default is \n'pk'\n.\n\n\nlookup_url_kwarg\n - The name of the keyword argument defined in the URL conf that corresponds to the lookup field. Defaults to using the same value as \nlookup_field\n.\n\n\nformat\n - If using format suffixes, hyperlinked fields will use the same format suffix for the target unless overridden by using the \nformat\n argument.\n\n\n\n\nSlugRelatedField\n\n\nSlugRelatedField\n may be used to represent the target of the relationship using a field on the target.\n\n\nFor example, the following serializer:\n\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.SlugRelatedField(\n        many=True,\n        read_only=True,\n        slug_field='title'\n     )\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n\n\n\nWould serialize to a representation like this:\n\n\n{\n    'album_name': 'Dear John',\n    'artist': 'Loney Dear',\n    'tracks': [\n        'Airport Surroundings',\n        'Everything Turns to You',\n        'I Was Only Going Out',\n        ...\n    ]\n}\n\n\n\nBy default this field is read-write, although you can change this behavior using the \nread_only\n flag.\n\n\nWhen using \nSlugRelatedField\n as a read-write field, you will normally want to ensure that the slug field corresponds to a model field with \nunique=True\n.\n\n\nArguments\n:\n\n\n\n\nslug_field\n - The field on the target that should be used to represent it.  This should be a field that uniquely identifies any given instance.  For example, \nusername\n.  \nrequired\n\n\nqueryset\n - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set \nread_only=True\n.\n\n\nmany\n - If applied to a to-many relationship, you should set this argument to \nTrue\n.\n\n\nallow_null\n - If set to \nTrue\n, the field will accept values of \nNone\n or the empty string for nullable relationships. Defaults to \nFalse\n.\n\n\n\n\nHyperlinkedIdentityField\n\n\nThis field can be applied as an identity relationship, such as the \n'url'\n field on  a HyperlinkedModelSerializer.  It can also be used for an attribute on the object.  For example, the following serializer:\n\n\nclass AlbumSerializer(serializers.HyperlinkedModelSerializer):\n    track_listing = serializers.HyperlinkedIdentityField(view_name='track-list')\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'track_listing')\n\n\n\nWould serialize to a representation like this:\n\n\n{\n    'album_name': 'The Eraser',\n    'artist': 'Thom Yorke',\n    'track_listing': 'http://www.example.com/api/track_list/12/',\n}\n\n\n\nThis field is always read-only.\n\n\nArguments\n:\n\n\n\n\nview_name\n - The view name that should be used as the target of the relationship.  If you're using \nthe standard router classes\n this will be a string with the format \n<model_name>-detail\n.  \nrequired\n.\n\n\nlookup_field\n - The field on the target that should be used for the lookup.  Should correspond to a URL keyword argument on the referenced view.  Default is \n'pk'\n.\n\n\nlookup_url_kwarg\n - The name of the keyword argument defined in the URL conf that corresponds to the lookup field. Defaults to using the same value as \nlookup_field\n.\n\n\nformat\n - If using format suffixes, hyperlinked fields will use the same format suffix for the target unless overridden by using the \nformat\n argument.\n\n\n\n\n\n\nNested relationships\n\n\nNested relationships can be expressed by using serializers as fields.\n\n\nIf the field is used to represent a to-many relationship, you should add the \nmany=True\n flag to the serializer field.\n\n\nExample\n\n\nFor example, the following serializer:\n\n\nclass TrackSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Track\n        fields = ('order', 'title', 'duration')\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n\n\n\nWould serialize to a nested representation like this:\n\n\n>>> album = Album.objects.create(album_name=\"The Grey Album\", artist='Danger Mouse')\n>>> Track.objects.create(album=album, order=1, title='Public Service Announcement', duration=245)\n<Track: Track object>\n>>> Track.objects.create(album=album, order=2, title='What More Can I Say', duration=264)\n<Track: Track object>\n>>> Track.objects.create(album=album, order=3, title='Encore', duration=159)\n<Track: Track object>\n>>> serializer = AlbumSerializer(instance=album)\n>>> serializer.data\n{\n    'album_name': 'The Grey Album',\n    'artist': 'Danger Mouse',\n    'tracks': [\n        {'order': 1, 'title': 'Public Service Announcement', 'duration': 245},\n        {'order': 2, 'title': 'What More Can I Say', 'duration': 264},\n        {'order': 3, 'title': 'Encore', 'duration': 159},\n        ...\n    ],\n}\n\n\n\nWritable nested serializers\n\n\nBy default nested serializers are read-only. If you want to support write-operations to a nested serializer field you'll need to create \ncreate()\n and/or \nupdate()\n methods in order to explicitly specify how the child relationships should be saved.\n\n\nclass TrackSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Track\n        fields = ('order', 'title', 'duration')\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackSerializer(many=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n\n    def create(self, validated_data):\n        tracks_data = validated_data.pop('tracks')\n        album = Album.objects.create(**validated_data)\n        for track_data in tracks_data:\n            Track.objects.create(album=album, **track_data)\n        return album\n\n>>> data = {\n    'album_name': 'The Grey Album',\n    'artist': 'Danger Mouse',\n    'tracks': [\n        {'order': 1, 'title': 'Public Service Announcement', 'duration': 245},\n        {'order': 2, 'title': 'What More Can I Say', 'duration': 264},\n        {'order': 3, 'title': 'Encore', 'duration': 159},\n    ],\n}\n>>> serializer = AlbumSerializer(data=data)\n>>> serializer.is_valid()\nTrue\n>>> serializer.save()\n<Album: Album object>\n\n\n\n\n\nCustom relational fields\n\n\nIn rare cases where none of the existing relational styles fit the representation you need,\nyou can implement a completely custom relational field, that describes exactly how the\noutput representation should be generated from the model instance.\n\n\nTo implement a custom relational field, you should override \nRelatedField\n, and implement the \n.to_representation(self, value)\n method. This method takes the target of the field as the \nvalue\n argument, and should return the representation that should be used to serialize the target. The \nvalue\n argument will typically be a model instance.\n\n\nIf you want to implement a read-write relational field, you must also implement the \n.to_internal_value(self, data)\n method.\n\n\nTo provide a dynamic queryset based on the \ncontext\n, you can also override \n.get_queryset(self)\n instead of specifying \n.queryset\n on the class or when initializing the field.\n\n\nExample\n\n\nFor example, we could define a relational field to serialize a track to a custom string representation, using its ordering, title, and duration.\n\n\nimport time\n\nclass TrackListingField(serializers.RelatedField):\n    def to_representation(self, value):\n        duration = time.strftime('%M:%S', time.gmtime(value.duration))\n        return 'Track %d: %s (%s)' % (value.order, value.name, duration)\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackListingField(many=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n\n\n\nThis custom field would then serialize to the following representation.\n\n\n{\n    'album_name': 'Sometimes I Wish We Were an Eagle',\n    'artist': 'Bill Callahan',\n    'tracks': [\n        'Track 1: Jim Cain (04:39)',\n        'Track 2: Eid Ma Clack Shaw (04:19)',\n        'Track 3: The Wind and the Dove (04:34)',\n        ...\n    ]\n}\n\n\n\n\n\nCustom hyperlinked fields\n\n\nIn some cases you may need to customize the behavior of a hyperlinked field, in order to represent URLs that require more than a single lookup field.\n\n\nYou can achieve this by overriding \nHyperlinkedRelatedField\n. There are two methods that may be overridden:\n\n\nget_url(self, obj, view_name, request, format)\n\n\nThe \nget_url\n method is used to map the object instance to its URL representation.\n\n\nMay raise a \nNoReverseMatch\n if the \nview_name\n and \nlookup_field\n\nattributes are not configured to correctly match the URL conf.\n\n\nget_object(self, queryset, view_name, view_args, view_kwargs)\n\n\nIf you want to support a writable hyperlinked field then you'll also want to override \nget_object\n, in order to map incoming URLs back to the object they represent. For read-only hyperlinked fields there is no need to override this method.\n\n\nThe return value of this method should the object that corresponds to the matched URL conf arguments.\n\n\nMay raise an \nObjectDoesNotExist\n exception.\n\n\nExample\n\n\nSay we have a URL for a customer object that takes two keyword arguments, like so:\n\n\n/api/<organization_slug>/customers/<customer_pk>/\n\n\n\nThis cannot be represented with the default implementation, which accepts only a single lookup field.\n\n\nIn this case we'd need to override \nHyperlinkedRelatedField\n to get the behavior we want:\n\n\nfrom rest_framework import serializers\nfrom rest_framework.reverse import reverse\n\nclass CustomerHyperlink(serializers.HyperlinkedRelatedField):\n    # We define these as class attributes, so we don't need to pass them as arguments.\n    view_name = 'customer-detail'\n    queryset = Customer.objects.all()\n\n    def get_url(self, obj, view_name, request, format):\n        url_kwargs = {\n            'organization_slug': obj.organization.slug,\n            'customer_pk': obj.pk\n        }\n        return reverse(view_name, kwargs=url_kwargs, request=request, format=format)\n\n    def get_object(self, view_name, view_args, view_kwargs):\n        lookup_kwargs = {\n           'organization__slug': view_kwargs['organization_slug'],\n           'pk': view_kwargs['customer_pk']\n        }\n        return self.get_queryset().get(**lookup_kwargs)\n\n\n\nNote that if you wanted to use this style together with the generic views then you'd also need to override \n.get_object\n on the view in order to get the correct lookup behavior.\n\n\nGenerally we recommend a flat style for API representations where possible, but the nested URL style can also be reasonable when used in moderation.\n\n\n\n\nFurther notes\n\n\nThe \nqueryset\n argument\n\n\nThe \nqueryset\n argument is only ever required for \nwritable\n relationship field, in which case it is used for performing the model instance lookup, that maps from the primitive user input, into a model instance.\n\n\nIn version 2.x a serializer class could \nsometimes\n automatically determine the \nqueryset\n argument \nif\n a \nModelSerializer\n class was being used.\n\n\nThis behavior is now replaced with \nalways\n using an explicit \nqueryset\n argument for writable relational fields.\n\n\nDoing so reduces the amount of hidden 'magic' that \nModelSerializer\n provides, makes the behavior of the field more clear, and ensures that it is trivial to move between using the \nModelSerializer\n shortcut, or using fully explicit \nSerializer\n classes.\n\n\nCustomizing the HTML display\n\n\nThe built-in \n__str__\n method of the model will be used to generate string representations of the objects used to populate the \nchoices\n property. These choices are used to populate select HTML inputs in the browsable API.\n\n\nTo provide customized representations for such inputs, override \ndisplay_value()\n of a \nRelatedField\n subclass. This method will receive a model object, and should return a string suitable for representing it. For example:\n\n\nclass TrackPrimaryKeyRelatedField(serializers.PrimaryKeyRelatedField):\n    def display_value(self, instance):\n        return 'Track: %s' % (instance.title)\n\n\n\nSelect field cutoffs\n\n\nWhen rendered in the browsable API relational fields will default to only displaying a maximum of 1000 selectable items. If more items are present then a disabled option with \"More than 1000 items\u2026\" will be displayed.\n\n\nThis behavior is intended to prevent a template from being unable to render in an acceptable timespan due to a very large number of relationships being displayed.\n\n\nThere are two keyword arguments you can use to control this behavior:\n\n\n\n\nhtml_cutoff\n - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Set to \nNone\n to disable any limiting. Defaults to \n1000\n.\n\n\nhtml_cutoff_text\n - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to \n\"More than {count} items\u2026\"\n\n\n\n\nYou can also control these globally using the settings \nHTML_SELECT_CUTOFF\n and \nHTML_SELECT_CUTOFF_TEXT\n.\n\n\nIn cases where the cutoff is being enforced you may want to instead use a plain input field in the HTML form. You can do so using the \nstyle\n keyword argument. For example:\n\n\nassigned_to = serializers.SlugRelatedField(\n   queryset=User.objects.all(),\n   slug_field='username',\n   style={'base_template': 'input.html'}\n)\n\n\n\nReverse relations\n\n\nNote that reverse relationships are not automatically included by the \nModelSerializer\n and \nHyperlinkedModelSerializer\n classes.  To include a reverse relationship, you must explicitly add it to the fields list.  For example:\n\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    class Meta:\n        fields = ('tracks', ...)\n\n\n\nYou'll normally want to ensure that you've set an appropriate \nrelated_name\n argument on the relationship, that you can use as the field name.  For example:\n\n\nclass Track(models.Model):\n    album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE)\n    ...\n\n\n\nIf you have not set a related name for the reverse relationship, you'll need to use the automatically generated related name in the \nfields\n argument.  For example:\n\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    class Meta:\n        fields = ('track_set', ...)\n\n\n\nSee the Django documentation on \nreverse relationships\n for more details.\n\n\nGeneric relationships\n\n\nIf you want to serialize a generic foreign key, you need to define a custom field, to determine explicitly how you want to serialize the targets of the relationship.\n\n\nFor example, given the following model for a tag, which has a generic relationship with other arbitrary models:\n\n\nclass TaggedItem(models.Model):\n    \"\"\"\n    Tags arbitrary model instances using a generic relation.\n\n    See: https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/\n    \"\"\"\n    tag_name = models.SlugField()\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    tagged_object = GenericForeignKey('content_type', 'object_id')\n\n    def __unicode__(self):\n        return self.tag_name\n\n\n\nAnd the following two models, which may have associated tags:\n\n\nclass Bookmark(models.Model):\n    \"\"\"\n    A bookmark consists of a URL, and 0 or more descriptive tags.\n    \"\"\"\n    url = models.URLField()\n    tags = GenericRelation(TaggedItem)\n\n\nclass Note(models.Model):\n    \"\"\"\n    A note consists of some text, and 0 or more descriptive tags.\n    \"\"\"\n    text = models.CharField(max_length=1000)\n    tags = GenericRelation(TaggedItem)\n\n\n\nWe could define a custom field that could be used to serialize tagged instances, using the type of each instance to determine how it should be serialized.\n\n\nclass TaggedObjectRelatedField(serializers.RelatedField):\n    \"\"\"\n    A custom field to use for the `tagged_object` generic relationship.\n    \"\"\"\n\n    def to_representation(self, value):\n        \"\"\"\n        Serialize tagged objects to a simple textual representation.\n        \"\"\"\n        if isinstance(value, Bookmark):\n            return 'Bookmark: ' + value.url\n        elif isinstance(value, Note):\n            return 'Note: ' + value.text\n        raise Exception('Unexpected type of tagged object')\n\n\n\nIf you need the target of the relationship to have a nested representation, you can use the required serializers inside the \n.to_representation()\n method:\n\n\n    def to_representation(self, value):\n        \"\"\"\n        Serialize bookmark instances using a bookmark serializer,\n        and note instances using a note serializer.\n        \"\"\"\n        if isinstance(value, Bookmark):\n            serializer = BookmarkSerializer(value)\n        elif isinstance(value, Note):\n            serializer = NoteSerializer(value)\n        else:\n            raise Exception('Unexpected type of tagged object')\n\n        return serializer.data\n\n\n\nNote that reverse generic keys, expressed using the \nGenericRelation\n field, can be serialized using the regular relational field types, since the type of the target in the relationship is always known.\n\n\nFor more information see \nthe Django documentation on generic relations\n.\n\n\nManyToManyFields with a Through Model\n\n\nBy default, relational fields that target a \nManyToManyField\n with a\n\nthrough\n model specified are set to read-only.\n\n\nIf you explicitly specify a relational field pointing to a\n\nManyToManyField\n with a through model, be sure to set \nread_only\n\nto \nTrue\n.\n\n\n\n\nThird Party Packages\n\n\nThe following third party packages are also available.\n\n\nDRF Nested Routers\n\n\nThe \ndrf-nested-routers package\n provides routers and relationship fields for working with nested resources.\n\n\nRest Framework Generic Relations\n\n\nThe \nrest-framework-generic-relations\n library provides read/write serialization for generic foreign keys.",
            "title": "Serializer relations"
        },
        {
            "location": "/api-guide/relations/#serializer-relations",
            "text": "Bad programmers worry about the code.\nGood programmers worry about data structures and their relationships.  \u2014  Linus Torvalds   Relational fields are used to represent model relationships.  They can be applied to  ForeignKey ,  ManyToManyField  and  OneToOneField  relationships, as well as to reverse relationships, and custom relationships such as  GenericForeignKey .   Note:  The relational fields are declared in  relations.py , but by convention you should import them from the  serializers  module, using  from rest_framework import serializers  and refer to fields as  serializers.<FieldName> .",
            "title": "Serializer relations"
        },
        {
            "location": "/api-guide/relations/#inspecting-relationships",
            "text": "When using the  ModelSerializer  class, serializer fields and relationships will be automatically generated for you. Inspecting these automatically generated fields can be a useful tool for determining how to customize the relationship style.  To do so, open the Django shell, using  python manage.py shell , then import the serializer class, instantiate it, and print the object representation\u2026  >>> from myapp.serializers import AccountSerializer\n>>> serializer = AccountSerializer()\n>>> print repr(serializer)  # Or `print(repr(serializer))` in Python 3.x.\nAccountSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    name = CharField(allow_blank=True, max_length=100, required=False)\n    owner = PrimaryKeyRelatedField(queryset=User.objects.all())",
            "title": "Inspecting relationships."
        },
        {
            "location": "/api-guide/relations/#api-reference",
            "text": "In order to explain the various types of relational fields, we'll use a couple of simple models for our examples.  Our models will be for music albums, and the tracks listed on each album.  class Album(models.Model):\n    album_name = models.CharField(max_length=100)\n    artist = models.CharField(max_length=100)\n\nclass Track(models.Model):\n    album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE)\n    order = models.IntegerField()\n    title = models.CharField(max_length=100)\n    duration = models.IntegerField()\n\n    class Meta:\n        unique_together = ('album', 'order')\n        ordering = ['order']\n\n    def __unicode__(self):\n        return '%d: %s' % (self.order, self.title)",
            "title": "API Reference"
        },
        {
            "location": "/api-guide/relations/#stringrelatedfield",
            "text": "StringRelatedField  may be used to represent the target of the relationship using its  __unicode__  method.  For example, the following serializer.  class AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.StringRelatedField(many=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')  Would serialize to the following representation.  {\n    'album_name': 'Things We Lost In The Fire',\n    'artist': 'Low',\n    'tracks': [\n        '1: Sunflower',\n        '2: Whitetail',\n        '3: Dinosaur Act',\n        ...\n    ]\n}  This field is read only.  Arguments :   many  - If applied to a to-many relationship, you should set this argument to  True .",
            "title": "StringRelatedField"
        },
        {
            "location": "/api-guide/relations/#primarykeyrelatedfield",
            "text": "PrimaryKeyRelatedField  may be used to represent the target of the relationship using its primary key.  For example, the following serializer:  class AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.PrimaryKeyRelatedField(many=True, read_only=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')  Would serialize to a representation like this:  {\n    'album_name': 'Undun',\n    'artist': 'The Roots',\n    'tracks': [\n        89,\n        90,\n        91,\n        ...\n    ]\n}  By default this field is read-write, although you can change this behavior using the  read_only  flag.  Arguments :   queryset  - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set  read_only=True .  many  - If applied to a to-many relationship, you should set this argument to  True .  allow_null  - If set to  True , the field will accept values of  None  or the empty string for nullable relationships. Defaults to  False .  pk_field  - Set to a field to control serialization/deserialization of the primary key's value. For example,  pk_field=UUIDField(format='hex')  would serialize a UUID primary key into its compact hex representation.",
            "title": "PrimaryKeyRelatedField"
        },
        {
            "location": "/api-guide/relations/#hyperlinkedrelatedfield",
            "text": "HyperlinkedRelatedField  may be used to represent the target of the relationship using a hyperlink.  For example, the following serializer:  class AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.HyperlinkedRelatedField(\n        many=True,\n        read_only=True,\n        view_name='track-detail'\n    )\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')  Would serialize to a representation like this:  {\n    'album_name': 'Graceland',\n    'artist': 'Paul Simon',\n    'tracks': [\n        'http://www.example.com/api/tracks/45/',\n        'http://www.example.com/api/tracks/46/',\n        'http://www.example.com/api/tracks/47/',\n        ...\n    ]\n}  By default this field is read-write, although you can change this behavior using the  read_only  flag.   Note : This field is designed for objects that map to a URL that accepts a single URL keyword argument, as set using the  lookup_field  and  lookup_url_kwarg  arguments.  This is suitable for URLs that contain a single primary key or slug argument as part of the URL.  If you require more complex hyperlinked representation you'll need to customize the field, as described in the  custom hyperlinked fields  section, below.   Arguments :   view_name  - The view name that should be used as the target of the relationship.  If you're using  the standard router classes  this will be a string with the format  <modelname>-detail .  required .  queryset  - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set  read_only=True .  many  - If applied to a to-many relationship, you should set this argument to  True .  allow_null  - If set to  True , the field will accept values of  None  or the empty string for nullable relationships. Defaults to  False .  lookup_field  - The field on the target that should be used for the lookup.  Should correspond to a URL keyword argument on the referenced view.  Default is  'pk' .  lookup_url_kwarg  - The name of the keyword argument defined in the URL conf that corresponds to the lookup field. Defaults to using the same value as  lookup_field .  format  - If using format suffixes, hyperlinked fields will use the same format suffix for the target unless overridden by using the  format  argument.",
            "title": "HyperlinkedRelatedField"
        },
        {
            "location": "/api-guide/relations/#slugrelatedfield",
            "text": "SlugRelatedField  may be used to represent the target of the relationship using a field on the target.  For example, the following serializer:  class AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.SlugRelatedField(\n        many=True,\n        read_only=True,\n        slug_field='title'\n     )\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')  Would serialize to a representation like this:  {\n    'album_name': 'Dear John',\n    'artist': 'Loney Dear',\n    'tracks': [\n        'Airport Surroundings',\n        'Everything Turns to You',\n        'I Was Only Going Out',\n        ...\n    ]\n}  By default this field is read-write, although you can change this behavior using the  read_only  flag.  When using  SlugRelatedField  as a read-write field, you will normally want to ensure that the slug field corresponds to a model field with  unique=True .  Arguments :   slug_field  - The field on the target that should be used to represent it.  This should be a field that uniquely identifies any given instance.  For example,  username .   required  queryset  - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set  read_only=True .  many  - If applied to a to-many relationship, you should set this argument to  True .  allow_null  - If set to  True , the field will accept values of  None  or the empty string for nullable relationships. Defaults to  False .",
            "title": "SlugRelatedField"
        },
        {
            "location": "/api-guide/relations/#hyperlinkedidentityfield",
            "text": "This field can be applied as an identity relationship, such as the  'url'  field on  a HyperlinkedModelSerializer.  It can also be used for an attribute on the object.  For example, the following serializer:  class AlbumSerializer(serializers.HyperlinkedModelSerializer):\n    track_listing = serializers.HyperlinkedIdentityField(view_name='track-list')\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'track_listing')  Would serialize to a representation like this:  {\n    'album_name': 'The Eraser',\n    'artist': 'Thom Yorke',\n    'track_listing': 'http://www.example.com/api/track_list/12/',\n}  This field is always read-only.  Arguments :   view_name  - The view name that should be used as the target of the relationship.  If you're using  the standard router classes  this will be a string with the format  <model_name>-detail .   required .  lookup_field  - The field on the target that should be used for the lookup.  Should correspond to a URL keyword argument on the referenced view.  Default is  'pk' .  lookup_url_kwarg  - The name of the keyword argument defined in the URL conf that corresponds to the lookup field. Defaults to using the same value as  lookup_field .  format  - If using format suffixes, hyperlinked fields will use the same format suffix for the target unless overridden by using the  format  argument.",
            "title": "HyperlinkedIdentityField"
        },
        {
            "location": "/api-guide/relations/#nested-relationships",
            "text": "Nested relationships can be expressed by using serializers as fields.  If the field is used to represent a to-many relationship, you should add the  many=True  flag to the serializer field.",
            "title": "Nested relationships"
        },
        {
            "location": "/api-guide/relations/#example",
            "text": "For example, the following serializer:  class TrackSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Track\n        fields = ('order', 'title', 'duration')\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')  Would serialize to a nested representation like this:  >>> album = Album.objects.create(album_name=\"The Grey Album\", artist='Danger Mouse')\n>>> Track.objects.create(album=album, order=1, title='Public Service Announcement', duration=245)\n<Track: Track object>\n>>> Track.objects.create(album=album, order=2, title='What More Can I Say', duration=264)\n<Track: Track object>\n>>> Track.objects.create(album=album, order=3, title='Encore', duration=159)\n<Track: Track object>\n>>> serializer = AlbumSerializer(instance=album)\n>>> serializer.data\n{\n    'album_name': 'The Grey Album',\n    'artist': 'Danger Mouse',\n    'tracks': [\n        {'order': 1, 'title': 'Public Service Announcement', 'duration': 245},\n        {'order': 2, 'title': 'What More Can I Say', 'duration': 264},\n        {'order': 3, 'title': 'Encore', 'duration': 159},\n        ...\n    ],\n}",
            "title": "Example"
        },
        {
            "location": "/api-guide/relations/#writable-nested-serializers",
            "text": "By default nested serializers are read-only. If you want to support write-operations to a nested serializer field you'll need to create  create()  and/or  update()  methods in order to explicitly specify how the child relationships should be saved.  class TrackSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Track\n        fields = ('order', 'title', 'duration')\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackSerializer(many=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')\n\n    def create(self, validated_data):\n        tracks_data = validated_data.pop('tracks')\n        album = Album.objects.create(**validated_data)\n        for track_data in tracks_data:\n            Track.objects.create(album=album, **track_data)\n        return album\n\n>>> data = {\n    'album_name': 'The Grey Album',\n    'artist': 'Danger Mouse',\n    'tracks': [\n        {'order': 1, 'title': 'Public Service Announcement', 'duration': 245},\n        {'order': 2, 'title': 'What More Can I Say', 'duration': 264},\n        {'order': 3, 'title': 'Encore', 'duration': 159},\n    ],\n}\n>>> serializer = AlbumSerializer(data=data)\n>>> serializer.is_valid()\nTrue\n>>> serializer.save()\n<Album: Album object>",
            "title": "Writable nested serializers"
        },
        {
            "location": "/api-guide/relations/#custom-relational-fields",
            "text": "In rare cases where none of the existing relational styles fit the representation you need,\nyou can implement a completely custom relational field, that describes exactly how the\noutput representation should be generated from the model instance.  To implement a custom relational field, you should override  RelatedField , and implement the  .to_representation(self, value)  method. This method takes the target of the field as the  value  argument, and should return the representation that should be used to serialize the target. The  value  argument will typically be a model instance.  If you want to implement a read-write relational field, you must also implement the  .to_internal_value(self, data)  method.  To provide a dynamic queryset based on the  context , you can also override  .get_queryset(self)  instead of specifying  .queryset  on the class or when initializing the field.",
            "title": "Custom relational fields"
        },
        {
            "location": "/api-guide/relations/#example_1",
            "text": "For example, we could define a relational field to serialize a track to a custom string representation, using its ordering, title, and duration.  import time\n\nclass TrackListingField(serializers.RelatedField):\n    def to_representation(self, value):\n        duration = time.strftime('%M:%S', time.gmtime(value.duration))\n        return 'Track %d: %s (%s)' % (value.order, value.name, duration)\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackListingField(many=True)\n\n    class Meta:\n        model = Album\n        fields = ('album_name', 'artist', 'tracks')  This custom field would then serialize to the following representation.  {\n    'album_name': 'Sometimes I Wish We Were an Eagle',\n    'artist': 'Bill Callahan',\n    'tracks': [\n        'Track 1: Jim Cain (04:39)',\n        'Track 2: Eid Ma Clack Shaw (04:19)',\n        'Track 3: The Wind and the Dove (04:34)',\n        ...\n    ]\n}",
            "title": "Example"
        },
        {
            "location": "/api-guide/relations/#custom-hyperlinked-fields",
            "text": "In some cases you may need to customize the behavior of a hyperlinked field, in order to represent URLs that require more than a single lookup field.  You can achieve this by overriding  HyperlinkedRelatedField . There are two methods that may be overridden:  get_url(self, obj, view_name, request, format)  The  get_url  method is used to map the object instance to its URL representation.  May raise a  NoReverseMatch  if the  view_name  and  lookup_field \nattributes are not configured to correctly match the URL conf.  get_object(self, queryset, view_name, view_args, view_kwargs)  If you want to support a writable hyperlinked field then you'll also want to override  get_object , in order to map incoming URLs back to the object they represent. For read-only hyperlinked fields there is no need to override this method.  The return value of this method should the object that corresponds to the matched URL conf arguments.  May raise an  ObjectDoesNotExist  exception.",
            "title": "Custom hyperlinked fields"
        },
        {
            "location": "/api-guide/relations/#example_2",
            "text": "Say we have a URL for a customer object that takes two keyword arguments, like so:  /api/<organization_slug>/customers/<customer_pk>/  This cannot be represented with the default implementation, which accepts only a single lookup field.  In this case we'd need to override  HyperlinkedRelatedField  to get the behavior we want:  from rest_framework import serializers\nfrom rest_framework.reverse import reverse\n\nclass CustomerHyperlink(serializers.HyperlinkedRelatedField):\n    # We define these as class attributes, so we don't need to pass them as arguments.\n    view_name = 'customer-detail'\n    queryset = Customer.objects.all()\n\n    def get_url(self, obj, view_name, request, format):\n        url_kwargs = {\n            'organization_slug': obj.organization.slug,\n            'customer_pk': obj.pk\n        }\n        return reverse(view_name, kwargs=url_kwargs, request=request, format=format)\n\n    def get_object(self, view_name, view_args, view_kwargs):\n        lookup_kwargs = {\n           'organization__slug': view_kwargs['organization_slug'],\n           'pk': view_kwargs['customer_pk']\n        }\n        return self.get_queryset().get(**lookup_kwargs)  Note that if you wanted to use this style together with the generic views then you'd also need to override  .get_object  on the view in order to get the correct lookup behavior.  Generally we recommend a flat style for API representations where possible, but the nested URL style can also be reasonable when used in moderation.",
            "title": "Example"
        },
        {
            "location": "/api-guide/relations/#further-notes",
            "text": "",
            "title": "Further notes"
        },
        {
            "location": "/api-guide/relations/#the-queryset-argument",
            "text": "The  queryset  argument is only ever required for  writable  relationship field, in which case it is used for performing the model instance lookup, that maps from the primitive user input, into a model instance.  In version 2.x a serializer class could  sometimes  automatically determine the  queryset  argument  if  a  ModelSerializer  class was being used.  This behavior is now replaced with  always  using an explicit  queryset  argument for writable relational fields.  Doing so reduces the amount of hidden 'magic' that  ModelSerializer  provides, makes the behavior of the field more clear, and ensures that it is trivial to move between using the  ModelSerializer  shortcut, or using fully explicit  Serializer  classes.",
            "title": "The queryset argument"
        },
        {
            "location": "/api-guide/relations/#customizing-the-html-display",
            "text": "The built-in  __str__  method of the model will be used to generate string representations of the objects used to populate the  choices  property. These choices are used to populate select HTML inputs in the browsable API.  To provide customized representations for such inputs, override  display_value()  of a  RelatedField  subclass. This method will receive a model object, and should return a string suitable for representing it. For example:  class TrackPrimaryKeyRelatedField(serializers.PrimaryKeyRelatedField):\n    def display_value(self, instance):\n        return 'Track: %s' % (instance.title)",
            "title": "Customizing the HTML display"
        },
        {
            "location": "/api-guide/relations/#select-field-cutoffs",
            "text": "When rendered in the browsable API relational fields will default to only displaying a maximum of 1000 selectable items. If more items are present then a disabled option with \"More than 1000 items\u2026\" will be displayed.  This behavior is intended to prevent a template from being unable to render in an acceptable timespan due to a very large number of relationships being displayed.  There are two keyword arguments you can use to control this behavior:   html_cutoff  - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Set to  None  to disable any limiting. Defaults to  1000 .  html_cutoff_text  - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to  \"More than {count} items\u2026\"   You can also control these globally using the settings  HTML_SELECT_CUTOFF  and  HTML_SELECT_CUTOFF_TEXT .  In cases where the cutoff is being enforced you may want to instead use a plain input field in the HTML form. You can do so using the  style  keyword argument. For example:  assigned_to = serializers.SlugRelatedField(\n   queryset=User.objects.all(),\n   slug_field='username',\n   style={'base_template': 'input.html'}\n)",
            "title": "Select field cutoffs"
        },
        {
            "location": "/api-guide/relations/#reverse-relations",
            "text": "Note that reverse relationships are not automatically included by the  ModelSerializer  and  HyperlinkedModelSerializer  classes.  To include a reverse relationship, you must explicitly add it to the fields list.  For example:  class AlbumSerializer(serializers.ModelSerializer):\n    class Meta:\n        fields = ('tracks', ...)  You'll normally want to ensure that you've set an appropriate  related_name  argument on the relationship, that you can use as the field name.  For example:  class Track(models.Model):\n    album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE)\n    ...  If you have not set a related name for the reverse relationship, you'll need to use the automatically generated related name in the  fields  argument.  For example:  class AlbumSerializer(serializers.ModelSerializer):\n    class Meta:\n        fields = ('track_set', ...)  See the Django documentation on  reverse relationships  for more details.",
            "title": "Reverse relations"
        },
        {
            "location": "/api-guide/relations/#generic-relationships",
            "text": "If you want to serialize a generic foreign key, you need to define a custom field, to determine explicitly how you want to serialize the targets of the relationship.  For example, given the following model for a tag, which has a generic relationship with other arbitrary models:  class TaggedItem(models.Model):\n    \"\"\"\n    Tags arbitrary model instances using a generic relation.\n\n    See: https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/\n    \"\"\"\n    tag_name = models.SlugField()\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    tagged_object = GenericForeignKey('content_type', 'object_id')\n\n    def __unicode__(self):\n        return self.tag_name  And the following two models, which may have associated tags:  class Bookmark(models.Model):\n    \"\"\"\n    A bookmark consists of a URL, and 0 or more descriptive tags.\n    \"\"\"\n    url = models.URLField()\n    tags = GenericRelation(TaggedItem)\n\n\nclass Note(models.Model):\n    \"\"\"\n    A note consists of some text, and 0 or more descriptive tags.\n    \"\"\"\n    text = models.CharField(max_length=1000)\n    tags = GenericRelation(TaggedItem)  We could define a custom field that could be used to serialize tagged instances, using the type of each instance to determine how it should be serialized.  class TaggedObjectRelatedField(serializers.RelatedField):\n    \"\"\"\n    A custom field to use for the `tagged_object` generic relationship.\n    \"\"\"\n\n    def to_representation(self, value):\n        \"\"\"\n        Serialize tagged objects to a simple textual representation.\n        \"\"\"\n        if isinstance(value, Bookmark):\n            return 'Bookmark: ' + value.url\n        elif isinstance(value, Note):\n            return 'Note: ' + value.text\n        raise Exception('Unexpected type of tagged object')  If you need the target of the relationship to have a nested representation, you can use the required serializers inside the  .to_representation()  method:      def to_representation(self, value):\n        \"\"\"\n        Serialize bookmark instances using a bookmark serializer,\n        and note instances using a note serializer.\n        \"\"\"\n        if isinstance(value, Bookmark):\n            serializer = BookmarkSerializer(value)\n        elif isinstance(value, Note):\n            serializer = NoteSerializer(value)\n        else:\n            raise Exception('Unexpected type of tagged object')\n\n        return serializer.data  Note that reverse generic keys, expressed using the  GenericRelation  field, can be serialized using the regular relational field types, since the type of the target in the relationship is always known.  For more information see  the Django documentation on generic relations .",
            "title": "Generic relationships"
        },
        {
            "location": "/api-guide/relations/#manytomanyfields-with-a-through-model",
            "text": "By default, relational fields that target a  ManyToManyField  with a through  model specified are set to read-only.  If you explicitly specify a relational field pointing to a ManyToManyField  with a through model, be sure to set  read_only \nto  True .",
            "title": "ManyToManyFields with a Through Model"
        },
        {
            "location": "/api-guide/relations/#third-party-packages",
            "text": "The following third party packages are also available.",
            "title": "Third Party Packages"
        },
        {
            "location": "/api-guide/relations/#drf-nested-routers",
            "text": "The  drf-nested-routers package  provides routers and relationship fields for working with nested resources.",
            "title": "DRF Nested Routers"
        },
        {
            "location": "/api-guide/relations/#rest-framework-generic-relations",
            "text": "The  rest-framework-generic-relations  library provides read/write serialization for generic foreign keys.",
            "title": "Rest Framework Generic Relations"
        },
        {
            "location": "/api-guide/validators/",
            "text": "Validators\n\n\n\n\nValidators can be useful for re-using validation logic between different types of fields.\n\n\n\u2014 \nDjango documentation\n\n\n\n\nMost of the time you're dealing with validation in REST framework you'll simply be relying on the default field validation, or writing explicit validation methods on serializer or field classes.\n\n\nHowever, sometimes you'll want to place your validation logic into reusable components, so that it can easily be reused throughout your codebase. This can be achieved by using validator functions and validator classes.\n\n\nValidation in REST framework\n\n\nValidation in Django REST framework serializers is handled a little differently to how validation works in Django's \nModelForm\n class.\n\n\nWith \nModelForm\n the validation is performed partially on the form, and partially on the model instance. With REST framework the validation is performed entirely on the serializer class. This is advantageous for the following reasons:\n\n\n\n\nIt introduces a proper separation of concerns, making your code behavior more obvious.\n\n\nIt is easy to switch between using shortcut \nModelSerializer\n classes and using  explicit \nSerializer\n classes. Any validation behavior being used for \nModelSerializer\n is simple to replicate.\n\n\nPrinting the \nrepr\n of a serializer instance will show you exactly what validation rules it applies. There's no extra hidden validation behavior being called on the model instance.\n\n\n\n\nWhen you're using \nModelSerializer\n all of this is handled automatically for you. If you want to drop down to using \nSerializer\n classes instead, then you need to define the validation rules explicitly.\n\n\nExample\n\n\nAs an example of how REST framework uses explicit validation, we'll take a simple model class that has a field with a uniqueness constraint.\n\n\nclass CustomerReportRecord(models.Model):\n    time_raised = models.DateTimeField(default=timezone.now, editable=False)\n    reference = models.CharField(unique=True, max_length=20)\n    description = models.TextField()\n\n\n\nHere's a basic \nModelSerializer\n that we can use for creating or updating instances of \nCustomerReportRecord\n:\n\n\nclass CustomerReportSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomerReportRecord\n\n\n\nIf we open up the Django shell using \nmanage.py shell\n we can now\n\n\n>>> from project.example.serializers import CustomerReportSerializer\n>>> serializer = CustomerReportSerializer()\n>>> print(repr(serializer))\nCustomerReportSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    time_raised = DateTimeField(read_only=True)\n    reference = CharField(max_length=20, validators=[<UniqueValidator(queryset=CustomerReportRecord.objects.all())>])\n    description = CharField(style={'type': 'textarea'})\n\n\n\nThe interesting bit here is the \nreference\n field. We can see that the uniqueness constraint is being explicitly enforced by a validator on the serializer field.\n\n\nBecause of this more explicit style REST framework includes a few validator classes that are not available in core Django. These classes are detailed below.\n\n\n\n\nUniqueValidator\n\n\nThis validator can be used to enforce the \nunique=True\n constraint on model fields.\nIt takes a single required argument, and an optional \nmessages\n argument:\n\n\n\n\nqueryset\n \nrequired\n - This is the queryset against which uniqueness should be enforced.\n\n\nmessage\n - The error message that should be used when validation fails.\n\n\nlookup\n - The lookup used to find an existing instance with the value being validated. Defaults to \n'exact'\n.\n\n\n\n\nThis validator should be applied to \nserializer fields\n, like so:\n\n\nfrom rest_framework.validators import UniqueValidator\n\nslug = SlugField(\n    max_length=100,\n    validators=[UniqueValidator(queryset=BlogPost.objects.all())]\n)\n\n\n\nUniqueTogetherValidator\n\n\nThis validator can be used to enforce \nunique_together\n constraints on model instances.\nIt has two required arguments, and a single optional \nmessages\n argument:\n\n\n\n\nqueryset\n \nrequired\n - This is the queryset against which uniqueness should be enforced.\n\n\nfields\n \nrequired\n - A list or tuple of field names which should make a unique set. These must exist as fields on the serializer class.\n\n\nmessage\n - The error message that should be used when validation fails.\n\n\n\n\nThe validator should be applied to \nserializer classes\n, like so:\n\n\nfrom rest_framework.validators import UniqueTogetherValidator\n\nclass ExampleSerializer(serializers.Serializer):\n    # ...\n    class Meta:\n        # ToDo items belong to a parent list, and have an ordering defined\n        #\u00a0by the 'position' field. No two items in a given list may share\n        # the same position.\n        validators = [\n            UniqueTogetherValidator(\n                queryset=ToDoItem.objects.all(),\n                fields=('list', 'position')\n            )\n        ]\n\n\n\n\n\nNote\n: The \nUniqueTogetherValidation\n class always imposes an implicit constraint that all the fields it applies to are always treated as required. Fields with \ndefault\n values are an exception to this as they always supply a value even when omitted from user input.\n\n\n\n\nUniqueForDateValidator\n\n\nUniqueForMonthValidator\n\n\nUniqueForYearValidator\n\n\nThese validators can be used to enforce the \nunique_for_date\n, \nunique_for_month\n and \nunique_for_year\n constraints on model instances. They take the following arguments:\n\n\n\n\nqueryset\n \nrequired\n - This is the queryset against which uniqueness should be enforced.\n\n\nfield\n \nrequired\n - A field name against which uniqueness in the given date range will be validated. This must exist as a field on the serializer class.\n\n\ndate_field\n \nrequired\n - A field name which will be used to determine date range for the uniqueness constrain. This must exist as a field on the serializer class.\n\n\nmessage\n - The error message that should be used when validation fails.\n\n\n\n\nThe validator should be applied to \nserializer classes\n, like so:\n\n\nfrom rest_framework.validators import UniqueForYearValidator\n\nclass ExampleSerializer(serializers.Serializer):\n    # ...\n    class Meta:\n        # Blog posts should have a slug that is unique for the current year.\n        validators = [\n            UniqueForYearValidator(\n                queryset=BlogPostItem.objects.all(),\n                field='slug',\n                date_field='published'\n            )\n        ]\n\n\n\nThe date field that is used for the validation is always required to be present on the serializer class. You can't simply rely on a model class \ndefault=...\n, because the value being used for the default wouldn't be generated until after the validation has run.\n\n\nThere are a couple of styles you may want to use for this depending on how you want your API to behave. If you're using \nModelSerializer\n you'll probably simply rely on the defaults that REST framework generates for you, but if you are using \nSerializer\n or simply want more explicit control, use on of the styles demonstrated below.\n\n\nUsing with a writable date field.\n\n\nIf you want the date field to be writable the only thing worth noting is that you should ensure that it is always available in the input data, either by setting a \ndefault\n argument, or by setting \nrequired=True\n.\n\n\npublished = serializers.DateTimeField(required=True)\n\n\n\nUsing with a read-only date field.\n\n\nIf you want the date field to be visible, but not editable by the user, then set \nread_only=True\n and additionally set a \ndefault=...\n argument.\n\n\npublished = serializers.DateTimeField(read_only=True, default=timezone.now)\n\n\n\nThe field will not be writable to the user, but the default value will still be passed through to the \nvalidated_data\n.\n\n\nUsing with a hidden date field.\n\n\nIf you want the date field to be entirely hidden from the user, then use \nHiddenField\n. This field type does not accept user input, but instead always returns its default value to the \nvalidated_data\n in the serializer.\n\n\npublished = serializers.HiddenField(default=timezone.now)\n\n\n\n\n\nNote\n: The \nUniqueFor<Range>Validation\n classes impose an implicit constraint that the fields they are applied to are always treated as required. Fields with \ndefault\n values are an exception to this as they always supply a value even when omitted from user input.\n\n\n\n\nAdvanced field defaults\n\n\nValidators that are applied across multiple fields in the serializer can sometimes require a field input that should not be provided by the API client, but that \nis\n available as input to the validator.\n\n\nTwo patterns that you may want to use for this sort of validation include:\n\n\n\n\nUsing \nHiddenField\n. This field will be present in \nvalidated_data\n but \nwill not\n be used in the serializer output representation.\n\n\nUsing a standard field with \nread_only=True\n, but that also includes a \ndefault=\u2026\n argument. This field \nwill\n be used in the serializer output representation, but cannot be set directly by the user.\n\n\n\n\nREST framework includes a couple of defaults that may be useful in this context.\n\n\nCurrentUserDefault\n\n\nA default class that can be used to represent the current user. In order to use this, the 'request' must have been provided as part of the context dictionary when instantiating the serializer.\n\n\nowner = serializers.HiddenField(\n    default=serializers.CurrentUserDefault()\n)\n\n\n\nCreateOnlyDefault\n\n\nA default class that can be used to \nonly set a default argument during create operations\n. During updates the field is omitted.\n\n\nIt takes a single argument, which is the default value or callable that should be used during create operations.\n\n\ncreated_at = serializers.DateTimeField(\n    read_only=True,\n    default=serializers.CreateOnlyDefault(timezone.now)\n)\n\n\n\n\n\nLimitations of validators\n\n\nThere are some ambiguous cases where you'll need to instead handle validation\nexplicitly, rather than relying on the default serializer classes that\n\nModelSerializer\n generates.\n\n\nIn these cases you may want to disable the automatically generated validators,\nby specifying an empty list for the serializer \nMeta.validators\n attribute.\n\n\nOptional fields\n\n\nBy default \"unique together\" validation enforces that all fields be\n\nrequired=True\n. In some cases, you might want to explicit apply\n\nrequired=False\n to one of the fields, in which case the desired behaviour\nof the validation is ambiguous.\n\n\nIn this case you will typically need to exclude the validator from the\nserializer class, and instead write any validation logic explicitly, either\nin the \n.validate()\n method, or else in the view.\n\n\nFor example:\n\n\nclass BillingRecordSerializer(serializers.ModelSerializer):\n    def validate(self, data):\n        # Apply custom validation either here, or in the view.\n\n    class Meta:\n        fields = ('client', 'date', 'amount')\n        extra_kwargs = {'client': {'required': 'False'}}\n        validators = []  # Remove a default \"unique together\" constraint.\n\n\n\nUpdating nested serializers\n\n\nWhen applying an update to an existing instance, uniqueness validators will\nexclude the current instance from the uniqueness check. The current instance\nis available in the context of the uniqueness check, because it exists as\nan attribute on the serializer, having initially been passed using\n\ninstance=...\n when instantiating the serializer.\n\n\nIn the case of update operations on \nnested\n serializers there's no way of\napplying this exclusion, because the instance is not available.\n\n\nAgain, you'll probably want to explicitly remove the validator from the\nserializer class, and write the code the for the validation constraint\nexplicitly, in a \n.validate()\n method, or in the view.\n\n\nDebugging complex cases\n\n\nIf you're not sure exactly what behavior a \nModelSerializer\n class will\ngenerate it is usually a good idea to run \nmanage.py shell\n, and print\nan instance of the serializer, so that you can inspect the fields and\nvalidators that it automatically generates for you.\n\n\n>>> serializer = MyComplexModelSerializer()\n>>> print(serializer)\nclass MyComplexModelSerializer:\n    my_fields = ...\n\n\n\nAlso keep in mind that with complex cases it can often be better to explicitly\ndefine your serializer classes, rather than relying on the default\n\nModelSerializer\n behavior. This involves a little more code, but ensures\nthat the resulting behavior is more transparent.\n\n\n\n\nWriting custom validators\n\n\nYou can use any of Django's existing validators, or write your own custom validators.\n\n\nFunction based\n\n\nA validator may be any callable that raises a \nserializers.ValidationError\n on failure.\n\n\ndef even_number(value):\n    if value % 2 != 0:\n        raise serializers.ValidationError('This field must be an even number.')\n\n\n\nField-level validation\n\n\nYou can specify custom field-level validation by adding \n.validate_<field_name>\n methods\nto your \nSerializer\n subclass. This is documented in the\n\nSerializer docs\n\n\nClass-based\n\n\nTo write a class-based validator, use the \n__call__\n method. Class-based validators are useful as they allow you to parameterize and reuse behavior.\n\n\nclass MultipleOf(object):\n    def __init__(self, base):\n        self.base = base\n\n    def __call__(self, value):\n        if value % self.base != 0:\n            message = 'This field must be a multiple of %d.' % self.base\n            raise serializers.ValidationError(message)\n\n\n\nUsing \nset_context()\n\n\nIn some advanced cases you might want a validator to be passed the serializer field it is being used with as additional context. You can do so by declaring a \nset_context\n method on a class-based validator.\n\n\ndef set_context(self, serializer_field):\n    # Determine if this is an update or a create operation.\n    # In `__call__` we can then use that information to modify the validation behavior.\n    self.is_update = serializer_field.parent.instance is not None",
            "title": "Validators"
        },
        {
            "location": "/api-guide/validators/#validators",
            "text": "Validators can be useful for re-using validation logic between different types of fields.  \u2014  Django documentation   Most of the time you're dealing with validation in REST framework you'll simply be relying on the default field validation, or writing explicit validation methods on serializer or field classes.  However, sometimes you'll want to place your validation logic into reusable components, so that it can easily be reused throughout your codebase. This can be achieved by using validator functions and validator classes.",
            "title": "Validators"
        },
        {
            "location": "/api-guide/validators/#validation-in-rest-framework",
            "text": "Validation in Django REST framework serializers is handled a little differently to how validation works in Django's  ModelForm  class.  With  ModelForm  the validation is performed partially on the form, and partially on the model instance. With REST framework the validation is performed entirely on the serializer class. This is advantageous for the following reasons:   It introduces a proper separation of concerns, making your code behavior more obvious.  It is easy to switch between using shortcut  ModelSerializer  classes and using  explicit  Serializer  classes. Any validation behavior being used for  ModelSerializer  is simple to replicate.  Printing the  repr  of a serializer instance will show you exactly what validation rules it applies. There's no extra hidden validation behavior being called on the model instance.   When you're using  ModelSerializer  all of this is handled automatically for you. If you want to drop down to using  Serializer  classes instead, then you need to define the validation rules explicitly.",
            "title": "Validation in REST framework"
        },
        {
            "location": "/api-guide/validators/#example",
            "text": "As an example of how REST framework uses explicit validation, we'll take a simple model class that has a field with a uniqueness constraint.  class CustomerReportRecord(models.Model):\n    time_raised = models.DateTimeField(default=timezone.now, editable=False)\n    reference = models.CharField(unique=True, max_length=20)\n    description = models.TextField()  Here's a basic  ModelSerializer  that we can use for creating or updating instances of  CustomerReportRecord :  class CustomerReportSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomerReportRecord  If we open up the Django shell using  manage.py shell  we can now  >>> from project.example.serializers import CustomerReportSerializer\n>>> serializer = CustomerReportSerializer()\n>>> print(repr(serializer))\nCustomerReportSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    time_raised = DateTimeField(read_only=True)\n    reference = CharField(max_length=20, validators=[<UniqueValidator(queryset=CustomerReportRecord.objects.all())>])\n    description = CharField(style={'type': 'textarea'})  The interesting bit here is the  reference  field. We can see that the uniqueness constraint is being explicitly enforced by a validator on the serializer field.  Because of this more explicit style REST framework includes a few validator classes that are not available in core Django. These classes are detailed below.",
            "title": "Example"
        },
        {
            "location": "/api-guide/validators/#uniquevalidator",
            "text": "This validator can be used to enforce the  unique=True  constraint on model fields.\nIt takes a single required argument, and an optional  messages  argument:   queryset   required  - This is the queryset against which uniqueness should be enforced.  message  - The error message that should be used when validation fails.  lookup  - The lookup used to find an existing instance with the value being validated. Defaults to  'exact' .   This validator should be applied to  serializer fields , like so:  from rest_framework.validators import UniqueValidator\n\nslug = SlugField(\n    max_length=100,\n    validators=[UniqueValidator(queryset=BlogPost.objects.all())]\n)",
            "title": "UniqueValidator"
        },
        {
            "location": "/api-guide/validators/#uniquetogethervalidator",
            "text": "This validator can be used to enforce  unique_together  constraints on model instances.\nIt has two required arguments, and a single optional  messages  argument:   queryset   required  - This is the queryset against which uniqueness should be enforced.  fields   required  - A list or tuple of field names which should make a unique set. These must exist as fields on the serializer class.  message  - The error message that should be used when validation fails.   The validator should be applied to  serializer classes , like so:  from rest_framework.validators import UniqueTogetherValidator\n\nclass ExampleSerializer(serializers.Serializer):\n    # ...\n    class Meta:\n        # ToDo items belong to a parent list, and have an ordering defined\n        #\u00a0by the 'position' field. No two items in a given list may share\n        # the same position.\n        validators = [\n            UniqueTogetherValidator(\n                queryset=ToDoItem.objects.all(),\n                fields=('list', 'position')\n            )\n        ]   Note : The  UniqueTogetherValidation  class always imposes an implicit constraint that all the fields it applies to are always treated as required. Fields with  default  values are an exception to this as they always supply a value even when omitted from user input.",
            "title": "UniqueTogetherValidator"
        },
        {
            "location": "/api-guide/validators/#uniquefordatevalidator",
            "text": "",
            "title": "UniqueForDateValidator"
        },
        {
            "location": "/api-guide/validators/#uniqueformonthvalidator",
            "text": "",
            "title": "UniqueForMonthValidator"
        },
        {
            "location": "/api-guide/validators/#uniqueforyearvalidator",
            "text": "These validators can be used to enforce the  unique_for_date ,  unique_for_month  and  unique_for_year  constraints on model instances. They take the following arguments:   queryset   required  - This is the queryset against which uniqueness should be enforced.  field   required  - A field name against which uniqueness in the given date range will be validated. This must exist as a field on the serializer class.  date_field   required  - A field name which will be used to determine date range for the uniqueness constrain. This must exist as a field on the serializer class.  message  - The error message that should be used when validation fails.   The validator should be applied to  serializer classes , like so:  from rest_framework.validators import UniqueForYearValidator\n\nclass ExampleSerializer(serializers.Serializer):\n    # ...\n    class Meta:\n        # Blog posts should have a slug that is unique for the current year.\n        validators = [\n            UniqueForYearValidator(\n                queryset=BlogPostItem.objects.all(),\n                field='slug',\n                date_field='published'\n            )\n        ]  The date field that is used for the validation is always required to be present on the serializer class. You can't simply rely on a model class  default=... , because the value being used for the default wouldn't be generated until after the validation has run.  There are a couple of styles you may want to use for this depending on how you want your API to behave. If you're using  ModelSerializer  you'll probably simply rely on the defaults that REST framework generates for you, but if you are using  Serializer  or simply want more explicit control, use on of the styles demonstrated below.",
            "title": "UniqueForYearValidator"
        },
        {
            "location": "/api-guide/validators/#using-with-a-writable-date-field",
            "text": "If you want the date field to be writable the only thing worth noting is that you should ensure that it is always available in the input data, either by setting a  default  argument, or by setting  required=True .  published = serializers.DateTimeField(required=True)",
            "title": "Using with a writable date field."
        },
        {
            "location": "/api-guide/validators/#using-with-a-read-only-date-field",
            "text": "If you want the date field to be visible, but not editable by the user, then set  read_only=True  and additionally set a  default=...  argument.  published = serializers.DateTimeField(read_only=True, default=timezone.now)  The field will not be writable to the user, but the default value will still be passed through to the  validated_data .",
            "title": "Using with a read-only date field."
        },
        {
            "location": "/api-guide/validators/#using-with-a-hidden-date-field",
            "text": "If you want the date field to be entirely hidden from the user, then use  HiddenField . This field type does not accept user input, but instead always returns its default value to the  validated_data  in the serializer.  published = serializers.HiddenField(default=timezone.now)   Note : The  UniqueFor<Range>Validation  classes impose an implicit constraint that the fields they are applied to are always treated as required. Fields with  default  values are an exception to this as they always supply a value even when omitted from user input.",
            "title": "Using with a hidden date field."
        },
        {
            "location": "/api-guide/validators/#advanced-field-defaults",
            "text": "Validators that are applied across multiple fields in the serializer can sometimes require a field input that should not be provided by the API client, but that  is  available as input to the validator.  Two patterns that you may want to use for this sort of validation include:   Using  HiddenField . This field will be present in  validated_data  but  will not  be used in the serializer output representation.  Using a standard field with  read_only=True , but that also includes a  default=\u2026  argument. This field  will  be used in the serializer output representation, but cannot be set directly by the user.   REST framework includes a couple of defaults that may be useful in this context.",
            "title": "Advanced field defaults"
        },
        {
            "location": "/api-guide/validators/#currentuserdefault",
            "text": "A default class that can be used to represent the current user. In order to use this, the 'request' must have been provided as part of the context dictionary when instantiating the serializer.  owner = serializers.HiddenField(\n    default=serializers.CurrentUserDefault()\n)",
            "title": "CurrentUserDefault"
        },
        {
            "location": "/api-guide/validators/#createonlydefault",
            "text": "A default class that can be used to  only set a default argument during create operations . During updates the field is omitted.  It takes a single argument, which is the default value or callable that should be used during create operations.  created_at = serializers.DateTimeField(\n    read_only=True,\n    default=serializers.CreateOnlyDefault(timezone.now)\n)",
            "title": "CreateOnlyDefault"
        },
        {
            "location": "/api-guide/validators/#limitations-of-validators",
            "text": "There are some ambiguous cases where you'll need to instead handle validation\nexplicitly, rather than relying on the default serializer classes that ModelSerializer  generates.  In these cases you may want to disable the automatically generated validators,\nby specifying an empty list for the serializer  Meta.validators  attribute.",
            "title": "Limitations of validators"
        },
        {
            "location": "/api-guide/validators/#optional-fields",
            "text": "By default \"unique together\" validation enforces that all fields be required=True . In some cases, you might want to explicit apply required=False  to one of the fields, in which case the desired behaviour\nof the validation is ambiguous.  In this case you will typically need to exclude the validator from the\nserializer class, and instead write any validation logic explicitly, either\nin the  .validate()  method, or else in the view.  For example:  class BillingRecordSerializer(serializers.ModelSerializer):\n    def validate(self, data):\n        # Apply custom validation either here, or in the view.\n\n    class Meta:\n        fields = ('client', 'date', 'amount')\n        extra_kwargs = {'client': {'required': 'False'}}\n        validators = []  # Remove a default \"unique together\" constraint.",
            "title": "Optional fields"
        },
        {
            "location": "/api-guide/validators/#updating-nested-serializers",
            "text": "When applying an update to an existing instance, uniqueness validators will\nexclude the current instance from the uniqueness check. The current instance\nis available in the context of the uniqueness check, because it exists as\nan attribute on the serializer, having initially been passed using instance=...  when instantiating the serializer.  In the case of update operations on  nested  serializers there's no way of\napplying this exclusion, because the instance is not available.  Again, you'll probably want to explicitly remove the validator from the\nserializer class, and write the code the for the validation constraint\nexplicitly, in a  .validate()  method, or in the view.",
            "title": "Updating nested serializers"
        },
        {
            "location": "/api-guide/validators/#debugging-complex-cases",
            "text": "If you're not sure exactly what behavior a  ModelSerializer  class will\ngenerate it is usually a good idea to run  manage.py shell , and print\nan instance of the serializer, so that you can inspect the fields and\nvalidators that it automatically generates for you.  >>> serializer = MyComplexModelSerializer()\n>>> print(serializer)\nclass MyComplexModelSerializer:\n    my_fields = ...  Also keep in mind that with complex cases it can often be better to explicitly\ndefine your serializer classes, rather than relying on the default ModelSerializer  behavior. This involves a little more code, but ensures\nthat the resulting behavior is more transparent.",
            "title": "Debugging complex cases"
        },
        {
            "location": "/api-guide/validators/#writing-custom-validators",
            "text": "You can use any of Django's existing validators, or write your own custom validators.",
            "title": "Writing custom validators"
        },
        {
            "location": "/api-guide/validators/#function-based",
            "text": "A validator may be any callable that raises a  serializers.ValidationError  on failure.  def even_number(value):\n    if value % 2 != 0:\n        raise serializers.ValidationError('This field must be an even number.')",
            "title": "Function based"
        },
        {
            "location": "/api-guide/validators/#field-level-validation",
            "text": "You can specify custom field-level validation by adding  .validate_<field_name>  methods\nto your  Serializer  subclass. This is documented in the Serializer docs",
            "title": "Field-level validation"
        },
        {
            "location": "/api-guide/validators/#class-based",
            "text": "To write a class-based validator, use the  __call__  method. Class-based validators are useful as they allow you to parameterize and reuse behavior.  class MultipleOf(object):\n    def __init__(self, base):\n        self.base = base\n\n    def __call__(self, value):\n        if value % self.base != 0:\n            message = 'This field must be a multiple of %d.' % self.base\n            raise serializers.ValidationError(message)",
            "title": "Class-based"
        },
        {
            "location": "/api-guide/validators/#using-set_context",
            "text": "In some advanced cases you might want a validator to be passed the serializer field it is being used with as additional context. You can do so by declaring a  set_context  method on a class-based validator.  def set_context(self, serializer_field):\n    # Determine if this is an update or a create operation.\n    # In `__call__` we can then use that information to modify the validation behavior.\n    self.is_update = serializer_field.parent.instance is not None",
            "title": "Using set_context()"
        },
        {
            "location": "/api-guide/authentication_zh/",
            "text": "\u8ba4\u8bc1\n\n\n\n\n\u8eab\u4efd\u9a8c\u8bc1\u529f\u80fd\u9700\u8981\u53ef\u63d2\u62d4\u3002\n\n\n\u2014 Jacob Kaplan-Moss, \n\"REST worst practices\"\n\n\n\n\n\u8eab\u4efd\u9a8c\u8bc1\u662f\u5c06\u4f20\u5165\u8bf7\u6c42\u4e0e\u4e00\u7ec4\u6807\u8bc6\u51ed\u636e\uff08\u4f8b\u5982\u8bf7\u6c42\u6765\u81ea\u7684\u7528\u6237\u6216\u5176\u7b7e\u540d\u7684\u4ee4\u724c\uff09\u76f8\u5173\u8054\u7684\u673a\u5236\u3002\u7136\u540e\uff0c\n\u6743\u9650\n \u548c \n\u9650\u5236\n \u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u51ed\u636e\u6765\u786e\u5b9a\u662f\u5426\u5e94\u5141\u8bb8\u8be5\u8bf7\u6c42\u3002\n\n\nREST framework \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u5e76\u4e14\u8fd8\u5141\u8bb8\u4f60\u5b9e\u73b0\u81ea\u5b9a\u4e49\u65b9\u6848\u3002\n\n\n\u9a8c\u8bc1\u59cb\u7ec8\u5728\u89c6\u56fe\u7684\u6700\u5f00\u59cb\u8fdb\u884c\uff0c\u5728\u6267\u884c\u6743\u9650\u548c\u9650\u5236\u68c0\u67e5\u4e4b\u524d\u4ee5\u53ca\u5141\u8bb8\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\u4e4b\u524d\u3002\n\n\nrequest.user\n \u5c5e\u6027\u901a\u5e38\u88ab\u8bbe\u7f6e\u4e3a\ncontrib.auth\n \u5305\u4e2d \nUser\n \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\n\n\nrequest.auth\n \u5c5e\u6027\u7528\u4e8e\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\uff0c\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u8bf7\u6c42\u7b7e\u540d\u7684\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u3002\n\n\n\n\n\u6ce8\u610f\uff1a\n \u4e0d\u8981\u5fd8\u4e86\n\u8ba4\u8bc1\u672c\u8eab\u4e0d\u4f1a\u5141\u8bb8\u6216\u62d2\u7edd\u4f20\u5165\u7684\u8bf7\u6c42\n\uff0c\u5b83\u53ea\u662f\u7b80\u5355\u8bc6\u522b\u8bf7\u6c42\u643a\u5e26\u7684\u51ed\u8bc1\u3002\n\n\n\u6709\u5173\u5982\u4f55\u8bbe\u7f6eAPI\u6743\u9650\u7b56\u7565\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \n\u6743\u9650\u6587\u6863\n\u3002\n\n\n\n\n\u5982\u4f55\u786e\u5b9a\u8eab\u4efd\u9a8c\u8bc1\n\n\n\u8ba4\u8bc1\u65b9\u6848\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7c7b\u7684\u5217\u8868\u3002REST framework \u5c06\u5c1d\u8bd5\u4f7f\u7528\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7c7b\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4f7f\u7528\u6210\u529f\u5b8c\u6210\u9a8c\u8bc1\u7684\u7b2c\u4e00\u4e2a\u7c7b\u7684\u8fd4\u56de\u503c\u8bbe\u7f6e \nrequest.user\n \u548c\nrequest.auth\n\u3002\n\n\n\u5982\u679c\u6ca1\u6709\u7c7b\u8fdb\u884c\u9a8c\u8bc1\uff0c\nrequest.user\n \u5c06\u88ab\u8bbe\u7f6e\u6210 \ndjango.contrib.auth.models.AnonymousUser\n\u7684\u5b9e\u4f8b\uff0c\nrequest.auth\n \u5c06\u88ab\u8bbe\u7f6e\u6210\nNone\n\u3002\n\n\n\u672a\u8ba4\u8bc1\u8bf7\u6c42\u7684\nrequest.user\n \u548c \nrequest.auth\n \u7684\u503c\u53ef\u4ee5\u4f7f\u7528 \nUNAUTHENTICATED_USER\n\u548c\nUNAUTHENTICATED_TOKEN\n \u8bbe\u7f6e\u8fdb\u884c\u4fee\u6539\u3002\n\n\n\u8bbe\u7f6e\u8ba4\u8bc1\u65b9\u6848\n\n\n\u53ef\u4ee5\u4f7f\u7528 \nDEFAULT_AUTHENTICATION_CLASSES\n \u8bbe\u7f6e\u5168\u5c40\u7684\u9ed8\u8ba4\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002\u6bd4\u5982\uff1a\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    )\n}\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\nAPIView\n\u7c7b\u89c6\u56fe\u7684\u65b9\u5f0f\uff0c\u5728\u6bcf\u4e2aview\u6216\u6bcf\u4e2aviewset\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002\n\n\nfrom rest_framework.authentication import SessionAuthentication, BasicAuthentication\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    authentication_classes = (SessionAuthentication, BasicAuthentication)\n    permission_classes = (IsAuthenticated,)\n\n    def get(self, request, format=None):\n        content = {\n            'user': unicode(request.user),  # `django.contrib.auth.User` \u5b9e\u4f8b\u3002\n            'auth': unicode(request.auth),  # None\n        }\n        return Response(content)\n\n\n\n\u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\uff0c\u90a3\u5c31\u4f7f\u7528\n@api_view\n\u88c5\u9970\u5668\u3002\n\n\n@api_view(['GET'])\n@authentication_classes((SessionAuthentication, BasicAuthentication))\n@permission_classes((IsAuthenticated,))\ndef example_view(request, format=None):\n    content = {\n        'user': unicode(request.user),  # `django.contrib.auth.User` \u5b9e\u4f8b\u3002\n        'auth': unicode(request.auth),  # None\n    }\n    return Response(content)\n\n\n\n\u672a\u8ba4\u8bc1\u548c\u7981\u6b62\u7684\u54cd\u5e94\n\n\n\u5f53\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u88ab\u62d2\u7edd\u65f6\uff0c\u6709\u4e0b\u9762\u4e24\u79cd\u4e0d\u540c\u7684\u9519\u8bef\u4ee3\u7801\u53ef\u4f7f\u7528\u3002\n\n\n\n\nHTTP 401 \u672a\u8ba4\u8bc1\n\n\nHTTP 403 \u65e0\u6743\u9650\n\n\n\n\nHTTP 401 \u54cd\u5e94\u5fc5\u987b\u59cb\u7ec8\u5305\u62ec\u4e00\u4e2a\nWWW-Authenticate\n\u5934\uff0c\u6307\u793a\u5ba2\u6237\u7aef\u5982\u4f55\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 HTTP 403\u54cd\u5e94\u4e0d\u5305\u62ec\nWWW-Authenticate\n\u3002\n\n\n\u5177\u4f53\u4f7f\u7528\u54ea\u79cd\u54cd\u5e94\u53d6\u51b3\u4e8e\u8ba4\u8bc1\u65b9\u6848\u3002\u867d\u7136\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u8ba4\u8bc1\u65b9\u6848\uff0c\u4f46\u662f\u4ec5\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u65b9\u6848\u6765\u786e\u5b9a\u54cd\u5e94\u7684\u7c7b\u578b\u3002\n\u5728\u786e\u5b9a\u54cd\u5e94\u7c7b\u578b\u65f6\uff0c\u5c06\u4f7f\u7528\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u7684\u7b2c\u4e00\u4e2a\u8ba4\u8bc1\u7c7b\u3002\n\n\n\u6ce8\u610f\uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u901a\u8fc7\u4e86\u9a8c\u8bc1\u4f46\u662f\u88ab\u62d2\u7edd\u6267\u884c\u8bf7\u6c42\u7684\u6743\u9650\u65f6\uff0c\u4e0d\u7ba1\u8ba4\u8bc1\u65b9\u6848\u662f\u4ec0\u4e48\uff0c\u90fd\u8981\u4f7f\u7528 \n403 Permission Denied\n \u54cd\u5e94\u3002\n\n\nApache mod_wsgi \u5177\u4f53\u914d\u7f6e\n\n\n\u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 \nApache using mod_wsgi\n\u90e8\u7f72\uff0c\u8ba4\u8bc1\u5934\u9ed8\u8ba4\u4e0d\u4f1a\u4f20\u9012\u7ed9WSGI\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u5047\u5b9a\u7531Apache\u5904\u7406\u8ba4\u8bc1\uff0c\u800c\u4e0d\u662f\u5728\u5e94\u7528\u5c42\u9762\u5904\u7406\u3002\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u90e8\u7f72\u5230Apache\uff0c\u5e76\u4e14\u4f7f\u7528\u4efb\u4f55non-session\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5219\u9700\u8981\u663e\u5f0f\u914d\u7f6emod_wsgi\u624d\u80fd\u5c06\u6240\u9700\u7684\u5934\u6587\u4ef6\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u9002\u5f53\u7684\u4e0a\u4e0b\u6587\u4e2d\u6307\u5b9a\nWSGIPassAuthorization\n\u6307\u4ee4\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a\n'On'\n\u6765\u5b8c\u6210\u3002\n\n\n# \u8fd9\u53ef\u80fd\u4f1a\u5728\u670d\u52a1\u5668\u914d\u7f6e\uff0c\u865a\u62df\u4e3b\u673a\uff0c\u76ee\u5f55\u6216.htaccess\nWSGIPassAuthorization On\n\n\n\n\n\nAPI \u53c2\u8003\n\n\nBasicAuthentication\n\n\n\u6b64\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528\nHTTP \u57fa\u672c\u8ba4\u8bc1\n\uff0c\u9488\u5bf9\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002\u57fa\u672c\u8ba4\u8bc1\u901a\u5e38\u53ea\u9002\u7528\u4e8e\u6d4b\u8bd5\u3002\n\n\n\u5982\u679c\u8ba4\u8bc1\u6210\u529f \nBasicAuthentication\n \u63d0\u4f9b\u4ee5\u4e0b\u4fe1\u606f\u3002\n\n\n\n\nrequest.user\n \u5c06\u662f\u4e00\u4e2a Django \nUser\n \u5b9e\u4f8b\u3002\n\n\nrequest.auth\n \u5c06\u662f \nNone\n\u3002\n\n\n\n\n\u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de\u4f7f\u7528\u9002\u5f53WWW-Authenticate\u6807\u5934\u7684\nHTTP 401 Unauthorized\n\u54cd\u5e94\u3002\u4f8b\u5982\uff1a\n\n\nWWW-Authenticate: Basic realm=\"api\"\n\n\n\n\u6ce8\u610f\uff1a\n \u5982\u679c\u4f60\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528\nBasicAuthentication\n\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u7684API\u4ec5\u5728\nhttps\n\u4e2d\u53ef\u7528\u3002\u4f60\u8fd8\u5e94\u786e\u4fdd\u4f60\u7684API\u5ba2\u6237\u7aef\u59cb\u7ec8\u5728\u767b\u5f55\u65f6\u91cd\u65b0\u8bf7\u6c42\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c06\u8fd9\u4e9b\u8be6\u7ec6\u4fe1\u606f\u5b58\u50a8\u5230\u6301\u4e45\u5b58\u50a8\u4e2d\u3002\n\n\nTokenAuthentication\n\n\n\u8be5\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528\u7b80\u5355\u7684\u57fa\u4e8eToken\u7684HTTP\u8ba4\u8bc1\u65b9\u6848\u3002Token\u8ba4\u8bc1\u9002\u7528\u4e8e\u5ba2\u6237\u7aef - \u670d\u52a1\u5668\u8bbe\u7f6e\uff0c\u5982\u672c\u5730\u684c\u9762\u548c\u79fb\u52a8\u5ba2\u6237\u7aef\u3002\n\n\n\u8981\u4f7f\u7528\nTokenAuthentication\n\u65b9\u6848\uff0c\u4f60\u9700\u8981\n\u914d\u7f6e\u8ba4\u8bc1\u7c7b\n \u4ee5\u4fbf\u5305\u542b\nTokenAuthentication\n\uff0c\u53e6\u5916\u5728\nINSTALLED_APPS\n\u8bbe\u7f6e\u4e2d\u8fd8\u9700\u8981\u5305\u542b\nrest_framework.authtoken\n\uff1a\n\n\nINSTALLED_APPS = (\n    ...\n    'rest_framework.authtoken'\n)\n\n\n\n\n\n\u6ce8\u610f\uff1a\n \u786e\u4fdd\u5728\u4fee\u6539\u8bbe\u7f6e\u540e\u8fd0\u884c\u4e00\u4e0b\nmanage.py migrate\n\u3002\nrest_framework.authtoken\n app \u4f1a\u63d0\u4ea4\u4e00\u4e9bDjango\u6570\u636e\u5e93\u8fc1\u79fb\u64cd\u4f5c\u3002\n\n\n\n\n\u4f60\u8fd8\u9700\u8981\u4e3a\u4f60\u7684\u7528\u6237\u521b\u5efa\u4ee4\u724c\u3002\n\n\nfrom rest_framework.authtoken.models import Token\n\ntoken = Token.objects.create(user=...)\nprint token.key\n\n\n\n\u5bf9\u5ba2\u6237\u7aef\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0ctoken\u9700\u8981\u5305\u542b\u5728 \nAuthorization\nHTTP\u5934\u4e2d\u3002\u5bc6\u94a5\u5e94\u8be5\u662f\u4ee5\u5b57\u7b26\u4e32\"Token\"\u4e3a\u524d\u7f00\uff0c\u4ee5\u7a7a\u683c\u5206\u5272\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff1a\n\n\nAuthorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n\n\n\n\u6ce8\u610f\uff1a\n \u5982\u679c\u4f60\u60f3\u5728HTTP\u5934\u4e2d\u4f7f\u7528\u5176\u4ed6\u7684\u5173\u952e\u5b57\uff0c\u6bd4\u5982\nBearer\n\uff0c\u53ea\u9700\u8981\u7ee7\u627f\nTokenAuthentication\n\u7c7b\u5e76\u8bbe\u7f6e \nkeyword\n\u7c7b\u53d8\u91cf\u3002\n\n\n\u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c\nTokenAuthentication\n \u63d0\u4f9b\u4ee5\u4e0b\u8ba4\u8bc1\u4fe1\u606f\uff1a\n\n\n\n\nrequest.user\n \u5c06\u662f\u4e00\u4e2aDjango \nUser\n \u5b9e\u4f8b\u3002\n\n\nrequest.auth\n \u5c06\u662f\u4e00\u4e2a\nrest_framework.authtoken.models.Token\n \u5b9e\u4f8b\u3002\n\n\n\n\n\u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de\u4f7f\u7528\u9002\u5f53WWW-Authenticate\u6807\u5934\u7684\nHTTP 401 Unauthorized\n\u54cd\u5e94\u3002\u4f8b\u5982\uff1a\n\n\nWWW-Authenticate: Token\n\n\n\n\u547d\u4ee4\u884c\u5de5\u5177\ncurl\n \u53ef\u7528\u4e8e\u6d4b\u8bd5\u57fa\u4e8eToken\u8ba4\u8bc1\u7684API\uff0c\u4f8b\u5982\uff1a\n\n\ncurl -X GET http://127.0.0.1:8000/api/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'\n\n\n\n\n\n\u6ce8\u610f\uff1a\n \u5982\u679c\u4f60\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u4f7f\u7528\nTokenAuthentication\n\u8ba4\u8bc1\uff0c\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u7684API\u4ec5\u5728\nhttps\n\u53ef\u7528\u3002\n\n\n\n\n\u751f\u6210Tokens\n\n\n\u901a\u8fc7\u4f7f\u7528\u4fe1\u53f7\n\n\n\u5982\u679c\u4f60\u5e0c\u671b\u6bcf\u4e2a\u7528\u6237\u62e5\u6709\u81ea\u52a8\u751f\u6210\u7684\u4ee4\u724c\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u6355\u83b7\u7528\u6237\u7684\npost_save\n\u4fe1\u53f7\u3002\n\n\nfrom django.conf import settings\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom rest_framework.authtoken.models import Token\n\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef create_auth_token(sender, instance=None, created=False, **kwargs):\n    if created:\n        Token.objects.create(user=instance)\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5c06\u6b64\u4ee3\u7801\u6bb5\u653e\u7f6e\u5728\u5df2\u5b89\u88c5\u7684\nmodels.py\n\u6a21\u5757\u6216Django\u5728\u542f\u52a8\u65f6\u5bfc\u5165\u7684\u5176\u4ed6\u4f4d\u7f6e\u3002\n\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e9b\u7528\u6237\uff0c\u5219\u53ef\u4ee5\u5982\u4e0b\u6240\u793a\u4e3a\u6240\u6709\u73b0\u6709\u7528\u6237\u751f\u6210\u4ee4\u724c\uff1a\n\n\nfrom django.contrib.auth.models import User\nfrom rest_framework.authtoken.models import Token\n\nfor user in User.objects.all():\n    Token.objects.get_or_create(user=user)\n\n\n\n\u901a\u8fc7\u66b4\u9732 api \u7aef\u70b9\n\n\n\u5f53\u4f7f\u7528\nTokenAuthentication\n\u65f6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u4e00\u4e2a\u83b7\u53d6\u7ed9\u5b9a\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u4ee4\u724c\u7684\u673a\u5236\u3002 REST framework \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684\u89c6\u56fe\u6765\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002\u8981\u4f7f\u7528\u5b83\uff0c\u9700\u8981\u5c06 \nobtain_auth_token\n \u89c6\u56fe\u6dfb\u52a0\u5230\u4f60\u7684URLconf\uff1a\n\n\nfrom rest_framework.authtoken import views\nurlpatterns += [\n    url(r'^api-token-auth/', views.obtain_auth_token)\n]\n\n\n\n\u6ce8\u610fURL\u6b63\u5219\u5339\u914d\u6a21\u5f0f\u90a3\u91cc\u53ef\u4ee5\u662f\u4f60\u60f3\u8981\u4f7f\u7528\u7684\u4efb\u4f55\u5185\u5bb9\u3002\n\n\n\u5f53\u4f7f\u7528form\u8868\u5355\u6216JSON\u5c06\u6709\u6548\u7684\nusername\n\u548c\npassword\n\u5b57\u6bb5POST\u63d0\u4ea4\u5230\u89c6\u56fe\u65f6\uff0c\nobtain_auth_token\n\u89c6\u56fe\u5c06\u8fd4\u56deJSON\u54cd\u5e94\uff1a\n\n\n{ 'token' : '9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' }\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u7684\nobtain_auth_token\n\u89c6\u56fe\u663e\u5f0f\u4f7f\u7528JSON\u8bf7\u6c42\u548c\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4f7f\u7528settings\u4e2d\u914d\u7f6e\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u7c7b\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u7248\u672c\u7684\nobtain_auth_token\n\u89c6\u56fe\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\nObtainAuthToken\n\u7c7b\uff0c\u5e76\u5728url conf\u4e2d\u4f7f\u7528\u5b83\u6765\u5b9e\u73b0\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u6743\u9650\u6216\u9650\u5236\u5e94\u7528\u4e8e\nobtain_auth_token\n\u89c6\u56fe\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5e94\u7528\u9650\u5236\uff0c\u5219\u9700\u8981\u91cd\u5199\u89c6\u56fe\u7c7b\uff0c\u5e76\u4f7f\u7528\nthrottle_classes\n\u5c5e\u6027\u5305\u542b\u5b83\u4eec\u3002\n\n\nWith Django admin\n\n\n\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7ba1\u7406\u754c\u9762\u624b\u52a8\u521b\u5efa\u4ee4\u724c\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u5927\u578b\u7528\u6237\u7fa4\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u52a8\u6001\u4fee\u6539\nTokenAdmin\n\u7c7b\uff0c\u4ee5\u6839\u636e\u4f60\u7684\u9700\u8981\u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5c06\nuser\n\u5b57\u6bb5\u58f0\u660e\u4e3a\nraw_field\n\u3002\n\n\nyour_app/admin.py\n:\n\n\nfrom rest_framework.authtoken.admin import TokenAdmin\n\nTokenAdmin.raw_id_fields = ('user',)\n\n\n\nSession\u8ba4\u8bc1\n\n\n\u6b64\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528Django\u7684\u9ed8\u8ba4session\u540e\u7aef\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002Session\u8eab\u4efd\u9a8c\u8bc1\u9002\u7528\u4e8e\u4e0e\u4f60\u7684\u7f51\u7ad9\u5728\u76f8\u540c\u7684Session\u73af\u5883\u4e2d\u8fd0\u884c\u7684AJAX\u5ba2\u6237\u7aef\u3002\n\n\n\u5982\u679c\u6210\u529f\u9a8c\u8bc1\uff0c\nSessionAuthentication\n \u63d0\u4f9b\u4ee5\u4e0b\u51ed\u636e\u3002\n\n\n\n\nrequest.user\n \u662f\u4e00\u4e2a Django \nUser\n \u5b9e\u4f8b\u3002\n\n\nrequest.auth\n \u662f \nNone\n\u3002\n\n\n\n\n\u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de\nHTTP 403 Forbidden\n\u54cd\u5e94\u3002\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u5e26\u6709SessionAuthentication\u7684AJAX\u6837\u5f0f\u7684API\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u4efb\u4f55\"\u4efb\u4f55\"\u4e0d\u5b89\u5168\u7684HTTP\u65b9\u6cd5\u8c03\u7528\uff08\u5982\uff1a\nPUT\n, \nPATCH\n, \nPOST\n or \nDELETE\n\u8bf7\u6c42\uff09\u90fd\u5305\u542b\u6709\u6548\u7684CSRF token\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\nDjango CSRF \u6587\u6863\n\u3002\n\n\n\u8b66\u544a\n\uff1a\u5728\u521b\u5efa\u767b\u9646\u9875\u9762\u65f6\uff0c\u59cb\u7ec8\u8981\u4f7f\u7528Django\u7684\u6807\u51c6\u767b\u9646\u89c6\u56fe\u3002\u8fd9\u6837\u624d\u80fd\u786e\u4fdd\u4f60\u7684\u767b\u9646\u89c6\u56fe\u88ab\u6b63\u786e\u7684\u8ba4\u8bc1\u4fdd\u62a4\u3002\n\n\n\u7531\u4e8e\u9700\u8981\u540c\u65f6\u652f\u6301session\u548cnon-session\u975e\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\uff0cREST\u6846\u67b6\u4e2d\u7684CSRF\u9a8c\u8bc1\u4e0e\u6807\u51c6Django\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002\u8fd9\u610f\u5473\u7740\u53ea\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u9700\u8981CSRF\u4ee4\u724c\uff0c\u533f\u540d\u8bf7\u6c42\u53ef\u80fd\u4e0d\u4f1a\u53d1\u9001CSRF\u4ee4\u724ctokens\u3002\u6b64\u884c\u4e3a\u4e0d\u9002\u7528\u4e8e\u59cb\u7ec8\u9700\u8981\u4f7f\u7528CSRF\u9a8c\u8bc1\u7684\u767b\u5f55\u89c6\u56fe\u3002\n\n\n\u81ea\u5b9a\u4e49\u8ba4\u8bc1\n\n\n\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u65b9\u6848\uff0c\u8981\u7ee7\u627f\nBaseAuthentication\n\u7c7b\u5e76\u4e14\u91cd\u5199\n.authenticate(self, request)\n \u65b9\u6cd5\u3002\u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c\u8be5\u65b9\u6cd5\u5e94\u8fd4\u56de\n(user, auth)\n\u7684\u4e8c\u5143\u5143\u7ec4\uff0c\u5426\u5219\u8fd4\u56de\nNone\n\u3002\n\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u4e0d\u60f3\u8fd4\u56de\nNone\n\uff0c\u800c\u662f\u5e0c\u671b\u4ece\n.authenticate()\n\u65b9\u6cd5\u629b\u51fa\nAuthenticationFailed\n\u5f02\u5e38\u3002\n\n\n\u901a\u5e38\u4f60\u5e94\u8be5\u91c7\u53d6\u7684\u65b9\u6cd5\u662f\uff1a\n\n\n\n\n\u5982\u679c\u4e0d\u5c1d\u8bd5\u9a8c\u8bc1\uff0c\u8fd4\u56de\nNone\n\u3002\u8fd8\u5c06\u68c0\u67e5\u4efb\u4f55\u5176\u4ed6\u6b63\u5728\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002\n\n\n\u5982\u679c\u5c1d\u8bd5\u9a8c\u8bc1\u4f46\u5931\u8d25\uff0c\u5219\u629b\u51fa\nAuthenticationFailed\n\u5f02\u5e38\u3002\u65e0\u8bba\u4efb\u4f55\u6743\u9650\u68c0\u67e5\u4e5f\u4e0d\u68c0\u67e5\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u7acb\u5373\u8fd4\u56de\u9519\u8bef\u54cd\u5e94\u3002\n\n\n\n\n\u4f60\u4e5f\n\u53ef\u4ee5\n\u91cd\u5199\n.authenticate_header(self, request)\n\u65b9\u6cd5\u3002\u5982\u679c\u5b9e\u73b0\u8be5\u65b9\u6cd5\uff0c\u5219\u5e94\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u7528\u4f5c\nHTTP 401 Unauthorized\n\u54cd\u5e94\u4e2d\u7684\nWWW-Authenticate\n\u5934\u7684\u503c\u3002\n\n\n\u5982\u679c\n.authenticate_header()\n\u65b9\u6cd5\u672a\u88ab\u91cd\u5199\uff0c\u5219\u8ba4\u8bc1\u65b9\u6848\u5c06\u5728\u672a\u9a8c\u8bc1\u7684\u8bf7\u6c42\u88ab\u62d2\u7edd\u8bbf\u95ee\u65f6\u8fd4\u56de\nHTTP 403 Forbidden\n\u54cd\u5e94\u3002\n\n\n\u793a\u4f8b\n\n\n\u4ee5\u4e0b\u793a\u4f8b\u5c06\u4ee5\u81ea\u5b9a\u4e49\u8bf7\u6c42\u6807\u5934\u4e2d\u540d\u79f0\u4e3a'X_USERNAME'\u63d0\u4f9b\u7684\u7528\u6237\u540d\u4f5c\u4e3a\u7528\u6237\u5bf9\u4efb\u4f55\u4f20\u5165\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\n\n\nfrom django.contrib.auth.models import User\nfrom rest_framework import authentication\nfrom rest_framework import exceptions\n\nclass ExampleAuthentication(authentication.BaseAuthentication):\n    def authenticate(self, request):\n        username = request.META.get('X_USERNAME')\n        if not username:\n            return None\n\n        try:\n            user = User.objects.get(username=username)\n        except User.DoesNotExist:\n            raise exceptions.AuthenticationFailed('No such user')\n\n        return (user, None)\n\n\n\n\n\n\u7b2c\u4e09\u65b9\u5305\n\n\n\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u662f\u53ef\u7528\u7684\u3002\n\n\nDjango OAuth Toolkit\n\n\nDjango OAuth Toolkit\n \u5305\u63d0\u4f9b\u4e86OAuth 2.0 \u8ba4\u8bc1\u652f\u6301\uff0c\u5e76\u4e14\u517c\u5bb9Python 2.7\u548cPython 3.3+\u3002\u8fd9\u4e2a\u5305\u4f7f\u7528\u4f18\u79c0\u7684\nOAuthLib\n\uff0c\u7531\nEvonove\n\u7ef4\u62a4\u3002\u8be5\u8f6f\u4ef6\u5305\u6709\u5f88\u5b8c\u5584\u7684\u6587\u6863\uff0c\u5e76\u5f97\u5230\u5f88\u597d\u7684\u652f\u6301\uff0c\u76ee\u524d\u662f\u6211\u4eec\n\u63a8\u8350\u4f7f\u7528\u7684OAuth 2.0\u652f\u6301\u8f6f\u4ef6\u5305\n\u3002\n\n\n\u5b89\u88c5\u548c\u914d\u7f6e\n\n\n\u4f7f\u7528\npip\n\u5b89\u88c5\u3002\n\n\npip install django-oauth-toolkit\n\n\n\n\u628a\u8fd9\u4e2a\u5305\u6dfb\u52a0\u5230\u4f60\u7684\nINSTALLED_APPS\n\u4e2d\uff0c\u5e76\u4e14\u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002\n\n\nINSTALLED_APPS = (\n    ...\n    'oauth2_provider',\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'oauth2_provider.ext.rest_framework.OAuth2Authentication',\n    )\n}\n\n\n\n\u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u9605\nDjango REST framework - Getting started\n\u6587\u6863\u3002\n\n\nDjango REST framework OAuth\n\n\nDjango REST framework OAuth\n\u5305\u63d0\u4f9bOAuth1\u548cOAuth2\u652f\u6301\u3002\n\n\n\u8fd9\u4e2a\u8f6f\u4ef6\u5305\u4ee5\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework\u4e2d\uff0c\u4f46\u73b0\u5728\u5df2\u88ab\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u652f\u6301\u548c\u7ef4\u62a4\u3002\n\n\n\u5b89\u88c5\u548c\u914d\u7f6e\n\n\n\u4f7f\u7528\npip\n\u8fdb\u884c\u5b89\u88c5\u3002\n\n\npip install djangorestframework-oauth\n\n\n\n\u66f4\u591a\u914d\u7f6e\u548c\u4f7f\u7528\u4fe1\u606f\u8bf7\u67e5\u9605Django REST framework OAuth\u6587\u6863\u4e2d\u7684\nauthentication\n\u548c\npermissions\n\u3002\n\n\nDigest Authentication\n\n\nHTTP\u6458\u8981\u8ba4\u8bc1\u662f\u4e00\u79cd\u5e7f\u6cdb\u5b9e\u73b0\u7684\u65b9\u6848\uff0c\u65e8\u5728\u66ff\u4ee3HTTP\u57fa\u672c\u8ba4\u8bc1\uff0c\u5e76\u63d0\u4f9b\u7b80\u5355\u7684\u52a0\u5bc6\u8ba4\u8bc1\u673a\u5236\u3002\nJuan Riaza\n\u7ef4\u62a4\u7740\ndjangorestframework-digestauth\n\u4e3aREST framework\u63d0\u4f9b\u4e86HTTP\u6458\u8981\u8ba4\u8bc1\u652f\u6301\u3002\n\n\nDjango OAuth2 Consumer\n\n\nRediker Software\n\u7684\nDjango OAuth2 Consumer\n\u662f\u53e6\u4e00\u4e2a\u4e3aREST\u6846\u67b6\u63d0\u4f9b\nOAuth 2.0 support for REST framework\n\u7684\u8f6f\u4ef6\u5305\u3002\u8be5\u5305\u5305\u542btokens\u8303\u56f4\u9650\u5236\u6743\u9650\uff0c\u5141\u8bb8\u5bf9\u4f60\u7684API\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u8bbf\u95ee\u3002\n\n\nJSON Web Token Authentication\n\n\nJSON Web Token\u662f\u4e00\u79cd\u76f8\u5f53\u65b0\u7684\u6807\u51c6\uff0c\u53ef\u7528\u4e8e\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\u4e0e\u5185\u7f6e\u7684TokenAuthentication\u65b9\u6848\u4e0d\u540c\uff0cJWT\u8eab\u4efd\u9a8c\u8bc1\u4e0d\u9700\u8981\u4f7f\u7528\u6570\u636e\u5e93\u6765\u9a8c\u8bc1\u4ee4\u724c\u3002\nBlimp\n\u7ef4\u62a4\ndjangorestframework-jwt\n\u8f6f\u4ef6\u5305\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2aJWT Authentication\u7c7b\u4ee5\u53ca\u4e00\u4e2a\u673a\u5236\uff0c\u5ba2\u6237\u7aef\u83b7\u5f97\u4e00\u4e2a\u7ed9\u5b9a\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684JWT\u3002\n\n\nHawk HTTP Authentication\n\n\nHawkREST\n\u5e93\u57fa\u4e8e\nMohawk\n\u5e93\uff0c\u8ba9\u4f60\u53ef\u4ee5\u5728API\u4e2d\u4f7f\u7528\nHawk\n\u7b7e\u540d\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\nHawk\n\u8ba9\u53cc\u65b9\u4f7f\u7528\u5171\u4eab\u5bc6\u94a5\u7b7e\u540d\u7684\u6d88\u606f\u5f7c\u6b64\u5b89\u5168\u5730\u8fdb\u884c\u901a\u4fe1\u3002\u5b83\u57fa\u4e8e\nHTTP MAC access authentication\n\u8bbf\u95ee\u8ba4\u8bc1\uff08\u5b83\u57fa\u4e8e\nOAuth 1.0\n\u7684\u90e8\u5206\uff09\u3002\n\n\nHTTP Signature Authentication\n\n\nHTTP\u7b7e\u540d\uff08\u76ee\u524d\u4e3a\nIETF\u8349\u6848\n\uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0HTTP\u6d88\u606f\u7684\u6e90\u8ba4\u8bc1\u548c\u6d88\u606f\u5b8c\u6574\u6027\u7684\u65b9\u6cd5\u3002\u4e0e\nAmazon\u7684HTTP\u7b7e\u540d\u65b9\u6848\n\u7c7b\u4f3c\uff0c\u8bb8\u591a\u670d\u52a1\u4f7f\u7528\u5b83\uff0c\u5b83\u5141\u8bb8\u65e0\u72b6\u6001\u7684\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\nElvio Toccalino\n\u7ef4\u62a4\u4e86\ndjangorestframework-httpsignature\n\u5305\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684HTTP\u7b7e\u540d\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u3002\n\n\nDjoser\n\n\nDjoser\n\u5e93\u63d0\u4f9b\u4e00\u7ec4\u89c6\u56fe\u6765\u5904\u7406\u57fa\u672c\u64cd\u4f5c\uff0c\u5982\u6ce8\u518c\uff0c\u767b\u5f55\uff0c\u6ce8\u9500\uff0c\u5bc6\u7801\u91cd\u7f6e\u548c\u5e10\u6237\u6fc0\u6d3b\u3002\u8be5\u5305\u4f7f\u7528\u81ea\u5b9a\u4e49\u7528\u6237\u6a21\u578b\uff0c\u5b83\u4f7f\u7528\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528REST\u5b9e\u73b0\u7684Django\u8ba4\u8bc1\u7cfb\u7edf\u3002\n\n\ndjango-rest-auth\n\n\nDjango-rest-auth\n\u5e93\u63d0\u4f9b\u4e86\u4e00\u7ec4REST API\u7aef\u70b9\uff0c\u7528\u4e8e\u6ce8\u518c\uff0c\u8eab\u4efd\u9a8c\u8bc1\uff08\u5305\u62ec\u793e\u4ea4\u5a92\u4f53\u8eab\u4efd\u9a8c\u8bc1\uff09\uff0c\u5bc6\u7801\u91cd\u7f6e\uff0c\u68c0\u7d22\u548c\u66f4\u65b0\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u7b49\u3002\u6709\u4e86\u8fd9\u4e9bAPI\u7aef\u70b9\u4e4b\u540e\uff0c\u4f60\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\uff08\u5982AngularJS\uff0ciOS\uff0cAndroid\u548c\u5176\u4ed6\uff09\u53ef\u4ee5\u901a\u8fc7REST API\u72ec\u7acb\u901a\u4fe1\u5230Django\u540e\u7aef\u7ad9\u70b9\uff0c\u4ee5\u8fdb\u884c\u7528\u6237\u7ba1\u7406\u3002\n\n\ndjango-rest-framework-social-oauth2\n\n\nDjango-rest-framework-social-oauth2\n\u5e93\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u793e\u4ea4\u63d2\u4ef6\uff08facebook\uff0ctwitter\uff0cgoogle\u7b49\uff09\u96c6\u6210\u5230\u4f60\u7684\u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\u548c\u7b80\u5355\u7684oauth2\u8bbe\u7f6e\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u4f7f\u7528\u8fd9\u4e2a\u5e93\uff0c\u4f60\u5c06\u80fd\u591f\u6839\u636e\u5916\u90e8token\uff08\u4f8b\u5982\uff0cFacebook\u8bbf\u95eetoken\uff09\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5c06\u8fd9\u4e9b\u4ee4\u724c\u8f6c\u6362\u4e3a\u201c\u5185\u90e8\u201doauth2 tokens\uff0c\u5e76\u4f7f\u7528\u548c\u751f\u6210oauth2 tokens\u6765\u9a8c\u8bc1\u7528\u6237\u3002\n\n\ndjango-rest-knox\n\n\nDjango-rest-knox\n\u5e93\u63d0\u4f9b\u4e86\u6a21\u578b\u548c\u89c6\u56fe\uff0c\u4ee5\u6bd4\u5185\u7f6e\u7684TokenAuthentication\u65b9\u6848\u66f4\u5b89\u5168\u548c\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u6765\u5904\u7406\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1 - \u4f7f\u7528\u5355\u9875\u9762\u5e94\u7528\u7a0b\u5e8f\u548c\u79fb\u52a8\u5ba2\u6237\u7aef\u80fd\u591f\u4e00\u8d77\u3002\u5b83\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9btokens\uff0c\u4ee5\u53ca\u5728\u63d0\u4f9b\u4e00\u4e9b\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\uff08\u901a\u5e38\u662f\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\uff09\u65f6\u751f\u6210tokens\uff0c\u5220\u9664token\uff08\u63d0\u4f9b\u670d\u52a1\u5668\u5f3a\u5236\u6ce8\u9500\uff09\u548c\u5220\u9664\u6240\u6709tokens\uff08\u6ce8\u9500\u7528\u6237\u767b\u5f55\u7684\u6240\u6709\u5ba2\u6237\u7aef\uff09\u7684\u89c6\u56fe\u3002",
            "title": "Authentication"
        },
        {
            "location": "/api-guide/authentication_zh/#_1",
            "text": "\u8eab\u4efd\u9a8c\u8bc1\u529f\u80fd\u9700\u8981\u53ef\u63d2\u62d4\u3002  \u2014 Jacob Kaplan-Moss,  \"REST worst practices\"   \u8eab\u4efd\u9a8c\u8bc1\u662f\u5c06\u4f20\u5165\u8bf7\u6c42\u4e0e\u4e00\u7ec4\u6807\u8bc6\u51ed\u636e\uff08\u4f8b\u5982\u8bf7\u6c42\u6765\u81ea\u7684\u7528\u6237\u6216\u5176\u7b7e\u540d\u7684\u4ee4\u724c\uff09\u76f8\u5173\u8054\u7684\u673a\u5236\u3002\u7136\u540e\uff0c \u6743\u9650  \u548c  \u9650\u5236  \u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u51ed\u636e\u6765\u786e\u5b9a\u662f\u5426\u5e94\u5141\u8bb8\u8be5\u8bf7\u6c42\u3002  REST framework \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u5e76\u4e14\u8fd8\u5141\u8bb8\u4f60\u5b9e\u73b0\u81ea\u5b9a\u4e49\u65b9\u6848\u3002  \u9a8c\u8bc1\u59cb\u7ec8\u5728\u89c6\u56fe\u7684\u6700\u5f00\u59cb\u8fdb\u884c\uff0c\u5728\u6267\u884c\u6743\u9650\u548c\u9650\u5236\u68c0\u67e5\u4e4b\u524d\u4ee5\u53ca\u5141\u8bb8\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\u4e4b\u524d\u3002  request.user  \u5c5e\u6027\u901a\u5e38\u88ab\u8bbe\u7f6e\u4e3a contrib.auth  \u5305\u4e2d  User  \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002  request.auth  \u5c5e\u6027\u7528\u4e8e\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\uff0c\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u8bf7\u6c42\u7b7e\u540d\u7684\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u3002   \u6ce8\u610f\uff1a  \u4e0d\u8981\u5fd8\u4e86 \u8ba4\u8bc1\u672c\u8eab\u4e0d\u4f1a\u5141\u8bb8\u6216\u62d2\u7edd\u4f20\u5165\u7684\u8bf7\u6c42 \uff0c\u5b83\u53ea\u662f\u7b80\u5355\u8bc6\u522b\u8bf7\u6c42\u643a\u5e26\u7684\u51ed\u8bc1\u3002  \u6709\u5173\u5982\u4f55\u8bbe\u7f6eAPI\u6743\u9650\u7b56\u7565\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605  \u6743\u9650\u6587\u6863 \u3002",
            "title": "\u8ba4\u8bc1"
        },
        {
            "location": "/api-guide/authentication_zh/#_2",
            "text": "\u8ba4\u8bc1\u65b9\u6848\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7c7b\u7684\u5217\u8868\u3002REST framework \u5c06\u5c1d\u8bd5\u4f7f\u7528\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7c7b\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4f7f\u7528\u6210\u529f\u5b8c\u6210\u9a8c\u8bc1\u7684\u7b2c\u4e00\u4e2a\u7c7b\u7684\u8fd4\u56de\u503c\u8bbe\u7f6e  request.user  \u548c request.auth \u3002  \u5982\u679c\u6ca1\u6709\u7c7b\u8fdb\u884c\u9a8c\u8bc1\uff0c request.user  \u5c06\u88ab\u8bbe\u7f6e\u6210  django.contrib.auth.models.AnonymousUser \u7684\u5b9e\u4f8b\uff0c request.auth  \u5c06\u88ab\u8bbe\u7f6e\u6210 None \u3002  \u672a\u8ba4\u8bc1\u8bf7\u6c42\u7684 request.user  \u548c  request.auth  \u7684\u503c\u53ef\u4ee5\u4f7f\u7528  UNAUTHENTICATED_USER \u548c UNAUTHENTICATED_TOKEN  \u8bbe\u7f6e\u8fdb\u884c\u4fee\u6539\u3002",
            "title": "\u5982\u4f55\u786e\u5b9a\u8eab\u4efd\u9a8c\u8bc1"
        },
        {
            "location": "/api-guide/authentication_zh/#_3",
            "text": "\u53ef\u4ee5\u4f7f\u7528  DEFAULT_AUTHENTICATION_CLASSES  \u8bbe\u7f6e\u5168\u5c40\u7684\u9ed8\u8ba4\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002\u6bd4\u5982\uff1a  REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    )\n}  \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e APIView \u7c7b\u89c6\u56fe\u7684\u65b9\u5f0f\uff0c\u5728\u6bcf\u4e2aview\u6216\u6bcf\u4e2aviewset\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002  from rest_framework.authentication import SessionAuthentication, BasicAuthentication\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    authentication_classes = (SessionAuthentication, BasicAuthentication)\n    permission_classes = (IsAuthenticated,)\n\n    def get(self, request, format=None):\n        content = {\n            'user': unicode(request.user),  # `django.contrib.auth.User` \u5b9e\u4f8b\u3002\n            'auth': unicode(request.auth),  # None\n        }\n        return Response(content)  \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\uff0c\u90a3\u5c31\u4f7f\u7528 @api_view \u88c5\u9970\u5668\u3002  @api_view(['GET'])\n@authentication_classes((SessionAuthentication, BasicAuthentication))\n@permission_classes((IsAuthenticated,))\ndef example_view(request, format=None):\n    content = {\n        'user': unicode(request.user),  # `django.contrib.auth.User` \u5b9e\u4f8b\u3002\n        'auth': unicode(request.auth),  # None\n    }\n    return Response(content)",
            "title": "\u8bbe\u7f6e\u8ba4\u8bc1\u65b9\u6848"
        },
        {
            "location": "/api-guide/authentication_zh/#_4",
            "text": "\u5f53\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u88ab\u62d2\u7edd\u65f6\uff0c\u6709\u4e0b\u9762\u4e24\u79cd\u4e0d\u540c\u7684\u9519\u8bef\u4ee3\u7801\u53ef\u4f7f\u7528\u3002   HTTP 401 \u672a\u8ba4\u8bc1  HTTP 403 \u65e0\u6743\u9650   HTTP 401 \u54cd\u5e94\u5fc5\u987b\u59cb\u7ec8\u5305\u62ec\u4e00\u4e2a WWW-Authenticate \u5934\uff0c\u6307\u793a\u5ba2\u6237\u7aef\u5982\u4f55\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 HTTP 403\u54cd\u5e94\u4e0d\u5305\u62ec WWW-Authenticate \u3002  \u5177\u4f53\u4f7f\u7528\u54ea\u79cd\u54cd\u5e94\u53d6\u51b3\u4e8e\u8ba4\u8bc1\u65b9\u6848\u3002\u867d\u7136\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u8ba4\u8bc1\u65b9\u6848\uff0c\u4f46\u662f\u4ec5\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u65b9\u6848\u6765\u786e\u5b9a\u54cd\u5e94\u7684\u7c7b\u578b\u3002 \u5728\u786e\u5b9a\u54cd\u5e94\u7c7b\u578b\u65f6\uff0c\u5c06\u4f7f\u7528\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u7684\u7b2c\u4e00\u4e2a\u8ba4\u8bc1\u7c7b\u3002  \u6ce8\u610f\uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u901a\u8fc7\u4e86\u9a8c\u8bc1\u4f46\u662f\u88ab\u62d2\u7edd\u6267\u884c\u8bf7\u6c42\u7684\u6743\u9650\u65f6\uff0c\u4e0d\u7ba1\u8ba4\u8bc1\u65b9\u6848\u662f\u4ec0\u4e48\uff0c\u90fd\u8981\u4f7f\u7528  403 Permission Denied  \u54cd\u5e94\u3002",
            "title": "\u672a\u8ba4\u8bc1\u548c\u7981\u6b62\u7684\u54cd\u5e94"
        },
        {
            "location": "/api-guide/authentication_zh/#apache-mod_wsgi",
            "text": "\u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528  Apache using mod_wsgi \u90e8\u7f72\uff0c\u8ba4\u8bc1\u5934\u9ed8\u8ba4\u4e0d\u4f1a\u4f20\u9012\u7ed9WSGI\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u5047\u5b9a\u7531Apache\u5904\u7406\u8ba4\u8bc1\uff0c\u800c\u4e0d\u662f\u5728\u5e94\u7528\u5c42\u9762\u5904\u7406\u3002  \u5982\u679c\u4f60\u6b63\u5728\u90e8\u7f72\u5230Apache\uff0c\u5e76\u4e14\u4f7f\u7528\u4efb\u4f55non-session\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5219\u9700\u8981\u663e\u5f0f\u914d\u7f6emod_wsgi\u624d\u80fd\u5c06\u6240\u9700\u7684\u5934\u6587\u4ef6\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u9002\u5f53\u7684\u4e0a\u4e0b\u6587\u4e2d\u6307\u5b9a WSGIPassAuthorization \u6307\u4ee4\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a 'On' \u6765\u5b8c\u6210\u3002  # \u8fd9\u53ef\u80fd\u4f1a\u5728\u670d\u52a1\u5668\u914d\u7f6e\uff0c\u865a\u62df\u4e3b\u673a\uff0c\u76ee\u5f55\u6216.htaccess\nWSGIPassAuthorization On",
            "title": "Apache mod_wsgi \u5177\u4f53\u914d\u7f6e"
        },
        {
            "location": "/api-guide/authentication_zh/#api",
            "text": "",
            "title": "API \u53c2\u8003"
        },
        {
            "location": "/api-guide/authentication_zh/#basicauthentication",
            "text": "\u6b64\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528 HTTP \u57fa\u672c\u8ba4\u8bc1 \uff0c\u9488\u5bf9\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002\u57fa\u672c\u8ba4\u8bc1\u901a\u5e38\u53ea\u9002\u7528\u4e8e\u6d4b\u8bd5\u3002  \u5982\u679c\u8ba4\u8bc1\u6210\u529f  BasicAuthentication  \u63d0\u4f9b\u4ee5\u4e0b\u4fe1\u606f\u3002   request.user  \u5c06\u662f\u4e00\u4e2a Django  User  \u5b9e\u4f8b\u3002  request.auth  \u5c06\u662f  None \u3002   \u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de\u4f7f\u7528\u9002\u5f53WWW-Authenticate\u6807\u5934\u7684 HTTP 401 Unauthorized \u54cd\u5e94\u3002\u4f8b\u5982\uff1a  WWW-Authenticate: Basic realm=\"api\"  \u6ce8\u610f\uff1a  \u5982\u679c\u4f60\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528 BasicAuthentication \uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u7684API\u4ec5\u5728 https \u4e2d\u53ef\u7528\u3002\u4f60\u8fd8\u5e94\u786e\u4fdd\u4f60\u7684API\u5ba2\u6237\u7aef\u59cb\u7ec8\u5728\u767b\u5f55\u65f6\u91cd\u65b0\u8bf7\u6c42\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c06\u8fd9\u4e9b\u8be6\u7ec6\u4fe1\u606f\u5b58\u50a8\u5230\u6301\u4e45\u5b58\u50a8\u4e2d\u3002",
            "title": "BasicAuthentication"
        },
        {
            "location": "/api-guide/authentication_zh/#tokenauthentication",
            "text": "\u8be5\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528\u7b80\u5355\u7684\u57fa\u4e8eToken\u7684HTTP\u8ba4\u8bc1\u65b9\u6848\u3002Token\u8ba4\u8bc1\u9002\u7528\u4e8e\u5ba2\u6237\u7aef - \u670d\u52a1\u5668\u8bbe\u7f6e\uff0c\u5982\u672c\u5730\u684c\u9762\u548c\u79fb\u52a8\u5ba2\u6237\u7aef\u3002  \u8981\u4f7f\u7528 TokenAuthentication \u65b9\u6848\uff0c\u4f60\u9700\u8981 \u914d\u7f6e\u8ba4\u8bc1\u7c7b  \u4ee5\u4fbf\u5305\u542b TokenAuthentication \uff0c\u53e6\u5916\u5728 INSTALLED_APPS \u8bbe\u7f6e\u4e2d\u8fd8\u9700\u8981\u5305\u542b rest_framework.authtoken \uff1a  INSTALLED_APPS = (\n    ...\n    'rest_framework.authtoken'\n)   \u6ce8\u610f\uff1a  \u786e\u4fdd\u5728\u4fee\u6539\u8bbe\u7f6e\u540e\u8fd0\u884c\u4e00\u4e0b manage.py migrate \u3002 rest_framework.authtoken  app \u4f1a\u63d0\u4ea4\u4e00\u4e9bDjango\u6570\u636e\u5e93\u8fc1\u79fb\u64cd\u4f5c\u3002   \u4f60\u8fd8\u9700\u8981\u4e3a\u4f60\u7684\u7528\u6237\u521b\u5efa\u4ee4\u724c\u3002  from rest_framework.authtoken.models import Token\n\ntoken = Token.objects.create(user=...)\nprint token.key  \u5bf9\u5ba2\u6237\u7aef\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0ctoken\u9700\u8981\u5305\u542b\u5728  Authorization HTTP\u5934\u4e2d\u3002\u5bc6\u94a5\u5e94\u8be5\u662f\u4ee5\u5b57\u7b26\u4e32\"Token\"\u4e3a\u524d\u7f00\uff0c\u4ee5\u7a7a\u683c\u5206\u5272\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff1a  Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b  \u6ce8\u610f\uff1a  \u5982\u679c\u4f60\u60f3\u5728HTTP\u5934\u4e2d\u4f7f\u7528\u5176\u4ed6\u7684\u5173\u952e\u5b57\uff0c\u6bd4\u5982 Bearer \uff0c\u53ea\u9700\u8981\u7ee7\u627f TokenAuthentication \u7c7b\u5e76\u8bbe\u7f6e  keyword \u7c7b\u53d8\u91cf\u3002  \u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c TokenAuthentication  \u63d0\u4f9b\u4ee5\u4e0b\u8ba4\u8bc1\u4fe1\u606f\uff1a   request.user  \u5c06\u662f\u4e00\u4e2aDjango  User  \u5b9e\u4f8b\u3002  request.auth  \u5c06\u662f\u4e00\u4e2a rest_framework.authtoken.models.Token  \u5b9e\u4f8b\u3002   \u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de\u4f7f\u7528\u9002\u5f53WWW-Authenticate\u6807\u5934\u7684 HTTP 401 Unauthorized \u54cd\u5e94\u3002\u4f8b\u5982\uff1a  WWW-Authenticate: Token  \u547d\u4ee4\u884c\u5de5\u5177 curl  \u53ef\u7528\u4e8e\u6d4b\u8bd5\u57fa\u4e8eToken\u8ba4\u8bc1\u7684API\uff0c\u4f8b\u5982\uff1a  curl -X GET http://127.0.0.1:8000/api/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'   \u6ce8\u610f\uff1a  \u5982\u679c\u4f60\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u4f7f\u7528 TokenAuthentication \u8ba4\u8bc1\uff0c\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u7684API\u4ec5\u5728 https \u53ef\u7528\u3002",
            "title": "TokenAuthentication"
        },
        {
            "location": "/api-guide/authentication_zh/#tokens",
            "text": "",
            "title": "\u751f\u6210Tokens"
        },
        {
            "location": "/api-guide/authentication_zh/#_5",
            "text": "\u5982\u679c\u4f60\u5e0c\u671b\u6bcf\u4e2a\u7528\u6237\u62e5\u6709\u81ea\u52a8\u751f\u6210\u7684\u4ee4\u724c\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u6355\u83b7\u7528\u6237\u7684 post_save \u4fe1\u53f7\u3002  from django.conf import settings\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom rest_framework.authtoken.models import Token\n\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef create_auth_token(sender, instance=None, created=False, **kwargs):\n    if created:\n        Token.objects.create(user=instance)  \u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5c06\u6b64\u4ee3\u7801\u6bb5\u653e\u7f6e\u5728\u5df2\u5b89\u88c5\u7684 models.py \u6a21\u5757\u6216Django\u5728\u542f\u52a8\u65f6\u5bfc\u5165\u7684\u5176\u4ed6\u4f4d\u7f6e\u3002  \u5982\u679c\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e9b\u7528\u6237\uff0c\u5219\u53ef\u4ee5\u5982\u4e0b\u6240\u793a\u4e3a\u6240\u6709\u73b0\u6709\u7528\u6237\u751f\u6210\u4ee4\u724c\uff1a  from django.contrib.auth.models import User\nfrom rest_framework.authtoken.models import Token\n\nfor user in User.objects.all():\n    Token.objects.get_or_create(user=user)",
            "title": "\u901a\u8fc7\u4f7f\u7528\u4fe1\u53f7"
        },
        {
            "location": "/api-guide/authentication_zh/#api_1",
            "text": "\u5f53\u4f7f\u7528 TokenAuthentication \u65f6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u4e00\u4e2a\u83b7\u53d6\u7ed9\u5b9a\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u4ee4\u724c\u7684\u673a\u5236\u3002 REST framework \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684\u89c6\u56fe\u6765\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002\u8981\u4f7f\u7528\u5b83\uff0c\u9700\u8981\u5c06  obtain_auth_token  \u89c6\u56fe\u6dfb\u52a0\u5230\u4f60\u7684URLconf\uff1a  from rest_framework.authtoken import views\nurlpatterns += [\n    url(r'^api-token-auth/', views.obtain_auth_token)\n]  \u6ce8\u610fURL\u6b63\u5219\u5339\u914d\u6a21\u5f0f\u90a3\u91cc\u53ef\u4ee5\u662f\u4f60\u60f3\u8981\u4f7f\u7528\u7684\u4efb\u4f55\u5185\u5bb9\u3002  \u5f53\u4f7f\u7528form\u8868\u5355\u6216JSON\u5c06\u6709\u6548\u7684 username \u548c password \u5b57\u6bb5POST\u63d0\u4ea4\u5230\u89c6\u56fe\u65f6\uff0c obtain_auth_token \u89c6\u56fe\u5c06\u8fd4\u56deJSON\u54cd\u5e94\uff1a  { 'token' : '9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' }  \u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u7684 obtain_auth_token \u89c6\u56fe\u663e\u5f0f\u4f7f\u7528JSON\u8bf7\u6c42\u548c\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4f7f\u7528settings\u4e2d\u914d\u7f6e\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u7c7b\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u7248\u672c\u7684 obtain_auth_token \u89c6\u56fe\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 ObtainAuthToken \u7c7b\uff0c\u5e76\u5728url conf\u4e2d\u4f7f\u7528\u5b83\u6765\u5b9e\u73b0\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u6743\u9650\u6216\u9650\u5236\u5e94\u7528\u4e8e obtain_auth_token \u89c6\u56fe\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5e94\u7528\u9650\u5236\uff0c\u5219\u9700\u8981\u91cd\u5199\u89c6\u56fe\u7c7b\uff0c\u5e76\u4f7f\u7528 throttle_classes \u5c5e\u6027\u5305\u542b\u5b83\u4eec\u3002",
            "title": "\u901a\u8fc7\u66b4\u9732 api \u7aef\u70b9"
        },
        {
            "location": "/api-guide/authentication_zh/#with-django-admin",
            "text": "\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7ba1\u7406\u754c\u9762\u624b\u52a8\u521b\u5efa\u4ee4\u724c\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u5927\u578b\u7528\u6237\u7fa4\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u52a8\u6001\u4fee\u6539 TokenAdmin \u7c7b\uff0c\u4ee5\u6839\u636e\u4f60\u7684\u9700\u8981\u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5c06 user \u5b57\u6bb5\u58f0\u660e\u4e3a raw_field \u3002  your_app/admin.py :  from rest_framework.authtoken.admin import TokenAdmin\n\nTokenAdmin.raw_id_fields = ('user',)",
            "title": "With Django admin"
        },
        {
            "location": "/api-guide/authentication_zh/#session",
            "text": "\u6b64\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528Django\u7684\u9ed8\u8ba4session\u540e\u7aef\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002Session\u8eab\u4efd\u9a8c\u8bc1\u9002\u7528\u4e8e\u4e0e\u4f60\u7684\u7f51\u7ad9\u5728\u76f8\u540c\u7684Session\u73af\u5883\u4e2d\u8fd0\u884c\u7684AJAX\u5ba2\u6237\u7aef\u3002  \u5982\u679c\u6210\u529f\u9a8c\u8bc1\uff0c SessionAuthentication  \u63d0\u4f9b\u4ee5\u4e0b\u51ed\u636e\u3002   request.user  \u662f\u4e00\u4e2a Django  User  \u5b9e\u4f8b\u3002  request.auth  \u662f  None \u3002   \u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de HTTP 403 Forbidden \u54cd\u5e94\u3002  \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u5e26\u6709SessionAuthentication\u7684AJAX\u6837\u5f0f\u7684API\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u4efb\u4f55\"\u4efb\u4f55\"\u4e0d\u5b89\u5168\u7684HTTP\u65b9\u6cd5\u8c03\u7528\uff08\u5982\uff1a PUT ,  PATCH ,  POST  or  DELETE \u8bf7\u6c42\uff09\u90fd\u5305\u542b\u6709\u6548\u7684CSRF token\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Django CSRF \u6587\u6863 \u3002  \u8b66\u544a \uff1a\u5728\u521b\u5efa\u767b\u9646\u9875\u9762\u65f6\uff0c\u59cb\u7ec8\u8981\u4f7f\u7528Django\u7684\u6807\u51c6\u767b\u9646\u89c6\u56fe\u3002\u8fd9\u6837\u624d\u80fd\u786e\u4fdd\u4f60\u7684\u767b\u9646\u89c6\u56fe\u88ab\u6b63\u786e\u7684\u8ba4\u8bc1\u4fdd\u62a4\u3002  \u7531\u4e8e\u9700\u8981\u540c\u65f6\u652f\u6301session\u548cnon-session\u975e\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\uff0cREST\u6846\u67b6\u4e2d\u7684CSRF\u9a8c\u8bc1\u4e0e\u6807\u51c6Django\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002\u8fd9\u610f\u5473\u7740\u53ea\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u9700\u8981CSRF\u4ee4\u724c\uff0c\u533f\u540d\u8bf7\u6c42\u53ef\u80fd\u4e0d\u4f1a\u53d1\u9001CSRF\u4ee4\u724ctokens\u3002\u6b64\u884c\u4e3a\u4e0d\u9002\u7528\u4e8e\u59cb\u7ec8\u9700\u8981\u4f7f\u7528CSRF\u9a8c\u8bc1\u7684\u767b\u5f55\u89c6\u56fe\u3002",
            "title": "Session\u8ba4\u8bc1"
        },
        {
            "location": "/api-guide/authentication_zh/#_6",
            "text": "\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u65b9\u6848\uff0c\u8981\u7ee7\u627f BaseAuthentication \u7c7b\u5e76\u4e14\u91cd\u5199 .authenticate(self, request)  \u65b9\u6cd5\u3002\u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c\u8be5\u65b9\u6cd5\u5e94\u8fd4\u56de (user, auth) \u7684\u4e8c\u5143\u5143\u7ec4\uff0c\u5426\u5219\u8fd4\u56de None \u3002  \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u4e0d\u60f3\u8fd4\u56de None \uff0c\u800c\u662f\u5e0c\u671b\u4ece .authenticate() \u65b9\u6cd5\u629b\u51fa AuthenticationFailed \u5f02\u5e38\u3002  \u901a\u5e38\u4f60\u5e94\u8be5\u91c7\u53d6\u7684\u65b9\u6cd5\u662f\uff1a   \u5982\u679c\u4e0d\u5c1d\u8bd5\u9a8c\u8bc1\uff0c\u8fd4\u56de None \u3002\u8fd8\u5c06\u68c0\u67e5\u4efb\u4f55\u5176\u4ed6\u6b63\u5728\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002  \u5982\u679c\u5c1d\u8bd5\u9a8c\u8bc1\u4f46\u5931\u8d25\uff0c\u5219\u629b\u51fa AuthenticationFailed \u5f02\u5e38\u3002\u65e0\u8bba\u4efb\u4f55\u6743\u9650\u68c0\u67e5\u4e5f\u4e0d\u68c0\u67e5\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u7acb\u5373\u8fd4\u56de\u9519\u8bef\u54cd\u5e94\u3002   \u4f60\u4e5f \u53ef\u4ee5 \u91cd\u5199 .authenticate_header(self, request) \u65b9\u6cd5\u3002\u5982\u679c\u5b9e\u73b0\u8be5\u65b9\u6cd5\uff0c\u5219\u5e94\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u7528\u4f5c HTTP 401 Unauthorized \u54cd\u5e94\u4e2d\u7684 WWW-Authenticate \u5934\u7684\u503c\u3002  \u5982\u679c .authenticate_header() \u65b9\u6cd5\u672a\u88ab\u91cd\u5199\uff0c\u5219\u8ba4\u8bc1\u65b9\u6848\u5c06\u5728\u672a\u9a8c\u8bc1\u7684\u8bf7\u6c42\u88ab\u62d2\u7edd\u8bbf\u95ee\u65f6\u8fd4\u56de HTTP 403 Forbidden \u54cd\u5e94\u3002",
            "title": "\u81ea\u5b9a\u4e49\u8ba4\u8bc1"
        },
        {
            "location": "/api-guide/authentication_zh/#_7",
            "text": "\u4ee5\u4e0b\u793a\u4f8b\u5c06\u4ee5\u81ea\u5b9a\u4e49\u8bf7\u6c42\u6807\u5934\u4e2d\u540d\u79f0\u4e3a'X_USERNAME'\u63d0\u4f9b\u7684\u7528\u6237\u540d\u4f5c\u4e3a\u7528\u6237\u5bf9\u4efb\u4f55\u4f20\u5165\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002  from django.contrib.auth.models import User\nfrom rest_framework import authentication\nfrom rest_framework import exceptions\n\nclass ExampleAuthentication(authentication.BaseAuthentication):\n    def authenticate(self, request):\n        username = request.META.get('X_USERNAME')\n        if not username:\n            return None\n\n        try:\n            user = User.objects.get(username=username)\n        except User.DoesNotExist:\n            raise exceptions.AuthenticationFailed('No such user')\n\n        return (user, None)",
            "title": "\u793a\u4f8b"
        },
        {
            "location": "/api-guide/authentication_zh/#_8",
            "text": "\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u662f\u53ef\u7528\u7684\u3002",
            "title": "\u7b2c\u4e09\u65b9\u5305"
        },
        {
            "location": "/api-guide/authentication_zh/#django-oauth-toolkit",
            "text": "Django OAuth Toolkit  \u5305\u63d0\u4f9b\u4e86OAuth 2.0 \u8ba4\u8bc1\u652f\u6301\uff0c\u5e76\u4e14\u517c\u5bb9Python 2.7\u548cPython 3.3+\u3002\u8fd9\u4e2a\u5305\u4f7f\u7528\u4f18\u79c0\u7684 OAuthLib \uff0c\u7531 Evonove \u7ef4\u62a4\u3002\u8be5\u8f6f\u4ef6\u5305\u6709\u5f88\u5b8c\u5584\u7684\u6587\u6863\uff0c\u5e76\u5f97\u5230\u5f88\u597d\u7684\u652f\u6301\uff0c\u76ee\u524d\u662f\u6211\u4eec \u63a8\u8350\u4f7f\u7528\u7684OAuth 2.0\u652f\u6301\u8f6f\u4ef6\u5305 \u3002",
            "title": "Django OAuth Toolkit"
        },
        {
            "location": "/api-guide/authentication_zh/#_9",
            "text": "\u4f7f\u7528 pip \u5b89\u88c5\u3002  pip install django-oauth-toolkit  \u628a\u8fd9\u4e2a\u5305\u6dfb\u52a0\u5230\u4f60\u7684 INSTALLED_APPS \u4e2d\uff0c\u5e76\u4e14\u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002  INSTALLED_APPS = (\n    ...\n    'oauth2_provider',\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'oauth2_provider.ext.rest_framework.OAuth2Authentication',\n    )\n}  \u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u9605 Django REST framework - Getting started \u6587\u6863\u3002",
            "title": "\u5b89\u88c5\u548c\u914d\u7f6e"
        },
        {
            "location": "/api-guide/authentication_zh/#django-rest-framework-oauth",
            "text": "Django REST framework OAuth \u5305\u63d0\u4f9bOAuth1\u548cOAuth2\u652f\u6301\u3002  \u8fd9\u4e2a\u8f6f\u4ef6\u5305\u4ee5\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework\u4e2d\uff0c\u4f46\u73b0\u5728\u5df2\u88ab\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u652f\u6301\u548c\u7ef4\u62a4\u3002",
            "title": "Django REST framework OAuth"
        },
        {
            "location": "/api-guide/authentication_zh/#_10",
            "text": "\u4f7f\u7528 pip \u8fdb\u884c\u5b89\u88c5\u3002  pip install djangorestframework-oauth  \u66f4\u591a\u914d\u7f6e\u548c\u4f7f\u7528\u4fe1\u606f\u8bf7\u67e5\u9605Django REST framework OAuth\u6587\u6863\u4e2d\u7684 authentication \u548c permissions \u3002",
            "title": "\u5b89\u88c5\u548c\u914d\u7f6e"
        },
        {
            "location": "/api-guide/authentication_zh/#digest-authentication",
            "text": "HTTP\u6458\u8981\u8ba4\u8bc1\u662f\u4e00\u79cd\u5e7f\u6cdb\u5b9e\u73b0\u7684\u65b9\u6848\uff0c\u65e8\u5728\u66ff\u4ee3HTTP\u57fa\u672c\u8ba4\u8bc1\uff0c\u5e76\u63d0\u4f9b\u7b80\u5355\u7684\u52a0\u5bc6\u8ba4\u8bc1\u673a\u5236\u3002 Juan Riaza \u7ef4\u62a4\u7740 djangorestframework-digestauth \u4e3aREST framework\u63d0\u4f9b\u4e86HTTP\u6458\u8981\u8ba4\u8bc1\u652f\u6301\u3002",
            "title": "Digest Authentication"
        },
        {
            "location": "/api-guide/authentication_zh/#django-oauth2-consumer",
            "text": "Rediker Software \u7684 Django OAuth2 Consumer \u662f\u53e6\u4e00\u4e2a\u4e3aREST\u6846\u67b6\u63d0\u4f9b OAuth 2.0 support for REST framework \u7684\u8f6f\u4ef6\u5305\u3002\u8be5\u5305\u5305\u542btokens\u8303\u56f4\u9650\u5236\u6743\u9650\uff0c\u5141\u8bb8\u5bf9\u4f60\u7684API\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u8bbf\u95ee\u3002",
            "title": "Django OAuth2 Consumer"
        },
        {
            "location": "/api-guide/authentication_zh/#json-web-token-authentication",
            "text": "JSON Web Token\u662f\u4e00\u79cd\u76f8\u5f53\u65b0\u7684\u6807\u51c6\uff0c\u53ef\u7528\u4e8e\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\u4e0e\u5185\u7f6e\u7684TokenAuthentication\u65b9\u6848\u4e0d\u540c\uff0cJWT\u8eab\u4efd\u9a8c\u8bc1\u4e0d\u9700\u8981\u4f7f\u7528\u6570\u636e\u5e93\u6765\u9a8c\u8bc1\u4ee4\u724c\u3002 Blimp \u7ef4\u62a4 djangorestframework-jwt \u8f6f\u4ef6\u5305\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2aJWT Authentication\u7c7b\u4ee5\u53ca\u4e00\u4e2a\u673a\u5236\uff0c\u5ba2\u6237\u7aef\u83b7\u5f97\u4e00\u4e2a\u7ed9\u5b9a\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684JWT\u3002",
            "title": "JSON Web Token Authentication"
        },
        {
            "location": "/api-guide/authentication_zh/#hawk-http-authentication",
            "text": "HawkREST \u5e93\u57fa\u4e8e Mohawk \u5e93\uff0c\u8ba9\u4f60\u53ef\u4ee5\u5728API\u4e2d\u4f7f\u7528 Hawk \u7b7e\u540d\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u3002 Hawk \u8ba9\u53cc\u65b9\u4f7f\u7528\u5171\u4eab\u5bc6\u94a5\u7b7e\u540d\u7684\u6d88\u606f\u5f7c\u6b64\u5b89\u5168\u5730\u8fdb\u884c\u901a\u4fe1\u3002\u5b83\u57fa\u4e8e HTTP MAC access authentication \u8bbf\u95ee\u8ba4\u8bc1\uff08\u5b83\u57fa\u4e8e OAuth 1.0 \u7684\u90e8\u5206\uff09\u3002",
            "title": "Hawk HTTP Authentication"
        },
        {
            "location": "/api-guide/authentication_zh/#http-signature-authentication",
            "text": "HTTP\u7b7e\u540d\uff08\u76ee\u524d\u4e3a IETF\u8349\u6848 \uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0HTTP\u6d88\u606f\u7684\u6e90\u8ba4\u8bc1\u548c\u6d88\u606f\u5b8c\u6574\u6027\u7684\u65b9\u6cd5\u3002\u4e0e Amazon\u7684HTTP\u7b7e\u540d\u65b9\u6848 \u7c7b\u4f3c\uff0c\u8bb8\u591a\u670d\u52a1\u4f7f\u7528\u5b83\uff0c\u5b83\u5141\u8bb8\u65e0\u72b6\u6001\u7684\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002 Elvio Toccalino \u7ef4\u62a4\u4e86 djangorestframework-httpsignature \u5305\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684HTTP\u7b7e\u540d\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u3002",
            "title": "HTTP Signature Authentication"
        },
        {
            "location": "/api-guide/authentication_zh/#djoser",
            "text": "Djoser \u5e93\u63d0\u4f9b\u4e00\u7ec4\u89c6\u56fe\u6765\u5904\u7406\u57fa\u672c\u64cd\u4f5c\uff0c\u5982\u6ce8\u518c\uff0c\u767b\u5f55\uff0c\u6ce8\u9500\uff0c\u5bc6\u7801\u91cd\u7f6e\u548c\u5e10\u6237\u6fc0\u6d3b\u3002\u8be5\u5305\u4f7f\u7528\u81ea\u5b9a\u4e49\u7528\u6237\u6a21\u578b\uff0c\u5b83\u4f7f\u7528\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528REST\u5b9e\u73b0\u7684Django\u8ba4\u8bc1\u7cfb\u7edf\u3002",
            "title": "Djoser"
        },
        {
            "location": "/api-guide/authentication_zh/#django-rest-auth",
            "text": "Django-rest-auth \u5e93\u63d0\u4f9b\u4e86\u4e00\u7ec4REST API\u7aef\u70b9\uff0c\u7528\u4e8e\u6ce8\u518c\uff0c\u8eab\u4efd\u9a8c\u8bc1\uff08\u5305\u62ec\u793e\u4ea4\u5a92\u4f53\u8eab\u4efd\u9a8c\u8bc1\uff09\uff0c\u5bc6\u7801\u91cd\u7f6e\uff0c\u68c0\u7d22\u548c\u66f4\u65b0\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u7b49\u3002\u6709\u4e86\u8fd9\u4e9bAPI\u7aef\u70b9\u4e4b\u540e\uff0c\u4f60\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\uff08\u5982AngularJS\uff0ciOS\uff0cAndroid\u548c\u5176\u4ed6\uff09\u53ef\u4ee5\u901a\u8fc7REST API\u72ec\u7acb\u901a\u4fe1\u5230Django\u540e\u7aef\u7ad9\u70b9\uff0c\u4ee5\u8fdb\u884c\u7528\u6237\u7ba1\u7406\u3002",
            "title": "django-rest-auth"
        },
        {
            "location": "/api-guide/authentication_zh/#django-rest-framework-social-oauth2",
            "text": "Django-rest-framework-social-oauth2 \u5e93\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u793e\u4ea4\u63d2\u4ef6\uff08facebook\uff0ctwitter\uff0cgoogle\u7b49\uff09\u96c6\u6210\u5230\u4f60\u7684\u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\u548c\u7b80\u5355\u7684oauth2\u8bbe\u7f6e\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u4f7f\u7528\u8fd9\u4e2a\u5e93\uff0c\u4f60\u5c06\u80fd\u591f\u6839\u636e\u5916\u90e8token\uff08\u4f8b\u5982\uff0cFacebook\u8bbf\u95eetoken\uff09\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5c06\u8fd9\u4e9b\u4ee4\u724c\u8f6c\u6362\u4e3a\u201c\u5185\u90e8\u201doauth2 tokens\uff0c\u5e76\u4f7f\u7528\u548c\u751f\u6210oauth2 tokens\u6765\u9a8c\u8bc1\u7528\u6237\u3002",
            "title": "django-rest-framework-social-oauth2"
        },
        {
            "location": "/api-guide/authentication_zh/#django-rest-knox",
            "text": "Django-rest-knox \u5e93\u63d0\u4f9b\u4e86\u6a21\u578b\u548c\u89c6\u56fe\uff0c\u4ee5\u6bd4\u5185\u7f6e\u7684TokenAuthentication\u65b9\u6848\u66f4\u5b89\u5168\u548c\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u6765\u5904\u7406\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1 - \u4f7f\u7528\u5355\u9875\u9762\u5e94\u7528\u7a0b\u5e8f\u548c\u79fb\u52a8\u5ba2\u6237\u7aef\u80fd\u591f\u4e00\u8d77\u3002\u5b83\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9btokens\uff0c\u4ee5\u53ca\u5728\u63d0\u4f9b\u4e00\u4e9b\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\uff08\u901a\u5e38\u662f\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\uff09\u65f6\u751f\u6210tokens\uff0c\u5220\u9664token\uff08\u63d0\u4f9b\u670d\u52a1\u5668\u5f3a\u5236\u6ce8\u9500\uff09\u548c\u5220\u9664\u6240\u6709tokens\uff08\u6ce8\u9500\u7528\u6237\u767b\u5f55\u7684\u6240\u6709\u5ba2\u6237\u7aef\uff09\u7684\u89c6\u56fe\u3002",
            "title": "django-rest-knox"
        },
        {
            "location": "/api-guide/permissions_zh/",
            "text": "\u6743\u9650\n\n\n\n\n\u8eab\u4efd\u9a8c\u8bc1\u6216\u8eab\u4efd\u8bc6\u522b\u672c\u8eab\u901a\u5e38\u4e0d\u8db3\u4ee5\u83b7\u53d6\u4fe1\u606f\u6216\u4ee3\u7801\u7684\u8bbf\u95ee\u6743\u9650\u3002\u56e0\u6b64\uff0c\u8bf7\u6c42\u8bbf\u95ee\u7684\u5b9e\u4f53\u5fc5\u987b\u5177\u6709\u6388\u6743\u3002\n\n\n\u2014 \nApple Developer Documentation\n\n\n\n\n\u8fde\u540c\n\u8ba4\u8bc1\n\u548c\n\u9650\u5236\n\uff0c\u6743\u9650\u51b3\u5b9a\u662f\u5426\u5e94\u8be5\u63a5\u6536\u8bf7\u6c42\u6216\u62d2\u7edd\u8bbf\u95ee\u3002\n\n\n\u6743\u9650\u68c0\u67e5\u59cb\u7ec8\u5728\u89c6\u56fe\u7684\u5f00\u59cb\u5904\u8fd0\u884c\uff0c\u5728\u5141\u8bb8\u7ee7\u7eed\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u4e4b\u524d\u8fd0\u884c\u3002\n\u6743\u9650\u68c0\u67e5\u901a\u5e38\u4f1a\u4f7f\u7528\nrequest.user\n\u548c\nrequest.auth\n\u5c5e\u6027\u4e2d\u7684\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\u6765\u786e\u5b9a\u662f\u5426\u5141\u8bb8\u4f20\u5165\u8bf7\u6c42\u3002\n\n\n\u6743\u9650\u7528\u4e8e\u6388\u4e88\u6216\u62d2\u7edd\u5c06\u4e0d\u540c\u7c7b\u522b\u7684\u7528\u6237\u8bbf\u95ee\u5230API\u7684\u4e0d\u540c\u90e8\u5206\u3002\n\n\n\u6700\u7b80\u5355\u7684\u6743\u9650\u662f\u5141\u8bb8\u8bbf\u95ee\u4efb\u4f55\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\uff0c\u5e76\u62d2\u7edd\u8bbf\u95ee\u4efb\u4f55\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u3002\u8fd9\u5bf9\u5e94\u4e8eREST\u6846\u67b6\u4e2d\u7684\nIsAuthenticated\n\u7c7b\u3002\n\n\n\u7a0d\u5fae\u4e25\u683c\u7684\u6743\u9650\u63a7\u5236\u98ce\u683c\u662f\u5bf9\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u5141\u8bb8\u5b8c\u5168\u8bbf\u95ee\uff0c\u4f46\u5bf9\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u5141\u8bb8\u53ea\u8bfb\u8bbf\u95ee\u3002\u8fd9\u5bf9\u5e94\u4e8eREST\u6846\u67b6\u4e2d\u7684\nIsAuthenticatedOrReadOnly\n\u7c7b\u3002\n\n\n\u5982\u4f55\u786e\u5b9a\u6743\u9650\n\n\nREST\u6846\u67b6\u4e2d\u7684\u6743\u9650\u59cb\u7ec8\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6743\u9650\u7c7b\u7684\u5217\u8868\u3002\n\n\n\u5728\u8fd0\u884c\u89c6\u56fe\u7684\u4e3b\u4f53\u4e4b\u524d\uff0c\u68c0\u67e5\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6743\u9650\u3002\n\u5982\u679c\u4efb\u4f55\u6743\u9650\u68c0\u67e5\u5931\u8d25\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a\nexceptions.PermissionDenied\n\u6216\nexceptions.NotAuthenticated\n\u5f02\u5e38\uff0c\u5e76\u4e14\u89c6\u56fe\u7684\u4e3b\u4f53\u5c06\u4e0d\u4f1a\u8fd0\u884c\u3002\n\n\n\u5f53\u6743\u9650\u68c0\u67e5\u5931\u8d25\u65f6\uff0c\u5c06\u8fd4\u56de\"403 Forbidden\"\u6216\"401 Unauthorized\"\u54cd\u5e94\uff0c\u5177\u4f53\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff1a\n\n\n\n\n\u8bf7\u6c42\u5df2\u6210\u529f\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u6743\u9650\u88ab\u62d2\u7edd\u3002 \n\u2014 \u5c06\u8fd4\u56de403 Forbidden\u54cd\u5e94\u3002\n\n\n\u8bf7\u6c42\u672a\u6210\u529f\u8ba4\u8bc1\uff0c\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u8ba4\u8bc1\u7c7b\n\u4e0d\u4f7f\u7528\nWWW-Authenticate\n\u6807\u5934\u3002\n\u2014 \u5c06\u8fd4\u56de403 Forbidden\u54cd\u5e94\u3002\n\n\n\u8bf7\u6c42\u672a\u6210\u529f\u8ba4\u8bc1\uff0c\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u8ba4\u8bc1\u7c7b\n\u4f7f\u7528\nWWW-Authenticate\n\u6807\u5934\u3002\n\u2014 \u5c06\u8fd4\u56deHTTP 401\u672a\u7ecf\u6388\u6743\u7684\u54cd\u5e94\uff0c\u5e76\u9644\u5e26\u9002\u5f53\u7684\nWWW-Authenticate\n\u6807\u5934\u3002\n\n\n\n\n\u5bf9\u8c61\u7ea7\u6743\u9650\n\n\nREST\u6846\u67b6\u6743\u9650\u8fd8\u652f\u6301\u5bf9\u8c61\u7ea7\u7684\u8bb8\u53ef\u3002\u5bf9\u8c61\u7ea7\u6743\u9650\u7528\u4e8e\u786e\u5b9a\u662f\u5426\u5141\u8bb8\u7528\u6237\u64cd\u4f5c\u7279\u5b9a\u5bf9\u8c61\uff08\u901a\u5e38\u662f\u6a21\u578b\u5b9e\u4f8b\uff09\u3002\n\n\n\u5f53\u8c03\u7528\n.get_object()\n\u65f6\uff0c\u7531REST\u6846\u67b6\u7684\u901a\u7528\u89c6\u56fe\u8fd0\u884c\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u6d4b\u3002\n\u4e0e\u89c6\u56fe\u7ea7\u522b\u6743\u9650\u4e00\u6837\uff0c\u5982\u679c\u4e0d\u5141\u8bb8\u7528\u6237\u64cd\u4f5c\u7ed9\u5b9a\u5bf9\u8c61\uff0c\u5219\u4f1a\u629b\u51fa\nexceptions.PermissionDenied\n\u5f02\u5e38\u3002\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199\u81ea\u5df1\u7684\u89c6\u56fe\u5e76\u5e0c\u671b\u5f3a\u5236\u6267\u884c\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u6d4b\uff0c\u6216\u8005\u4f60\u60f3\u5728\u901a\u7528\u89c6\u56fe\u4e2d\u91cd\u5199\nget_object\n\u65b9\u6cd5\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u5728\u68c0\u7d22\u5bf9\u8c61\u7684\u65f6\u5019\u663e\u5f0f\u8c03\u7528\u89c6\u56fe\u4e0a\u7684\n.check_object_permissions(request, obj)\n\u65b9\u6cd5\u3002\n\n\n\u8fd9\u5c06\u629b\u51fa\nPermissionDenied\n\u6216\nNotAuthenticated\n\u5f02\u5e38\uff0c\u6216\u8005\u5982\u679c\u89c6\u56fe\u5177\u6709\u9002\u5f53\u7684\u6743\u9650\uff0c\u5219\u8fd4\u56de\u3002\n\n\n\u4f8b\u5982\uff1a\n\n\ndef get_object(self):\n    obj = get_object_or_404(self.get_queryset())\n    self.check_object_permissions(self.request, obj)\n    return obj\n\n\n\n\u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650\u9650\u5236\n\n\n\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u901a\u7528\u89c6\u56fe\u5728\u8fd4\u56de\u5bf9\u8c61\u5217\u8868\u65f6\u4e0d\u4f1a\u81ea\u52a8\u5c06\u5bf9\u8c61\u7ea7\u6743\u9650\u5e94\u7528\u4e8e\u67e5\u8be2\u96c6\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u3002\n\n\n\u901a\u5e38\uff0c\u5f53\u4f60\u4f7f\u7528\u5bf9\u8c61\u7ea7\u6743\u9650\u65f6\uff0c\u4f60\u8fd8\u9700\u8981\u9002\u5f53\u5730\n\u8fc7\u6ee4\u67e5\u8be2\u96c6\n\u8fc7\u6ee4\u67e5\u8be2\u96c6\uff0c\u4ee5\u786e\u4fdd\u7528\u6237\u53ea\u80fd\u770b\u5230\u4ed6\u4eec\u88ab\u5141\u8bb8\u67e5\u770b\u7684\u5b9e\u4f8b\u3002\n\n\n\u8bbe\u7f6e\u6743\u9650\u7b56\u7565\n\n\n\u9ed8\u8ba4\u6743\u9650\u7b56\u7565\u53ef\u4ee5\u4f7f\u7528\nDEFAULT_PERMISSION_CLASSES\n\u8bbe\u7f6e\u8fdb\u884c\u5168\u5c40\u8bbe\u7f6e\u3002\u6bd4\u5982\uff1a\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    )\n}\n\n\n\n\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u6b64\u8bbe\u7f6e\u9ed8\u8ba4\u4e3a\u5141\u8bb8\u65e0\u9650\u5236\u8bbf\u95ee\uff1a\n\n\n'DEFAULT_PERMISSION_CLASSES': (\n   'rest_framework.permissions.AllowAny',\n)\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\nAPIView\n\u7c7b\u7684\u89c6\u56fe\u5728\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002\n\n\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    permission_classes = (IsAuthenticated,)\n\n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)\n\n\n\n\u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528\n@api_view\n\u88c5\u9970\u5668\u88c5\u9970\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\n\n\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\n\n@api_view(['GET'])\n@permission_classes((IsAuthenticated, ))\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n\n\n\n\u6ce8\u610f\uff1a\n \u5f53\u4f60\u901a\u8fc7\u7c7b\u5c5e\u6027\u6216\u88c5\u9970\u5668\u8bbe\u7f6e\u65b0\u7684\u6743\u9650\u7c7b\u65f6\uff0c\u4f60\u8981\u901a\u77e5\u89c6\u56fe\u5ffd\u7565\nsettings.py\n\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684\u9ed8\u8ba4\u5217\u8868\u3002\n\n\n\n\nAPI \u53c2\u8003\n\n\nAllowAny\n\n\nAllowAny\n\u6743\u9650\u7c7b\u5c06\u5141\u8bb8\u4e0d\u53d7\u9650\u5236\u7684\u8bbf\u95ee\uff0c\u800c\n\u4e0d\u7ba1\u8be5\u8bf7\u6c42\u662f\u5426\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u6216\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\n\u3002\n\n\n\u6b64\u6743\u9650\u4e0d\u662f\u4e25\u683c\u8981\u6c42\u7684\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7a7a\u5217\u8868\u6216\u5143\u7ec4\u8fdb\u884c\u6743\u9650\u8bbe\u7f6e\u6765\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u4f46\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u6307\u5b9a\u6b64\u7c7b\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4f7f\u610f\u56fe\u66f4\u660e\u786e\u3002\n\n\nIsAuthenticated\n\n\nIsAuthenticated\n \u6743\u9650\u7c7b\u5c06\u62d2\u7edd\u4efb\u4f55\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u6743\u9650\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u6743\u9650\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u4ec5\u4f9b\u6ce8\u518c\u7528\u6237\u8bbf\u95ee\uff0c\u5219\u6b64\u6743\u9650\u9002\u7528\u3002\n\n\n\u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u5141\u8bb8\u533f\u540d\u7528\u6237\u8bfb\u53d6\u6743\u9650\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8\u5bf9\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8fdb\u884c\u5199\u5165\u6743\u9650\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002\n\n\nIsAdminUser\n\n\n\u9664\u975e\nuser.is_staff\n\u4e3a\nTrue\n\uff0c\u5426\u5219\nIsAdminUser\n\u6743\u9650\u7c7b\u5c06\u62d2\u7edd\u4efb\u4f55\u7528\u6237\u7684\u6743\u9650\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u5141\u8bb8\u6743\u9650\u3002\n\n\n\u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u53ea\u80fd\u88ab\u90e8\u5206\u53d7\u4fe1\u4efb\u7684\u7ba1\u7406\u5458\u8bbf\u95ee\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002\n\n\nIsAuthenticatedOrReadOnly\n\n\nIsAuthenticatedOrReadOnly\n \u5c06\u5141\u8bb8\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u6267\u884c\u4efb\u4f55\u8bf7\u6c42\u3002\u53ea\u6709\u5f53\u8bf7\u6c42\u65b9\u6cd5\u662f\u201c\u5b89\u5168\u201d\u65b9\u6cd5\uff08\nGET\n, \nHEAD\n \u6216 \nOPTIONS\n\uff09\u4e4b\u4e00\u65f6\uff0c\u624d\u5141\u8bb8\u672a\u7ecf\u6388\u6743\u7684\u7528\u6237\u8bf7\u6c42\u3002\n\n\n\u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u5141\u8bb8\u533f\u540d\u7528\u6237\u8bfb\u53d6\u6743\u9650\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8\u5bf9\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8fdb\u884c\u5199\u5165\u6743\u9650\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002\n\n\nDjangoModelPermissions\n\n\n\u6b64\u6743\u9650\u7c7b\u4e0eDjango\u7684\u6807\u51c6\ndjango.contrib.auth\nmodel\u6743\u9650\n\u76f8\u5173\u8054\u3002\u6b64\u6743\u9650\u53ea\u80fd\u5e94\u7528\u4e8e\u5177\u6709\n.queryset\n\u5c5e\u6027\u96c6\u7684\u89c6\u56fe\u3002\u53ea\u6709\u5728\u7528\u6237\n\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\n\u5e76\u5206\u914d\u4e86\n\u76f8\u5173\u6a21\u578b\u6743\u9650\n\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u4f1a\u88ab\u6388\u4e88\u6743\u9650\u3002\n\n\n\n\nPOST\n \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709\n\u6dfb\u52a0\n\u6743\u9650\u3002\n\n\nPUT\n \u548c \nPATCH\n \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709\n\u66f4\u6539\n\u6743\u9650\u3002\n\n\nDELETE\n \u8bf7\u6c42\u60f3\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709\n\u5220\u9664\n\u6743\u9650\u3002\n\n\n\n\n\u9ed8\u8ba4\u884c\u4e3a\u4e5f\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u652f\u6301\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4e3a\nGET\n\u8bf7\u6c42\u5305\u542b\u4e00\u4e2a\n\u67e5\u770b\n\u6a21\u578b\u7684\u6743\u9650\u3002\n\n\n\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\uff0c\u8bf7\u8986\u76d6\nDjangoModelPermissions\n\u5e76\u8bbe\u7f6e\n.perms_map\n\u5c5e\u6027\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002\n\n\n\u4f7f\u7528\u4e0d\u5305\u542b\nqueryset\n\u5c5e\u6027\u7684\u89c6\u56fe\u3002\n\n\n\u5982\u679c\u4f60\u5728\u91cd\u5199\u4e86\nget_queryset()\n\u65b9\u6cd5\u7684\u89c6\u56fe\u4e2d\u4f7f\u7528\u6b64\u6743\u9650\uff0c\u8fd9\u4e2a\u89c6\u56fe\u4e0a\u53ef\u80fd\u6ca1\u6709\nqueryset\n\u5c5e\u6027\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5efa\u8bae\u8fd8\u4f7f\u7528\u4fdd\u62a4\u6027\u7684\u67e5\u8be2\u96c6\u6765\u6807\u8bb0\u89c6\u56fe\uff0c\u4ee5\u4fbf\u6b64\u7c7b\u53ef\u4ee5\u786e\u5b9a\u6240\u9700\u7684\u6743\u9650\u3002\u6bd4\u5982\uff1a\n\n\nqueryset = User.objects.none()  # DjangoModelPermissions\u9700\u8981\u4e00\u4e2aqueryset\n\n\n\nDjangoModelPermissionsOrAnonReadOnly\n\n\n\u4e0e\nDjangoModelPermissions\n\u7c7b\u4f3c\uff0c\u4f46\u4e5f\u5141\u8bb8\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u5177\u6709\u5bf9API\u7684\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002\n\n\nDjangoObjectPermissions\n\n\n\u6b64\u6743\u9650\u7c7b\u4e0eDjango\u7684\u6807\u51c6\n\u5bf9\u8c61\u6743\u9650\u6846\u67b6\n\u76f8\u5173\u8054\uff0c\u8be5\u6846\u67b6\u5141\u8bb8\u6a21\u578b\u4e0a\u7684\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6743\u9650\u3002\u4e3a\u4e86\u4f7f\u7528\u6b64\u6743\u9650\u7c7b\uff0c\u4f60\u8fd8\u9700\u8981\u6dfb\u52a0\u652f\u6301\u5bf9\u8c61\u7ea7\u6743\u9650\u7684\u6743\u9650\u540e\u7aef\uff0c\u4f8b\u5982\ndjango-guardian\n\u3002\n\n\n\u4e0e\nDjangoModelPermissions\n\u4e00\u6837\uff0c\u6b64\u6743\u9650\u53ea\u80fd\u5e94\u7528\u4e8e\u5177\u6709\n.queryset\n\u5c5e\u6027\u6216\n.get_queryset()\n\u65b9\u6cd5\u7684\u89c6\u56fe\u3002\u53ea\u6709\u5728\u7528\u6237\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u5e76\u4e14\u5177\u6709\n\u76f8\u5173\u7684\u6bcf\u4e2a\u5bf9\u8c61\u6743\u9650\n\u548c\u76f8\u5173\u7684\n\u6a21\u578b\u6743\u9650\n\u540e\uff0c\u624d\u4f1a\u88ab\u6388\u4e88\u6743\u9650\u3002\n\n\n\n\nPOST\n \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5b9e\u4f8b\u5177\u6709\n\u6dfb\u52a0\n\u6743\u9650\u3002\n\n\nPUT\n \u548c\nPATCH\n \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u793a\u4f8b\u5177\u6709\n\u66f4\u6539\n\u6743\u9650\u3002\n\n\nDELETE\n \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u793a\u4f8b\u5177\u6709\n\u5220\u9664\n\u6743\u9650\u3002\n\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\nDjangoObjectPermissions\n \n\u4e0d\u9700\u8981\n \ndjango-guardian\n\u8f6f\u4ef6\u5305\uff0c\u5e76\u4e14\u5e94\u5f53\u540c\u6837\u652f\u6301\u5176\u4ed6\u5bf9\u8c61\u7ea7\u522b\u7684\u540e\u7aef\u3002\n\n\n\u4e0e\nDjangoModelPermissions\n\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\nDjangoObjectPermissions\n\u5e76\u8bbe\u7f6e\n.perms_map\n\u5c5e\u6027\u6765\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002\n\n\n\n\n\u6ce8\u610f\n\uff1a\u5982\u679c\u4f60\u9700\u8981\nGET\n,\nHEAD\n\u548c\nOPTIONS\n\u8bf7\u6c42\u7684\u5bf9\u8c61\u7ea7\n\u89c6\u56fe\n\u6743\u9650\uff0c\u90a3\u4e48\u4f60\u8fd8\u9700\u8981\u8003\u8651\u6dfb\u52a0\nDjangoObjectPermissionsFilter\n\u7c7b\uff0c\u4ee5\u786e\u4fdd\u76f8\u5e94API\u53ea\u8fd4\u56de\u5305\u542b\u7528\u6237\u5177\u6709\u9002\u5f53\u89c6\u56fe\u6743\u9650\u7684\u5bf9\u8c61\u7684\u7ed3\u679c\u3002\n\n\n\n\n\n\n\u81ea\u5b9a\u4e49\u6743\u9650\n\n\n\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6743\u9650\uff0c\u8bf7\u91cd\u5199\nBasePermission\n\u5e76\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\n\n\n\n\n.has_permission(self, request, view)\n\n\n.has_object_permission(self, request, view, obj)\n\n\n\n\n\u5982\u679c\u8bf7\u6c42\u88ab\u6388\u4e88\u8bbf\u95ee\u6743\u9650\uff0c\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\nTrue\n\uff0c\u5426\u5219\u8fd4\u56de\nFalse\n\u3002\n\n\n\u5982\u679c\u4f60\u9700\u8981\u6d4b\u8bd5\u8bf7\u6c42\u662f\u8bfb\u53d6\u64cd\u4f5c\u8fd8\u662f\u5199\u5165\u64cd\u4f5c\uff0c\u5219\u5e94\u8be5\u6839\u636e\u5e38\u91cf\nSAFE_METHODS\n\u68c0\u67e5\u8bf7\u6c42\u65b9\u6cd5\uff0c\nSAFE_METHODS\n\u662f\u5305\u542b\n'GET'\n, \n'OPTIONS'\n\u548c\n'HEAD'\n\u7684\u5143\u7ec4\u3002\u4f8b\u5982\uff1a\n\n\nif request.method in permissions.SAFE_METHODS:\n    # \u68c0\u67e5\u53ea\u8bfb\u8bf7\u6c42\u7684\u6743\u9650\nelse:\n    # \u68c0\u67e5\u8bfb\u53d6\u8bf7\u6c42\u7684\u6743\u9650\n\n\n\n\n\n\u6ce8\u610f\n: \u4ec5\u5f53\u89c6\u56fe\u7ea7\nhas_permission\n\u68c0\u67e5\u5df2\u901a\u8fc7\u65f6\uff0c\u624d\u4f1a\u8c03\u7528\u5b9e\u4f8b\u7ea7\nhas_object_permission\n\u65b9\u6cd5\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u8fd0\u884c\u5b9e\u4f8b\u7ea7\u522b\u68c0\u67e5\uff0c\u89c6\u56fe\u4ee3\u7801\u5e94\u663e\u5f0f\u8c03\u7528\n.check_object_permissions(request, obj)\n\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u901a\u7528\u89c6\u56fe\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4f1a\u4e3a\u4f60\u5904\u7406\u3002\n\n\n\n\n\u5982\u679c\u6821\u9a8c\u5931\u8d25\uff0c\u81ea\u5b9a\u4e49\u6743\u9650\u5c06\u5f15\u53d1\nPermissionDenied\n\u5f02\u5e38\u3002\u8981\u66f4\u6539\u4e0e\u5f02\u5e38\u5173\u8054\u7684\u9519\u8bef\u6d88\u606f\uff0c\u8bf7\u76f4\u63a5\u5728\u81ea\u5b9a\u4e49\u6743\u9650\u4e0a\u5b9e\u73b0\u6d88\u606f\u5c5e\u6027\u3002\u5426\u5219\u5c06\u4f7f\u7528\nPermissionDenied\n\u7684\ndefault_detail\n\u5c5e\u6027\u3002\n\n\nfrom rest_framework import permissions\n\nclass CustomerAccessPermission(permissions.BasePermission):\n    message = 'Adding customers not allowed.'\n\n    def has_permission(self, request, view):\n         ...\n\n\n\n\u793a\u4f8b\n\n\n\u4ee5\u4e0b\u662f\u6839\u636e\u9ed1\u540d\u5355\u68c0\u67e5\u4f20\u5165\u8bf7\u6c42\u7684IP\u5730\u5740\u7684\u6743\u9650\u7c7b\u7684\u793a\u4f8b\uff0c\u5982\u679cIP\u5df2\u88ab\u5217\u5165\u9ed1\u540d\u5355\uff0c\u5219\u62d2\u7edd\u8be5\u8bf7\u6c42\u3002\n\n\nfrom rest_framework import permissions\n\nclass BlacklistPermission(permissions.BasePermission):\n    \"\"\"\n    \u5bf9\u5217\u5165\u9ed1\u540d\u5355\u7684IP\u8fdb\u884c\u5168\u5c40\u6743\u9650\u68c0\u67e5\u3002\n    \"\"\"\n\n    def has_permission(self, request, view):\n        ip_addr = request.META['REMOTE_ADDR']\n        blacklisted = Blacklist.objects.filter(ip_addr=ip_addr).exists()\n        return not blacklisted\n\n\n\n\u9664\u4e86\u9488\u5bf9\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u8fd0\u884c\u7684\u5168\u5c40\u6743\u9650\u5916\uff0c\u8fd8\u53ef\u4ee5\u521b\u5efa\u5bf9\u8c61\u7ea7\u6743\u9650\uff0c\u8fd9\u4e9b\u6743\u9650\u4ec5\u9488\u5bf9\u5f71\u54cd\u7279\u5b9a\u5bf9\u8c61\u5b9e\u4f8b\u7684\u64cd\u4f5c\u8fd0\u884c\u3002\u4f8b\u5982\uff1a\n\n\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    \u5bf9\u8c61\u7ea7\u6743\u9650\u4ec5\u5141\u8bb8\u5bf9\u8c61\u7684\u6240\u6709\u8005\u5bf9\u5176\u8fdb\u884c\u7f16\u8f91\n    \u5047\u8bbe\u6a21\u578b\u5b9e\u4f8b\u5177\u6709`owner`\u5c5e\u6027\u3002\n    \"\"\"\n\n    def has_object_permission(self, request, view, obj):\n        # \u4efb\u4f55\u8bf7\u6c42\u90fd\u5141\u8bb8\u8bfb\u53d6\u6743\u9650\uff0c\n        # \u6240\u4ee5\u6211\u4eec\u603b\u662f\u5141\u8bb8GET\uff0cHEAD\u6216OPTIONS \u8bf7\u6c42.\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        # \u793a\u4f8b\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u540d\u4e3a`owner`\u7684\u5c5e\u6027\n        return obj.owner == request.user\n\n\n\n\u8bf7\u6ce8\u610f\uff0c\u901a\u7528\u89c6\u56fe\u5c06\u68c0\u67e5\u9002\u5f53\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\uff0c\u4f46\u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe\uff0c\u5219\u9700\u8981\u786e\u4fdd\u68c0\u67e5\u81ea\u5df1\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u67e5\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u83b7\u5f97\u5bf9\u8c61\u5b9e\u4f8b\u540e\u4ece\u89c6\u56fe\u4e2d\u8c03\u7528\nself.check_object_permission(request\uff0cobj)\n\u6765\u6267\u884c\u6b64\u64cd\u4f5c.\u5982\u679c\u4efb\u4f55\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u67e5\u5931\u8d25\uff0c\u6b64\u8c03\u7528\u5c06\u5f15\u53d1\u9002\u5f53\u7684\nAPIException\n\uff0c\u5426\u5219\u5c06\u7b80\u5355\u5730\u8fd4\u56de\u3002\n\n\n\u53e6\u8bf7\u6ce8\u610f\uff0c\u901a\u7528\u89c6\u56fe\u4ec5\u68c0\u67e5\u68c0\u7d22\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\u7684\u89c6\u56fe\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\u3002\u5982\u679c\u4f60\u9700\u8981\u5217\u8868\u89c6\u56fe\u7684\u5bf9\u8c61\u7ea7\u8fc7\u6ee4\uff0c\u5219\u9700\u8981\u5355\u72ec\u8fc7\u6ee4\u67e5\u8be2\u96c6\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\nfiltering\u6587\u6863\n\u8fc7\u6ee4\u6587\u6863\u3002\n\n\n\n\n\u7b2c\u4e09\u65b9\u5305\n\n\n\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002\n\n\nComposed Permissions\n\n\nComposed Permissions\n\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u5c0f\u7684\u53ef\u91cd\u7528\u7ec4\u4ef6\u6765\u5b9a\u4e49\u590d\u6742\u548c\u591a\u6df1\u5ea6\uff08\u4f7f\u7528\u903b\u8f91\u8fd0\u7b97\u7b26\uff09\u6743\u9650\u5bf9\u8c61\u3002\n\n\nREST Condition\n\n\nREST Condition\n\u5305\u662f\u7528\u4e8e\u4ee5\u7b80\u5355\u65b9\u4fbf\u7684\u65b9\u5f0f\u6784\u5efa\u590d\u6742\u6743\u9650\u7684\u53e6\u4e00\u4e2a\u6269\u5c55\u3002\u8be5\u6269\u5c55\u5141\u8bb8\u4f60\u5c06\u6743\u9650\u4e0e\u903b\u8f91\u8fd0\u7b97\u7b26\u7ec4\u5408\u5728\u4e00\u8d77\u3002\n\n\nDRY Rest Permissions\n\n\nDRY Rest Permissions\n\u5305\u63d0\u4f9b\u4e86\u4e3a\u5355\u4e2a\u9ed8\u8ba4\u548c\u81ea\u5b9a\u4e49\u64cd\u4f5c\u5b9a\u4e49\u4e0d\u540c\u6743\u9650\u7684\u529f\u80fd\u3002\u6b64\u5305\u9002\u7528\u4e8e\u5177\u6709\u4ece\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u5173\u7cfb\u6d3e\u751f\u7684\u6743\u9650\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u8fd8\u652f\u6301\u901a\u8fc7API\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\u5230\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u6743\u9650\u68c0\u67e5\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u652f\u6301\u5411\u9ed8\u8ba4\u548c\u81ea\u5b9a\u4e49\u5217\u8868\u64cd\u4f5c\u6dfb\u52a0\u6743\u9650\uff0c\u4ee5\u9650\u5236\u4ed6\u4eec\u4e3a\u6bcf\u4e2a\u7528\u6237\u68c0\u7d22\u7684\u6570\u636e\u3002\n\n\nDjango Rest Framework Roles\n\n\nDjango Rest Framework Roles\n\u5305\u4f7f\u4f60\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u901a\u8fc7\u591a\u79cd\u7c7b\u578b\u7684\u7528\u6237\u5bf9API\u8fdb\u884c\u53c2\u6570\u5316\u3002\n\n\nDjango Rest Framework API Key\n\n\nDjango Rest Framework API Key\n\u5305\u5141\u8bb8\u4f60\u786e\u4fdd\u5411\u670d\u52a1\u5668\u53d1\u51fa\u7684\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u9700\u8981\u4e00\u4e2aAPI\u5bc6\u94a5\u6807\u5934\u3002\u60a8\u53ef\u4ee5\u4ecedjango\u7ba1\u7406\u754c\u9762\u751f\u6210\u4e00\u4e2a\u3002",
            "title": "Permissions"
        },
        {
            "location": "/api-guide/permissions_zh/#_1",
            "text": "\u8eab\u4efd\u9a8c\u8bc1\u6216\u8eab\u4efd\u8bc6\u522b\u672c\u8eab\u901a\u5e38\u4e0d\u8db3\u4ee5\u83b7\u53d6\u4fe1\u606f\u6216\u4ee3\u7801\u7684\u8bbf\u95ee\u6743\u9650\u3002\u56e0\u6b64\uff0c\u8bf7\u6c42\u8bbf\u95ee\u7684\u5b9e\u4f53\u5fc5\u987b\u5177\u6709\u6388\u6743\u3002  \u2014  Apple Developer Documentation   \u8fde\u540c \u8ba4\u8bc1 \u548c \u9650\u5236 \uff0c\u6743\u9650\u51b3\u5b9a\u662f\u5426\u5e94\u8be5\u63a5\u6536\u8bf7\u6c42\u6216\u62d2\u7edd\u8bbf\u95ee\u3002  \u6743\u9650\u68c0\u67e5\u59cb\u7ec8\u5728\u89c6\u56fe\u7684\u5f00\u59cb\u5904\u8fd0\u884c\uff0c\u5728\u5141\u8bb8\u7ee7\u7eed\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u4e4b\u524d\u8fd0\u884c\u3002\n\u6743\u9650\u68c0\u67e5\u901a\u5e38\u4f1a\u4f7f\u7528 request.user \u548c request.auth \u5c5e\u6027\u4e2d\u7684\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\u6765\u786e\u5b9a\u662f\u5426\u5141\u8bb8\u4f20\u5165\u8bf7\u6c42\u3002  \u6743\u9650\u7528\u4e8e\u6388\u4e88\u6216\u62d2\u7edd\u5c06\u4e0d\u540c\u7c7b\u522b\u7684\u7528\u6237\u8bbf\u95ee\u5230API\u7684\u4e0d\u540c\u90e8\u5206\u3002  \u6700\u7b80\u5355\u7684\u6743\u9650\u662f\u5141\u8bb8\u8bbf\u95ee\u4efb\u4f55\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\uff0c\u5e76\u62d2\u7edd\u8bbf\u95ee\u4efb\u4f55\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u3002\u8fd9\u5bf9\u5e94\u4e8eREST\u6846\u67b6\u4e2d\u7684 IsAuthenticated \u7c7b\u3002  \u7a0d\u5fae\u4e25\u683c\u7684\u6743\u9650\u63a7\u5236\u98ce\u683c\u662f\u5bf9\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u5141\u8bb8\u5b8c\u5168\u8bbf\u95ee\uff0c\u4f46\u5bf9\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u5141\u8bb8\u53ea\u8bfb\u8bbf\u95ee\u3002\u8fd9\u5bf9\u5e94\u4e8eREST\u6846\u67b6\u4e2d\u7684 IsAuthenticatedOrReadOnly \u7c7b\u3002",
            "title": "\u6743\u9650"
        },
        {
            "location": "/api-guide/permissions_zh/#_2",
            "text": "REST\u6846\u67b6\u4e2d\u7684\u6743\u9650\u59cb\u7ec8\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6743\u9650\u7c7b\u7684\u5217\u8868\u3002  \u5728\u8fd0\u884c\u89c6\u56fe\u7684\u4e3b\u4f53\u4e4b\u524d\uff0c\u68c0\u67e5\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6743\u9650\u3002\n\u5982\u679c\u4efb\u4f55\u6743\u9650\u68c0\u67e5\u5931\u8d25\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a exceptions.PermissionDenied \u6216 exceptions.NotAuthenticated \u5f02\u5e38\uff0c\u5e76\u4e14\u89c6\u56fe\u7684\u4e3b\u4f53\u5c06\u4e0d\u4f1a\u8fd0\u884c\u3002  \u5f53\u6743\u9650\u68c0\u67e5\u5931\u8d25\u65f6\uff0c\u5c06\u8fd4\u56de\"403 Forbidden\"\u6216\"401 Unauthorized\"\u54cd\u5e94\uff0c\u5177\u4f53\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff1a   \u8bf7\u6c42\u5df2\u6210\u529f\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u6743\u9650\u88ab\u62d2\u7edd\u3002  \u2014 \u5c06\u8fd4\u56de403 Forbidden\u54cd\u5e94\u3002  \u8bf7\u6c42\u672a\u6210\u529f\u8ba4\u8bc1\uff0c\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u8ba4\u8bc1\u7c7b \u4e0d\u4f7f\u7528 WWW-Authenticate \u6807\u5934\u3002 \u2014 \u5c06\u8fd4\u56de403 Forbidden\u54cd\u5e94\u3002  \u8bf7\u6c42\u672a\u6210\u529f\u8ba4\u8bc1\uff0c\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u8ba4\u8bc1\u7c7b \u4f7f\u7528 WWW-Authenticate \u6807\u5934\u3002 \u2014 \u5c06\u8fd4\u56deHTTP 401\u672a\u7ecf\u6388\u6743\u7684\u54cd\u5e94\uff0c\u5e76\u9644\u5e26\u9002\u5f53\u7684 WWW-Authenticate \u6807\u5934\u3002",
            "title": "\u5982\u4f55\u786e\u5b9a\u6743\u9650"
        },
        {
            "location": "/api-guide/permissions_zh/#_3",
            "text": "REST\u6846\u67b6\u6743\u9650\u8fd8\u652f\u6301\u5bf9\u8c61\u7ea7\u7684\u8bb8\u53ef\u3002\u5bf9\u8c61\u7ea7\u6743\u9650\u7528\u4e8e\u786e\u5b9a\u662f\u5426\u5141\u8bb8\u7528\u6237\u64cd\u4f5c\u7279\u5b9a\u5bf9\u8c61\uff08\u901a\u5e38\u662f\u6a21\u578b\u5b9e\u4f8b\uff09\u3002  \u5f53\u8c03\u7528 .get_object() \u65f6\uff0c\u7531REST\u6846\u67b6\u7684\u901a\u7528\u89c6\u56fe\u8fd0\u884c\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u6d4b\u3002\n\u4e0e\u89c6\u56fe\u7ea7\u522b\u6743\u9650\u4e00\u6837\uff0c\u5982\u679c\u4e0d\u5141\u8bb8\u7528\u6237\u64cd\u4f5c\u7ed9\u5b9a\u5bf9\u8c61\uff0c\u5219\u4f1a\u629b\u51fa exceptions.PermissionDenied \u5f02\u5e38\u3002  \u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199\u81ea\u5df1\u7684\u89c6\u56fe\u5e76\u5e0c\u671b\u5f3a\u5236\u6267\u884c\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u6d4b\uff0c\u6216\u8005\u4f60\u60f3\u5728\u901a\u7528\u89c6\u56fe\u4e2d\u91cd\u5199 get_object \u65b9\u6cd5\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u5728\u68c0\u7d22\u5bf9\u8c61\u7684\u65f6\u5019\u663e\u5f0f\u8c03\u7528\u89c6\u56fe\u4e0a\u7684 .check_object_permissions(request, obj) \u65b9\u6cd5\u3002  \u8fd9\u5c06\u629b\u51fa PermissionDenied \u6216 NotAuthenticated \u5f02\u5e38\uff0c\u6216\u8005\u5982\u679c\u89c6\u56fe\u5177\u6709\u9002\u5f53\u7684\u6743\u9650\uff0c\u5219\u8fd4\u56de\u3002  \u4f8b\u5982\uff1a  def get_object(self):\n    obj = get_object_or_404(self.get_queryset())\n    self.check_object_permissions(self.request, obj)\n    return obj",
            "title": "\u5bf9\u8c61\u7ea7\u6743\u9650"
        },
        {
            "location": "/api-guide/permissions_zh/#_4",
            "text": "\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u901a\u7528\u89c6\u56fe\u5728\u8fd4\u56de\u5bf9\u8c61\u5217\u8868\u65f6\u4e0d\u4f1a\u81ea\u52a8\u5c06\u5bf9\u8c61\u7ea7\u6743\u9650\u5e94\u7528\u4e8e\u67e5\u8be2\u96c6\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u3002  \u901a\u5e38\uff0c\u5f53\u4f60\u4f7f\u7528\u5bf9\u8c61\u7ea7\u6743\u9650\u65f6\uff0c\u4f60\u8fd8\u9700\u8981\u9002\u5f53\u5730 \u8fc7\u6ee4\u67e5\u8be2\u96c6 \u8fc7\u6ee4\u67e5\u8be2\u96c6\uff0c\u4ee5\u786e\u4fdd\u7528\u6237\u53ea\u80fd\u770b\u5230\u4ed6\u4eec\u88ab\u5141\u8bb8\u67e5\u770b\u7684\u5b9e\u4f8b\u3002",
            "title": "\u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650\u9650\u5236"
        },
        {
            "location": "/api-guide/permissions_zh/#_5",
            "text": "\u9ed8\u8ba4\u6743\u9650\u7b56\u7565\u53ef\u4ee5\u4f7f\u7528 DEFAULT_PERMISSION_CLASSES \u8bbe\u7f6e\u8fdb\u884c\u5168\u5c40\u8bbe\u7f6e\u3002\u6bd4\u5982\uff1a  REST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    )\n}  \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u6b64\u8bbe\u7f6e\u9ed8\u8ba4\u4e3a\u5141\u8bb8\u65e0\u9650\u5236\u8bbf\u95ee\uff1a  'DEFAULT_PERMISSION_CLASSES': (\n   'rest_framework.permissions.AllowAny',\n)  \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e APIView \u7c7b\u7684\u89c6\u56fe\u5728\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002  from rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    permission_classes = (IsAuthenticated,)\n\n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)  \u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528 @api_view \u88c5\u9970\u5668\u88c5\u9970\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002  from rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\n\n@api_view(['GET'])\n@permission_classes((IsAuthenticated, ))\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)  \u6ce8\u610f\uff1a  \u5f53\u4f60\u901a\u8fc7\u7c7b\u5c5e\u6027\u6216\u88c5\u9970\u5668\u8bbe\u7f6e\u65b0\u7684\u6743\u9650\u7c7b\u65f6\uff0c\u4f60\u8981\u901a\u77e5\u89c6\u56fe\u5ffd\u7565 settings.py \u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684\u9ed8\u8ba4\u5217\u8868\u3002",
            "title": "\u8bbe\u7f6e\u6743\u9650\u7b56\u7565"
        },
        {
            "location": "/api-guide/permissions_zh/#api",
            "text": "",
            "title": "API \u53c2\u8003"
        },
        {
            "location": "/api-guide/permissions_zh/#allowany",
            "text": "AllowAny \u6743\u9650\u7c7b\u5c06\u5141\u8bb8\u4e0d\u53d7\u9650\u5236\u7684\u8bbf\u95ee\uff0c\u800c \u4e0d\u7ba1\u8be5\u8bf7\u6c42\u662f\u5426\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u6216\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1 \u3002  \u6b64\u6743\u9650\u4e0d\u662f\u4e25\u683c\u8981\u6c42\u7684\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7a7a\u5217\u8868\u6216\u5143\u7ec4\u8fdb\u884c\u6743\u9650\u8bbe\u7f6e\u6765\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u4f46\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u6307\u5b9a\u6b64\u7c7b\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4f7f\u610f\u56fe\u66f4\u660e\u786e\u3002",
            "title": "AllowAny"
        },
        {
            "location": "/api-guide/permissions_zh/#isauthenticated",
            "text": "IsAuthenticated  \u6743\u9650\u7c7b\u5c06\u62d2\u7edd\u4efb\u4f55\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u6743\u9650\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u6743\u9650\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u4ec5\u4f9b\u6ce8\u518c\u7528\u6237\u8bbf\u95ee\uff0c\u5219\u6b64\u6743\u9650\u9002\u7528\u3002  \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u5141\u8bb8\u533f\u540d\u7528\u6237\u8bfb\u53d6\u6743\u9650\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8\u5bf9\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8fdb\u884c\u5199\u5165\u6743\u9650\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002",
            "title": "IsAuthenticated"
        },
        {
            "location": "/api-guide/permissions_zh/#isadminuser",
            "text": "\u9664\u975e user.is_staff \u4e3a True \uff0c\u5426\u5219 IsAdminUser \u6743\u9650\u7c7b\u5c06\u62d2\u7edd\u4efb\u4f55\u7528\u6237\u7684\u6743\u9650\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u5141\u8bb8\u6743\u9650\u3002  \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u53ea\u80fd\u88ab\u90e8\u5206\u53d7\u4fe1\u4efb\u7684\u7ba1\u7406\u5458\u8bbf\u95ee\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002",
            "title": "IsAdminUser"
        },
        {
            "location": "/api-guide/permissions_zh/#isauthenticatedorreadonly",
            "text": "IsAuthenticatedOrReadOnly  \u5c06\u5141\u8bb8\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u6267\u884c\u4efb\u4f55\u8bf7\u6c42\u3002\u53ea\u6709\u5f53\u8bf7\u6c42\u65b9\u6cd5\u662f\u201c\u5b89\u5168\u201d\u65b9\u6cd5\uff08 GET ,  HEAD  \u6216  OPTIONS \uff09\u4e4b\u4e00\u65f6\uff0c\u624d\u5141\u8bb8\u672a\u7ecf\u6388\u6743\u7684\u7528\u6237\u8bf7\u6c42\u3002  \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u5141\u8bb8\u533f\u540d\u7528\u6237\u8bfb\u53d6\u6743\u9650\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8\u5bf9\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8fdb\u884c\u5199\u5165\u6743\u9650\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002",
            "title": "IsAuthenticatedOrReadOnly"
        },
        {
            "location": "/api-guide/permissions_zh/#djangomodelpermissions",
            "text": "\u6b64\u6743\u9650\u7c7b\u4e0eDjango\u7684\u6807\u51c6 django.contrib.auth model\u6743\u9650 \u76f8\u5173\u8054\u3002\u6b64\u6743\u9650\u53ea\u80fd\u5e94\u7528\u4e8e\u5177\u6709 .queryset \u5c5e\u6027\u96c6\u7684\u89c6\u56fe\u3002\u53ea\u6709\u5728\u7528\u6237 \u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1 \u5e76\u5206\u914d\u4e86 \u76f8\u5173\u6a21\u578b\u6743\u9650 \u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u4f1a\u88ab\u6388\u4e88\u6743\u9650\u3002   POST  \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709 \u6dfb\u52a0 \u6743\u9650\u3002  PUT  \u548c  PATCH  \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709 \u66f4\u6539 \u6743\u9650\u3002  DELETE  \u8bf7\u6c42\u60f3\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709 \u5220\u9664 \u6743\u9650\u3002   \u9ed8\u8ba4\u884c\u4e3a\u4e5f\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u652f\u6301\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4e3a GET \u8bf7\u6c42\u5305\u542b\u4e00\u4e2a \u67e5\u770b \u6a21\u578b\u7684\u6743\u9650\u3002  \u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\uff0c\u8bf7\u8986\u76d6 DjangoModelPermissions \u5e76\u8bbe\u7f6e .perms_map \u5c5e\u6027\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002",
            "title": "DjangoModelPermissions"
        },
        {
            "location": "/api-guide/permissions_zh/#queryset",
            "text": "\u5982\u679c\u4f60\u5728\u91cd\u5199\u4e86 get_queryset() \u65b9\u6cd5\u7684\u89c6\u56fe\u4e2d\u4f7f\u7528\u6b64\u6743\u9650\uff0c\u8fd9\u4e2a\u89c6\u56fe\u4e0a\u53ef\u80fd\u6ca1\u6709 queryset \u5c5e\u6027\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5efa\u8bae\u8fd8\u4f7f\u7528\u4fdd\u62a4\u6027\u7684\u67e5\u8be2\u96c6\u6765\u6807\u8bb0\u89c6\u56fe\uff0c\u4ee5\u4fbf\u6b64\u7c7b\u53ef\u4ee5\u786e\u5b9a\u6240\u9700\u7684\u6743\u9650\u3002\u6bd4\u5982\uff1a  queryset = User.objects.none()  # DjangoModelPermissions\u9700\u8981\u4e00\u4e2aqueryset",
            "title": "\u4f7f\u7528\u4e0d\u5305\u542bqueryset\u5c5e\u6027\u7684\u89c6\u56fe\u3002"
        },
        {
            "location": "/api-guide/permissions_zh/#djangomodelpermissionsoranonreadonly",
            "text": "\u4e0e DjangoModelPermissions \u7c7b\u4f3c\uff0c\u4f46\u4e5f\u5141\u8bb8\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u5177\u6709\u5bf9API\u7684\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002",
            "title": "DjangoModelPermissionsOrAnonReadOnly"
        },
        {
            "location": "/api-guide/permissions_zh/#djangoobjectpermissions",
            "text": "\u6b64\u6743\u9650\u7c7b\u4e0eDjango\u7684\u6807\u51c6 \u5bf9\u8c61\u6743\u9650\u6846\u67b6 \u76f8\u5173\u8054\uff0c\u8be5\u6846\u67b6\u5141\u8bb8\u6a21\u578b\u4e0a\u7684\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6743\u9650\u3002\u4e3a\u4e86\u4f7f\u7528\u6b64\u6743\u9650\u7c7b\uff0c\u4f60\u8fd8\u9700\u8981\u6dfb\u52a0\u652f\u6301\u5bf9\u8c61\u7ea7\u6743\u9650\u7684\u6743\u9650\u540e\u7aef\uff0c\u4f8b\u5982 django-guardian \u3002  \u4e0e DjangoModelPermissions \u4e00\u6837\uff0c\u6b64\u6743\u9650\u53ea\u80fd\u5e94\u7528\u4e8e\u5177\u6709 .queryset \u5c5e\u6027\u6216 .get_queryset() \u65b9\u6cd5\u7684\u89c6\u56fe\u3002\u53ea\u6709\u5728\u7528\u6237\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u5e76\u4e14\u5177\u6709 \u76f8\u5173\u7684\u6bcf\u4e2a\u5bf9\u8c61\u6743\u9650 \u548c\u76f8\u5173\u7684 \u6a21\u578b\u6743\u9650 \u540e\uff0c\u624d\u4f1a\u88ab\u6388\u4e88\u6743\u9650\u3002   POST  \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5b9e\u4f8b\u5177\u6709 \u6dfb\u52a0 \u6743\u9650\u3002  PUT  \u548c PATCH  \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u793a\u4f8b\u5177\u6709 \u66f4\u6539 \u6743\u9650\u3002  DELETE  \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u793a\u4f8b\u5177\u6709 \u5220\u9664 \u6743\u9650\u3002   \u8bf7\u6ce8\u610f\uff0c DjangoObjectPermissions   \u4e0d\u9700\u8981   django-guardian \u8f6f\u4ef6\u5305\uff0c\u5e76\u4e14\u5e94\u5f53\u540c\u6837\u652f\u6301\u5176\u4ed6\u5bf9\u8c61\u7ea7\u522b\u7684\u540e\u7aef\u3002  \u4e0e DjangoModelPermissions \u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 DjangoObjectPermissions \u5e76\u8bbe\u7f6e .perms_map \u5c5e\u6027\u6765\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002   \u6ce8\u610f \uff1a\u5982\u679c\u4f60\u9700\u8981 GET , HEAD \u548c OPTIONS \u8bf7\u6c42\u7684\u5bf9\u8c61\u7ea7 \u89c6\u56fe \u6743\u9650\uff0c\u90a3\u4e48\u4f60\u8fd8\u9700\u8981\u8003\u8651\u6dfb\u52a0 DjangoObjectPermissionsFilter \u7c7b\uff0c\u4ee5\u786e\u4fdd\u76f8\u5e94API\u53ea\u8fd4\u56de\u5305\u542b\u7528\u6237\u5177\u6709\u9002\u5f53\u89c6\u56fe\u6743\u9650\u7684\u5bf9\u8c61\u7684\u7ed3\u679c\u3002",
            "title": "DjangoObjectPermissions"
        },
        {
            "location": "/api-guide/permissions_zh/#_6",
            "text": "\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6743\u9650\uff0c\u8bf7\u91cd\u5199 BasePermission \u5e76\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a   .has_permission(self, request, view)  .has_object_permission(self, request, view, obj)   \u5982\u679c\u8bf7\u6c42\u88ab\u6388\u4e88\u8bbf\u95ee\u6743\u9650\uff0c\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002  \u5982\u679c\u4f60\u9700\u8981\u6d4b\u8bd5\u8bf7\u6c42\u662f\u8bfb\u53d6\u64cd\u4f5c\u8fd8\u662f\u5199\u5165\u64cd\u4f5c\uff0c\u5219\u5e94\u8be5\u6839\u636e\u5e38\u91cf SAFE_METHODS \u68c0\u67e5\u8bf7\u6c42\u65b9\u6cd5\uff0c SAFE_METHODS \u662f\u5305\u542b 'GET' ,  'OPTIONS' \u548c 'HEAD' \u7684\u5143\u7ec4\u3002\u4f8b\u5982\uff1a  if request.method in permissions.SAFE_METHODS:\n    # \u68c0\u67e5\u53ea\u8bfb\u8bf7\u6c42\u7684\u6743\u9650\nelse:\n    # \u68c0\u67e5\u8bfb\u53d6\u8bf7\u6c42\u7684\u6743\u9650   \u6ce8\u610f : \u4ec5\u5f53\u89c6\u56fe\u7ea7 has_permission \u68c0\u67e5\u5df2\u901a\u8fc7\u65f6\uff0c\u624d\u4f1a\u8c03\u7528\u5b9e\u4f8b\u7ea7 has_object_permission \u65b9\u6cd5\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u8fd0\u884c\u5b9e\u4f8b\u7ea7\u522b\u68c0\u67e5\uff0c\u89c6\u56fe\u4ee3\u7801\u5e94\u663e\u5f0f\u8c03\u7528 .check_object_permissions(request, obj) \u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u901a\u7528\u89c6\u56fe\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4f1a\u4e3a\u4f60\u5904\u7406\u3002   \u5982\u679c\u6821\u9a8c\u5931\u8d25\uff0c\u81ea\u5b9a\u4e49\u6743\u9650\u5c06\u5f15\u53d1 PermissionDenied \u5f02\u5e38\u3002\u8981\u66f4\u6539\u4e0e\u5f02\u5e38\u5173\u8054\u7684\u9519\u8bef\u6d88\u606f\uff0c\u8bf7\u76f4\u63a5\u5728\u81ea\u5b9a\u4e49\u6743\u9650\u4e0a\u5b9e\u73b0\u6d88\u606f\u5c5e\u6027\u3002\u5426\u5219\u5c06\u4f7f\u7528 PermissionDenied \u7684 default_detail \u5c5e\u6027\u3002  from rest_framework import permissions\n\nclass CustomerAccessPermission(permissions.BasePermission):\n    message = 'Adding customers not allowed.'\n\n    def has_permission(self, request, view):\n         ...",
            "title": "\u81ea\u5b9a\u4e49\u6743\u9650"
        },
        {
            "location": "/api-guide/permissions_zh/#_7",
            "text": "\u4ee5\u4e0b\u662f\u6839\u636e\u9ed1\u540d\u5355\u68c0\u67e5\u4f20\u5165\u8bf7\u6c42\u7684IP\u5730\u5740\u7684\u6743\u9650\u7c7b\u7684\u793a\u4f8b\uff0c\u5982\u679cIP\u5df2\u88ab\u5217\u5165\u9ed1\u540d\u5355\uff0c\u5219\u62d2\u7edd\u8be5\u8bf7\u6c42\u3002  from rest_framework import permissions\n\nclass BlacklistPermission(permissions.BasePermission):\n    \"\"\"\n    \u5bf9\u5217\u5165\u9ed1\u540d\u5355\u7684IP\u8fdb\u884c\u5168\u5c40\u6743\u9650\u68c0\u67e5\u3002\n    \"\"\"\n\n    def has_permission(self, request, view):\n        ip_addr = request.META['REMOTE_ADDR']\n        blacklisted = Blacklist.objects.filter(ip_addr=ip_addr).exists()\n        return not blacklisted  \u9664\u4e86\u9488\u5bf9\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u8fd0\u884c\u7684\u5168\u5c40\u6743\u9650\u5916\uff0c\u8fd8\u53ef\u4ee5\u521b\u5efa\u5bf9\u8c61\u7ea7\u6743\u9650\uff0c\u8fd9\u4e9b\u6743\u9650\u4ec5\u9488\u5bf9\u5f71\u54cd\u7279\u5b9a\u5bf9\u8c61\u5b9e\u4f8b\u7684\u64cd\u4f5c\u8fd0\u884c\u3002\u4f8b\u5982\uff1a  class IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    \u5bf9\u8c61\u7ea7\u6743\u9650\u4ec5\u5141\u8bb8\u5bf9\u8c61\u7684\u6240\u6709\u8005\u5bf9\u5176\u8fdb\u884c\u7f16\u8f91\n    \u5047\u8bbe\u6a21\u578b\u5b9e\u4f8b\u5177\u6709`owner`\u5c5e\u6027\u3002\n    \"\"\"\n\n    def has_object_permission(self, request, view, obj):\n        # \u4efb\u4f55\u8bf7\u6c42\u90fd\u5141\u8bb8\u8bfb\u53d6\u6743\u9650\uff0c\n        # \u6240\u4ee5\u6211\u4eec\u603b\u662f\u5141\u8bb8GET\uff0cHEAD\u6216OPTIONS \u8bf7\u6c42.\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        # \u793a\u4f8b\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u540d\u4e3a`owner`\u7684\u5c5e\u6027\n        return obj.owner == request.user  \u8bf7\u6ce8\u610f\uff0c\u901a\u7528\u89c6\u56fe\u5c06\u68c0\u67e5\u9002\u5f53\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\uff0c\u4f46\u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe\uff0c\u5219\u9700\u8981\u786e\u4fdd\u68c0\u67e5\u81ea\u5df1\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u67e5\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u83b7\u5f97\u5bf9\u8c61\u5b9e\u4f8b\u540e\u4ece\u89c6\u56fe\u4e2d\u8c03\u7528 self.check_object_permission(request\uff0cobj) \u6765\u6267\u884c\u6b64\u64cd\u4f5c.\u5982\u679c\u4efb\u4f55\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u67e5\u5931\u8d25\uff0c\u6b64\u8c03\u7528\u5c06\u5f15\u53d1\u9002\u5f53\u7684 APIException \uff0c\u5426\u5219\u5c06\u7b80\u5355\u5730\u8fd4\u56de\u3002  \u53e6\u8bf7\u6ce8\u610f\uff0c\u901a\u7528\u89c6\u56fe\u4ec5\u68c0\u67e5\u68c0\u7d22\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\u7684\u89c6\u56fe\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\u3002\u5982\u679c\u4f60\u9700\u8981\u5217\u8868\u89c6\u56fe\u7684\u5bf9\u8c61\u7ea7\u8fc7\u6ee4\uff0c\u5219\u9700\u8981\u5355\u72ec\u8fc7\u6ee4\u67e5\u8be2\u96c6\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 filtering\u6587\u6863 \u8fc7\u6ee4\u6587\u6863\u3002",
            "title": "\u793a\u4f8b"
        },
        {
            "location": "/api-guide/permissions_zh/#_8",
            "text": "\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002",
            "title": "\u7b2c\u4e09\u65b9\u5305"
        },
        {
            "location": "/api-guide/permissions_zh/#composed-permissions",
            "text": "Composed Permissions \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u5c0f\u7684\u53ef\u91cd\u7528\u7ec4\u4ef6\u6765\u5b9a\u4e49\u590d\u6742\u548c\u591a\u6df1\u5ea6\uff08\u4f7f\u7528\u903b\u8f91\u8fd0\u7b97\u7b26\uff09\u6743\u9650\u5bf9\u8c61\u3002",
            "title": "Composed Permissions"
        },
        {
            "location": "/api-guide/permissions_zh/#rest-condition",
            "text": "REST Condition \u5305\u662f\u7528\u4e8e\u4ee5\u7b80\u5355\u65b9\u4fbf\u7684\u65b9\u5f0f\u6784\u5efa\u590d\u6742\u6743\u9650\u7684\u53e6\u4e00\u4e2a\u6269\u5c55\u3002\u8be5\u6269\u5c55\u5141\u8bb8\u4f60\u5c06\u6743\u9650\u4e0e\u903b\u8f91\u8fd0\u7b97\u7b26\u7ec4\u5408\u5728\u4e00\u8d77\u3002",
            "title": "REST Condition"
        },
        {
            "location": "/api-guide/permissions_zh/#dry-rest-permissions",
            "text": "DRY Rest Permissions \u5305\u63d0\u4f9b\u4e86\u4e3a\u5355\u4e2a\u9ed8\u8ba4\u548c\u81ea\u5b9a\u4e49\u64cd\u4f5c\u5b9a\u4e49\u4e0d\u540c\u6743\u9650\u7684\u529f\u80fd\u3002\u6b64\u5305\u9002\u7528\u4e8e\u5177\u6709\u4ece\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u5173\u7cfb\u6d3e\u751f\u7684\u6743\u9650\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u8fd8\u652f\u6301\u901a\u8fc7API\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\u5230\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u6743\u9650\u68c0\u67e5\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u652f\u6301\u5411\u9ed8\u8ba4\u548c\u81ea\u5b9a\u4e49\u5217\u8868\u64cd\u4f5c\u6dfb\u52a0\u6743\u9650\uff0c\u4ee5\u9650\u5236\u4ed6\u4eec\u4e3a\u6bcf\u4e2a\u7528\u6237\u68c0\u7d22\u7684\u6570\u636e\u3002",
            "title": "DRY Rest Permissions"
        },
        {
            "location": "/api-guide/permissions_zh/#django-rest-framework-roles",
            "text": "Django Rest Framework Roles \u5305\u4f7f\u4f60\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u901a\u8fc7\u591a\u79cd\u7c7b\u578b\u7684\u7528\u6237\u5bf9API\u8fdb\u884c\u53c2\u6570\u5316\u3002",
            "title": "Django Rest Framework Roles"
        },
        {
            "location": "/api-guide/permissions_zh/#django-rest-framework-api-key",
            "text": "Django Rest Framework API Key \u5305\u5141\u8bb8\u4f60\u786e\u4fdd\u5411\u670d\u52a1\u5668\u53d1\u51fa\u7684\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u9700\u8981\u4e00\u4e2aAPI\u5bc6\u94a5\u6807\u5934\u3002\u60a8\u53ef\u4ee5\u4ecedjango\u7ba1\u7406\u754c\u9762\u751f\u6210\u4e00\u4e2a\u3002",
            "title": "Django Rest Framework API Key"
        },
        {
            "location": "/api-guide/throttling/",
            "text": "Throttling\n\n\n\n\nHTTP/1.1 420 Enhance Your Calm\n\n\nTwitter API rate limiting response\n\n\n\n\nThrottling is similar to \npermissions\n, in that it determines if a request should be authorized.  Throttles indicate a temporary state, and are used to control the rate of requests that clients can make to an API.\n\n\nAs with permissions, multiple throttles may be used.  Your API might have a restrictive throttle for unauthenticated requests, and a less restrictive throttle for authenticated requests.\n\n\nAnother scenario where you might want to use multiple throttles would be if you need to impose different constraints on different parts of the API, due to some services being particularly resource-intensive.\n\n\nMultiple throttles can also be used if you want to impose both burst throttling rates, and sustained throttling rates.  For example, you might want to limit a user to a maximum of 60 requests per minute, and 1000 requests per day.\n\n\nThrottles do not necessarily only refer to rate-limiting requests.  For example a storage service might also need to throttle against bandwidth, and a paid data service might want to throttle against a certain number of a records being accessed.\n\n\nHow throttling is determined\n\n\nAs with permissions and authentication, throttling in REST framework is always defined as a list of classes.\n\n\nBefore running the main body of the view each throttle in the list is checked.\nIf any throttle check fails an \nexceptions.Throttled\n exception will be raised, and the main body of the view will not run.\n\n\nSetting the throttling policy\n\n\nThe default throttling policy may be set globally, using the \nDEFAULT_THROTTLE_CLASSES\n and \nDEFAULT_THROTTLE_RATES\n settings.  For example.\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'rest_framework.throttling.AnonRateThrottle',\n        'rest_framework.throttling.UserRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'anon': '100/day',\n        'user': '1000/day'\n    }\n}\n\n\n\nThe rate descriptions used in \nDEFAULT_THROTTLE_RATES\n may include \nsecond\n, \nminute\n, \nhour\n or \nday\n as the throttle period.\n\n\nYou can also set the throttling policy on a per-view or per-viewset basis,\nusing the \nAPIView\n class-based views.\n\n\nfrom rest_framework.response import Response\nfrom rest_framework.throttling import UserRateThrottle\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    throttle_classes = (UserRateThrottle,)\n\n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)\n\n\n\nOr, if you're using the \n@api_view\n decorator with function based views.\n\n\n@api_view(['GET'])\n@throttle_classes([UserRateThrottle])\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n\n\n\nHow clients are identified\n\n\nThe \nX-Forwarded-For\n and \nRemote-Addr\n HTTP headers are used to uniquely identify client IP addresses for throttling.  If the \nX-Forwarded-For\n header is present then it will be used, otherwise the value of the \nRemote-Addr\n header will be used.\n\n\nIf you need to strictly identify unique client IP addresses, you'll need to first configure the number of application proxies that the API runs behind by setting the \nNUM_PROXIES\n setting.  This setting should be an integer of zero or more.  If set to non-zero then the client IP will be identified as being the last IP address in the \nX-Forwarded-For\n header, once any application proxy IP addresses have first been excluded.  If set to zero, then the \nRemote-Addr\n header will always be used as the identifying IP address.\n\n\nIt is important to understand that if you configure the \nNUM_PROXIES\n setting, then all clients behind a unique \nNAT'd\n gateway will be treated as a single client.\n\n\nFurther context on how the \nX-Forwarded-For\n header works, and identifying a remote client IP can be \nfound here\n.\n\n\nSetting up the cache\n\n\nThe throttle classes provided by REST framework use Django's cache backend.  You should make sure that you've set appropriate \ncache settings\n.  The default value of \nLocMemCache\n backend should be okay for simple setups.  See Django's \ncache documentation\n for more details.\n\n\nIf you need to use a cache other than \n'default'\n, you can do so by creating a custom throttle class and setting the \ncache\n attribute.  For example:\n\n\nclass CustomAnonRateThrottle(AnonRateThrottle):\n    cache = get_cache('alternate')\n\n\n\nYou'll need to remember to also set your custom throttle class in the \n'DEFAULT_THROTTLE_CLASSES'\n settings key, or using the \nthrottle_classes\n view attribute.\n\n\n\n\nAPI Reference\n\n\nAnonRateThrottle\n\n\nThe \nAnonRateThrottle\n will only ever throttle unauthenticated users.  The IP address of the incoming request is used to generate a unique key to throttle against.\n\n\nThe allowed request rate is determined from one of the following (in order of preference).\n\n\n\n\nThe \nrate\n property on the class, which may be provided by overriding \nAnonRateThrottle\n and setting the property.\n\n\nThe \nDEFAULT_THROTTLE_RATES['anon']\n setting.\n\n\n\n\nAnonRateThrottle\n is suitable if you want to restrict the rate of requests from unknown sources.\n\n\nUserRateThrottle\n\n\nThe \nUserRateThrottle\n will throttle users to a given rate of requests across the API.  The user id is used to generate a unique key to throttle against.  Unauthenticated requests will fall back to using the IP address of the incoming request to generate a unique key to throttle against.\n\n\nThe allowed request rate is determined from one of the following (in order of preference).\n\n\n\n\nThe \nrate\n property on the class, which may be provided by overriding \nUserRateThrottle\n and setting the property.\n\n\nThe \nDEFAULT_THROTTLE_RATES['user']\n setting.\n\n\n\n\nAn API may have multiple \nUserRateThrottles\n in place at the same time.  To do so, override \nUserRateThrottle\n and set a unique \"scope\" for each class.\n\n\nFor example, multiple user throttle rates could be implemented by using the following classes...\n\n\nclass BurstRateThrottle(UserRateThrottle):\n    scope = 'burst'\n\nclass SustainedRateThrottle(UserRateThrottle):\n    scope = 'sustained'\n\n\n\n...and the following settings.\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'example.throttles.BurstRateThrottle',\n        'example.throttles.SustainedRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'burst': '60/min',\n        'sustained': '1000/day'\n    }\n}\n\n\n\nUserRateThrottle\n is suitable if you want simple global rate restrictions per-user.\n\n\nScopedRateThrottle\n\n\nThe \nScopedRateThrottle\n class can be used to restrict access to specific parts of the API.  This throttle will only be applied if the view that is being accessed includes a \n.throttle_scope\n property.  The unique throttle key will then be formed by concatenating the \"scope\" of the request with the unique user id or IP address.\n\n\nThe allowed request rate is determined by the \nDEFAULT_THROTTLE_RATES\n setting using a key from the request \"scope\".\n\n\nFor example, given the following views...\n\n\nclass ContactListView(APIView):\n    throttle_scope = 'contacts'\n    ...\n\nclass ContactDetailView(APIView):\n    throttle_scope = 'contacts'\n    ...\n\nclass UploadView(APIView):\n    throttle_scope = 'uploads'\n    ...\n\n\n\n...and the following settings.\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'rest_framework.throttling.ScopedRateThrottle',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'contacts': '1000/day',\n        'uploads': '20/day'\n    }\n}\n\n\n\nUser requests to either \nContactListView\n or \nContactDetailView\n would be restricted to a total of 1000 requests per-day.  User requests to \nUploadView\n would be restricted to 20 requests per day.\n\n\n\n\nCustom throttles\n\n\nTo create a custom throttle, override \nBaseThrottle\n and implement \n.allow_request(self, request, view)\n.  The method should return \nTrue\n if the request should be allowed, and \nFalse\n otherwise.\n\n\nOptionally you may also override the \n.wait()\n method.  If implemented, \n.wait()\n should return a recommended number of seconds to wait before attempting the next request, or \nNone\n.  The \n.wait()\n method will only be called if \n.allow_request()\n has previously returned \nFalse\n.\n\n\nIf the \n.wait()\n method is implemented and the request is throttled, then a \nRetry-After\n header will be included in the response.\n\n\nExample\n\n\nThe following is an example of a rate throttle, that will randomly throttle 1 in every 10 requests.\n\n\nimport random\n\nclass RandomRateThrottle(throttling.BaseThrottle):\n    def allow_request(self, request, view):\n        return random.randint(1, 10) != 1",
            "title": "Throttling"
        },
        {
            "location": "/api-guide/throttling/#throttling",
            "text": "HTTP/1.1 420 Enhance Your Calm  Twitter API rate limiting response   Throttling is similar to  permissions , in that it determines if a request should be authorized.  Throttles indicate a temporary state, and are used to control the rate of requests that clients can make to an API.  As with permissions, multiple throttles may be used.  Your API might have a restrictive throttle for unauthenticated requests, and a less restrictive throttle for authenticated requests.  Another scenario where you might want to use multiple throttles would be if you need to impose different constraints on different parts of the API, due to some services being particularly resource-intensive.  Multiple throttles can also be used if you want to impose both burst throttling rates, and sustained throttling rates.  For example, you might want to limit a user to a maximum of 60 requests per minute, and 1000 requests per day.  Throttles do not necessarily only refer to rate-limiting requests.  For example a storage service might also need to throttle against bandwidth, and a paid data service might want to throttle against a certain number of a records being accessed.",
            "title": "Throttling"
        },
        {
            "location": "/api-guide/throttling/#how-throttling-is-determined",
            "text": "As with permissions and authentication, throttling in REST framework is always defined as a list of classes.  Before running the main body of the view each throttle in the list is checked.\nIf any throttle check fails an  exceptions.Throttled  exception will be raised, and the main body of the view will not run.",
            "title": "How throttling is determined"
        },
        {
            "location": "/api-guide/throttling/#setting-the-throttling-policy",
            "text": "The default throttling policy may be set globally, using the  DEFAULT_THROTTLE_CLASSES  and  DEFAULT_THROTTLE_RATES  settings.  For example.  REST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'rest_framework.throttling.AnonRateThrottle',\n        'rest_framework.throttling.UserRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'anon': '100/day',\n        'user': '1000/day'\n    }\n}  The rate descriptions used in  DEFAULT_THROTTLE_RATES  may include  second ,  minute ,  hour  or  day  as the throttle period.  You can also set the throttling policy on a per-view or per-viewset basis,\nusing the  APIView  class-based views.  from rest_framework.response import Response\nfrom rest_framework.throttling import UserRateThrottle\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    throttle_classes = (UserRateThrottle,)\n\n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)  Or, if you're using the  @api_view  decorator with function based views.  @api_view(['GET'])\n@throttle_classes([UserRateThrottle])\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)",
            "title": "Setting the throttling policy"
        },
        {
            "location": "/api-guide/throttling/#how-clients-are-identified",
            "text": "The  X-Forwarded-For  and  Remote-Addr  HTTP headers are used to uniquely identify client IP addresses for throttling.  If the  X-Forwarded-For  header is present then it will be used, otherwise the value of the  Remote-Addr  header will be used.  If you need to strictly identify unique client IP addresses, you'll need to first configure the number of application proxies that the API runs behind by setting the  NUM_PROXIES  setting.  This setting should be an integer of zero or more.  If set to non-zero then the client IP will be identified as being the last IP address in the  X-Forwarded-For  header, once any application proxy IP addresses have first been excluded.  If set to zero, then the  Remote-Addr  header will always be used as the identifying IP address.  It is important to understand that if you configure the  NUM_PROXIES  setting, then all clients behind a unique  NAT'd  gateway will be treated as a single client.  Further context on how the  X-Forwarded-For  header works, and identifying a remote client IP can be  found here .",
            "title": "How clients are identified"
        },
        {
            "location": "/api-guide/throttling/#setting-up-the-cache",
            "text": "The throttle classes provided by REST framework use Django's cache backend.  You should make sure that you've set appropriate  cache settings .  The default value of  LocMemCache  backend should be okay for simple setups.  See Django's  cache documentation  for more details.  If you need to use a cache other than  'default' , you can do so by creating a custom throttle class and setting the  cache  attribute.  For example:  class CustomAnonRateThrottle(AnonRateThrottle):\n    cache = get_cache('alternate')  You'll need to remember to also set your custom throttle class in the  'DEFAULT_THROTTLE_CLASSES'  settings key, or using the  throttle_classes  view attribute.",
            "title": "Setting up the cache"
        },
        {
            "location": "/api-guide/throttling/#api-reference",
            "text": "",
            "title": "API Reference"
        },
        {
            "location": "/api-guide/throttling/#anonratethrottle",
            "text": "The  AnonRateThrottle  will only ever throttle unauthenticated users.  The IP address of the incoming request is used to generate a unique key to throttle against.  The allowed request rate is determined from one of the following (in order of preference).   The  rate  property on the class, which may be provided by overriding  AnonRateThrottle  and setting the property.  The  DEFAULT_THROTTLE_RATES['anon']  setting.   AnonRateThrottle  is suitable if you want to restrict the rate of requests from unknown sources.",
            "title": "AnonRateThrottle"
        },
        {
            "location": "/api-guide/throttling/#userratethrottle",
            "text": "The  UserRateThrottle  will throttle users to a given rate of requests across the API.  The user id is used to generate a unique key to throttle against.  Unauthenticated requests will fall back to using the IP address of the incoming request to generate a unique key to throttle against.  The allowed request rate is determined from one of the following (in order of preference).   The  rate  property on the class, which may be provided by overriding  UserRateThrottle  and setting the property.  The  DEFAULT_THROTTLE_RATES['user']  setting.   An API may have multiple  UserRateThrottles  in place at the same time.  To do so, override  UserRateThrottle  and set a unique \"scope\" for each class.  For example, multiple user throttle rates could be implemented by using the following classes...  class BurstRateThrottle(UserRateThrottle):\n    scope = 'burst'\n\nclass SustainedRateThrottle(UserRateThrottle):\n    scope = 'sustained'  ...and the following settings.  REST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'example.throttles.BurstRateThrottle',\n        'example.throttles.SustainedRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'burst': '60/min',\n        'sustained': '1000/day'\n    }\n}  UserRateThrottle  is suitable if you want simple global rate restrictions per-user.",
            "title": "UserRateThrottle"
        },
        {
            "location": "/api-guide/throttling/#scopedratethrottle",
            "text": "The  ScopedRateThrottle  class can be used to restrict access to specific parts of the API.  This throttle will only be applied if the view that is being accessed includes a  .throttle_scope  property.  The unique throttle key will then be formed by concatenating the \"scope\" of the request with the unique user id or IP address.  The allowed request rate is determined by the  DEFAULT_THROTTLE_RATES  setting using a key from the request \"scope\".  For example, given the following views...  class ContactListView(APIView):\n    throttle_scope = 'contacts'\n    ...\n\nclass ContactDetailView(APIView):\n    throttle_scope = 'contacts'\n    ...\n\nclass UploadView(APIView):\n    throttle_scope = 'uploads'\n    ...  ...and the following settings.  REST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'rest_framework.throttling.ScopedRateThrottle',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'contacts': '1000/day',\n        'uploads': '20/day'\n    }\n}  User requests to either  ContactListView  or  ContactDetailView  would be restricted to a total of 1000 requests per-day.  User requests to  UploadView  would be restricted to 20 requests per day.",
            "title": "ScopedRateThrottle"
        },
        {
            "location": "/api-guide/throttling/#custom-throttles",
            "text": "To create a custom throttle, override  BaseThrottle  and implement  .allow_request(self, request, view) .  The method should return  True  if the request should be allowed, and  False  otherwise.  Optionally you may also override the  .wait()  method.  If implemented,  .wait()  should return a recommended number of seconds to wait before attempting the next request, or  None .  The  .wait()  method will only be called if  .allow_request()  has previously returned  False .  If the  .wait()  method is implemented and the request is throttled, then a  Retry-After  header will be included in the response.",
            "title": "Custom throttles"
        },
        {
            "location": "/api-guide/throttling/#example",
            "text": "The following is an example of a rate throttle, that will randomly throttle 1 in every 10 requests.  import random\n\nclass RandomRateThrottle(throttling.BaseThrottle):\n    def allow_request(self, request, view):\n        return random.randint(1, 10) != 1",
            "title": "Example"
        },
        {
            "location": "/api-guide/filtering_zh/",
            "text": "Filtering\n\n\n\n\n\u201c \u7531Django Manager\u63d0\u4f9b\u7684\u6839QuerySet\u63cf\u8ff0\u4e86\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002\u53ef\u662f\u901a\u5e38\u4f60\u9700\u8981\u7684\u53ea\u662f\u9009\u62e9\u5b8c\u6574\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5b50\u96c6\u800c\u5df2\u3002\n\n\n\u2014\u2014 Django\u6587\u6863\n\u201d\n\n\n\n\nREST framework\u5217\u8868\u89c6\u56fe\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u8fd4\u56de\u4e00\u4e2amodel\u7684\u5168\u90e8queryset\u3002\u901a\u5e38\u4f60\u5374\u60f3\u8981\u4f60\u7684API\u6765\u9650\u5236queryset\u8fd4\u56de\u7684\u6570\u636e\u3002\n\n\n\u6700\u7b80\u5355\u7684\u8fc7\u6ee4\u4efb\u610f\nGenericAPIView\n\u5b50\u89c6\u56fequeryset\u7684\u65b9\u6cd5\u5c31\u662f\u91cd\u5199\u5b83\u7684\n.get_queryset()\n\u65b9\u6cd5\u3002\n\n\n\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u5141\u8bb8\u4f60\u4f7f\u7528\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5b9a\u5236\u89c6\u56fe\u8fd4\u56de\u7684queryset\u3002\n\n\nFiltering against the current user\uff08\u6839\u636e\u5f53\u524d\u7528\u6237\u8fdb\u884c\u8fc7\u6ee4\uff09\n\n\n\u60a8\u53ef\u80fd\u60f3\u8981\u8fc7\u6ee4queryset\uff0c\u4ee5\u786e\u4fdd\u53ea\u8fd4\u56de\u4e0e\u53d1\u51fa\u8bf7\u6c42\u7684\u5f53\u524d\u5df2\u9a8c\u8bc1\u7528\u6237\u76f8\u5173\u7684\u7ed3\u679c\u3002\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u57fa\u4e8erequest.user\u7684\u503c\u8fdb\u884c\u8fc7\u6ee4\u6765\u5b9e\u73b0\u3002\n\n\n\u6bd4\u5982\uff1a\n\n\nfrom myapp.models import Purchase\nfrom myapp.serializers import PurchaseSerializer\nfrom rest_framework import generics\n\nclass PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        This view should return a list of all the purchases\n        for the currently authenticated user.\n        \"\"\"\n        user = self.request.user\n        return Purchase.objects.filter(purchaser=user)\n\n\n\n\nFiltering against the URL\uff08\u6839\u636eURL\u8fdb\u884c\u8fc7\u6ee4\uff09\n\n\n\u53e6\u4e00\u79cd\u8fc7\u6ee4\u65b9\u5f0f\u53ef\u80fd\u5305\u62ec\u57fa\u4e8eURL\u7684\u67d0\u4e9b\u90e8\u5206\u6765\u9650\u5236queryset\u3002\n\n\n\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684URL\u914d\u7f6e\u5305\u542b\u4e00\u4e2a\u53c2\u6570\u5982\u4e0b:\n\n\nurl('^purchases/(?P<username>.+)/$', PurchaseList.as_view()),\n\n\n\n\n\u4f60\u5c31\u53ef\u4ee5\u5199\u4e00\u4e2aview\uff0c\u8fd4\u56de\u57fa\u4e8eURL\u4e2d\u7684username\u53c2\u6570\u8fdb\u884c\u8fc7\u6ee4\u7684\u7ed3\u679c\u3002\n\n\nclass PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        This view should return a list of all the purchases for\n        the user as determined by the username portion of the URL.\n        \"\"\"\n        username = self.kwargs['username']\n        return Purchase.objects.filter(purchaser__username=username)\n\n\n\n\nFiltering against query parameters\uff08\u6839\u636e\u67e5\u8be2\u53c2\u6570\u8fdb\u884c\u8fc7\u6ee4\uff09\n\n\n\u8fc7\u6ee4\u521d\u59cb\u67e5\u8be2\u96c6\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u662f\u57fa\u4e8eurl\u4e2d\u7684\u67e5\u8be2\u53c2\u6570\u786e\u5b9a\u521d\u59cb\u67e5\u8be2\u96c6\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\n.get_queryset()\n\u65b9\u6cd5\u6765\u5904\u7406\u50cf\nhttp://example.com/api/purchases?username=denvercoder9\n\u8fd9\u6837\u7684\u7f51\u5740\uff0c\u5e76\u4e14\u53ea\u6709\u5728URL\u4e2d\u5305\u542b\nusername\n\u53c2\u6570\u65f6\uff0c\u624d\u8fc7\u6ee4queryset\uff1a\n\n\nclass PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        Optionally restricts the returned purchases to a given user,\n        by filtering against a `username` query parameter in the URL.\n        \"\"\"\n        queryset = Purchase.objects.all()\n        username = self.request.query_params.get('username', None)\n        if username is not None:\n            queryset = queryset.filter(purchaser__username=username)\n        return queryset\n\n\n\n\n\n\nGeneric Filtering\uff08\u901a\u7528\u8fc7\u6ee4\uff09\n\n\n\u9664\u4e86\u80fd\u591f\u91cd\u5199\u9ed8\u8ba4\u7684queryset\uff0cREST\u6846\u67b6\u8fd8\u5305\u62ec\u5bf9\u901a\u7528\u8fc7\u6ee4\u540e\u7aef\u7684\u652f\u6301\uff0c\u5141\u8bb8\u4f60\u8f7b\u677e\u6784\u5efa\u590d\u6742\u7684\u68c0\u7d22\u5668\u548c\u8fc7\u6ee4\u5668\u3002\n\n\n\u901a\u7528\u8fc7\u6ee4\u5668\u4e5f\u53ef\u4ee5\u5728browsable API\u548cadmin API\u4e2d\u663e\u793a\u4e3aHTML\u63a7\u4ef6\u3002\n\n\n\n\nSetting filter backends\uff08\u8bbe\u7f6e\u901a\u7528\u8fc7\u6ee4\u540e\u7aef\uff09\n\n\n\u9ed8\u8ba4\u8fc7\u6ee4\u5668\u540e\u7aef\u53ef\u4ee5\u5728\u5168\u5c40\u8bbe\u7f6e\u4e2d\u4f7f\u7528\nDEFAULT_FILTER_BACKENDS\n\u6765\u914d\u7f6e\u3002\u4f8b\u5982\u3002\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)\n}\n\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\nGenericAPIView\n\u7c7b\u7684\u89c6\u56fe\u5728\u6bcf\u4e2aview\u6216\u6bcf\u4e2aviewset\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8fc7\u6ee4\u5668\u540e\u7aef\u3002\n\n\nimport django_filters.rest_framework\nfrom django.contrib.auth.models import User\nfrom myapp.serializers import UserSerializer\nfrom rest_framework import generics\n\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = (django_filters.rest_framework.DjangoFilterBackend,)\n\n\n\n\nFiltering and object lookups\uff08\u8fc7\u6ee4\u548c\u5bf9\u8c61\u67e5\u627e\uff09\n\n\n\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4e3aview\u914d\u7f6e\u8fc7\u6ee4\u5668\u540e\u7aef\uff0c\u5e76\u4e14\u7528\u4e8e\u8fc7\u6ee4list views\uff0c\u5219\u5b83\u4e5f\u5c06\u7528\u4e8e\u8fc7\u6ee4\u7528\u4e8e\u8fd4\u56de\u5355\u4e2a\u5bf9\u8c61\u7684queryset\u3002\n\n\n\u4f8b\u5982\uff0c\u7ed9\u5b9a\u524d\u9762\u7684\u793a\u4f8b\u4ee5\u53ca\u4e00\u4e2aID\u4e3a\n4675\n\u7684\u4ea7\u54c1\uff0c\u4ee5\u4e0bURL\u5c06\u8fd4\u56de\u76f8\u5e94\u7684\u5bf9\u8c61\u6216\u8005\u8fd4\u56de404\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u7ed9\u5b9a\u7684\u4ea7\u54c1\u5b9e\u4f8b\u662f\u5426\u6ee1\u8db3\u7b5b\u9009\u6761\u4ef6\u3002\n\n\nhttp://example.com/api/products/4675/?category=clothing&max_price=10.00\n\n\n\n\nOverriding the initial queryset\uff08\u8986\u76d6\u521d\u59cbqueryset\uff09\n\n\n\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u91cd\u5199\n.get_queryset()\n\u65b9\u6cd5\u6216\u4f7f\u7528\u901a\u7528\u8fc7\u6ee4\uff0c\u5e76\u4e14\u4e00\u5207\u90fd\u4f1a\u6309\u7167\u9884\u671f\u751f\u6548\u3002 \u4f8b\u5982\uff0c\u5982\u679c\nProduct\n\u4e0e\nUser\n\uff08\u540d\u4e3a\npurchase\n\uff09\u5177\u6709\u591a\u5bf9\u591a\u5173\u7cfb\uff0c\u5219\u53ef\u80fd\u9700\u8981\u7f16\u5199\u5982\u4e0b\u6240\u793a\u7684view\uff1a\n\n\nclass PurchasedProductsList(generics.ListAPIView):\n    \"\"\"\n    Return a list of all the products that the authenticated\n    user has ever purchased, with optional filtering.\n    \"\"\"\n    model = Product\n    serializer_class = ProductSerializer\n    filter_class = ProductFilter\n\n    def get_queryset(self):\n        user = self.request.user\n        return user.purchase_set.all()\n\n\n\n\n\n\nAPI Guide\n\n\nDjangoFilterBackend\uff08Django\u8fc7\u6ee4\u540e\u7aef\uff09\n\n\ndjango-filter\n\u5e93\u5305\u542b\u4e00\u4e2a\u4e3aREST framework\u63d0\u4f9b\u9ad8\u5ea6\u53ef\u5b9a\u5236\u5b57\u6bb5\u8fc7\u6ee4\u7684\nDjangoFilterBackend\n\u7c7b\u3002\n\n\n\u8981\u4f7f\u7528\nDjangoFilterBackend\n\uff0c\u9996\u5148\u8981\u5148\u5b89\u88c5\ndjango-filter\n\u3002\n\n\npip install django-filter\n\n\n\n\n\u73b0\u5728\uff0c\u4f60\u9700\u8981\u5c06filter backend \u6dfb\u52a0\u5230\u4f60django project\u7684settings\u4e2d\uff1a\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)\n}\n\n\n\n\n\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u5c06filter backend\u6dfb\u52a0\u5230\u4e00\u4e2a\u5355\u72ec\u7684view\u6216viewSet\u4e2d\uff1a\n\n\nfrom django_filters.rest_framework import DjangoFilterBackend\n\nclass UserListView(generics.ListAPIView):\n    ...\n    filter_backends = (DjangoFilterBackend,)\n\n\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 browsable API\u6216 admin API\uff0c\u4f60\u8fd8\u9700\u8981\u5b89\u88c5\ndjango-crispy-forms\n\uff0c\u901a\u8fc7\u4f7f\u7528Bootstarp3\u6e32\u67d3\u6765\u63d0\u9ad8filter form\u5728\u6d4f\u89c8\u5668\u4e2d\u7684\u5c55\u793a\u6548\u679c\u3002\n\n\npip install django-crispy-forms\n\n\n\n\n\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u5c06\ncrispy-forms\n\u6dfb\u52a0\u5230\u4f60Django project\u7684\nINSTALLED_APPS\n\u4e2d\uff0cbrowsable API\u5c06\u4e3a\nDjangoFilterBackend\n\u63d0\u4f9b\u4e00\u4e2a\u50cf\u4e0b\u9762\u8fd9\u6837\u7684filter control\uff1a\n\n\n\n\nSpecifying filter fields\uff08\u6307\u5b9a\u7b5b\u9009\u5b57\u6bb5\uff09\n\n\n\u5982\u679c\u4f60\u7684\u9700\u6c42\u90fd\u662f\u4e9b\u7b80\u5355\u76f8\u7b49\u7c7b\u578b\u7684\u7b5b\u9009\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u4f60\u7684view\u6216viewSet\u91cc\u9762\u8bbe\u7f6e\u4e00\u4e2a\nfilter_fields\n\u5c5e\u6027\uff0c\u5217\u51fa\u6240\u6709\u4f60\u60f3\u4f9d\u9760\u7b5b\u9009\u7684\u5b57\u6bb5\u96c6\u5408\u3002\n\n\nclass ProductList(generics.ListAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n    filter_backends = (filters.DjangoFilterBackend,)\n    filter_fields = ('category', 'in_stock')\n\n\n\n\n\u8fd9\u5c06\u4e3a\u4f60\u5217\u51fa\u6765\u7684\u5b57\u6bb5\u81ea\u52a8\u521b\u5efa\u4e00\u4e2afilterSet\uff0c\u5141\u8bb8\u4f60\u60f3\u4e0b\u9762\u8fd9\u6837\u8bf7\u6c42\u7b5b\u9009\u7ed3\u679c\uff1a\n\n\nhttp://example.com/api/products?category=clothing&in_stock=True\n\n\n\n\nSpecifying a FilterSet\uff08\u6307\u5b9aFilterSet\uff09\n\n\n\u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u7684\u8fc7\u6ee4\u8981\u6c42\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u5728view\u4e2d\u5e94\u8be5\u4f7f\u7528\u7684\nFilterSet\n\u7c7b\u3002\u4f8b\u5982\uff1a\n\n\nimport django_filters\nfrom myapp.models import Product\nfrom myapp.serializers import ProductSerializer\nfrom rest_framework import generics\n\nclass ProductFilter(django_filters.rest_framework.FilterSet):\n    min_price = django_filters.NumberFilter(name=\"price\", lookup_expr='gte')\n    max_price = django_filters.NumberFilter(name=\"price\", lookup_expr='lte')\n    class Meta:\n        model = Product\n        fields = ['category', 'in_stock', 'min_price', 'max_price']\n\nclass ProductList(generics.ListAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n    filter_backends = (django_filters.rest_framework.DjangoFilterBackend,)\n    filter_class = ProductFilter\n\n\n\n\n\u8fd9\u5c06\u5141\u8bb8\u4f60\u5411\u4e0b\u9762\u4e00\u6837\u53d1\u51fa\u8bf7\u6c42\uff0c\u5982\uff1a\n\n\nhttp://example.com/api/products?category=clothing&max_price=10.00\n\n\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\ndjango-filter\n\u8de8\u8d8a\u5173\u7cfb\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u4ea7\u54c1\u90fd\u6709\nManufacturer\n\u6a21\u578b\u7684\u5916\u952e\uff0c\u6240\u4ee5\u6211\u4eec\u521b\u5efa\u8fc7\u6ee4\u5668\u4f7f\u7528\nManufacturer\n\u540d\u79f0\u8fc7\u6ee4\u3002\u4f8b\u5982\uff1a\n\n\nimport django_filters\nfrom myapp.models import Product\nfrom myapp.serializers import ProductSerializer\nfrom rest_framework import generics\n\nclass ProductFilter(django_filters.rest_framework.FilterSet):\n    class Meta:\n        model = Product\n        fields = ['category', 'in_stock', 'manufacturer__name']\n\n\n\n\n\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u8fdb\u884c\u5982\u4e0b\u67e5\u8be2\uff1a\n\n\nhttp://example.com/api/products?manufacturer__name=foo\n\n\n\n\n\u8fd9\u5f88\u597d\uff0c\u4f46\u5b83\u5c06Django\u7684\u53cc\u4e0b\u5212\u7ebf\u7ea6\u5b9a\u4f5c\u4e3aAPI\u7684\u4e00\u90e8\u5206\u66b4\u9732\u51fa\u6765\u3002\u5982\u679c\u4f60\u60f3\u663e\u5f0f\u5730\u547d\u540d\u8fc7\u6ee4\u5668\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u663e\u5f0f\u5730\u5c06\u5b83\u5305\u542b\u5728\nFilterSet\n\u7c7b\u4e2d\uff1a\n\n\nimport django_filters\nfrom myapp.models import Product\nfrom myapp.serializers import ProductSerializer\nfrom rest_framework import generics\n\nclass ProductFilter(django_filters.rest_framework.FilterSet):\n    manufacturer = django_filters.CharFilter(name=\"manufacturer__name\")\n\n    class Meta:\n        model = Product\n        fields = ['category', 'in_stock', 'manufacturer']\n\n\n\n\n\u73b0\u5728\u4f60\u53ef\u4ee5\u4e0b\u9762\u8fd9\u6837\u6267\u884c\uff1a\n\n\nhttp://example.com/api/products?manufacturer=foo\n\n\n\n\n\u6709\u5173\u4f7f\u7528\u8fc7\u6ee4\u5668\u96c6\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\ndjango-filter\u6587\u6863\n\u3002\n\n\n\n\nHints & Tips\uff08\u63d0\u793a\uff09\n\n\n\n\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528\u8fc7\u6ee4\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528\nDjangoFilterBackend\n\u8bb0\u5f97\u786e\u4fdd\u5b83\u662f\u901a\u8fc7\u4f7f\u7528\nDEFAULT_FILTER_BACKENDS\n\u8bbe\u7f6e\u5b89\u88c5\u7684\u3002\n\n\n\n\n\n\n\u4f7f\u7528\u5e03\u5c14\u5b57\u6bb5\u65f6\uff0c\u60a8\u5e94\u8be5\u5728\u7f51\u5740\u67e5\u8be2\u53c2\u6570\u4e2d\u4f7f\u7528\nTrue\n\u548c\nFalse\n\u503c\uff0c\u800c\u4e0d\u662f\n0\n\uff0c\n1\n\uff0c\ntrue\n\u6216\nfalse\n\u3002 \uff08\u5141\u8bb8\u7684\u5e03\u5c14\u503c\u76ee\u524d\u786c\u8fde\u7ebf\u5728Django\u7684\nNullBooleanSelect\u5b9e\u73b0\u4e2d\n\u3002\uff09\n\n\n\n\n\n\ndjango-filter\n\u652f\u6301\u4f7f\u7528Django\u7684\u53cc\u4e0b\u5212\u7ebf\u8bed\u6cd5\u5bf9\u5173\u7cfb\u8fdb\u884c\u8fc7\u6ee4\u3002\n\n\n\n\n\n\n\n\nSearchFilter\uff08\u641c\u7d22\u8fc7\u6ee4\uff09\n\n\nSearchFilter\n\u7c7b\u652f\u6301\u57fa\u4e8e\u7b80\u5355\u5355\u67e5\u8be2\u53c2\u6570\u7684\u641c\u7d22\uff0c\u5e76\u4e14\u57fa\u4e8e\nDjango admin\u7684\u641c\u7d22\u529f\u80fd\n\u3002\n\n\n\u5728\u4f7f\u7528\u65f6\uff0c browsable API\u5c06\u5305\u62ec\u4e00\u4e2a\nSearchFilter\n\u63a7\u4ef6\uff1a\n\n\n\n\u4ec5\u5f53view\u4e2d\u8bbe\u7f6e\u4e86\nsearch_fields\n\u5c5e\u6027\u65f6\uff0c\u624d\u5e94\u7528\nSearchFilter\n\u7c7b\u3002\nsearch_fields\n\u5c5e\u6027\u5e94\u8be5\u662fmodel\u4e2d\u6587\u672c\u7c7b\u578b\u5b57\u6bb5\u7684\u540d\u79f0\u5217\u8868\uff0c\u4f8b\u5982\nCharField\n\u6216\nTextField\n\u3002\n\n\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = (filters.SearchFilter,)\n    search_fields = ('username', 'email')\n\n\n\n\n\u8fd9\u5c06\u5141\u8bb8\u5ba2\u6237\u7aef\u901a\u8fc7\u8fdb\u884c\u4ee5\u4e0b\u67e5\u8be2\u6765\u8fc7\u6ee4\u5217\u8868\u4e2d\u7684\u9879\u76ee\uff1a\n\n\nhttp://example.com/api/users?search=russell\n\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u5728\u67e5\u627eAPI\u4e2d\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u7b26\u53f7\u5bf9ForeignKey\u6216ManyToManyField\u6267\u884c\u76f8\u5173\u67e5\u627e\uff1a\n\n\nsearch_fields = ('username', 'email', 'profile__profession')\n\n\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u5c06\u4f7f\u7528\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u90e8\u5206\u5339\u914d\u3002 \u641c\u7d22\u53c2\u6570\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u641c\u7d22\u9879\uff0c\u5176\u5e94\u8be5\u662f\u7a7a\u683c\u548c/\u6216\u9017\u53f7\u5206\u9694\u3002 \u5982\u679c\u4f7f\u7528\u591a\u4e2a\u641c\u7d22\u672f\u8bed\uff0c\u5219\u4ec5\u5f53\u6240\u6709\u63d0\u4f9b\u7684\u672f\u8bed\u90fd\u5339\u914d\u65f6\u624d\u5728\u5217\u8868\u4e2d\u8fd4\u56de\u5bf9\u8c61\u3002\n\n\n\u53ef\u4ee5\u901a\u8fc7\u5728\nsearch_fields\n\u524d\u9762\u6dfb\u52a0\u5404\u79cd\u5b57\u7b26\u6765\u9650\u5236\u641c\u7d22\u884c\u4e3a\u3002\n\n\n\n\n\n\n'^' \u4ee5\u6307\u5b9a\u5185\u5bb9\u5f00\u59cb.\n\n\n\n\n\n\n'=' \u5b8c\u5168\u5339\u914d\n\n\n\n\n\n\n'@' \u5168\u6587\u641c\u7d22\uff08\u76ee\u524d\u53ea\u652f\u6301Django\u7684MySQL\u540e\u7aef\uff09\n\n\n\n\n\n\n'$' \u6b63\u5219\u641c\u7d22\n\n\n\n\n\n\n\u4f8b\u5982\uff1a\n\n\nsearch_fields = ('=username', '=email')\n\n\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u53c2\u6570\u540d\u4e3a\n'search'\n\uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\nSEARCH_PARAM\n\u8bbe\u7f6e\u8986\u76d6\u3002\n\n\n\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\nDjango\u6587\u6863\n\u3002\n\n\n\n\nOrderingFilter\uff08\u6392\u5e8f\u7b5b\u9009\uff09\n\n\nOrderingFilter\n\u7c7b\u652f\u6301\u7b80\u5355\u7684\u67e5\u8be2\u53c2\u6570\u63a7\u5236\u7ed3\u679c\u6392\u5e8f\u3002\n\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u67e5\u8be2\u53c2\u6570\u540d\u4e3a\n'ordering'\n\uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\nORDERING_PARAM\n\u8bbe\u7f6e\u8986\u76d6\u3002\n\n\n\u4f8b\u5982\uff0c\u6309\u7528\u6237\u540d\u6392\u5e8f\u7528\u6237\uff1a\n\n\nhttp://example.com/api/users?ordering=username\n\n\n\n\n\u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4e3a\u5b57\u6bb5\u540d\u79f0\u52a0\u4e0a'-'\u6765\u6307\u5b9a\u53cd\u5411\u6392\u5e8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\nhttp://example.com/api/users?ordering=-username\n\n\n\n\n\u8fd8\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u6392\u5e8f\uff1a\n\n\nhttp://example.com/api/users?ordering=account,username\n\n\n\n\nSpecifying which fields may be ordered against\uff08\u6307\u5b9a\u652f\u6301\u6392\u5e8f\u7684\u5b57\u6bb5\uff09\n\n\n\u5efa\u8bae\u4f60\u660e\u786e\u6307\u5b9aAPI\u5e94\u5728ordering filter\u4e2d\u5141\u8bb8\u54ea\u4e9b\u5b57\u6bb5\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728view\u4e2d\u8bbe\u7f6e\nordering_fields\n\u5c5e\u6027\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = (filters.OrderingFilter,)\n    ordering_fields = ('username', 'email')\n\n\n\n\n\u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u610f\u5916\u7684\u6570\u636e\u6cc4\u6f0f\uff0c\u4f8b\u5982\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u5bc6\u7801\u54c8\u5e0c\u5b57\u6bb5\u6216\u5176\u4ed6\u654f\u611f\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002\n\n\n\u5982\u679c\u4e0d\u5728\u89c6\u56fe\u4e0a\u6307\u5b9a\nordering_fields\n\u5c5e\u6027\uff0c\u8fc7\u6ee4\u5668\u7c7b\u5c06\u9ed8\u8ba4\u5141\u8bb8\u7528\u6237\u5bf9\nserializer_class\n\u5c5e\u6027\u6307\u5b9a\u7684serializer\u4e0a\u7684\u4efb\u4f55\u53ef\u8bfb\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\u3002\n\n\n\u5982\u679c\u4f60\u786e\u4fe1\u89c6\u56fe\u6b63\u5728\u4f7f\u7528\u7684queryset\u4e0d\u5305\u542b\u4efb\u4f55\u654f\u611f\u6570\u636e\uff0c\u5219\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7279\u6b8a\u503c\n'__all__'\n\u6765\u660e\u786e\u6307\u5b9aview\u5e94\u5141\u8bb8\u5bf9\u4efb\u4f55model\u5b57\u6bb5\u6216queryset\u8fdb\u884c\u6392\u5e8f\u3002\n\n\nclass BookingsListView(generics.ListAPIView):\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    filter_backends = (filters.OrderingFilter,)\n    ordering_fields = '__all__'\n\n\n\n\nSpecifying a default ordering\uff08\u6307\u5b9a\u9ed8\u8ba4\u6392\u5e8f\uff09\n\n\n\u5982\u679c\u5728view\u4e2d\u8bbe\u7f6e\u4e86\nordering\n\u5c5e\u6027\uff0c\u5219\u5c06\u628a\u5b83\u7528\u4f5c\u9ed8\u8ba4\u6392\u5e8f\u3002\n\n\n\u901a\u5e38\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u521d\u59cbqueryset\u4e0a\u8bbe\u7f6e\norder_by\n\u6765\u63a7\u5236\u6b64\u64cd\u4f5c\uff0c\u4f46\u662f\u4f7f\u7528view\u4e2d\u7684\nordering\n\u53c2\u6570\u5141\u8bb8\u4f60\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6307\u5b9a\u6392\u5e8f\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u81ea\u52a8\u4f20\u9012\u5230\u5448\u73b0\u7684\u6a21\u677f\u3002\u5982\u679c\u5b83\u4eec\u7528\u4e8e\u6392\u5e8f\u7ed3\u679c\u7684\u8bdd\u5c31\u80fd\u4f7f\u81ea\u52a8\u6e32\u67d3\u4e0d\u540c\u7684\u5217\u6807\u9898\u6210\u4e3a\u53ef\u80fd\u3002\n\n\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = (filters.OrderingFilter,)\n    ordering_fields = ('username', 'email')\n    ordering = ('username',)\n\n\n\n\nordering\n\u5c5e\u6027\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u7684\u5217\u8868/\u5143\u7ec4\u3002\n\n\n\n\nDjangoObjectPermissionsFilte\uff08Django\u5bf9\u8c61\u6743\u9650\u8fc7\u6ee4\uff09",
            "title": "Filtering"
        },
        {
            "location": "/api-guide/filtering_zh/#filtering",
            "text": "\u201c \u7531Django Manager\u63d0\u4f9b\u7684\u6839QuerySet\u63cf\u8ff0\u4e86\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002\u53ef\u662f\u901a\u5e38\u4f60\u9700\u8981\u7684\u53ea\u662f\u9009\u62e9\u5b8c\u6574\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5b50\u96c6\u800c\u5df2\u3002  \u2014\u2014 Django\u6587\u6863\n\u201d   REST framework\u5217\u8868\u89c6\u56fe\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u8fd4\u56de\u4e00\u4e2amodel\u7684\u5168\u90e8queryset\u3002\u901a\u5e38\u4f60\u5374\u60f3\u8981\u4f60\u7684API\u6765\u9650\u5236queryset\u8fd4\u56de\u7684\u6570\u636e\u3002  \u6700\u7b80\u5355\u7684\u8fc7\u6ee4\u4efb\u610f GenericAPIView \u5b50\u89c6\u56fequeryset\u7684\u65b9\u6cd5\u5c31\u662f\u91cd\u5199\u5b83\u7684 .get_queryset() \u65b9\u6cd5\u3002  \u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u5141\u8bb8\u4f60\u4f7f\u7528\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5b9a\u5236\u89c6\u56fe\u8fd4\u56de\u7684queryset\u3002",
            "title": "Filtering"
        },
        {
            "location": "/api-guide/filtering_zh/#filtering-against-the-current-user",
            "text": "\u60a8\u53ef\u80fd\u60f3\u8981\u8fc7\u6ee4queryset\uff0c\u4ee5\u786e\u4fdd\u53ea\u8fd4\u56de\u4e0e\u53d1\u51fa\u8bf7\u6c42\u7684\u5f53\u524d\u5df2\u9a8c\u8bc1\u7528\u6237\u76f8\u5173\u7684\u7ed3\u679c\u3002  \u4f60\u53ef\u4ee5\u901a\u8fc7\u57fa\u4e8erequest.user\u7684\u503c\u8fdb\u884c\u8fc7\u6ee4\u6765\u5b9e\u73b0\u3002  \u6bd4\u5982\uff1a  from myapp.models import Purchase\nfrom myapp.serializers import PurchaseSerializer\nfrom rest_framework import generics\n\nclass PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        This view should return a list of all the purchases\n        for the currently authenticated user.\n        \"\"\"\n        user = self.request.user\n        return Purchase.objects.filter(purchaser=user)",
            "title": "Filtering against the current user\uff08\u6839\u636e\u5f53\u524d\u7528\u6237\u8fdb\u884c\u8fc7\u6ee4\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#filtering-against-the-urlurl",
            "text": "\u53e6\u4e00\u79cd\u8fc7\u6ee4\u65b9\u5f0f\u53ef\u80fd\u5305\u62ec\u57fa\u4e8eURL\u7684\u67d0\u4e9b\u90e8\u5206\u6765\u9650\u5236queryset\u3002  \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684URL\u914d\u7f6e\u5305\u542b\u4e00\u4e2a\u53c2\u6570\u5982\u4e0b:  url('^purchases/(?P<username>.+)/$', PurchaseList.as_view()),  \u4f60\u5c31\u53ef\u4ee5\u5199\u4e00\u4e2aview\uff0c\u8fd4\u56de\u57fa\u4e8eURL\u4e2d\u7684username\u53c2\u6570\u8fdb\u884c\u8fc7\u6ee4\u7684\u7ed3\u679c\u3002  class PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        This view should return a list of all the purchases for\n        the user as determined by the username portion of the URL.\n        \"\"\"\n        username = self.kwargs['username']\n        return Purchase.objects.filter(purchaser__username=username)",
            "title": "Filtering against the URL\uff08\u6839\u636eURL\u8fdb\u884c\u8fc7\u6ee4\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#filtering-against-query-parameters",
            "text": "\u8fc7\u6ee4\u521d\u59cb\u67e5\u8be2\u96c6\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u662f\u57fa\u4e8eurl\u4e2d\u7684\u67e5\u8be2\u53c2\u6570\u786e\u5b9a\u521d\u59cb\u67e5\u8be2\u96c6\u3002  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 .get_queryset() \u65b9\u6cd5\u6765\u5904\u7406\u50cf http://example.com/api/purchases?username=denvercoder9 \u8fd9\u6837\u7684\u7f51\u5740\uff0c\u5e76\u4e14\u53ea\u6709\u5728URL\u4e2d\u5305\u542b username \u53c2\u6570\u65f6\uff0c\u624d\u8fc7\u6ee4queryset\uff1a  class PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        Optionally restricts the returned purchases to a given user,\n        by filtering against a `username` query parameter in the URL.\n        \"\"\"\n        queryset = Purchase.objects.all()\n        username = self.request.query_params.get('username', None)\n        if username is not None:\n            queryset = queryset.filter(purchaser__username=username)\n        return queryset",
            "title": "Filtering against query parameters\uff08\u6839\u636e\u67e5\u8be2\u53c2\u6570\u8fdb\u884c\u8fc7\u6ee4\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#generic-filtering",
            "text": "\u9664\u4e86\u80fd\u591f\u91cd\u5199\u9ed8\u8ba4\u7684queryset\uff0cREST\u6846\u67b6\u8fd8\u5305\u62ec\u5bf9\u901a\u7528\u8fc7\u6ee4\u540e\u7aef\u7684\u652f\u6301\uff0c\u5141\u8bb8\u4f60\u8f7b\u677e\u6784\u5efa\u590d\u6742\u7684\u68c0\u7d22\u5668\u548c\u8fc7\u6ee4\u5668\u3002  \u901a\u7528\u8fc7\u6ee4\u5668\u4e5f\u53ef\u4ee5\u5728browsable API\u548cadmin API\u4e2d\u663e\u793a\u4e3aHTML\u63a7\u4ef6\u3002",
            "title": "Generic Filtering\uff08\u901a\u7528\u8fc7\u6ee4\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#setting-filter-backends",
            "text": "\u9ed8\u8ba4\u8fc7\u6ee4\u5668\u540e\u7aef\u53ef\u4ee5\u5728\u5168\u5c40\u8bbe\u7f6e\u4e2d\u4f7f\u7528 DEFAULT_FILTER_BACKENDS \u6765\u914d\u7f6e\u3002\u4f8b\u5982\u3002  REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)\n}  \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e GenericAPIView \u7c7b\u7684\u89c6\u56fe\u5728\u6bcf\u4e2aview\u6216\u6bcf\u4e2aviewset\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8fc7\u6ee4\u5668\u540e\u7aef\u3002  import django_filters.rest_framework\nfrom django.contrib.auth.models import User\nfrom myapp.serializers import UserSerializer\nfrom rest_framework import generics\n\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = (django_filters.rest_framework.DjangoFilterBackend,)",
            "title": "Setting filter backends\uff08\u8bbe\u7f6e\u901a\u7528\u8fc7\u6ee4\u540e\u7aef\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#filtering-and-object-lookups",
            "text": "\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4e3aview\u914d\u7f6e\u8fc7\u6ee4\u5668\u540e\u7aef\uff0c\u5e76\u4e14\u7528\u4e8e\u8fc7\u6ee4list views\uff0c\u5219\u5b83\u4e5f\u5c06\u7528\u4e8e\u8fc7\u6ee4\u7528\u4e8e\u8fd4\u56de\u5355\u4e2a\u5bf9\u8c61\u7684queryset\u3002  \u4f8b\u5982\uff0c\u7ed9\u5b9a\u524d\u9762\u7684\u793a\u4f8b\u4ee5\u53ca\u4e00\u4e2aID\u4e3a 4675 \u7684\u4ea7\u54c1\uff0c\u4ee5\u4e0bURL\u5c06\u8fd4\u56de\u76f8\u5e94\u7684\u5bf9\u8c61\u6216\u8005\u8fd4\u56de404\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u7ed9\u5b9a\u7684\u4ea7\u54c1\u5b9e\u4f8b\u662f\u5426\u6ee1\u8db3\u7b5b\u9009\u6761\u4ef6\u3002  http://example.com/api/products/4675/?category=clothing&max_price=10.00",
            "title": "Filtering and object lookups\uff08\u8fc7\u6ee4\u548c\u5bf9\u8c61\u67e5\u627e\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#overriding-the-initial-querysetqueryset",
            "text": "\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u91cd\u5199 .get_queryset() \u65b9\u6cd5\u6216\u4f7f\u7528\u901a\u7528\u8fc7\u6ee4\uff0c\u5e76\u4e14\u4e00\u5207\u90fd\u4f1a\u6309\u7167\u9884\u671f\u751f\u6548\u3002 \u4f8b\u5982\uff0c\u5982\u679c Product \u4e0e User \uff08\u540d\u4e3a purchase \uff09\u5177\u6709\u591a\u5bf9\u591a\u5173\u7cfb\uff0c\u5219\u53ef\u80fd\u9700\u8981\u7f16\u5199\u5982\u4e0b\u6240\u793a\u7684view\uff1a  class PurchasedProductsList(generics.ListAPIView):\n    \"\"\"\n    Return a list of all the products that the authenticated\n    user has ever purchased, with optional filtering.\n    \"\"\"\n    model = Product\n    serializer_class = ProductSerializer\n    filter_class = ProductFilter\n\n    def get_queryset(self):\n        user = self.request.user\n        return user.purchase_set.all()",
            "title": "Overriding the initial queryset\uff08\u8986\u76d6\u521d\u59cbqueryset\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#api-guide",
            "text": "",
            "title": "API Guide"
        },
        {
            "location": "/api-guide/filtering_zh/#djangofilterbackenddjango",
            "text": "django-filter \u5e93\u5305\u542b\u4e00\u4e2a\u4e3aREST framework\u63d0\u4f9b\u9ad8\u5ea6\u53ef\u5b9a\u5236\u5b57\u6bb5\u8fc7\u6ee4\u7684 DjangoFilterBackend \u7c7b\u3002  \u8981\u4f7f\u7528 DjangoFilterBackend \uff0c\u9996\u5148\u8981\u5148\u5b89\u88c5 django-filter \u3002  pip install django-filter  \u73b0\u5728\uff0c\u4f60\u9700\u8981\u5c06filter backend \u6dfb\u52a0\u5230\u4f60django project\u7684settings\u4e2d\uff1a  REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)\n}  \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u5c06filter backend\u6dfb\u52a0\u5230\u4e00\u4e2a\u5355\u72ec\u7684view\u6216viewSet\u4e2d\uff1a  from django_filters.rest_framework import DjangoFilterBackend\n\nclass UserListView(generics.ListAPIView):\n    ...\n    filter_backends = (DjangoFilterBackend,)  \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 browsable API\u6216 admin API\uff0c\u4f60\u8fd8\u9700\u8981\u5b89\u88c5 django-crispy-forms \uff0c\u901a\u8fc7\u4f7f\u7528Bootstarp3\u6e32\u67d3\u6765\u63d0\u9ad8filter form\u5728\u6d4f\u89c8\u5668\u4e2d\u7684\u5c55\u793a\u6548\u679c\u3002  pip install django-crispy-forms  \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u5c06 crispy-forms \u6dfb\u52a0\u5230\u4f60Django project\u7684 INSTALLED_APPS \u4e2d\uff0cbrowsable API\u5c06\u4e3a DjangoFilterBackend \u63d0\u4f9b\u4e00\u4e2a\u50cf\u4e0b\u9762\u8fd9\u6837\u7684filter control\uff1a",
            "title": "DjangoFilterBackend\uff08Django\u8fc7\u6ee4\u540e\u7aef\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#specifying-filter-fields",
            "text": "\u5982\u679c\u4f60\u7684\u9700\u6c42\u90fd\u662f\u4e9b\u7b80\u5355\u76f8\u7b49\u7c7b\u578b\u7684\u7b5b\u9009\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u4f60\u7684view\u6216viewSet\u91cc\u9762\u8bbe\u7f6e\u4e00\u4e2a filter_fields \u5c5e\u6027\uff0c\u5217\u51fa\u6240\u6709\u4f60\u60f3\u4f9d\u9760\u7b5b\u9009\u7684\u5b57\u6bb5\u96c6\u5408\u3002  class ProductList(generics.ListAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n    filter_backends = (filters.DjangoFilterBackend,)\n    filter_fields = ('category', 'in_stock')  \u8fd9\u5c06\u4e3a\u4f60\u5217\u51fa\u6765\u7684\u5b57\u6bb5\u81ea\u52a8\u521b\u5efa\u4e00\u4e2afilterSet\uff0c\u5141\u8bb8\u4f60\u60f3\u4e0b\u9762\u8fd9\u6837\u8bf7\u6c42\u7b5b\u9009\u7ed3\u679c\uff1a  http://example.com/api/products?category=clothing&in_stock=True",
            "title": "Specifying filter fields\uff08\u6307\u5b9a\u7b5b\u9009\u5b57\u6bb5\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#specifying-a-filtersetfilterset",
            "text": "\u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u7684\u8fc7\u6ee4\u8981\u6c42\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u5728view\u4e2d\u5e94\u8be5\u4f7f\u7528\u7684 FilterSet \u7c7b\u3002\u4f8b\u5982\uff1a  import django_filters\nfrom myapp.models import Product\nfrom myapp.serializers import ProductSerializer\nfrom rest_framework import generics\n\nclass ProductFilter(django_filters.rest_framework.FilterSet):\n    min_price = django_filters.NumberFilter(name=\"price\", lookup_expr='gte')\n    max_price = django_filters.NumberFilter(name=\"price\", lookup_expr='lte')\n    class Meta:\n        model = Product\n        fields = ['category', 'in_stock', 'min_price', 'max_price']\n\nclass ProductList(generics.ListAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n    filter_backends = (django_filters.rest_framework.DjangoFilterBackend,)\n    filter_class = ProductFilter  \u8fd9\u5c06\u5141\u8bb8\u4f60\u5411\u4e0b\u9762\u4e00\u6837\u53d1\u51fa\u8bf7\u6c42\uff0c\u5982\uff1a  http://example.com/api/products?category=clothing&max_price=10.00  \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 django-filter \u8de8\u8d8a\u5173\u7cfb\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u4ea7\u54c1\u90fd\u6709 Manufacturer \u6a21\u578b\u7684\u5916\u952e\uff0c\u6240\u4ee5\u6211\u4eec\u521b\u5efa\u8fc7\u6ee4\u5668\u4f7f\u7528 Manufacturer \u540d\u79f0\u8fc7\u6ee4\u3002\u4f8b\u5982\uff1a  import django_filters\nfrom myapp.models import Product\nfrom myapp.serializers import ProductSerializer\nfrom rest_framework import generics\n\nclass ProductFilter(django_filters.rest_framework.FilterSet):\n    class Meta:\n        model = Product\n        fields = ['category', 'in_stock', 'manufacturer__name']  \u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u8fdb\u884c\u5982\u4e0b\u67e5\u8be2\uff1a  http://example.com/api/products?manufacturer__name=foo  \u8fd9\u5f88\u597d\uff0c\u4f46\u5b83\u5c06Django\u7684\u53cc\u4e0b\u5212\u7ebf\u7ea6\u5b9a\u4f5c\u4e3aAPI\u7684\u4e00\u90e8\u5206\u66b4\u9732\u51fa\u6765\u3002\u5982\u679c\u4f60\u60f3\u663e\u5f0f\u5730\u547d\u540d\u8fc7\u6ee4\u5668\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u663e\u5f0f\u5730\u5c06\u5b83\u5305\u542b\u5728 FilterSet \u7c7b\u4e2d\uff1a  import django_filters\nfrom myapp.models import Product\nfrom myapp.serializers import ProductSerializer\nfrom rest_framework import generics\n\nclass ProductFilter(django_filters.rest_framework.FilterSet):\n    manufacturer = django_filters.CharFilter(name=\"manufacturer__name\")\n\n    class Meta:\n        model = Product\n        fields = ['category', 'in_stock', 'manufacturer']  \u73b0\u5728\u4f60\u53ef\u4ee5\u4e0b\u9762\u8fd9\u6837\u6267\u884c\uff1a  http://example.com/api/products?manufacturer=foo  \u6709\u5173\u4f7f\u7528\u8fc7\u6ee4\u5668\u96c6\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 django-filter\u6587\u6863 \u3002",
            "title": "Specifying a FilterSet\uff08\u6307\u5b9aFilterSet\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#hints-tips",
            "text": "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528\u8fc7\u6ee4\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528 DjangoFilterBackend \u8bb0\u5f97\u786e\u4fdd\u5b83\u662f\u901a\u8fc7\u4f7f\u7528 DEFAULT_FILTER_BACKENDS \u8bbe\u7f6e\u5b89\u88c5\u7684\u3002    \u4f7f\u7528\u5e03\u5c14\u5b57\u6bb5\u65f6\uff0c\u60a8\u5e94\u8be5\u5728\u7f51\u5740\u67e5\u8be2\u53c2\u6570\u4e2d\u4f7f\u7528 True \u548c False \u503c\uff0c\u800c\u4e0d\u662f 0 \uff0c 1 \uff0c true \u6216 false \u3002 \uff08\u5141\u8bb8\u7684\u5e03\u5c14\u503c\u76ee\u524d\u786c\u8fde\u7ebf\u5728Django\u7684 NullBooleanSelect\u5b9e\u73b0\u4e2d \u3002\uff09    django-filter \u652f\u6301\u4f7f\u7528Django\u7684\u53cc\u4e0b\u5212\u7ebf\u8bed\u6cd5\u5bf9\u5173\u7cfb\u8fdb\u884c\u8fc7\u6ee4\u3002",
            "title": "Hints &amp; Tips\uff08\u63d0\u793a\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#searchfilter",
            "text": "SearchFilter \u7c7b\u652f\u6301\u57fa\u4e8e\u7b80\u5355\u5355\u67e5\u8be2\u53c2\u6570\u7684\u641c\u7d22\uff0c\u5e76\u4e14\u57fa\u4e8e Django admin\u7684\u641c\u7d22\u529f\u80fd \u3002  \u5728\u4f7f\u7528\u65f6\uff0c browsable API\u5c06\u5305\u62ec\u4e00\u4e2a SearchFilter \u63a7\u4ef6\uff1a  \u4ec5\u5f53view\u4e2d\u8bbe\u7f6e\u4e86 search_fields \u5c5e\u6027\u65f6\uff0c\u624d\u5e94\u7528 SearchFilter \u7c7b\u3002 search_fields \u5c5e\u6027\u5e94\u8be5\u662fmodel\u4e2d\u6587\u672c\u7c7b\u578b\u5b57\u6bb5\u7684\u540d\u79f0\u5217\u8868\uff0c\u4f8b\u5982 CharField \u6216 TextField \u3002  class UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = (filters.SearchFilter,)\n    search_fields = ('username', 'email')  \u8fd9\u5c06\u5141\u8bb8\u5ba2\u6237\u7aef\u901a\u8fc7\u8fdb\u884c\u4ee5\u4e0b\u67e5\u8be2\u6765\u8fc7\u6ee4\u5217\u8868\u4e2d\u7684\u9879\u76ee\uff1a  http://example.com/api/users?search=russell  \u4f60\u8fd8\u53ef\u4ee5\u5728\u67e5\u627eAPI\u4e2d\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u7b26\u53f7\u5bf9ForeignKey\u6216ManyToManyField\u6267\u884c\u76f8\u5173\u67e5\u627e\uff1a  search_fields = ('username', 'email', 'profile__profession')  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u5c06\u4f7f\u7528\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u90e8\u5206\u5339\u914d\u3002 \u641c\u7d22\u53c2\u6570\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u641c\u7d22\u9879\uff0c\u5176\u5e94\u8be5\u662f\u7a7a\u683c\u548c/\u6216\u9017\u53f7\u5206\u9694\u3002 \u5982\u679c\u4f7f\u7528\u591a\u4e2a\u641c\u7d22\u672f\u8bed\uff0c\u5219\u4ec5\u5f53\u6240\u6709\u63d0\u4f9b\u7684\u672f\u8bed\u90fd\u5339\u914d\u65f6\u624d\u5728\u5217\u8868\u4e2d\u8fd4\u56de\u5bf9\u8c61\u3002  \u53ef\u4ee5\u901a\u8fc7\u5728 search_fields \u524d\u9762\u6dfb\u52a0\u5404\u79cd\u5b57\u7b26\u6765\u9650\u5236\u641c\u7d22\u884c\u4e3a\u3002    '^' \u4ee5\u6307\u5b9a\u5185\u5bb9\u5f00\u59cb.    '=' \u5b8c\u5168\u5339\u914d    '@' \u5168\u6587\u641c\u7d22\uff08\u76ee\u524d\u53ea\u652f\u6301Django\u7684MySQL\u540e\u7aef\uff09    '$' \u6b63\u5219\u641c\u7d22    \u4f8b\u5982\uff1a  search_fields = ('=username', '=email')  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u53c2\u6570\u540d\u4e3a 'search' \uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 SEARCH_PARAM \u8bbe\u7f6e\u8986\u76d6\u3002  \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Django\u6587\u6863 \u3002",
            "title": "SearchFilter\uff08\u641c\u7d22\u8fc7\u6ee4\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#orderingfilter",
            "text": "OrderingFilter \u7c7b\u652f\u6301\u7b80\u5355\u7684\u67e5\u8be2\u53c2\u6570\u63a7\u5236\u7ed3\u679c\u6392\u5e8f\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u67e5\u8be2\u53c2\u6570\u540d\u4e3a 'ordering' \uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ORDERING_PARAM \u8bbe\u7f6e\u8986\u76d6\u3002  \u4f8b\u5982\uff0c\u6309\u7528\u6237\u540d\u6392\u5e8f\u7528\u6237\uff1a  http://example.com/api/users?ordering=username  \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4e3a\u5b57\u6bb5\u540d\u79f0\u52a0\u4e0a'-'\u6765\u6307\u5b9a\u53cd\u5411\u6392\u5e8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a  http://example.com/api/users?ordering=-username  \u8fd8\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u6392\u5e8f\uff1a  http://example.com/api/users?ordering=account,username",
            "title": "OrderingFilter\uff08\u6392\u5e8f\u7b5b\u9009\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#specifying-which-fields-may-be-ordered-against",
            "text": "\u5efa\u8bae\u4f60\u660e\u786e\u6307\u5b9aAPI\u5e94\u5728ordering filter\u4e2d\u5141\u8bb8\u54ea\u4e9b\u5b57\u6bb5\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728view\u4e2d\u8bbe\u7f6e ordering_fields \u5c5e\u6027\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5982\u4e0b\u6240\u793a\uff1a  class UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = (filters.OrderingFilter,)\n    ordering_fields = ('username', 'email')  \u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u610f\u5916\u7684\u6570\u636e\u6cc4\u6f0f\uff0c\u4f8b\u5982\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u5bc6\u7801\u54c8\u5e0c\u5b57\u6bb5\u6216\u5176\u4ed6\u654f\u611f\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002  \u5982\u679c\u4e0d\u5728\u89c6\u56fe\u4e0a\u6307\u5b9a ordering_fields \u5c5e\u6027\uff0c\u8fc7\u6ee4\u5668\u7c7b\u5c06\u9ed8\u8ba4\u5141\u8bb8\u7528\u6237\u5bf9 serializer_class \u5c5e\u6027\u6307\u5b9a\u7684serializer\u4e0a\u7684\u4efb\u4f55\u53ef\u8bfb\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\u3002  \u5982\u679c\u4f60\u786e\u4fe1\u89c6\u56fe\u6b63\u5728\u4f7f\u7528\u7684queryset\u4e0d\u5305\u542b\u4efb\u4f55\u654f\u611f\u6570\u636e\uff0c\u5219\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7279\u6b8a\u503c '__all__' \u6765\u660e\u786e\u6307\u5b9aview\u5e94\u5141\u8bb8\u5bf9\u4efb\u4f55model\u5b57\u6bb5\u6216queryset\u8fdb\u884c\u6392\u5e8f\u3002  class BookingsListView(generics.ListAPIView):\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    filter_backends = (filters.OrderingFilter,)\n    ordering_fields = '__all__'",
            "title": "Specifying which fields may be ordered against\uff08\u6307\u5b9a\u652f\u6301\u6392\u5e8f\u7684\u5b57\u6bb5\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#specifying-a-default-ordering",
            "text": "\u5982\u679c\u5728view\u4e2d\u8bbe\u7f6e\u4e86 ordering \u5c5e\u6027\uff0c\u5219\u5c06\u628a\u5b83\u7528\u4f5c\u9ed8\u8ba4\u6392\u5e8f\u3002  \u901a\u5e38\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u521d\u59cbqueryset\u4e0a\u8bbe\u7f6e order_by \u6765\u63a7\u5236\u6b64\u64cd\u4f5c\uff0c\u4f46\u662f\u4f7f\u7528view\u4e2d\u7684 ordering \u53c2\u6570\u5141\u8bb8\u4f60\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6307\u5b9a\u6392\u5e8f\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u81ea\u52a8\u4f20\u9012\u5230\u5448\u73b0\u7684\u6a21\u677f\u3002\u5982\u679c\u5b83\u4eec\u7528\u4e8e\u6392\u5e8f\u7ed3\u679c\u7684\u8bdd\u5c31\u80fd\u4f7f\u81ea\u52a8\u6e32\u67d3\u4e0d\u540c\u7684\u5217\u6807\u9898\u6210\u4e3a\u53ef\u80fd\u3002  class UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = (filters.OrderingFilter,)\n    ordering_fields = ('username', 'email')\n    ordering = ('username',)  ordering \u5c5e\u6027\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u7684\u5217\u8868/\u5143\u7ec4\u3002",
            "title": "Specifying a default ordering\uff08\u6307\u5b9a\u9ed8\u8ba4\u6392\u5e8f\uff09"
        },
        {
            "location": "/api-guide/filtering_zh/#djangoobjectpermissionsfiltedjango",
            "text": "",
            "title": "DjangoObjectPermissionsFilte\uff08Django\u5bf9\u8c61\u6743\u9650\u8fc7\u6ee4\uff09"
        },
        {
            "location": "/api-guide/pagination/",
            "text": "Pagination\n\n\n\n\nDjango provides a few classes that help you manage paginated data \u2013 that is, data that\u2019s split across several pages, with \u201cPrevious/Next\u201d links.\n\n\n\u2014 \nDjango documentation\n\n\n\n\nREST framework includes support for customizable pagination styles. This allows you to modify how large result sets are split into individual pages of data.\n\n\nThe pagination API can support either:\n\n\n\n\nPagination links that are provided as part of the content of the response.\n\n\nPagination links that are included in response headers, such as \nContent-Range\n or \nLink\n.\n\n\n\n\nThe built-in styles currently all use links included as part of the content of the response. This style is more accessible when using the browsable API.\n\n\nPagination is only performed automatically if you're using the generic views or viewsets. If you're using a regular \nAPIView\n, you'll need to call into the pagination API yourself to ensure you return a paginated response. See the source code for the \nmixins.ListModelMixin\n and \ngenerics.GenericAPIView\n classes for an example.\n\n\nPagination can be turned off by setting the pagination class to \nNone\n.\n\n\nSetting the pagination style\n\n\nThe default pagination style may be set globally, using the \nDEFAULT_PAGINATION_CLASS\n and \nPAGE_SIZE\n setting keys. For example, to use the built-in limit/offset pagination, you would do something like this:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',\n    'PAGE_SIZE': 100\n}\n\n\n\nNote that you need to set both the pagination class, and the page size that should be used.\n\n\nYou can also set the pagination class on an individual view by using the \npagination_class\n attribute. Typically you'll want to use the same pagination style throughout your API, although you might want to vary individual aspects of the pagination, such as default or maximum page size, on a per-view basis.\n\n\nModifying the pagination style\n\n\nIf you want to modify particular aspects of the pagination style, you'll want to override one of the pagination classes, and set the attributes that you want to change.\n\n\nclass LargeResultsSetPagination(PageNumberPagination):\n    page_size = 1000\n    page_size_query_param = 'page_size'\n    max_page_size = 10000\n\nclass StandardResultsSetPagination(PageNumberPagination):\n    page_size = 100\n    page_size_query_param = 'page_size'\n    max_page_size = 1000\n\n\n\nYou can then apply your new style to a view using the \n.pagination_class\n attribute:\n\n\nclass BillingRecordsView(generics.ListAPIView):\n    queryset = Billing.objects.all()\n    serializer_class = BillingRecordsSerializer\n    pagination_class = LargeResultsSetPagination\n\n\n\nOr apply the style globally, using the \nDEFAULT_PAGINATION_CLASS\n settings key. For example:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.StandardResultsSetPagination'\n}\n\n\n\n\n\nAPI Reference\n\n\nPageNumberPagination\n\n\nThis pagination style accepts a single number page number in the request query parameters.\n\n\nRequest\n:\n\n\nGET https://api.example.org/accounts/?page=4\n\n\n\nResponse\n:\n\n\nHTTP 200 OK\n{\n    \"count\": 1023\n    \"next\": \"https://api.example.org/accounts/?page=5\",\n    \"previous\": \"https://api.example.org/accounts/?page=3\",\n    \"results\": [\n       \u2026\n    ]\n}\n\n\n\nSetup\n\n\nTo enable the \nPageNumberPagination\n style globally, use the following configuration, modifying the \nPAGE_SIZE\n as desired:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 100\n}\n\n\n\nOn \nGenericAPIView\n subclasses you may also set the \npagination_class\n attribute to select \nPageNumberPagination\n on a per-view basis.\n\n\nConfiguration\n\n\nThe \nPageNumberPagination\n class includes a number of attributes that may be overridden to modify the pagination style.\n\n\nTo set these attributes you should override the \nPageNumberPagination\n class, and then enable your custom pagination class as above.\n\n\n\n\ndjango_paginator_class\n - The Django Paginator class to use. Default is \ndjango.core.paginator.Paginator\n, which should be fine for most use cases.\n\n\npage_size\n - A numeric value indicating the page size. If set, this overrides the \nPAGE_SIZE\n setting. Defaults to the same value as the \nPAGE_SIZE\n settings key.\n\n\npage_query_param\n - A string value indicating the name of the query parameter to use for the pagination control.\n\n\npage_size_query_param\n - If set, this is a string value indicating the name of a query parameter that allows the client to set the page size on a per-request basis. Defaults to \nNone\n, indicating that the client may not control the requested page size.\n\n\nmax_page_size\n - If set, this is a numeric value indicating the maximum allowable requested page size. This attribute is only valid if \npage_size_query_param\n is also set.\n\n\nlast_page_strings\n - A list or tuple of string values indicating values that may be used with the \npage_query_param\n to request the final page in the set. Defaults to \n('last',)\n\n\ntemplate\n - The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to \nNone\n to disable HTML pagination controls completely. Defaults to \n\"rest_framework/pagination/numbers.html\"\n.\n\n\n\n\n\n\nLimitOffsetPagination\n\n\nThis pagination style mirrors the syntax used when looking up multiple database records. The client includes both a \"limit\" and an\n\"offset\" query parameter. The limit indicates the maximum number of items to return, and is equivalent to the \npage_size\n in other styles. The offset indicates the starting position of the query in relation to the complete set of unpaginated items.\n\n\nRequest\n:\n\n\nGET https://api.example.org/accounts/?limit=100&offset=400\n\n\n\nResponse\n:\n\n\nHTTP 200 OK\n{\n    \"count\": 1023\n    \"next\": \"https://api.example.org/accounts/?limit=100&offset=500\",\n    \"previous\": \"https://api.example.org/accounts/?limit=100&offset=300\",\n    \"results\": [\n       \u2026\n    ]\n}\n\n\n\nSetup\n\n\nTo enable the \nLimitOffsetPagination\n style globally, use the following configuration:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination'\n}\n\n\n\nOptionally, you may also set a \nPAGE_SIZE\n key. If the \nPAGE_SIZE\n parameter is also used then the \nlimit\n query parameter will be optional, and may be omitted by the client.\n\n\nOn \nGenericAPIView\n subclasses you may also set the \npagination_class\n attribute to select \nLimitOffsetPagination\n on a per-view basis.\n\n\nConfiguration\n\n\nThe \nLimitOffsetPagination\n class includes a number of attributes that may be overridden to modify the pagination style.\n\n\nTo set these attributes you should override the \nLimitOffsetPagination\n class, and then enable your custom pagination class as above.\n\n\n\n\ndefault_limit\n - A numeric value indicating the limit to use if one is not provided by the client in a query parameter. Defaults to the same value as the \nPAGE_SIZE\n settings key.\n\n\nlimit_query_param\n - A string value indicating the name of the \"limit\" query parameter. Defaults to \n'limit'\n.\n\n\noffset_query_param\n - A string value indicating the name of the \"offset\" query parameter. Defaults to \n'offset'\n.\n\n\nmax_limit\n - If set this is a numeric value indicating the maximum allowable limit that may be requested by the client. Defaults to \nNone\n.\n\n\ntemplate\n - The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to \nNone\n to disable HTML pagination controls completely. Defaults to \n\"rest_framework/pagination/numbers.html\"\n.\n\n\n\n\n\n\nCursorPagination\n\n\nThe cursor-based pagination presents an opaque \"cursor\" indicator that the client may use to page through the result set. This pagination style only presents forward and reverse controls, and does not allow the client to navigate to arbitrary positions.\n\n\nCursor based pagination requires that there is a unique, unchanging ordering of items in the result set. This ordering might typically be a creation timestamp on the records, as this presents a consistent ordering to paginate against.\n\n\nCursor based pagination is more complex than other schemes. It also requires that the result set presents a fixed ordering, and does not allow the client to arbitrarily index into the result set. However it does provide the following benefits:\n\n\n\n\nProvides a consistent pagination view. When used properly \nCursorPagination\n ensures that the client will never see the same item twice when paging through records, even when new items are being inserted by other clients during the pagination process.\n\n\nSupports usage with very large datasets. With extremely large datasets pagination using offset-based pagination styles may become inefficient or unusable. Cursor based pagination schemes instead have fixed-time properties, and do not slow down as the dataset size increases.\n\n\n\n\nDetails and limitations\n\n\nProper use of cursor based pagination requires a little attention to detail. You'll need to think about what ordering you want the scheme to be applied against. The default is to order by \n\"-created\"\n. This assumes that \nthere must be a 'created' timestamp field\n on the model instances, and will present a \"timeline\" style paginated view, with the most recently added items first.\n\n\nYou can modify the ordering by overriding the \n'ordering'\n attribute on the pagination class, or by using the \nOrderingFilter\n filter class together with \nCursorPagination\n. When used with \nOrderingFilter\n you should strongly consider restricting the fields that the user may order by.\n\n\nProper usage of cursor pagination should have an ordering field that satisfies the following:\n\n\n\n\nShould be an unchanging value, such as a timestamp, slug, or other field that is only set once, on creation.\n\n\nShould be unique, or nearly unique. Millisecond precision timestamps are a good example. This implementation of cursor pagination uses a smart \"position plus offset\" style that allows it to properly support not-strictly-unique values as the ordering.\n\n\nShould be a non-nullable value that can be coerced to a string.\n\n\nThe field should have a database index.\n\n\n\n\nUsing an ordering field that does not satisfy these constraints will generally still work, but you'll be losing some of the benefits of cursor pagination.\n\n\nFor more technical details on the implementation we use for cursor pagination, the \n\"Building cursors for the Disqus API\"\n blog post gives a good overview of the basic approach.\n\n\nSetup\n\n\nTo enable the \nCursorPagination\n style globally, use the following configuration, modifying the \nPAGE_SIZE\n as desired:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination',\n    'PAGE_SIZE': 100\n}\n\n\n\nOn \nGenericAPIView\n subclasses you may also set the \npagination_class\n attribute to select \nCursorPagination\n on a per-view basis.\n\n\nConfiguration\n\n\nThe \nCursorPagination\n class includes a number of attributes that may be overridden to modify the pagination style.\n\n\nTo set these attributes you should override the \nCursorPagination\n class, and then enable your custom pagination class as above.\n\n\n\n\npage_size\n = A numeric value indicating the page size. If set, this overrides the \nPAGE_SIZE\n setting. Defaults to the same value as the \nPAGE_SIZE\n settings key.\n\n\ncursor_query_param\n = A string value indicating the name of the \"cursor\" query parameter. Defaults to \n'cursor'\n.\n\n\nordering\n = This should be a string, or list of strings, indicating the field against which the cursor based pagination will be applied. For example: \nordering = 'slug'\n. Defaults to \n-created\n. This value may also be overridden by using \nOrderingFilter\n on the view.\n\n\ntemplate\n = The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to \nNone\n to disable HTML pagination controls completely. Defaults to \n\"rest_framework/pagination/previous_and_next.html\"\n.\n\n\n\n\n\n\nCustom pagination styles\n\n\nTo create a custom pagination serializer class you should subclass \npagination.BasePagination\n and override the \npaginate_queryset(self, queryset, request, view=None)\n and \nget_paginated_response(self, data)\n methods:\n\n\n\n\nThe \npaginate_queryset\n method is passed the initial queryset and should return an iterable object that contains only the data in the requested page.\n\n\nThe \nget_paginated_response\n method is passed the serialized page data and should return a \nResponse\n instance.\n\n\n\n\nNote that the \npaginate_queryset\n method may set state on the pagination instance, that may later be used by the \nget_paginated_response\n method.\n\n\nExample\n\n\nSuppose we want to replace the default pagination output style with a modified format that  includes the next and previous links under in a nested 'links' key. We could specify a custom pagination class like so:\n\n\nclass CustomPagination(pagination.PageNumberPagination):\n    def get_paginated_response(self, data):\n        return Response({\n            'links': {\n               'next': self.get_next_link(),\n               'previous': self.get_previous_link()\n            },\n            'count': self.page.paginator.count,\n            'results': data\n        })\n\n\n\nWe'd then need to setup the custom class in our configuration:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.CustomPagination',\n    'PAGE_SIZE': 100\n}\n\n\n\nNote that if you care about how the ordering of keys is displayed in responses in the browsable API you might choose to use an \nOrderedDict\n when constructing the body of paginated responses, but this is optional.\n\n\nHeader based pagination\n\n\nLet's modify the built-in \nPageNumberPagination\n style, so that instead of include the pagination links in the body of the response, we'll instead include a \nLink\n header, in a \nsimilar style to the GitHub API\n.\n\n\nclass LinkHeaderPagination(pagination.PageNumberPagination):\n    def get_paginated_response(self, data):\n        next_url = self.get_next_link()\n        previous_url = self.get_previous_link()\n\n        if next_url is not None and previous_url is not None:\n            link = '<{next_url}>; rel=\"next\", <{previous_url}>; rel=\"prev\"'\n        elif next_url is not None:\n            link = '<{next_url}>; rel=\"next\"'\n        elif previous_url is not None:\n            link = '<{previous_url}>; rel=\"prev\"'\n        else:\n            link = ''\n\n        link = link.format(next_url=next_url, previous_url=previous_url)\n        headers = {'Link': link} if link else {}\n\n        return Response(data, headers=headers)\n\n\n\nUsing your custom pagination class\n\n\nTo have your custom pagination class be used by default, use the \nDEFAULT_PAGINATION_CLASS\n setting:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.LinkHeaderPagination',\n    'PAGE_SIZE': 100\n}\n\n\n\nAPI responses for list endpoints will now include a \nLink\n header, instead of including the pagination links as part of the body of the response, for example:\n\n\nPagination & schemas\n\n\nYou can also make the pagination controls available to the schema autogeneration\nthat REST framework provides, by implementing a \nget_schema_fields()\n method,\nwhich should return a list of \ncoreapi.Field\n instances.\n\n\n\n\n\n\nA custom pagination style, using the 'Link' header'\n\n\n\n\nHTML pagination controls\n\n\nBy default using the pagination classes will cause HTML pagination controls to be displayed in the browsable API. There are two built-in display styles. The \nPageNumberPagination\n and \nLimitOffsetPagination\n classes display a list of page numbers with previous and next controls. The \nCursorPagination\n class displays a simpler style that only displays a previous and next control.\n\n\nCustomizing the controls\n\n\nYou can override the templates that render the HTML pagination controls. The two built-in styles are:\n\n\n\n\nrest_framework/pagination/numbers.html\n\n\nrest_framework/pagination/previous_and_next.html\n\n\n\n\nProviding a template with either of these paths in a global template directory will override the default rendering for the relevant pagination classes.\n\n\nAlternatively you can disable HTML pagination controls completely by subclassing on of the existing classes, setting \ntemplate = None\n as an attribute on the class. You'll then need to configure your \nDEFAULT_PAGINATION_CLASS\n settings key to use your custom class as the default pagination style.\n\n\nLow-level API\n\n\nThe low-level API for determining if a pagination class should display the controls or not is exposed as a \ndisplay_page_controls\n attribute on the pagination instance. Custom pagination classes should be set to \nTrue\n in the \npaginate_queryset\n method if they require the HTML pagination controls to be displayed.\n\n\nThe \n.to_html()\n and \n.get_html_context()\n methods may also be overridden in a custom pagination class in order to further customize how the controls are rendered.\n\n\n\n\nThird party packages\n\n\nThe following third party packages are also available.\n\n\nDRF-extensions\n\n\nThe \nDRF-extensions\n package\n includes a \nPaginateByMaxMixin\n mixin class\n that allows your API clients to specify \n?page_size=max\n to obtain the maximum allowed page size.\n\n\ndrf-proxy-pagination\n\n\nThe \ndrf-proxy-pagination\n package\n includes a \nProxyPagination\n class which allows to choose pagination class with a query parameter.",
            "title": "Pagination"
        },
        {
            "location": "/api-guide/pagination/#pagination",
            "text": "Django provides a few classes that help you manage paginated data \u2013 that is, data that\u2019s split across several pages, with \u201cPrevious/Next\u201d links.  \u2014  Django documentation   REST framework includes support for customizable pagination styles. This allows you to modify how large result sets are split into individual pages of data.  The pagination API can support either:   Pagination links that are provided as part of the content of the response.  Pagination links that are included in response headers, such as  Content-Range  or  Link .   The built-in styles currently all use links included as part of the content of the response. This style is more accessible when using the browsable API.  Pagination is only performed automatically if you're using the generic views or viewsets. If you're using a regular  APIView , you'll need to call into the pagination API yourself to ensure you return a paginated response. See the source code for the  mixins.ListModelMixin  and  generics.GenericAPIView  classes for an example.  Pagination can be turned off by setting the pagination class to  None .",
            "title": "Pagination"
        },
        {
            "location": "/api-guide/pagination/#setting-the-pagination-style",
            "text": "The default pagination style may be set globally, using the  DEFAULT_PAGINATION_CLASS  and  PAGE_SIZE  setting keys. For example, to use the built-in limit/offset pagination, you would do something like this:  REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',\n    'PAGE_SIZE': 100\n}  Note that you need to set both the pagination class, and the page size that should be used.  You can also set the pagination class on an individual view by using the  pagination_class  attribute. Typically you'll want to use the same pagination style throughout your API, although you might want to vary individual aspects of the pagination, such as default or maximum page size, on a per-view basis.",
            "title": "Setting the pagination style"
        },
        {
            "location": "/api-guide/pagination/#modifying-the-pagination-style",
            "text": "If you want to modify particular aspects of the pagination style, you'll want to override one of the pagination classes, and set the attributes that you want to change.  class LargeResultsSetPagination(PageNumberPagination):\n    page_size = 1000\n    page_size_query_param = 'page_size'\n    max_page_size = 10000\n\nclass StandardResultsSetPagination(PageNumberPagination):\n    page_size = 100\n    page_size_query_param = 'page_size'\n    max_page_size = 1000  You can then apply your new style to a view using the  .pagination_class  attribute:  class BillingRecordsView(generics.ListAPIView):\n    queryset = Billing.objects.all()\n    serializer_class = BillingRecordsSerializer\n    pagination_class = LargeResultsSetPagination  Or apply the style globally, using the  DEFAULT_PAGINATION_CLASS  settings key. For example:  REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.StandardResultsSetPagination'\n}",
            "title": "Modifying the pagination style"
        },
        {
            "location": "/api-guide/pagination/#api-reference",
            "text": "",
            "title": "API Reference"
        },
        {
            "location": "/api-guide/pagination/#pagenumberpagination",
            "text": "This pagination style accepts a single number page number in the request query parameters.  Request :  GET https://api.example.org/accounts/?page=4  Response :  HTTP 200 OK\n{\n    \"count\": 1023\n    \"next\": \"https://api.example.org/accounts/?page=5\",\n    \"previous\": \"https://api.example.org/accounts/?page=3\",\n    \"results\": [\n       \u2026\n    ]\n}",
            "title": "PageNumberPagination"
        },
        {
            "location": "/api-guide/pagination/#setup",
            "text": "To enable the  PageNumberPagination  style globally, use the following configuration, modifying the  PAGE_SIZE  as desired:  REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 100\n}  On  GenericAPIView  subclasses you may also set the  pagination_class  attribute to select  PageNumberPagination  on a per-view basis.",
            "title": "Setup"
        },
        {
            "location": "/api-guide/pagination/#configuration",
            "text": "The  PageNumberPagination  class includes a number of attributes that may be overridden to modify the pagination style.  To set these attributes you should override the  PageNumberPagination  class, and then enable your custom pagination class as above.   django_paginator_class  - The Django Paginator class to use. Default is  django.core.paginator.Paginator , which should be fine for most use cases.  page_size  - A numeric value indicating the page size. If set, this overrides the  PAGE_SIZE  setting. Defaults to the same value as the  PAGE_SIZE  settings key.  page_query_param  - A string value indicating the name of the query parameter to use for the pagination control.  page_size_query_param  - If set, this is a string value indicating the name of a query parameter that allows the client to set the page size on a per-request basis. Defaults to  None , indicating that the client may not control the requested page size.  max_page_size  - If set, this is a numeric value indicating the maximum allowable requested page size. This attribute is only valid if  page_size_query_param  is also set.  last_page_strings  - A list or tuple of string values indicating values that may be used with the  page_query_param  to request the final page in the set. Defaults to  ('last',)  template  - The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to  None  to disable HTML pagination controls completely. Defaults to  \"rest_framework/pagination/numbers.html\" .",
            "title": "Configuration"
        },
        {
            "location": "/api-guide/pagination/#limitoffsetpagination",
            "text": "This pagination style mirrors the syntax used when looking up multiple database records. The client includes both a \"limit\" and an\n\"offset\" query parameter. The limit indicates the maximum number of items to return, and is equivalent to the  page_size  in other styles. The offset indicates the starting position of the query in relation to the complete set of unpaginated items.  Request :  GET https://api.example.org/accounts/?limit=100&offset=400  Response :  HTTP 200 OK\n{\n    \"count\": 1023\n    \"next\": \"https://api.example.org/accounts/?limit=100&offset=500\",\n    \"previous\": \"https://api.example.org/accounts/?limit=100&offset=300\",\n    \"results\": [\n       \u2026\n    ]\n}",
            "title": "LimitOffsetPagination"
        },
        {
            "location": "/api-guide/pagination/#setup_1",
            "text": "To enable the  LimitOffsetPagination  style globally, use the following configuration:  REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination'\n}  Optionally, you may also set a  PAGE_SIZE  key. If the  PAGE_SIZE  parameter is also used then the  limit  query parameter will be optional, and may be omitted by the client.  On  GenericAPIView  subclasses you may also set the  pagination_class  attribute to select  LimitOffsetPagination  on a per-view basis.",
            "title": "Setup"
        },
        {
            "location": "/api-guide/pagination/#configuration_1",
            "text": "The  LimitOffsetPagination  class includes a number of attributes that may be overridden to modify the pagination style.  To set these attributes you should override the  LimitOffsetPagination  class, and then enable your custom pagination class as above.   default_limit  - A numeric value indicating the limit to use if one is not provided by the client in a query parameter. Defaults to the same value as the  PAGE_SIZE  settings key.  limit_query_param  - A string value indicating the name of the \"limit\" query parameter. Defaults to  'limit' .  offset_query_param  - A string value indicating the name of the \"offset\" query parameter. Defaults to  'offset' .  max_limit  - If set this is a numeric value indicating the maximum allowable limit that may be requested by the client. Defaults to  None .  template  - The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to  None  to disable HTML pagination controls completely. Defaults to  \"rest_framework/pagination/numbers.html\" .",
            "title": "Configuration"
        },
        {
            "location": "/api-guide/pagination/#cursorpagination",
            "text": "The cursor-based pagination presents an opaque \"cursor\" indicator that the client may use to page through the result set. This pagination style only presents forward and reverse controls, and does not allow the client to navigate to arbitrary positions.  Cursor based pagination requires that there is a unique, unchanging ordering of items in the result set. This ordering might typically be a creation timestamp on the records, as this presents a consistent ordering to paginate against.  Cursor based pagination is more complex than other schemes. It also requires that the result set presents a fixed ordering, and does not allow the client to arbitrarily index into the result set. However it does provide the following benefits:   Provides a consistent pagination view. When used properly  CursorPagination  ensures that the client will never see the same item twice when paging through records, even when new items are being inserted by other clients during the pagination process.  Supports usage with very large datasets. With extremely large datasets pagination using offset-based pagination styles may become inefficient or unusable. Cursor based pagination schemes instead have fixed-time properties, and do not slow down as the dataset size increases.",
            "title": "CursorPagination"
        },
        {
            "location": "/api-guide/pagination/#details-and-limitations",
            "text": "Proper use of cursor based pagination requires a little attention to detail. You'll need to think about what ordering you want the scheme to be applied against. The default is to order by  \"-created\" . This assumes that  there must be a 'created' timestamp field  on the model instances, and will present a \"timeline\" style paginated view, with the most recently added items first.  You can modify the ordering by overriding the  'ordering'  attribute on the pagination class, or by using the  OrderingFilter  filter class together with  CursorPagination . When used with  OrderingFilter  you should strongly consider restricting the fields that the user may order by.  Proper usage of cursor pagination should have an ordering field that satisfies the following:   Should be an unchanging value, such as a timestamp, slug, or other field that is only set once, on creation.  Should be unique, or nearly unique. Millisecond precision timestamps are a good example. This implementation of cursor pagination uses a smart \"position plus offset\" style that allows it to properly support not-strictly-unique values as the ordering.  Should be a non-nullable value that can be coerced to a string.  The field should have a database index.   Using an ordering field that does not satisfy these constraints will generally still work, but you'll be losing some of the benefits of cursor pagination.  For more technical details on the implementation we use for cursor pagination, the  \"Building cursors for the Disqus API\"  blog post gives a good overview of the basic approach.",
            "title": "Details and limitations"
        },
        {
            "location": "/api-guide/pagination/#setup_2",
            "text": "To enable the  CursorPagination  style globally, use the following configuration, modifying the  PAGE_SIZE  as desired:  REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination',\n    'PAGE_SIZE': 100\n}  On  GenericAPIView  subclasses you may also set the  pagination_class  attribute to select  CursorPagination  on a per-view basis.",
            "title": "Setup"
        },
        {
            "location": "/api-guide/pagination/#configuration_2",
            "text": "The  CursorPagination  class includes a number of attributes that may be overridden to modify the pagination style.  To set these attributes you should override the  CursorPagination  class, and then enable your custom pagination class as above.   page_size  = A numeric value indicating the page size. If set, this overrides the  PAGE_SIZE  setting. Defaults to the same value as the  PAGE_SIZE  settings key.  cursor_query_param  = A string value indicating the name of the \"cursor\" query parameter. Defaults to  'cursor' .  ordering  = This should be a string, or list of strings, indicating the field against which the cursor based pagination will be applied. For example:  ordering = 'slug' . Defaults to  -created . This value may also be overridden by using  OrderingFilter  on the view.  template  = The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to  None  to disable HTML pagination controls completely. Defaults to  \"rest_framework/pagination/previous_and_next.html\" .",
            "title": "Configuration"
        },
        {
            "location": "/api-guide/pagination/#custom-pagination-styles",
            "text": "To create a custom pagination serializer class you should subclass  pagination.BasePagination  and override the  paginate_queryset(self, queryset, request, view=None)  and  get_paginated_response(self, data)  methods:   The  paginate_queryset  method is passed the initial queryset and should return an iterable object that contains only the data in the requested page.  The  get_paginated_response  method is passed the serialized page data and should return a  Response  instance.   Note that the  paginate_queryset  method may set state on the pagination instance, that may later be used by the  get_paginated_response  method.",
            "title": "Custom pagination styles"
        },
        {
            "location": "/api-guide/pagination/#example",
            "text": "Suppose we want to replace the default pagination output style with a modified format that  includes the next and previous links under in a nested 'links' key. We could specify a custom pagination class like so:  class CustomPagination(pagination.PageNumberPagination):\n    def get_paginated_response(self, data):\n        return Response({\n            'links': {\n               'next': self.get_next_link(),\n               'previous': self.get_previous_link()\n            },\n            'count': self.page.paginator.count,\n            'results': data\n        })  We'd then need to setup the custom class in our configuration:  REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.CustomPagination',\n    'PAGE_SIZE': 100\n}  Note that if you care about how the ordering of keys is displayed in responses in the browsable API you might choose to use an  OrderedDict  when constructing the body of paginated responses, but this is optional.",
            "title": "Example"
        },
        {
            "location": "/api-guide/pagination/#header-based-pagination",
            "text": "Let's modify the built-in  PageNumberPagination  style, so that instead of include the pagination links in the body of the response, we'll instead include a  Link  header, in a  similar style to the GitHub API .  class LinkHeaderPagination(pagination.PageNumberPagination):\n    def get_paginated_response(self, data):\n        next_url = self.get_next_link()\n        previous_url = self.get_previous_link()\n\n        if next_url is not None and previous_url is not None:\n            link = '<{next_url}>; rel=\"next\", <{previous_url}>; rel=\"prev\"'\n        elif next_url is not None:\n            link = '<{next_url}>; rel=\"next\"'\n        elif previous_url is not None:\n            link = '<{previous_url}>; rel=\"prev\"'\n        else:\n            link = ''\n\n        link = link.format(next_url=next_url, previous_url=previous_url)\n        headers = {'Link': link} if link else {}\n\n        return Response(data, headers=headers)",
            "title": "Header based pagination"
        },
        {
            "location": "/api-guide/pagination/#using-your-custom-pagination-class",
            "text": "To have your custom pagination class be used by default, use the  DEFAULT_PAGINATION_CLASS  setting:  REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.LinkHeaderPagination',\n    'PAGE_SIZE': 100\n}  API responses for list endpoints will now include a  Link  header, instead of including the pagination links as part of the body of the response, for example:",
            "title": "Using your custom pagination class"
        },
        {
            "location": "/api-guide/pagination/#pagination-schemas",
            "text": "You can also make the pagination controls available to the schema autogeneration\nthat REST framework provides, by implementing a  get_schema_fields()  method,\nwhich should return a list of  coreapi.Field  instances.    A custom pagination style, using the 'Link' header'",
            "title": "Pagination &amp; schemas"
        },
        {
            "location": "/api-guide/pagination/#html-pagination-controls",
            "text": "By default using the pagination classes will cause HTML pagination controls to be displayed in the browsable API. There are two built-in display styles. The  PageNumberPagination  and  LimitOffsetPagination  classes display a list of page numbers with previous and next controls. The  CursorPagination  class displays a simpler style that only displays a previous and next control.",
            "title": "HTML pagination controls"
        },
        {
            "location": "/api-guide/pagination/#customizing-the-controls",
            "text": "You can override the templates that render the HTML pagination controls. The two built-in styles are:   rest_framework/pagination/numbers.html  rest_framework/pagination/previous_and_next.html   Providing a template with either of these paths in a global template directory will override the default rendering for the relevant pagination classes.  Alternatively you can disable HTML pagination controls completely by subclassing on of the existing classes, setting  template = None  as an attribute on the class. You'll then need to configure your  DEFAULT_PAGINATION_CLASS  settings key to use your custom class as the default pagination style.",
            "title": "Customizing the controls"
        },
        {
            "location": "/api-guide/pagination/#low-level-api",
            "text": "The low-level API for determining if a pagination class should display the controls or not is exposed as a  display_page_controls  attribute on the pagination instance. Custom pagination classes should be set to  True  in the  paginate_queryset  method if they require the HTML pagination controls to be displayed.  The  .to_html()  and  .get_html_context()  methods may also be overridden in a custom pagination class in order to further customize how the controls are rendered.",
            "title": "Low-level API"
        },
        {
            "location": "/api-guide/pagination/#third-party-packages",
            "text": "The following third party packages are also available.",
            "title": "Third party packages"
        },
        {
            "location": "/api-guide/pagination/#drf-extensions",
            "text": "The  DRF-extensions  package  includes a  PaginateByMaxMixin  mixin class  that allows your API clients to specify  ?page_size=max  to obtain the maximum allowed page size.",
            "title": "DRF-extensions"
        },
        {
            "location": "/api-guide/pagination/#drf-proxy-pagination",
            "text": "The  drf-proxy-pagination  package  includes a  ProxyPagination  class which allows to choose pagination class with a query parameter.",
            "title": "drf-proxy-pagination"
        },
        {
            "location": "/api-guide/versioning_zh/",
            "text": "Versioning\n\n\n\n\n\u5bf9\u63a5\u53e3\u8fdb\u884c\u7248\u672c\u63a7\u5236\u53ea\u662f\u4e00\u79cd\u6740\u6b7b\u5df2\u90e8\u7f72\u5ba2\u6237\u7aef\u7684\u201c\u793c\u8c8c\u201d\u65b9\u5f0f\u3002\n\n\n\u2014 \nRoy Fielding\n.\n\n\n\n\nAPI \u7248\u672c\u63a7\u5236\u5141\u8bb8\u4f60\u5728\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u4e4b\u95f4\u66f4\u6539\u884c\u4e3a. REST framework \u63d0\u4f9b\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848\u3002\n\n\n\u7248\u672c\u63a7\u5236\u7531\u4f20\u5165\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\u51b3\u5b9a\uff0c\u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u7684URL\uff0c\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u5934\u3002\n\n\n\u6709\u8bb8\u591a\u6709\u6548\u7684\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u884c\u7248\u672c\u63a7\u5236\u3002\n\u65e0\u7248\u672c\u63a7\u5236\u7684\u7cfb\u7edf\u4e5f\u53ef\u80fd\u662f\u5408\u9002\u7684\n\uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u6b63\u5728\u4e3a\u4e00\u4e2a\u957f\u671f\u7cfb\u7edf\u8fdb\u884c\u5de5\u7a0b\u8bbe\u8ba1\uff0c\u800c\u8fd9\u4e2a\u7cfb\u7edf\u6709\u591a\u4e2a\u8d85\u51fa\u4f60\u63a7\u5236\u8303\u56f4\u7684\u5ba2\u6237\u7aef\u3002\n\n\n\u4f7f\u7528REST\u6846\u67b6\u8fdb\u884c\u7248\u672c\u63a7\u5236\n\n\n\u5f53\u542f\u7528API\u7248\u672c\u63a7\u5236\uff0c\nrequest.version\n \u5c5e\u6027\u5c06\u5305\u542b\u4e0e\u4f20\u5165\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e2d\u8bf7\u6c42\u7684\u7248\u672c\u76f8\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7248\u672c\u63a7\u5236\u6ca1\u6709\u542f\u7528\uff0c\nrequest.version\n \u5c06\u603b\u662f\u8fd4\u56de \nNone\n\u3002\n\n\n\u6839\u636e\u7248\u672c\u6539\u53d8\u884c\u4e3a\n\n\n\u5982\u4f55\u6539\u53d8API\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u4f60\u81ea\u5df1\uff0c\u4f46\u662f\u4e00\u4e2a\u4f60\u901a\u5e38\u60f3\u8981\u7684\u4f8b\u5b50\u662f\u5728\u65b0\u7248\u672c\u4e2d\u5207\u6362\u5230\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u3002\u4f8b\u5982:\n\n\ndef get_serializer_class(self):\n    if self.request.version == 'v1':\n        return AccountSerializerVersion1\n    return AccountSerializer\n\n\n\n\u53cd\u5411\u89e3\u6790\u7248\u672c\u5316API\u7684URL\n\n\nREST framework \u5305\u542b\u7684 \nreverse\n \u51fd\u6570\u4e0e\u7248\u672c\u63a7\u5236\u65b9\u6848\u76f8\u5173\u8054\u3002\u4f60\u9700\u8981\u786e\u4fdd\u5c06\u5f53\u524d \nrequest\n \u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u8fdb\u53bb\uff0c\u5982\u4e0b\u6240\u793a\u3002\n\n\nfrom rest_framework.reverse import reverse\n\nreverse('bookings-list', request=request)\n\n\n\n\u4e0a\u8ff0\u51fd\u6570\u5c06\u5e94\u7528\u4efb\u4f55\u9002\u7528\u4e8e\u8bf7\u6c42\u7248\u672c\u7684URL\u8f6c\u6362\u3002\u4f8b\u5982:\n\n\n\n\n\u5982\u679c\u4f7f\u7528\nNamespacedVersioning\n\uff0c\u5e76\u4e14API\u7684\u7248\u672c\u662f'v1'\uff0c\u90a3\u4e48\u5c06\u4f1a\u67e5\u627e \n'v1:bookings-list'\n\uff0c\u53ef\u80fd\u53cd\u5411\u89e3\u6790\u4e3a\u7c7b\u4f3c\nhttp://example.org/v1/bookings/\n \u8fd9\u4e2aURL\u3002\n\n\n\u5982\u679c\u4f7f\u7528\nQueryParameterVersioning\n \u5e76\u4e14API\u7684\u7248\u672c\u662f\n1.0\n\uff0c\u90a3\u4e48\u8fd4\u56de\u7684URL\u53ef\u80fd\u5c31\u50cf\u8fd9\u6837\nhttp://example.org/bookings/?version=1.0\n\u3002\n\n\n\n\n\u7248\u672c\u5316 API \u548c\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u5668\n\n\n\u5f53\u5c06\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u6837\u5f0f\u4e0e\u57fa\u4e8eURL\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u8bf7\u786e\u4fdd\u5c06\u8bf7\u6c42\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5305\u542b\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e2d\u3002\n\n\ndef get(self, request):\n    queryset = Booking.objects.all()\n    serializer = BookingsSerializer(queryset, many=True, context={'request': request})\n    return Response({'all_bookings': serializer.data})\n\n\n\n\u8fd9\u6837\u505a\u5c06\u4f1a\u5728\u4efb\u4f55\u8fd4\u56de\u7684URL\u4e2d\u5305\u542b\u9002\u5f53\u7684\u7248\u672c\u63a7\u5236\u3002\n\n\n\u914d\u7f6e\u7248\u672c\u63a7\u5236\u65b9\u6848\n\n\n\u7248\u672c\u63a7\u5236\u65b9\u6848\u7531settings\u4e2d\u7684\nDEFAULT_VERSIONING_CLASS\n\u4e3akey\u6765\u914d\u7f6e\u3002\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning'\n}\n\n\n\n\u9664\u975e\u663e\u5f0f\u8bbe\u7f6e\uff0c\u5426\u5219\nDEFAULT_VERSIONING_CLASS\n\u5c06\u4f1a\u662f\nNone\n\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\nrequest.version\n\u5c5e\u6027\u5c06\u603b\u662f\u8fd4\u56de\nNone\n\u3002\n\n\n\u8fd8\u53ef\u4ee5\u5728\u5355\u4e2a\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u7248\u672c\u63a7\u5236\u65b9\u6848\u3002\u901a\u5e38\u4e0d\u9700\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5168\u5c40\u4f7f\u7528\u5355\u4e00\u7248\u672c\u63a7\u5236\u65b9\u6848\u66f4\u6709\u610f\u4e49\u3002\u5982\u679c\u786e\u5b9e\u9700\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5728\u89c6\u56fe\u7c7b\u4e2d\u4f7f\u7528\nversioning_class\n\u5c5e\u6027\u3002\n\n\nclass ProfileList(APIView):\n    versioning_class = versioning.QueryParameterVersioning\n\n\n\n\u5176\u4ed6\u7248\u672c\u63a7\u5236\u8bbe\u7f6e\n\n\n\u4ee5\u4e0b\u8bbe\u7f6e\u7684key\u4e5f\u7528\u4e8e\u63a7\u5236\u7248\u672c\u63a7\u5236:\n\n\n\n\nDEFAULT_VERSION\n. \u5f53\u7248\u672c\u63a7\u5236\u4fe1\u606f\u4e0d\u5b58\u5728\u65f6\u7528\u4e8e\u8bbe\u7f6e\nrequest.version\n\u7684\u9ed8\u8ba4\u503c\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\nNone\n\u3002\n\n\nALLOWED_VERSIONS\n. \u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u503c\u5c06\u9650\u5236\u7248\u672c\u63a7\u5236\u65b9\u6848\u53ef\u80fd\u8fd4\u56de\u7684\u7248\u672c\u96c6\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u8bf7\u6c42\u63d0\u4f9b\u7684\u7248\u672c\u4e0d\u5728\u6b64\u96c6\u4e2d\uff0c\u5219\u4f1a\u5f15\u53d1\u9519\u8bef\u3002\u8bf7\u6ce8\u610f\uff0c\u7528\u4e8e\nDEFAULT_VERSION\n\u7684\u503c\u5e94\u8be5\u603b\u662f\u5728\nALLOWED_VERSIONS\n\u8bbe\u7f6e\u7684\u96c6\u5408\u4e2d\uff08\u9664\u975e\u662f\nNone\n\uff09\u3002\u8be5\u914d\u7f6e\u9ed8\u8ba4\u662f \nNone\n\u3002\n\n\nVERSION_PARAM\n. \u4e00\u4e2a\u5e94\u5f53\u7528\u4e8e\u4efb\u4f55\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u53c2\u6570\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u5a92\u4f53\u7c7b\u578b\u6216URL\u67e5\u8be2\u53c2\u6570\u3002\u9ed8\u8ba4\u503c\u662f\n'version'\n\u3002\n\n\n\n\n\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u7248\u672c\u63a7\u5236\u65b9\u6848\u5e76\u4f7f\u7528\ndefault_version\n\uff0c\nallowed_versions\n\u548c\nversion_param\n\u7c7b\u53d8\u91cf\uff0c\u5728\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u7248\u672c\u7c7b\u52a0\u4e0a\u8fd9\u4e09\u4e2a\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u4f7f\u7528\nURLPathVersioning\n\uff1a\n\n\nfrom rest_framework.versioning import URLPathVersioning\nfrom rest_framework.views import APIView\n\nclass ExampleVersioning(URLPathVersioning):\n    default_version = ...\n    allowed_versions = ...\n    version_param = ...\n\nclass ExampleView(APIVIew):\n    versioning_class = ExampleVersioning\n\n\n\n\n\nAPI\u53c2\u8003\n\n\nAcceptHeaderVersioning\n\n\n\u6b64\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5728\nAccept\n header \u4e2d\u5c06\u7248\u672c\u6307\u5b9a\u4e3a\u5a92\u4f53\u7c7b\u578b\u7684\u4e00\u90e8\u5206\u3002\u8be5\u7248\u672c\u4f5c\u4e3a\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u5305\u542b\u5728\u5185\uff0c\u5b83\u8865\u5145\u4e86\u4e3b\u8981\u5a92\u4f53\u7c7b\u578b\u3002\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528accept header\u7248\u672c\u5316\u6837\u5f0f\u7684HTTP\u8bf7\u6c42\u793a\u4f8b\u3002\n\n\nGET /bookings/ HTTP/1.1\nHost: example.com\nAccept: application/json; version=1.0\n\n\n\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u8bf7\u6c42\u4e2d\nrequest.version\n\u5c5e\u6027\u5c06\u8fd4\u56de\u5b57\u7b26\u4e32\n'1.0'\n\u3002\n\u57fa\u4e8e accept headers \u7684\u7248\u672c\u63a7\u5236\n\u901a\u5e38\u88ab\u8ba4\u4e3a\n\u662f\n\u6700\u4f73\u5b9e\u8df5\n\uff0c\u5c3d\u7ba1\u5176\u4ed6\u7248\u672c\u63a7\u5236\u65b9\u5f0f\u53ef\u80fd\u9002\u5408\u4f60\u7684\u5ba2\u6237\u7aef\u9700\u6c42\u3002\n\n\nUsing accept headers with vendor media types\n\n\n\u4e25\u683c\u5730\u8bf4\njson\n\u5a92\u4f53\u7c7b\u578b\u672a\u6307\u5b9a\u4e3a\n\u5305\u542b\u5176\u4ed6\u53c2\u6570\n\u3002\u5982\u679c\u8981\u6784\u5efa\u660e\u786e\u6307\u5b9a\u7684\u516c\u5171API\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\nvendor media type\n\u3002\u4e3a\u6b64\uff0c\u8bf7\u5c06\u6e32\u67d3\u5668\u914d\u7f6e\u4e3a\u4f7f\u7528\u81ea\u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684\u57fa\u4e8eJSON\u7684\u6e32\u67d3\u5668\uff1a\n\n\nclass BookingsAPIRenderer(JSONRenderer):\n    media_type = 'application/vnd.megacorp.bookings+json'\n\n\n\n\u4f60\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\u73b0\u5728\u4f1a\u662f\u8fd9\u6837\u7684:\n\n\nGET /bookings/ HTTP/1.1\nHost: example.com\nAccept: application/vnd.megacorp.bookings+json; version=1.0\n\n\n\nURLPathVersioning\n\n\n\u6b64\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5c06\u7248\u672c\u6307\u5b9a\u4e3aURL\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002\n\n\nGET /v1/bookings/ HTTP/1.1\nHost: example.com\nAccept: application/json\n\n\n\n\u4f60\u7684URL conf\u4e2d\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u4f7f\u7528\n'version'\n\u5173\u952e\u5b57\u53c2\u6570\u7684\u5339\u914d\u6a21\u5f0f\uff0c\uff0c\u4ee5\u4fbf\u7248\u672c\u63a7\u5236\u65b9\u6848\u53ef\u4ee5\u4f7f\u7528\u6b64\u7248\u672c\u4fe1\u606f\u3002\n\n\nurlpatterns = [\n    url(\n        r'^(?P<version>(v1|v2))/bookings/$',\n        bookings_list,\n        name='bookings-list'\n    ),\n    url(\n        r'^(?P<version>(v1|v2))/bookings/(?P<pk>[0-9]+)/$',\n        bookings_detail,\n        name='bookings-detail'\n    )\n]\n\n\n\nNamespaceVersioning\n\n\n\u5bf9\u4e8e\u5ba2\u6237\u7aef\uff0c\u6b64\u65b9\u6848\u4e0e\nURLPathVersioning\n\u76f8\u540c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u5b83\u662f\u5982\u4f55\u5728 Django \u5e94\u7528\u7a0b\u5e8f\u4e2d\u914d\u7f6e\u7684\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528URL conf\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u800c\u4e0d\u662fURL conf\u4e2d\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\n\n\nGET /v1/something/ HTTP/1.1\nHost: example.com\nAccept: application/json\n\n\n\n\u4f7f\u7528\u6b64\u65b9\u6848\uff0c\nrequest.version\n \u5c5e\u6027\u662f\u6839\u636e\u4e0e\u4f20\u5165\u8bf7\u6c42\u7684\u8def\u5f84\u5339\u914d\u7684 \nnamespace\n \u786e\u5b9a\u7684\u3002\n\n\n\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7ed9\u4e00\u7ec4\u89c6\u56fe\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u80fd\u51fa\u73b0\u7684\u4e0d\u540cURL\u524d\u7f00\uff0c\u6bcf\u4e2a\u524d\u7f00\u5728\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e0b:\n\n\n# bookings/urls.py\nurlpatterns = [\n    url(r'^$', bookings_list, name='bookings-list'),\n    url(r'^(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail')\n]\n\n# urls.py\nurlpatterns = [\n    url(r'^v1/bookings/', include('bookings.urls', namespace='v1')),\n    url(r'^v2/bookings/', include('bookings.urls', namespace='v2'))\n]\n\n\n\n\u5982\u679c\u4f60\u53ea\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848\nURLPathVersioning\n\u548c\nNamespaceVersioning\n\u90fd\u662f\u5408\u9002\u7684\u3002\nURLPathVersioning\n \u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u66f4\u9002\u5408\u5c0f\u578b\u9879\u76ee\uff0c\u5bf9\u4e8e\u66f4\u5927\u7684\u9879\u76ee\u6765\u8bf4\nNamespaceVersioning\n\u53ef\u80fd\u66f4\u5bb9\u6613\u7ba1\u7406\u3002\n\n\nHostNameVersioning\n\n\n\u4e3b\u673a\u540d\u7248\u672c\u63a7\u5236\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5c06\u8bf7\u6c42\u7684\u7248\u672c\u6307\u5b9a\u4e3aURL\u4e2d\u4e3b\u673a\u540d\u7684\u4e00\u90e8\u5206\u3002\n\u4f8b\u5982\uff0c\u4ee5\u4e0b\u662f\u5bf9\nhttp://v1.example.com/bookings/\n\u7684HTTP\u8bf7\u6c42\uff1a\n\n\nGET /bookings/ HTTP/1.1\nHost: v1.example.com\nAccept: application/json\n\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6b64\u5b9e\u73b0\u671f\u671b\u4e3b\u673a\u540d\u4e0e\u4ee5\u4e0b\u7b80\u5355\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d:\n\n\n^([a-zA-Z0-9]+)\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\n\n\n\n\u6ce8\u610f\uff0c\u7b2c\u4e00\u7ec4\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u8868\u793a\u8fd9\u662f\u4e3b\u673a\u540d\u7684\u5339\u914d\u90e8\u5206\u3002\n\n\nHostNameVersioning\n\u8fd9\u79cd\u65b9\u6848\u5728\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u4f7f\u7528\u65b9\u6848\u53ef\u80fd\u4f1a\u5f88\u5c34\u5c2c\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u4f1a\u8bbf\u95ee\u539f\u59cbIP\u5730\u5740\uff0c\u4f8b\u5982\n127.0.0.1\n\u3002\u6709\u5404\u79cd\u5728\u7ebf\u6559\u7a0b\uff0c\u4ecb\u7ecd\n\u4f7f\u7528\u81ea\u5b9a\u4e49\u5b50\u57df\u540d\u8bbf\u95ee\u672c\u5730\u4e3b\u673a\n\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u5f88\u6709\u5e2e\u52a9\u3002\n\n\n\u5982\u679c\u4f60\u6709\u57fa\u4e8e\u7248\u672c\u5c06\u4f20\u5165\u8bf7\u6c42\u8def\u7531\u5230\u4e0d\u540c\u670d\u52a1\u5668\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u57fa\u4e8e\u4e3b\u673a\u540d\u7684\u7248\u672c\u63a7\u5236\u4f1a\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684 API \u7248\u672c\u914d\u7f6e\u4e0d\u540c\u7684 DNS \u8bb0\u5f55\u3002\n\n\nQueryParameterVersioning\n\n\n\u6b64\u65b9\u6848\u662f\u4e00\u79cd\u5728 URL \u4e2d\u5305\u542b\u7248\u672c\u4fe1\u606f\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\u7684\u7b80\u5355\u65b9\u6848\u3002\u4f8b\u5982\uff1a\nThis scheme is a simple style that includes the version as a query parameter in the URL. For example:\n\n\nGET /something/?version=0.1 HTTP/1.1\nHost: example.com\nAccept: application/json\n\n\n\n\n\nCustom versioning schemes\n\n\n\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7248\u672c\u63a7\u5236\u65b9\u6848\uff0c\u8bf7\u7ee7\u627f \nBaseVersioning\n \u5e76\u91cd\u5199 \n.determine_version\n \u65b9\u6cd5\u3002\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\n\n\n\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 \nX-API-Version\n header\u6765\u786e\u5b9a\u6240\u8bf7\u6c42\u7684\u7248\u672c\u3002\n\n\nclass XAPIVersionScheme(versioning.BaseVersioning):\n    def determine_version(self, request, *args, **kwargs):\n        return request.META.get('HTTP_X_API_VERSION', None)\n\n\n\n\u5982\u679c\u4f60\u7684\u7248\u672c\u5316\u65b9\u6848\u57fa\u4e8e\u8bf7\u6c42URL\uff0c\u4f60\u8fd8\u9700\u8981\u6539\u53d8\u7248\u672c\u5316URL\u7684\u786e\u5b9a\u65b9\u5f0f\u3002\u4e3a\u6b64\uff0c\u4f60\u8fd8\u5e94\u8be5\u91cd\u5199\u7c7b\u4e2d\u7684\n.reverse()\n\u65b9\u6cd5\u3002\u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1\u6e90\u4ee3\u7801\u3002",
            "title": "Versioning"
        },
        {
            "location": "/api-guide/versioning_zh/#versioning",
            "text": "\u5bf9\u63a5\u53e3\u8fdb\u884c\u7248\u672c\u63a7\u5236\u53ea\u662f\u4e00\u79cd\u6740\u6b7b\u5df2\u90e8\u7f72\u5ba2\u6237\u7aef\u7684\u201c\u793c\u8c8c\u201d\u65b9\u5f0f\u3002  \u2014  Roy Fielding .   API \u7248\u672c\u63a7\u5236\u5141\u8bb8\u4f60\u5728\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u4e4b\u95f4\u66f4\u6539\u884c\u4e3a. REST framework \u63d0\u4f9b\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848\u3002  \u7248\u672c\u63a7\u5236\u7531\u4f20\u5165\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\u51b3\u5b9a\uff0c\u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u7684URL\uff0c\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u5934\u3002  \u6709\u8bb8\u591a\u6709\u6548\u7684\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u884c\u7248\u672c\u63a7\u5236\u3002 \u65e0\u7248\u672c\u63a7\u5236\u7684\u7cfb\u7edf\u4e5f\u53ef\u80fd\u662f\u5408\u9002\u7684 \uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u6b63\u5728\u4e3a\u4e00\u4e2a\u957f\u671f\u7cfb\u7edf\u8fdb\u884c\u5de5\u7a0b\u8bbe\u8ba1\uff0c\u800c\u8fd9\u4e2a\u7cfb\u7edf\u6709\u591a\u4e2a\u8d85\u51fa\u4f60\u63a7\u5236\u8303\u56f4\u7684\u5ba2\u6237\u7aef\u3002",
            "title": "Versioning"
        },
        {
            "location": "/api-guide/versioning_zh/#rest",
            "text": "\u5f53\u542f\u7528API\u7248\u672c\u63a7\u5236\uff0c request.version  \u5c5e\u6027\u5c06\u5305\u542b\u4e0e\u4f20\u5165\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e2d\u8bf7\u6c42\u7684\u7248\u672c\u76f8\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7248\u672c\u63a7\u5236\u6ca1\u6709\u542f\u7528\uff0c request.version  \u5c06\u603b\u662f\u8fd4\u56de  None \u3002",
            "title": "\u4f7f\u7528REST\u6846\u67b6\u8fdb\u884c\u7248\u672c\u63a7\u5236"
        },
        {
            "location": "/api-guide/versioning_zh/#_1",
            "text": "\u5982\u4f55\u6539\u53d8API\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u4f60\u81ea\u5df1\uff0c\u4f46\u662f\u4e00\u4e2a\u4f60\u901a\u5e38\u60f3\u8981\u7684\u4f8b\u5b50\u662f\u5728\u65b0\u7248\u672c\u4e2d\u5207\u6362\u5230\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u3002\u4f8b\u5982:  def get_serializer_class(self):\n    if self.request.version == 'v1':\n        return AccountSerializerVersion1\n    return AccountSerializer",
            "title": "\u6839\u636e\u7248\u672c\u6539\u53d8\u884c\u4e3a"
        },
        {
            "location": "/api-guide/versioning_zh/#apiurl",
            "text": "REST framework \u5305\u542b\u7684  reverse  \u51fd\u6570\u4e0e\u7248\u672c\u63a7\u5236\u65b9\u6848\u76f8\u5173\u8054\u3002\u4f60\u9700\u8981\u786e\u4fdd\u5c06\u5f53\u524d  request  \u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u8fdb\u53bb\uff0c\u5982\u4e0b\u6240\u793a\u3002  from rest_framework.reverse import reverse\n\nreverse('bookings-list', request=request)  \u4e0a\u8ff0\u51fd\u6570\u5c06\u5e94\u7528\u4efb\u4f55\u9002\u7528\u4e8e\u8bf7\u6c42\u7248\u672c\u7684URL\u8f6c\u6362\u3002\u4f8b\u5982:   \u5982\u679c\u4f7f\u7528 NamespacedVersioning \uff0c\u5e76\u4e14API\u7684\u7248\u672c\u662f'v1'\uff0c\u90a3\u4e48\u5c06\u4f1a\u67e5\u627e  'v1:bookings-list' \uff0c\u53ef\u80fd\u53cd\u5411\u89e3\u6790\u4e3a\u7c7b\u4f3c http://example.org/v1/bookings/  \u8fd9\u4e2aURL\u3002  \u5982\u679c\u4f7f\u7528 QueryParameterVersioning  \u5e76\u4e14API\u7684\u7248\u672c\u662f 1.0 \uff0c\u90a3\u4e48\u8fd4\u56de\u7684URL\u53ef\u80fd\u5c31\u50cf\u8fd9\u6837 http://example.org/bookings/?version=1.0 \u3002",
            "title": "\u53cd\u5411\u89e3\u6790\u7248\u672c\u5316API\u7684URL"
        },
        {
            "location": "/api-guide/versioning_zh/#api",
            "text": "\u5f53\u5c06\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u6837\u5f0f\u4e0e\u57fa\u4e8eURL\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u8bf7\u786e\u4fdd\u5c06\u8bf7\u6c42\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5305\u542b\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e2d\u3002  def get(self, request):\n    queryset = Booking.objects.all()\n    serializer = BookingsSerializer(queryset, many=True, context={'request': request})\n    return Response({'all_bookings': serializer.data})  \u8fd9\u6837\u505a\u5c06\u4f1a\u5728\u4efb\u4f55\u8fd4\u56de\u7684URL\u4e2d\u5305\u542b\u9002\u5f53\u7684\u7248\u672c\u63a7\u5236\u3002",
            "title": "\u7248\u672c\u5316 API \u548c\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u5668"
        },
        {
            "location": "/api-guide/versioning_zh/#_2",
            "text": "\u7248\u672c\u63a7\u5236\u65b9\u6848\u7531settings\u4e2d\u7684 DEFAULT_VERSIONING_CLASS \u4e3akey\u6765\u914d\u7f6e\u3002  REST_FRAMEWORK = {\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning'\n}  \u9664\u975e\u663e\u5f0f\u8bbe\u7f6e\uff0c\u5426\u5219 DEFAULT_VERSIONING_CLASS \u5c06\u4f1a\u662f None \u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b request.version \u5c5e\u6027\u5c06\u603b\u662f\u8fd4\u56de None \u3002  \u8fd8\u53ef\u4ee5\u5728\u5355\u4e2a\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u7248\u672c\u63a7\u5236\u65b9\u6848\u3002\u901a\u5e38\u4e0d\u9700\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5168\u5c40\u4f7f\u7528\u5355\u4e00\u7248\u672c\u63a7\u5236\u65b9\u6848\u66f4\u6709\u610f\u4e49\u3002\u5982\u679c\u786e\u5b9e\u9700\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5728\u89c6\u56fe\u7c7b\u4e2d\u4f7f\u7528 versioning_class \u5c5e\u6027\u3002  class ProfileList(APIView):\n    versioning_class = versioning.QueryParameterVersioning",
            "title": "\u914d\u7f6e\u7248\u672c\u63a7\u5236\u65b9\u6848"
        },
        {
            "location": "/api-guide/versioning_zh/#_3",
            "text": "\u4ee5\u4e0b\u8bbe\u7f6e\u7684key\u4e5f\u7528\u4e8e\u63a7\u5236\u7248\u672c\u63a7\u5236:   DEFAULT_VERSION . \u5f53\u7248\u672c\u63a7\u5236\u4fe1\u606f\u4e0d\u5b58\u5728\u65f6\u7528\u4e8e\u8bbe\u7f6e request.version \u7684\u9ed8\u8ba4\u503c\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a None \u3002  ALLOWED_VERSIONS . \u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u503c\u5c06\u9650\u5236\u7248\u672c\u63a7\u5236\u65b9\u6848\u53ef\u80fd\u8fd4\u56de\u7684\u7248\u672c\u96c6\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u8bf7\u6c42\u63d0\u4f9b\u7684\u7248\u672c\u4e0d\u5728\u6b64\u96c6\u4e2d\uff0c\u5219\u4f1a\u5f15\u53d1\u9519\u8bef\u3002\u8bf7\u6ce8\u610f\uff0c\u7528\u4e8e DEFAULT_VERSION \u7684\u503c\u5e94\u8be5\u603b\u662f\u5728 ALLOWED_VERSIONS \u8bbe\u7f6e\u7684\u96c6\u5408\u4e2d\uff08\u9664\u975e\u662f None \uff09\u3002\u8be5\u914d\u7f6e\u9ed8\u8ba4\u662f  None \u3002  VERSION_PARAM . \u4e00\u4e2a\u5e94\u5f53\u7528\u4e8e\u4efb\u4f55\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u53c2\u6570\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u5a92\u4f53\u7c7b\u578b\u6216URL\u67e5\u8be2\u53c2\u6570\u3002\u9ed8\u8ba4\u503c\u662f 'version' \u3002   \u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u7248\u672c\u63a7\u5236\u65b9\u6848\u5e76\u4f7f\u7528 default_version \uff0c allowed_versions \u548c version_param \u7c7b\u53d8\u91cf\uff0c\u5728\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u7248\u672c\u7c7b\u52a0\u4e0a\u8fd9\u4e09\u4e2a\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u4f7f\u7528 URLPathVersioning \uff1a  from rest_framework.versioning import URLPathVersioning\nfrom rest_framework.views import APIView\n\nclass ExampleVersioning(URLPathVersioning):\n    default_version = ...\n    allowed_versions = ...\n    version_param = ...\n\nclass ExampleView(APIVIew):\n    versioning_class = ExampleVersioning",
            "title": "\u5176\u4ed6\u7248\u672c\u63a7\u5236\u8bbe\u7f6e"
        },
        {
            "location": "/api-guide/versioning_zh/#api_1",
            "text": "",
            "title": "API\u53c2\u8003"
        },
        {
            "location": "/api-guide/versioning_zh/#acceptheaderversioning",
            "text": "\u6b64\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5728 Accept  header \u4e2d\u5c06\u7248\u672c\u6307\u5b9a\u4e3a\u5a92\u4f53\u7c7b\u578b\u7684\u4e00\u90e8\u5206\u3002\u8be5\u7248\u672c\u4f5c\u4e3a\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u5305\u542b\u5728\u5185\uff0c\u5b83\u8865\u5145\u4e86\u4e3b\u8981\u5a92\u4f53\u7c7b\u578b\u3002  \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528accept header\u7248\u672c\u5316\u6837\u5f0f\u7684HTTP\u8bf7\u6c42\u793a\u4f8b\u3002  GET /bookings/ HTTP/1.1\nHost: example.com\nAccept: application/json; version=1.0  \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u8bf7\u6c42\u4e2d request.version \u5c5e\u6027\u5c06\u8fd4\u56de\u5b57\u7b26\u4e32 '1.0' \u3002\n\u57fa\u4e8e accept headers \u7684\u7248\u672c\u63a7\u5236 \u901a\u5e38\u88ab\u8ba4\u4e3a \u662f \u6700\u4f73\u5b9e\u8df5 \uff0c\u5c3d\u7ba1\u5176\u4ed6\u7248\u672c\u63a7\u5236\u65b9\u5f0f\u53ef\u80fd\u9002\u5408\u4f60\u7684\u5ba2\u6237\u7aef\u9700\u6c42\u3002",
            "title": "AcceptHeaderVersioning"
        },
        {
            "location": "/api-guide/versioning_zh/#using-accept-headers-with-vendor-media-types",
            "text": "\u4e25\u683c\u5730\u8bf4 json \u5a92\u4f53\u7c7b\u578b\u672a\u6307\u5b9a\u4e3a \u5305\u542b\u5176\u4ed6\u53c2\u6570 \u3002\u5982\u679c\u8981\u6784\u5efa\u660e\u786e\u6307\u5b9a\u7684\u516c\u5171API\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 vendor media type \u3002\u4e3a\u6b64\uff0c\u8bf7\u5c06\u6e32\u67d3\u5668\u914d\u7f6e\u4e3a\u4f7f\u7528\u81ea\u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684\u57fa\u4e8eJSON\u7684\u6e32\u67d3\u5668\uff1a  class BookingsAPIRenderer(JSONRenderer):\n    media_type = 'application/vnd.megacorp.bookings+json'  \u4f60\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\u73b0\u5728\u4f1a\u662f\u8fd9\u6837\u7684:  GET /bookings/ HTTP/1.1\nHost: example.com\nAccept: application/vnd.megacorp.bookings+json; version=1.0",
            "title": "Using accept headers with vendor media types"
        },
        {
            "location": "/api-guide/versioning_zh/#urlpathversioning",
            "text": "\u6b64\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5c06\u7248\u672c\u6307\u5b9a\u4e3aURL\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002  GET /v1/bookings/ HTTP/1.1\nHost: example.com\nAccept: application/json  \u4f60\u7684URL conf\u4e2d\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u4f7f\u7528 'version' \u5173\u952e\u5b57\u53c2\u6570\u7684\u5339\u914d\u6a21\u5f0f\uff0c\uff0c\u4ee5\u4fbf\u7248\u672c\u63a7\u5236\u65b9\u6848\u53ef\u4ee5\u4f7f\u7528\u6b64\u7248\u672c\u4fe1\u606f\u3002  urlpatterns = [\n    url(\n        r'^(?P<version>(v1|v2))/bookings/$',\n        bookings_list,\n        name='bookings-list'\n    ),\n    url(\n        r'^(?P<version>(v1|v2))/bookings/(?P<pk>[0-9]+)/$',\n        bookings_detail,\n        name='bookings-detail'\n    )\n]",
            "title": "URLPathVersioning"
        },
        {
            "location": "/api-guide/versioning_zh/#namespaceversioning",
            "text": "\u5bf9\u4e8e\u5ba2\u6237\u7aef\uff0c\u6b64\u65b9\u6848\u4e0e URLPathVersioning \u76f8\u540c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u5b83\u662f\u5982\u4f55\u5728 Django \u5e94\u7528\u7a0b\u5e8f\u4e2d\u914d\u7f6e\u7684\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528URL conf\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u800c\u4e0d\u662fURL conf\u4e2d\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002  GET /v1/something/ HTTP/1.1\nHost: example.com\nAccept: application/json  \u4f7f\u7528\u6b64\u65b9\u6848\uff0c request.version  \u5c5e\u6027\u662f\u6839\u636e\u4e0e\u4f20\u5165\u8bf7\u6c42\u7684\u8def\u5f84\u5339\u914d\u7684  namespace  \u786e\u5b9a\u7684\u3002  \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7ed9\u4e00\u7ec4\u89c6\u56fe\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u80fd\u51fa\u73b0\u7684\u4e0d\u540cURL\u524d\u7f00\uff0c\u6bcf\u4e2a\u524d\u7f00\u5728\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e0b:  # bookings/urls.py\nurlpatterns = [\n    url(r'^$', bookings_list, name='bookings-list'),\n    url(r'^(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail')\n]\n\n# urls.py\nurlpatterns = [\n    url(r'^v1/bookings/', include('bookings.urls', namespace='v1')),\n    url(r'^v2/bookings/', include('bookings.urls', namespace='v2'))\n]  \u5982\u679c\u4f60\u53ea\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848 URLPathVersioning \u548c NamespaceVersioning \u90fd\u662f\u5408\u9002\u7684\u3002 URLPathVersioning  \u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u66f4\u9002\u5408\u5c0f\u578b\u9879\u76ee\uff0c\u5bf9\u4e8e\u66f4\u5927\u7684\u9879\u76ee\u6765\u8bf4 NamespaceVersioning \u53ef\u80fd\u66f4\u5bb9\u6613\u7ba1\u7406\u3002",
            "title": "NamespaceVersioning"
        },
        {
            "location": "/api-guide/versioning_zh/#hostnameversioning",
            "text": "\u4e3b\u673a\u540d\u7248\u672c\u63a7\u5236\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5c06\u8bf7\u6c42\u7684\u7248\u672c\u6307\u5b9a\u4e3aURL\u4e2d\u4e3b\u673a\u540d\u7684\u4e00\u90e8\u5206\u3002\n\u4f8b\u5982\uff0c\u4ee5\u4e0b\u662f\u5bf9 http://v1.example.com/bookings/ \u7684HTTP\u8bf7\u6c42\uff1a  GET /bookings/ HTTP/1.1\nHost: v1.example.com\nAccept: application/json  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6b64\u5b9e\u73b0\u671f\u671b\u4e3b\u673a\u540d\u4e0e\u4ee5\u4e0b\u7b80\u5355\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d:  ^([a-zA-Z0-9]+)\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$  \u6ce8\u610f\uff0c\u7b2c\u4e00\u7ec4\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u8868\u793a\u8fd9\u662f\u4e3b\u673a\u540d\u7684\u5339\u914d\u90e8\u5206\u3002  HostNameVersioning \u8fd9\u79cd\u65b9\u6848\u5728\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u4f7f\u7528\u65b9\u6848\u53ef\u80fd\u4f1a\u5f88\u5c34\u5c2c\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u4f1a\u8bbf\u95ee\u539f\u59cbIP\u5730\u5740\uff0c\u4f8b\u5982 127.0.0.1 \u3002\u6709\u5404\u79cd\u5728\u7ebf\u6559\u7a0b\uff0c\u4ecb\u7ecd \u4f7f\u7528\u81ea\u5b9a\u4e49\u5b50\u57df\u540d\u8bbf\u95ee\u672c\u5730\u4e3b\u673a \uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u5f88\u6709\u5e2e\u52a9\u3002  \u5982\u679c\u4f60\u6709\u57fa\u4e8e\u7248\u672c\u5c06\u4f20\u5165\u8bf7\u6c42\u8def\u7531\u5230\u4e0d\u540c\u670d\u52a1\u5668\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u57fa\u4e8e\u4e3b\u673a\u540d\u7684\u7248\u672c\u63a7\u5236\u4f1a\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684 API \u7248\u672c\u914d\u7f6e\u4e0d\u540c\u7684 DNS \u8bb0\u5f55\u3002",
            "title": "HostNameVersioning"
        },
        {
            "location": "/api-guide/versioning_zh/#queryparameterversioning",
            "text": "\u6b64\u65b9\u6848\u662f\u4e00\u79cd\u5728 URL \u4e2d\u5305\u542b\u7248\u672c\u4fe1\u606f\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\u7684\u7b80\u5355\u65b9\u6848\u3002\u4f8b\u5982\uff1a\nThis scheme is a simple style that includes the version as a query parameter in the URL. For example:  GET /something/?version=0.1 HTTP/1.1\nHost: example.com\nAccept: application/json",
            "title": "QueryParameterVersioning"
        },
        {
            "location": "/api-guide/versioning_zh/#custom-versioning-schemes",
            "text": "\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7248\u672c\u63a7\u5236\u65b9\u6848\uff0c\u8bf7\u7ee7\u627f  BaseVersioning  \u5e76\u91cd\u5199  .determine_version  \u65b9\u6cd5\u3002",
            "title": "Custom versioning schemes"
        },
        {
            "location": "/api-guide/versioning_zh/#_4",
            "text": "\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684  X-API-Version  header\u6765\u786e\u5b9a\u6240\u8bf7\u6c42\u7684\u7248\u672c\u3002  class XAPIVersionScheme(versioning.BaseVersioning):\n    def determine_version(self, request, *args, **kwargs):\n        return request.META.get('HTTP_X_API_VERSION', None)  \u5982\u679c\u4f60\u7684\u7248\u672c\u5316\u65b9\u6848\u57fa\u4e8e\u8bf7\u6c42URL\uff0c\u4f60\u8fd8\u9700\u8981\u6539\u53d8\u7248\u672c\u5316URL\u7684\u786e\u5b9a\u65b9\u5f0f\u3002\u4e3a\u6b64\uff0c\u4f60\u8fd8\u5e94\u8be5\u91cd\u5199\u7c7b\u4e2d\u7684 .reverse() \u65b9\u6cd5\u3002\u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1\u6e90\u4ee3\u7801\u3002",
            "title": "\u4e3e\u4e2a\u4f8b\u5b50"
        },
        {
            "location": "/api-guide/content-negotiation/",
            "text": "Content negotiation\n\n\n\n\nHTTP has provisions for several mechanisms for \"content negotiation\" - the process of selecting the best representation for a given response when there are multiple representations available.\n\n\n\u2014 \nRFC 2616\n, Fielding et al.\n\n\n\n\nContent negotiation is the process of selecting one of multiple possible representations to return to a client, based on client or server preferences.\n\n\nDetermining the accepted renderer\n\n\nREST framework uses a simple style of content negotiation to determine which media type should be returned to a client, based on the available renderers, the priorities of each of those renderers, and the client's \nAccept:\n header.  The style used is partly client-driven, and partly server-driven.\n\n\n\n\nMore specific media types are given preference to less specific media types.\n\n\nIf multiple media types have the same specificity, then preference is given to based on the ordering of the renderers configured for the given view.\n\n\n\n\nFor example, given the following \nAccept\n header:\n\n\napplication/json; indent=4, application/json, application/yaml, text/html, */*\n\n\n\nThe priorities for each of the given media types would be:\n\n\n\n\napplication/json; indent=4\n\n\napplication/json\n, \napplication/yaml\n and \ntext/html\n\n\n*/*\n\n\n\n\nIf the requested view was only configured with renderers for \nYAML\n and \nHTML\n, then REST framework would select whichever renderer was listed first in the \nrenderer_classes\n list or \nDEFAULT_RENDERER_CLASSES\n setting.\n\n\nFor more information on the \nHTTP Accept\n header, see \nRFC 2616\n\n\n\n\nNote\n: \"q\" values are not taken into account by REST framework when determining preference.  The use of \"q\" values negatively impacts caching, and in the author's opinion they are an unnecessary and overcomplicated approach to content negotiation.\n\n\nThis is a valid approach as the HTTP spec deliberately underspecifies how a server should weight server-based preferences against client-based preferences.\n\n\n\n\nCustom content negotiation\n\n\nIt's unlikely that you'll want to provide a custom content negotiation scheme for REST framework, but you can do so if needed.  To implement a custom content negotiation scheme override \nBaseContentNegotiation\n.\n\n\nREST framework's content negotiation classes handle selection of both the appropriate parser for the request, and the appropriate renderer for the response, so you should implement both the \n.select_parser(request, parsers)\n and \n.select_renderer(request, renderers, format_suffix)\n methods.\n\n\nThe \nselect_parser()\n method should return one of the parser instances from the list of available parsers, or \nNone\n if none of the parsers can handle the incoming request.\n\n\nThe \nselect_renderer()\n method should return a two-tuple of (renderer instance, media type), or raise a \nNotAcceptable\n exception.\n\n\nExample\n\n\nThe following is a custom content negotiation class which ignores the client\nrequest when selecting the appropriate parser or renderer.\n\n\nfrom rest_framework.negotiation import BaseContentNegotiation\n\nclass IgnoreClientContentNegotiation(BaseContentNegotiation):\n    def select_parser(self, request, parsers):\n        \"\"\"\n        Select the first parser in the `.parser_classes` list.\n        \"\"\"\n        return parsers[0]\n\n    def select_renderer(self, request, renderers, format_suffix):\n        \"\"\"\n        Select the first renderer in the `.renderer_classes` list.\n        \"\"\"\n        return (renderers[0], renderers[0].media_type)\n\n\n\nSetting the content negotiation\n\n\nThe default content negotiation class may be set globally, using the \nDEFAULT_CONTENT_NEGOTIATION_CLASS\n setting.  For example, the following settings would use our example \nIgnoreClientContentNegotiation\n class.\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'myapp.negotiation.IgnoreClientContentNegotiation',\n}\n\n\n\nYou can also set the content negotiation used for an individual view, or viewset, using the \nAPIView\n class-based views.\n\n\nfrom myapp.negotiation import IgnoreClientContentNegotiation\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass NoNegotiationView(APIView):\n    \"\"\"\n    An example view that does not perform content negotiation.\n    \"\"\"\n    content_negotiation_class = IgnoreClientContentNegotiation\n\n    def get(self, request, format=None):\n        return Response({\n            'accepted media type': request.accepted_renderer.media_type\n        })",
            "title": "Content negotiation"
        },
        {
            "location": "/api-guide/content-negotiation/#content-negotiation",
            "text": "HTTP has provisions for several mechanisms for \"content negotiation\" - the process of selecting the best representation for a given response when there are multiple representations available.  \u2014  RFC 2616 , Fielding et al.   Content negotiation is the process of selecting one of multiple possible representations to return to a client, based on client or server preferences.",
            "title": "Content negotiation"
        },
        {
            "location": "/api-guide/content-negotiation/#determining-the-accepted-renderer",
            "text": "REST framework uses a simple style of content negotiation to determine which media type should be returned to a client, based on the available renderers, the priorities of each of those renderers, and the client's  Accept:  header.  The style used is partly client-driven, and partly server-driven.   More specific media types are given preference to less specific media types.  If multiple media types have the same specificity, then preference is given to based on the ordering of the renderers configured for the given view.   For example, given the following  Accept  header:  application/json; indent=4, application/json, application/yaml, text/html, */*  The priorities for each of the given media types would be:   application/json; indent=4  application/json ,  application/yaml  and  text/html  */*   If the requested view was only configured with renderers for  YAML  and  HTML , then REST framework would select whichever renderer was listed first in the  renderer_classes  list or  DEFAULT_RENDERER_CLASSES  setting.  For more information on the  HTTP Accept  header, see  RFC 2616   Note : \"q\" values are not taken into account by REST framework when determining preference.  The use of \"q\" values negatively impacts caching, and in the author's opinion they are an unnecessary and overcomplicated approach to content negotiation.  This is a valid approach as the HTTP spec deliberately underspecifies how a server should weight server-based preferences against client-based preferences.",
            "title": "Determining the accepted renderer"
        },
        {
            "location": "/api-guide/content-negotiation/#custom-content-negotiation",
            "text": "It's unlikely that you'll want to provide a custom content negotiation scheme for REST framework, but you can do so if needed.  To implement a custom content negotiation scheme override  BaseContentNegotiation .  REST framework's content negotiation classes handle selection of both the appropriate parser for the request, and the appropriate renderer for the response, so you should implement both the  .select_parser(request, parsers)  and  .select_renderer(request, renderers, format_suffix)  methods.  The  select_parser()  method should return one of the parser instances from the list of available parsers, or  None  if none of the parsers can handle the incoming request.  The  select_renderer()  method should return a two-tuple of (renderer instance, media type), or raise a  NotAcceptable  exception.",
            "title": "Custom content negotiation"
        },
        {
            "location": "/api-guide/content-negotiation/#example",
            "text": "The following is a custom content negotiation class which ignores the client\nrequest when selecting the appropriate parser or renderer.  from rest_framework.negotiation import BaseContentNegotiation\n\nclass IgnoreClientContentNegotiation(BaseContentNegotiation):\n    def select_parser(self, request, parsers):\n        \"\"\"\n        Select the first parser in the `.parser_classes` list.\n        \"\"\"\n        return parsers[0]\n\n    def select_renderer(self, request, renderers, format_suffix):\n        \"\"\"\n        Select the first renderer in the `.renderer_classes` list.\n        \"\"\"\n        return (renderers[0], renderers[0].media_type)",
            "title": "Example"
        },
        {
            "location": "/api-guide/content-negotiation/#setting-the-content-negotiation",
            "text": "The default content negotiation class may be set globally, using the  DEFAULT_CONTENT_NEGOTIATION_CLASS  setting.  For example, the following settings would use our example  IgnoreClientContentNegotiation  class.  REST_FRAMEWORK = {\n    'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'myapp.negotiation.IgnoreClientContentNegotiation',\n}  You can also set the content negotiation used for an individual view, or viewset, using the  APIView  class-based views.  from myapp.negotiation import IgnoreClientContentNegotiation\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass NoNegotiationView(APIView):\n    \"\"\"\n    An example view that does not perform content negotiation.\n    \"\"\"\n    content_negotiation_class = IgnoreClientContentNegotiation\n\n    def get(self, request, format=None):\n        return Response({\n            'accepted media type': request.accepted_renderer.media_type\n        })",
            "title": "Setting the content negotiation"
        },
        {
            "location": "/api-guide/metadata/",
            "text": "Metadata\n\n\n\n\n[The \nOPTIONS\n] method allows a client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.\n\n\n\u2014 \nRFC7231, Section 4.3.7.\n\n\n\n\nREST framework includes a configurable mechanism for determining how your API should respond to \nOPTIONS\n requests. This allows you to return API schema or other resource information.\n\n\nThere are not currently any widely adopted conventions for exactly what style of response should be returned for HTTP \nOPTIONS\n requests, so we provide an ad-hoc style that returns some useful information.\n\n\nHere's an example response that demonstrates the information that is returned by default.\n\n\nHTTP 200 OK\nAllow: GET, POST, HEAD, OPTIONS\nContent-Type: application/json\n\n{\n    \"name\": \"To Do List\",\n    \"description\": \"List existing 'To Do' items, or create a new item.\",\n    \"renders\": [\n        \"application/json\",\n        \"text/html\"\n    ],\n    \"parses\": [\n        \"application/json\",\n        \"application/x-www-form-urlencoded\",\n        \"multipart/form-data\"\n    ],\n    \"actions\": {\n        \"POST\": {\n            \"note\": {\n                \"type\": \"string\",\n                \"required\": false,\n                \"read_only\": false,\n                \"label\": \"title\",\n                \"max_length\": 100\n            }\n        }\n    }\n}\n\n\n\nSetting the metadata scheme\n\n\nYou can set the metadata class globally using the \n'DEFAULT_METADATA_CLASS'\n settings key:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata'\n}\n\n\n\nOr you can set the metadata class individually for a view:\n\n\nclass APIRoot(APIView):\n    metadata_class = APIRootMetadata\n\n    def get(self, request, format=None):\n        return Response({\n            ...\n        })\n\n\n\nThe REST framework package only includes a single metadata class implementation, named \nSimpleMetadata\n. If you want to use an alternative style you'll need to implement a custom metadata class.\n\n\nCreating schema endpoints\n\n\nIf you have specific requirements for creating schema endpoints that are accessed with regular \nGET\n requests, you might consider re-using the metadata API for doing so.\n\n\nFor example, the following additional route could be used on a viewset to provide a linkable schema endpoint.\n\n\n@list_route(methods=['GET'])\ndef schema(self, request):\n    meta = self.metadata_class()\n    data = meta.determine_metadata(request, self)\n    return Response(data)\n\n\n\nThere are a couple of reasons that you might choose to take this approach, including that \nOPTIONS\n responses \nare not cacheable\n.\n\n\n\n\nCustom metadata classes\n\n\nIf you want to provide a custom metadata class you should override \nBaseMetadata\n and implement the \ndetermine_metadata(self, request, view)\n method.\n\n\nUseful things that you might want to do could include returning schema information, using a format such as \nJSON schema\n, or returning debug information to admin users.\n\n\nExample\n\n\nThe following class could be used to limit the information that is returned to \nOPTIONS\n requests.\n\n\nclass MinimalMetadata(BaseMetadata):\n    \"\"\"\n    Don't include field and other information for `OPTIONS` requests.\n    Just return the name and description.\n    \"\"\"\n    def determine_metadata(self, request, view):\n        return {\n            'name': view.get_view_name(),\n            'description': view.get_view_description()\n        }\n\n\n\nThen configure your settings to use this custom class:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_METADATA_CLASS': 'myproject.apps.core.MinimalMetadata'\n}\n\n\n\nThird party packages\n\n\nThe following third party packages provide additional metadata implementations.\n\n\nDRF-schema-adapter\n\n\ndrf-schema-adapter\n is a set of tools that makes it easier to provide schema information to frontend frameworks and libraries. It provides a metadata mixin as well as 2 metadata classes and several adapters suitable to generate \njson-schema\n as well as schema information readable by various libraries.\n\n\nYou can also write your own adapter to work with your specific frontend.\nIf you wish to do so, it also provides an exporter that can export those schema information to json files.",
            "title": "Metadata"
        },
        {
            "location": "/api-guide/metadata/#metadata",
            "text": "[The  OPTIONS ] method allows a client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.  \u2014  RFC7231, Section 4.3.7.   REST framework includes a configurable mechanism for determining how your API should respond to  OPTIONS  requests. This allows you to return API schema or other resource information.  There are not currently any widely adopted conventions for exactly what style of response should be returned for HTTP  OPTIONS  requests, so we provide an ad-hoc style that returns some useful information.  Here's an example response that demonstrates the information that is returned by default.  HTTP 200 OK\nAllow: GET, POST, HEAD, OPTIONS\nContent-Type: application/json\n\n{\n    \"name\": \"To Do List\",\n    \"description\": \"List existing 'To Do' items, or create a new item.\",\n    \"renders\": [\n        \"application/json\",\n        \"text/html\"\n    ],\n    \"parses\": [\n        \"application/json\",\n        \"application/x-www-form-urlencoded\",\n        \"multipart/form-data\"\n    ],\n    \"actions\": {\n        \"POST\": {\n            \"note\": {\n                \"type\": \"string\",\n                \"required\": false,\n                \"read_only\": false,\n                \"label\": \"title\",\n                \"max_length\": 100\n            }\n        }\n    }\n}",
            "title": "Metadata"
        },
        {
            "location": "/api-guide/metadata/#setting-the-metadata-scheme",
            "text": "You can set the metadata class globally using the  'DEFAULT_METADATA_CLASS'  settings key:  REST_FRAMEWORK = {\n    'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata'\n}  Or you can set the metadata class individually for a view:  class APIRoot(APIView):\n    metadata_class = APIRootMetadata\n\n    def get(self, request, format=None):\n        return Response({\n            ...\n        })  The REST framework package only includes a single metadata class implementation, named  SimpleMetadata . If you want to use an alternative style you'll need to implement a custom metadata class.",
            "title": "Setting the metadata scheme"
        },
        {
            "location": "/api-guide/metadata/#creating-schema-endpoints",
            "text": "If you have specific requirements for creating schema endpoints that are accessed with regular  GET  requests, you might consider re-using the metadata API for doing so.  For example, the following additional route could be used on a viewset to provide a linkable schema endpoint.  @list_route(methods=['GET'])\ndef schema(self, request):\n    meta = self.metadata_class()\n    data = meta.determine_metadata(request, self)\n    return Response(data)  There are a couple of reasons that you might choose to take this approach, including that  OPTIONS  responses  are not cacheable .",
            "title": "Creating schema endpoints"
        },
        {
            "location": "/api-guide/metadata/#custom-metadata-classes",
            "text": "If you want to provide a custom metadata class you should override  BaseMetadata  and implement the  determine_metadata(self, request, view)  method.  Useful things that you might want to do could include returning schema information, using a format such as  JSON schema , or returning debug information to admin users.",
            "title": "Custom metadata classes"
        },
        {
            "location": "/api-guide/metadata/#example",
            "text": "The following class could be used to limit the information that is returned to  OPTIONS  requests.  class MinimalMetadata(BaseMetadata):\n    \"\"\"\n    Don't include field and other information for `OPTIONS` requests.\n    Just return the name and description.\n    \"\"\"\n    def determine_metadata(self, request, view):\n        return {\n            'name': view.get_view_name(),\n            'description': view.get_view_description()\n        }  Then configure your settings to use this custom class:  REST_FRAMEWORK = {\n    'DEFAULT_METADATA_CLASS': 'myproject.apps.core.MinimalMetadata'\n}",
            "title": "Example"
        },
        {
            "location": "/api-guide/metadata/#third-party-packages",
            "text": "The following third party packages provide additional metadata implementations.",
            "title": "Third party packages"
        },
        {
            "location": "/api-guide/metadata/#drf-schema-adapter",
            "text": "drf-schema-adapter  is a set of tools that makes it easier to provide schema information to frontend frameworks and libraries. It provides a metadata mixin as well as 2 metadata classes and several adapters suitable to generate  json-schema  as well as schema information readable by various libraries.  You can also write your own adapter to work with your specific frontend.\nIf you wish to do so, it also provides an exporter that can export those schema information to json files.",
            "title": "DRF-schema-adapter"
        },
        {
            "location": "/api-guide/schemas/",
            "text": "Schemas\n\n\n\n\nA machine-readable [schema] describes what resources are available via the API, what their URLs are, how they are represented and what operations they support.\n\n\n\u2014 Heroku, \nJSON Schema for the Heroku Platform API\n\n\n\n\nAPI schemas are a useful tool that allow for a range of use cases, including\ngenerating reference documentation, or driving dynamic client libraries that\ncan interact with your API.\n\n\nRepresenting schemas internally\n\n\nREST framework uses \nCore API\n in order to model schema information in\na format-independent representation. This information can then be rendered\ninto various different schema formats, or used to generate API documentation.\n\n\nWhen using Core API, a schema is represented as a \nDocument\n which is the\ntop-level container object for information about the API. Available API\ninteractions are represented using \nLink\n objects. Each link includes a URL,\nHTTP method, and may include a list of \nField\n instances, which describe any\nparameters that may be accepted by the API endpoint. The \nLink\n and \nField\n\ninstances may also include descriptions, that allow an API schema to be\nrendered into user documentation.\n\n\nHere's an example of an API description that includes a single \nsearch\n\nendpoint:\n\n\ncoreapi.Document(\n    title='Flight Search API',\n    url='https://api.example.org/',\n    content={\n        'search': coreapi.Link(\n            url='/search/',\n            action='get',\n            fields=[\n                coreapi.Field(\n                    name='from',\n                    required=True,\n                    location='query',\n                    description='City name or airport code.'\n                ),\n                coreapi.Field(\n                    name='to',\n                    required=True,\n                    location='query',\n                    description='City name or airport code.'\n                ),\n                coreapi.Field(\n                    name='date',\n                    required=True,\n                    location='query',\n                    description='Flight date in \"YYYY-MM-DD\" format.'\n                )\n            ],\n            description='Return flight availability and prices.'\n        )\n    }\n)\n\n\n\nSchema output formats\n\n\nIn order to be presented in an HTTP response, the internal representation\nhas to be rendered into the actual bytes that are used in the response.\n\n\nCore JSON\n is designed as a canonical format for use with Core API.\nREST framework includes a renderer class for handling this media type, which\nis available as \nrenderers.CoreJSONRenderer\n.\n\n\nOther schema formats such as \nOpen API\n (\"Swagger\"),\n\nJSON HyperSchema\n, or \nAPI Blueprint\n can\nalso be supported by implementing a custom renderer class.\n\n\nSchemas vs Hypermedia\n\n\nIt's worth pointing out here that Core API can also be used to model hypermedia\nresponses, which present an alternative interaction style to API schemas.\n\n\nWith an API schema, the entire available interface is presented up-front\nas a single endpoint. Responses to individual API endpoints are then typically\npresented as plain data, without any further interactions contained in each\nresponse.\n\n\nWith Hypermedia, the client is instead presented with a document containing\nboth data and available interactions. Each interaction results in a new\ndocument, detailing both the current state and the available interactions.\n\n\nFurther information and support on building Hypermedia APIs with REST framework\nis planned for a future version.\n\n\n\n\nAdding a schema\n\n\nYou'll need to install the \ncoreapi\n package in order to add schema support\nfor REST framework.\n\n\npip install coreapi\n\n\n\nREST framework includes functionality for auto-generating a schema,\nor allows you to specify one explicitly. There are a few different ways to\nadd a schema to your API, depending on exactly what you need.\n\n\nThe get_schema_view shortcut\n\n\nThe simplest way to include a schema in your project is to use the\n\nget_schema_view()\n function.\n\n\nschema_view = get_schema_view(title=\"Server Monitoring API\")\n\nurlpatterns = [\n    url('^$', schema_view),\n    ...\n]\n\n\n\nOnce the view has been added, you'll be able to make API requests to retrieve\nthe auto-generated schema definition.\n\n\n$ http http://127.0.0.1:8000/ Accept:application/vnd.coreapi+json\nHTTP/1.0 200 OK\nAllow: GET, HEAD, OPTIONS\nContent-Type: application/vnd.coreapi+json\n\n{\n    \"_meta\": {\n        \"title\": \"Server Monitoring API\"\n    },\n    \"_type\": \"document\",\n    ...\n}\n\n\n\nThe arguments to \nget_schema_view()\n are:\n\n\ntitle\n\n\nMay be used to provide a descriptive title for the schema definition.\n\n\nurl\n\n\nMay be used to pass a canonical URL for the schema.\n\n\nschema_view = get_schema_view(\n    title='Server Monitoring API',\n    url='https://www.example.org/api/'\n)\n\n\n\nurlconf\n\n\nA string representing the import path to the URL conf that you want\nto generate an API schema for. This defaults to the value of Django's\nROOT_URLCONF setting.\n\n\nschema_view = get_schema_view(\n    title='Server Monitoring API',\n    url='https://www.example.org/api/',\n    urlconf='myproject.urls'\n)\n\n\n\nrenderer_classes\n\n\nMay be used to pass the set of renderer classes that can be used to render the API root endpoint.\n\n\nfrom rest_framework.renderers import CoreJSONRenderer\nfrom my_custom_package import APIBlueprintRenderer\n\nschema_view = get_schema_view(\n    title='Server Monitoring API',\n    url='https://www.example.org/api/',\n    renderer_classes=[CoreJSONRenderer, APIBlueprintRenderer]\n)\n\n\n\nUsing an explicit schema view\n\n\nIf you need a little more control than the \nget_schema_view()\n shortcut gives you,\nthen you can use the \nSchemaGenerator\n class directly to auto-generate the\n\nDocument\n instance, and to return that from a view.\n\n\nThis option gives you the flexibility of setting up the schema endpoint\nwith whatever behaviour you want. For example, you can apply different\npermission, throttling, or authentication policies to the schema endpoint.\n\n\nHere's an example of using \nSchemaGenerator\n together with a view to\nreturn the schema.\n\n\nviews.py:\n\n\nfrom rest_framework.decorators import api_view, renderer_classes\nfrom rest_framework import renderers, response, schemas\n\ngenerator = schemas.SchemaGenerator(title='Bookings API')\n\n@api_view()\n@renderer_classes([renderers.CoreJSONRenderer])\ndef schema_view(request):\n    schema = generator.get_schema(request)\n    return response.Response(schema)\n\n\n\nurls.py:\n\n\nurlpatterns = [\n    url('/', schema_view),\n    ...\n]\n\n\n\nYou can also serve different schemas to different users, depending on the\npermissions they have available. This approach can be used to ensure that\nunauthenticated requests are presented with a different schema to\nauthenticated requests, or to ensure that different parts of the API are\nmade visible to different users depending on their role.\n\n\nIn order to present a schema with endpoints filtered by user permissions,\nyou need to pass the \nrequest\n argument to the \nget_schema()\n method, like so:\n\n\n@api_view()\n@renderer_classes([renderers.CoreJSONRenderer])\ndef schema_view(request):\n    generator = schemas.SchemaGenerator(title='Bookings API')\n    return response.Response(generator.get_schema(request=request))\n\n\n\nExplicit schema definition\n\n\nAn alternative to the auto-generated approach is to specify the API schema\nexplicitly, by declaring a \nDocument\n object in your codebase. Doing so is a\nlittle more work, but ensures that you have full control over the schema\nrepresentation.\n\n\nimport coreapi\nfrom rest_framework.decorators import api_view, renderer_classes\nfrom rest_framework import renderers, response\n\nschema = coreapi.Document(\n    title='Bookings API',\n    content={\n        ...\n    }\n)\n\n@api_view()\n@renderer_classes([renderers.CoreJSONRenderer])\ndef schema_view(request):\n    return response.Response(schema)\n\n\n\nStatic schema file\n\n\nA final option is to write your API schema as a static file, using one\nof the available formats, such as Core JSON or Open API.\n\n\nYou could then either:\n\n\n\n\nWrite a schema definition as a static file, and \nserve the static file directly\n.\n\n\nWrite a schema definition that is loaded using \nCore API\n, and then\n  rendered to one of many available formats, depending on the client request.\n\n\n\n\n\n\nSchemas as documentation\n\n\nOne common usage of API schemas is to use them to build documentation pages.\n\n\nThe schema generation in REST framework uses docstrings to automatically\npopulate descriptions in the schema document.\n\n\nThese descriptions will be based on:\n\n\n\n\nThe corresponding method docstring if one exists.\n\n\nA named section within the class docstring, which can be either single line or multi-line.\n\n\nThe class docstring.\n\n\n\n\nExamples\n\n\nAn \nAPIView\n, with an explicit method docstring.\n\n\nclass ListUsernames(APIView):\n    def get(self, request):\n        \"\"\"\n        Return a list of all user names in the system.\n        \"\"\"\n        usernames = [user.username for user in User.objects.all()]\n        return Response(usernames)\n\n\n\nA \nViewSet\n, with an explict action docstring.\n\n\nclass ListUsernames(ViewSet):\n    def list(self, request):\n        \"\"\"\n        Return a list of all user names in the system.\n        \"\"\"\n        usernames = [user.username for user in User.objects.all()]\n        return Response(usernames)\n\n\n\nA generic view with sections in the class docstring, using single-line style.\n\n\nclass UserList(generics.ListCreateAPIView):\n    \"\"\"\n    get: List all the users.\n    post: Create a new user.\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = (IsAdminUser,)\n\n\n\nA generic viewset with sections in the class docstring, using multi-line style.\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows users to be viewed or edited.\n\n    retrieve:\n    Return a user instance.\n\n    list:\n    Return all users, ordered by most recently joined.\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n\n\n\n\n\nAlternate schema formats\n\n\nIn order to support an alternate schema format, you need to implement a custom renderer\nclass that handles converting a \nDocument\n instance into a bytestring representation.\n\n\nIf there is a Core API codec package that supports encoding into the format you\nwant to use then implementing the renderer class can be done by using the codec.\n\n\nExample\n\n\nFor example, the \nopenapi_codec\n package provides support for encoding or decoding\nto the Open API (\"Swagger\") format:\n\n\nfrom rest_framework import renderers\nfrom openapi_codec import OpenAPICodec\n\nclass SwaggerRenderer(renderers.BaseRenderer):\n    media_type = 'application/openapi+json'\n    format = 'swagger'\n\n    def render(self, data, media_type=None, renderer_context=None):\n        codec = OpenAPICodec()\n        return codec.dump(data)\n\n\n\n\n\nAPI Reference\n\n\nSchemaGenerator\n\n\nA class that deals with introspecting your API views, which can be used to\ngenerate a schema.\n\n\nTypically you'll instantiate \nSchemaGenerator\n with a single argument, like so:\n\n\ngenerator = SchemaGenerator(title='Stock Prices API')\n\n\n\nArguments:\n\n\n\n\ntitle\n \nrequired\n - The name of the API.\n\n\nurl\n - The root URL of the API schema. This option is not required unless the schema is included under path prefix.\n\n\npatterns\n - A list of URLs to inspect when generating the schema. Defaults to the project's URL conf.\n\n\nurlconf\n - A URL conf module name to use when generating the schema. Defaults to \nsettings.ROOT_URLCONF\n.\n\n\n\n\nget_schema(self, request)\n\n\nReturns a \ncoreapi.Document\n instance that represents the API schema.\n\n\n@api_view\n@renderer_classes([renderers.CoreJSONRenderer])\ndef schema_view(request):\n    generator = schemas.SchemaGenerator(title='Bookings API')\n    return Response(generator.get_schema())\n\n\n\nThe \nrequest\n argument is optional, and may be used if you want to apply per-user\npermissions to the resulting schema generation.\n\n\nget_links(self, request)\n\n\nReturn a nested dictionary containing all the links that should be included in the API schema.\n\n\nThis is a good point to override if you want to modify the resulting structure of the generated schema,\nas you can build a new dictionary with a different layout.\n\n\nget_link(self, path, method, view)\n\n\nReturns a \ncoreapi.Link\n instance corresponding to the given view.\n\n\nYou can override this if you need to provide custom behaviors for particular views.\n\n\nget_description(self, path, method, view)\n\n\nReturns a string to use as the link description. By default this is based on the\nview docstring as described in the \"Schemas as Documentation\" section above.\n\n\nget_encoding(self, path, method, view)\n\n\nReturns a string to indicate the encoding for any request body, when interacting\nwith the given view. Eg. \n'application/json'\n. May return a blank string for views\nthat do not expect a request body.\n\n\nget_path_fields(self, path, method, view):\n\n\nReturn a list of \ncoreapi.Link()\n instances. One for each path parameter in the URL.\n\n\nget_serializer_fields(self, path, method, view)\n\n\nReturn a list of \ncoreapi.Link()\n instances. One for each field in the serializer class used by the view.\n\n\nget_pagination_fields(self, path, method, view\n\n\nReturn a list of \ncoreapi.Link()\n instances, as returned by the \nget_schema_fields()\n method on any pagination class used by the view.\n\n\nget_filter_fields(self, path, method, view)\n\n\nReturn a list of \ncoreapi.Link()\n instances, as returned by the \nget_schema_fields()\n method of any filter classes used by the view.\n\n\n\n\nCore API\n\n\nThis documentation gives a brief overview of the components within the \ncoreapi\n\npackage that are used to represent an API schema.\n\n\nNote that these classes are imported from the \ncoreapi\n package, rather than\nfrom the \nrest_framework\n package.\n\n\nDocument\n\n\nRepresents a container for the API schema.\n\n\ntitle\n\n\nA name for the API.\n\n\nurl\n\n\nA canonical URL for the API.\n\n\ncontent\n\n\nA dictionary, containing the \nLink\n objects that the schema contains.\n\n\nIn order to provide more structure to the schema, the \ncontent\n dictionary\nmay be nested, typically to a second level. For example:\n\n\ncontent={\n    \"bookings\": {\n        \"list\": Link(...),\n        \"create\": Link(...),\n        ...\n    },\n    \"venues\": {\n        \"list\": Link(...),\n        ...\n    },\n    ...\n}\n\n\n\nLink\n\n\nRepresents an individual API endpoint.\n\n\nurl\n\n\nThe URL of the endpoint. May be a URI template, such as \n/users/{username}/\n.\n\n\naction\n\n\nThe HTTP method associated with the endpoint. Note that URLs that support\nmore than one HTTP method, should correspond to a single \nLink\n for each.\n\n\nfields\n\n\nA list of \nField\n instances, describing the available parameters on the input.\n\n\ndescription\n\n\nA short description of the meaning and intended usage of the endpoint.\n\n\nField\n\n\nRepresents a single input parameter on a given API endpoint.\n\n\nname\n\n\nA descriptive name for the input.\n\n\nrequired\n\n\nA boolean, indicated if the client is required to included a value, or if\nthe parameter can be omitted.\n\n\nlocation\n\n\nDetermines how the information is encoded into the request. Should be one of\nthe following strings:\n\n\n\"path\"\n\n\nIncluded in a templated URI. For example a \nurl\n value of \n/products/{product_code}/\n could be used together with a \n\"path\"\n field, to handle API inputs in a URL path such as \n/products/slim-fit-jeans/\n.\n\n\nThese fields will normally correspond with \nnamed arguments in the project URL conf\n.\n\n\n\"query\"\n\n\nIncluded as a URL query parameter. For example \n?search=sale\n. Typically for \nGET\n requests.\n\n\nThese fields will normally correspond with pagination and filtering controls on a view.\n\n\n\"form\"\n\n\nIncluded in the request body, as a single item of a JSON object or HTML form. For example \n{\"colour\": \"blue\", ...}\n. Typically for \nPOST\n, \nPUT\n and \nPATCH\n requests. Multiple \n\"form\"\n fields may be included on a single link.\n\n\nThese fields will normally correspond with serializer fields on a view.\n\n\n\"body\"\n\n\nIncluded as the complete request body. Typically for \nPOST\n, \nPUT\n and \nPATCH\n requests. No more than one \n\"body\"\n field may exist on a link. May not be used together with \n\"form\"\n fields.\n\n\nThese fields will normally correspond with views that use \nListSerializer\n to validate the request input, or with file upload views.\n\n\nencoding\n\n\n\"application/json\"\n\n\nJSON encoded request content. Corresponds to views using \nJSONParser\n.\nValid only if either one or more \nlocation=\"form\"\n fields, or a single\n\nlocation=\"body\"\n field is included on the \nLink\n.\n\n\n\"multipart/form-data\"\n\n\nMultipart encoded request content. Corresponds to views using \nMultiPartParser\n.\nValid only if one or more \nlocation=\"form\"\n fields is included on the \nLink\n.\n\n\n\"application/x-www-form-urlencoded\"\n\n\nURL encoded request content. Corresponds to views using \nFormParser\n. Valid\nonly if one or more \nlocation=\"form\"\n fields is included on the \nLink\n.\n\n\n\"application/octet-stream\"\n\n\nBinary upload request content. Corresponds to views using \nFileUploadParser\n.\nValid only if a \nlocation=\"body\"\n field is included on the \nLink\n.\n\n\ndescription\n\n\nA short description of the meaning and intended usage of the input field.",
            "title": "Schemas"
        },
        {
            "location": "/api-guide/schemas/#schemas",
            "text": "A machine-readable [schema] describes what resources are available via the API, what their URLs are, how they are represented and what operations they support.  \u2014 Heroku,  JSON Schema for the Heroku Platform API   API schemas are a useful tool that allow for a range of use cases, including\ngenerating reference documentation, or driving dynamic client libraries that\ncan interact with your API.",
            "title": "Schemas"
        },
        {
            "location": "/api-guide/schemas/#representing-schemas-internally",
            "text": "REST framework uses  Core API  in order to model schema information in\na format-independent representation. This information can then be rendered\ninto various different schema formats, or used to generate API documentation.  When using Core API, a schema is represented as a  Document  which is the\ntop-level container object for information about the API. Available API\ninteractions are represented using  Link  objects. Each link includes a URL,\nHTTP method, and may include a list of  Field  instances, which describe any\nparameters that may be accepted by the API endpoint. The  Link  and  Field \ninstances may also include descriptions, that allow an API schema to be\nrendered into user documentation.  Here's an example of an API description that includes a single  search \nendpoint:  coreapi.Document(\n    title='Flight Search API',\n    url='https://api.example.org/',\n    content={\n        'search': coreapi.Link(\n            url='/search/',\n            action='get',\n            fields=[\n                coreapi.Field(\n                    name='from',\n                    required=True,\n                    location='query',\n                    description='City name or airport code.'\n                ),\n                coreapi.Field(\n                    name='to',\n                    required=True,\n                    location='query',\n                    description='City name or airport code.'\n                ),\n                coreapi.Field(\n                    name='date',\n                    required=True,\n                    location='query',\n                    description='Flight date in \"YYYY-MM-DD\" format.'\n                )\n            ],\n            description='Return flight availability and prices.'\n        )\n    }\n)",
            "title": "Representing schemas internally"
        },
        {
            "location": "/api-guide/schemas/#schema-output-formats",
            "text": "In order to be presented in an HTTP response, the internal representation\nhas to be rendered into the actual bytes that are used in the response.  Core JSON  is designed as a canonical format for use with Core API.\nREST framework includes a renderer class for handling this media type, which\nis available as  renderers.CoreJSONRenderer .  Other schema formats such as  Open API  (\"Swagger\"), JSON HyperSchema , or  API Blueprint  can\nalso be supported by implementing a custom renderer class.",
            "title": "Schema output formats"
        },
        {
            "location": "/api-guide/schemas/#schemas-vs-hypermedia",
            "text": "It's worth pointing out here that Core API can also be used to model hypermedia\nresponses, which present an alternative interaction style to API schemas.  With an API schema, the entire available interface is presented up-front\nas a single endpoint. Responses to individual API endpoints are then typically\npresented as plain data, without any further interactions contained in each\nresponse.  With Hypermedia, the client is instead presented with a document containing\nboth data and available interactions. Each interaction results in a new\ndocument, detailing both the current state and the available interactions.  Further information and support on building Hypermedia APIs with REST framework\nis planned for a future version.",
            "title": "Schemas vs Hypermedia"
        },
        {
            "location": "/api-guide/schemas/#adding-a-schema",
            "text": "You'll need to install the  coreapi  package in order to add schema support\nfor REST framework.  pip install coreapi  REST framework includes functionality for auto-generating a schema,\nor allows you to specify one explicitly. There are a few different ways to\nadd a schema to your API, depending on exactly what you need.",
            "title": "Adding a schema"
        },
        {
            "location": "/api-guide/schemas/#the-get_schema_view-shortcut",
            "text": "The simplest way to include a schema in your project is to use the get_schema_view()  function.  schema_view = get_schema_view(title=\"Server Monitoring API\")\n\nurlpatterns = [\n    url('^$', schema_view),\n    ...\n]  Once the view has been added, you'll be able to make API requests to retrieve\nthe auto-generated schema definition.  $ http http://127.0.0.1:8000/ Accept:application/vnd.coreapi+json\nHTTP/1.0 200 OK\nAllow: GET, HEAD, OPTIONS\nContent-Type: application/vnd.coreapi+json\n\n{\n    \"_meta\": {\n        \"title\": \"Server Monitoring API\"\n    },\n    \"_type\": \"document\",\n    ...\n}  The arguments to  get_schema_view()  are:",
            "title": "The get_schema_view shortcut"
        },
        {
            "location": "/api-guide/schemas/#title",
            "text": "May be used to provide a descriptive title for the schema definition.",
            "title": "title"
        },
        {
            "location": "/api-guide/schemas/#url",
            "text": "May be used to pass a canonical URL for the schema.  schema_view = get_schema_view(\n    title='Server Monitoring API',\n    url='https://www.example.org/api/'\n)",
            "title": "url"
        },
        {
            "location": "/api-guide/schemas/#urlconf",
            "text": "A string representing the import path to the URL conf that you want\nto generate an API schema for. This defaults to the value of Django's\nROOT_URLCONF setting.  schema_view = get_schema_view(\n    title='Server Monitoring API',\n    url='https://www.example.org/api/',\n    urlconf='myproject.urls'\n)",
            "title": "urlconf"
        },
        {
            "location": "/api-guide/schemas/#renderer_classes",
            "text": "May be used to pass the set of renderer classes that can be used to render the API root endpoint.  from rest_framework.renderers import CoreJSONRenderer\nfrom my_custom_package import APIBlueprintRenderer\n\nschema_view = get_schema_view(\n    title='Server Monitoring API',\n    url='https://www.example.org/api/',\n    renderer_classes=[CoreJSONRenderer, APIBlueprintRenderer]\n)",
            "title": "renderer_classes"
        },
        {
            "location": "/api-guide/schemas/#using-an-explicit-schema-view",
            "text": "If you need a little more control than the  get_schema_view()  shortcut gives you,\nthen you can use the  SchemaGenerator  class directly to auto-generate the Document  instance, and to return that from a view.  This option gives you the flexibility of setting up the schema endpoint\nwith whatever behaviour you want. For example, you can apply different\npermission, throttling, or authentication policies to the schema endpoint.  Here's an example of using  SchemaGenerator  together with a view to\nreturn the schema.  views.py:  from rest_framework.decorators import api_view, renderer_classes\nfrom rest_framework import renderers, response, schemas\n\ngenerator = schemas.SchemaGenerator(title='Bookings API')\n\n@api_view()\n@renderer_classes([renderers.CoreJSONRenderer])\ndef schema_view(request):\n    schema = generator.get_schema(request)\n    return response.Response(schema)  urls.py:  urlpatterns = [\n    url('/', schema_view),\n    ...\n]  You can also serve different schemas to different users, depending on the\npermissions they have available. This approach can be used to ensure that\nunauthenticated requests are presented with a different schema to\nauthenticated requests, or to ensure that different parts of the API are\nmade visible to different users depending on their role.  In order to present a schema with endpoints filtered by user permissions,\nyou need to pass the  request  argument to the  get_schema()  method, like so:  @api_view()\n@renderer_classes([renderers.CoreJSONRenderer])\ndef schema_view(request):\n    generator = schemas.SchemaGenerator(title='Bookings API')\n    return response.Response(generator.get_schema(request=request))",
            "title": "Using an explicit schema view"
        },
        {
            "location": "/api-guide/schemas/#explicit-schema-definition",
            "text": "An alternative to the auto-generated approach is to specify the API schema\nexplicitly, by declaring a  Document  object in your codebase. Doing so is a\nlittle more work, but ensures that you have full control over the schema\nrepresentation.  import coreapi\nfrom rest_framework.decorators import api_view, renderer_classes\nfrom rest_framework import renderers, response\n\nschema = coreapi.Document(\n    title='Bookings API',\n    content={\n        ...\n    }\n)\n\n@api_view()\n@renderer_classes([renderers.CoreJSONRenderer])\ndef schema_view(request):\n    return response.Response(schema)",
            "title": "Explicit schema definition"
        },
        {
            "location": "/api-guide/schemas/#static-schema-file",
            "text": "A final option is to write your API schema as a static file, using one\nof the available formats, such as Core JSON or Open API.  You could then either:   Write a schema definition as a static file, and  serve the static file directly .  Write a schema definition that is loaded using  Core API , and then\n  rendered to one of many available formats, depending on the client request.",
            "title": "Static schema file"
        },
        {
            "location": "/api-guide/schemas/#schemas-as-documentation",
            "text": "One common usage of API schemas is to use them to build documentation pages.  The schema generation in REST framework uses docstrings to automatically\npopulate descriptions in the schema document.  These descriptions will be based on:   The corresponding method docstring if one exists.  A named section within the class docstring, which can be either single line or multi-line.  The class docstring.",
            "title": "Schemas as documentation"
        },
        {
            "location": "/api-guide/schemas/#examples",
            "text": "An  APIView , with an explicit method docstring.  class ListUsernames(APIView):\n    def get(self, request):\n        \"\"\"\n        Return a list of all user names in the system.\n        \"\"\"\n        usernames = [user.username for user in User.objects.all()]\n        return Response(usernames)  A  ViewSet , with an explict action docstring.  class ListUsernames(ViewSet):\n    def list(self, request):\n        \"\"\"\n        Return a list of all user names in the system.\n        \"\"\"\n        usernames = [user.username for user in User.objects.all()]\n        return Response(usernames)  A generic view with sections in the class docstring, using single-line style.  class UserList(generics.ListCreateAPIView):\n    \"\"\"\n    get: List all the users.\n    post: Create a new user.\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = (IsAdminUser,)  A generic viewset with sections in the class docstring, using multi-line style.  class UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows users to be viewed or edited.\n\n    retrieve:\n    Return a user instance.\n\n    list:\n    Return all users, ordered by most recently joined.\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer",
            "title": "Examples"
        },
        {
            "location": "/api-guide/schemas/#alternate-schema-formats",
            "text": "In order to support an alternate schema format, you need to implement a custom renderer\nclass that handles converting a  Document  instance into a bytestring representation.  If there is a Core API codec package that supports encoding into the format you\nwant to use then implementing the renderer class can be done by using the codec.",
            "title": "Alternate schema formats"
        },
        {
            "location": "/api-guide/schemas/#example",
            "text": "For example, the  openapi_codec  package provides support for encoding or decoding\nto the Open API (\"Swagger\") format:  from rest_framework import renderers\nfrom openapi_codec import OpenAPICodec\n\nclass SwaggerRenderer(renderers.BaseRenderer):\n    media_type = 'application/openapi+json'\n    format = 'swagger'\n\n    def render(self, data, media_type=None, renderer_context=None):\n        codec = OpenAPICodec()\n        return codec.dump(data)",
            "title": "Example"
        },
        {
            "location": "/api-guide/schemas/#api-reference",
            "text": "",
            "title": "API Reference"
        },
        {
            "location": "/api-guide/schemas/#schemagenerator",
            "text": "A class that deals with introspecting your API views, which can be used to\ngenerate a schema.  Typically you'll instantiate  SchemaGenerator  with a single argument, like so:  generator = SchemaGenerator(title='Stock Prices API')  Arguments:   title   required  - The name of the API.  url  - The root URL of the API schema. This option is not required unless the schema is included under path prefix.  patterns  - A list of URLs to inspect when generating the schema. Defaults to the project's URL conf.  urlconf  - A URL conf module name to use when generating the schema. Defaults to  settings.ROOT_URLCONF .",
            "title": "SchemaGenerator"
        },
        {
            "location": "/api-guide/schemas/#get_schemaself-request",
            "text": "Returns a  coreapi.Document  instance that represents the API schema.  @api_view\n@renderer_classes([renderers.CoreJSONRenderer])\ndef schema_view(request):\n    generator = schemas.SchemaGenerator(title='Bookings API')\n    return Response(generator.get_schema())  The  request  argument is optional, and may be used if you want to apply per-user\npermissions to the resulting schema generation.",
            "title": "get_schema(self, request)"
        },
        {
            "location": "/api-guide/schemas/#get_linksself-request",
            "text": "Return a nested dictionary containing all the links that should be included in the API schema.  This is a good point to override if you want to modify the resulting structure of the generated schema,\nas you can build a new dictionary with a different layout.",
            "title": "get_links(self, request)"
        },
        {
            "location": "/api-guide/schemas/#get_linkself-path-method-view",
            "text": "Returns a  coreapi.Link  instance corresponding to the given view.  You can override this if you need to provide custom behaviors for particular views.",
            "title": "get_link(self, path, method, view)"
        },
        {
            "location": "/api-guide/schemas/#get_descriptionself-path-method-view",
            "text": "Returns a string to use as the link description. By default this is based on the\nview docstring as described in the \"Schemas as Documentation\" section above.",
            "title": "get_description(self, path, method, view)"
        },
        {
            "location": "/api-guide/schemas/#get_encodingself-path-method-view",
            "text": "Returns a string to indicate the encoding for any request body, when interacting\nwith the given view. Eg.  'application/json' . May return a blank string for views\nthat do not expect a request body.",
            "title": "get_encoding(self, path, method, view)"
        },
        {
            "location": "/api-guide/schemas/#get_path_fieldsself-path-method-view",
            "text": "Return a list of  coreapi.Link()  instances. One for each path parameter in the URL.",
            "title": "get_path_fields(self, path, method, view):"
        },
        {
            "location": "/api-guide/schemas/#get_serializer_fieldsself-path-method-view",
            "text": "Return a list of  coreapi.Link()  instances. One for each field in the serializer class used by the view.",
            "title": "get_serializer_fields(self, path, method, view)"
        },
        {
            "location": "/api-guide/schemas/#get_pagination_fieldsself-path-method-view",
            "text": "Return a list of  coreapi.Link()  instances, as returned by the  get_schema_fields()  method on any pagination class used by the view.",
            "title": "get_pagination_fields(self, path, method, view"
        },
        {
            "location": "/api-guide/schemas/#get_filter_fieldsself-path-method-view",
            "text": "Return a list of  coreapi.Link()  instances, as returned by the  get_schema_fields()  method of any filter classes used by the view.",
            "title": "get_filter_fields(self, path, method, view)"
        },
        {
            "location": "/api-guide/schemas/#core-api",
            "text": "This documentation gives a brief overview of the components within the  coreapi \npackage that are used to represent an API schema.  Note that these classes are imported from the  coreapi  package, rather than\nfrom the  rest_framework  package.",
            "title": "Core API"
        },
        {
            "location": "/api-guide/schemas/#document",
            "text": "Represents a container for the API schema.",
            "title": "Document"
        },
        {
            "location": "/api-guide/schemas/#title_1",
            "text": "A name for the API.",
            "title": "title"
        },
        {
            "location": "/api-guide/schemas/#url_1",
            "text": "A canonical URL for the API.",
            "title": "url"
        },
        {
            "location": "/api-guide/schemas/#content",
            "text": "A dictionary, containing the  Link  objects that the schema contains.  In order to provide more structure to the schema, the  content  dictionary\nmay be nested, typically to a second level. For example:  content={\n    \"bookings\": {\n        \"list\": Link(...),\n        \"create\": Link(...),\n        ...\n    },\n    \"venues\": {\n        \"list\": Link(...),\n        ...\n    },\n    ...\n}",
            "title": "content"
        },
        {
            "location": "/api-guide/schemas/#link",
            "text": "Represents an individual API endpoint.",
            "title": "Link"
        },
        {
            "location": "/api-guide/schemas/#url_2",
            "text": "The URL of the endpoint. May be a URI template, such as  /users/{username}/ .",
            "title": "url"
        },
        {
            "location": "/api-guide/schemas/#action",
            "text": "The HTTP method associated with the endpoint. Note that URLs that support\nmore than one HTTP method, should correspond to a single  Link  for each.",
            "title": "action"
        },
        {
            "location": "/api-guide/schemas/#fields",
            "text": "A list of  Field  instances, describing the available parameters on the input.",
            "title": "fields"
        },
        {
            "location": "/api-guide/schemas/#description",
            "text": "A short description of the meaning and intended usage of the endpoint.",
            "title": "description"
        },
        {
            "location": "/api-guide/schemas/#field",
            "text": "Represents a single input parameter on a given API endpoint.",
            "title": "Field"
        },
        {
            "location": "/api-guide/schemas/#name",
            "text": "A descriptive name for the input.",
            "title": "name"
        },
        {
            "location": "/api-guide/schemas/#required",
            "text": "A boolean, indicated if the client is required to included a value, or if\nthe parameter can be omitted.",
            "title": "required"
        },
        {
            "location": "/api-guide/schemas/#location",
            "text": "Determines how the information is encoded into the request. Should be one of\nthe following strings:  \"path\"  Included in a templated URI. For example a  url  value of  /products/{product_code}/  could be used together with a  \"path\"  field, to handle API inputs in a URL path such as  /products/slim-fit-jeans/ .  These fields will normally correspond with  named arguments in the project URL conf .  \"query\"  Included as a URL query parameter. For example  ?search=sale . Typically for  GET  requests.  These fields will normally correspond with pagination and filtering controls on a view.  \"form\"  Included in the request body, as a single item of a JSON object or HTML form. For example  {\"colour\": \"blue\", ...} . Typically for  POST ,  PUT  and  PATCH  requests. Multiple  \"form\"  fields may be included on a single link.  These fields will normally correspond with serializer fields on a view.  \"body\"  Included as the complete request body. Typically for  POST ,  PUT  and  PATCH  requests. No more than one  \"body\"  field may exist on a link. May not be used together with  \"form\"  fields.  These fields will normally correspond with views that use  ListSerializer  to validate the request input, or with file upload views.",
            "title": "location"
        },
        {
            "location": "/api-guide/schemas/#encoding",
            "text": "\"application/json\"  JSON encoded request content. Corresponds to views using  JSONParser .\nValid only if either one or more  location=\"form\"  fields, or a single location=\"body\"  field is included on the  Link .  \"multipart/form-data\"  Multipart encoded request content. Corresponds to views using  MultiPartParser .\nValid only if one or more  location=\"form\"  fields is included on the  Link .  \"application/x-www-form-urlencoded\"  URL encoded request content. Corresponds to views using  FormParser . Valid\nonly if one or more  location=\"form\"  fields is included on the  Link .  \"application/octet-stream\"  Binary upload request content. Corresponds to views using  FileUploadParser .\nValid only if a  location=\"body\"  field is included on the  Link .",
            "title": "encoding"
        },
        {
            "location": "/api-guide/schemas/#description_1",
            "text": "A short description of the meaning and intended usage of the input field.",
            "title": "description"
        },
        {
            "location": "/api-guide/format-suffixes/",
            "text": "Format suffixes\n\n\n\n\nSection 6.2.1 does not say that content negotiation should be\nused all the time.\n\n\n\u2014 Roy Fielding, \nREST discuss mailing list\n\n\n\n\nA common pattern for Web APIs is to use filename extensions on URLs to provide an endpoint for a given media type.  For example, 'http://example.com/api/users.json' to serve a JSON representation.\n\n\nAdding format-suffix patterns to each individual entry in the URLconf for your API is error-prone and non-DRY, so REST framework provides a shortcut to adding these patterns to your URLConf.\n\n\nformat_suffix_patterns\n\n\nSignature\n: format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None)\n\n\nReturns a URL pattern list which includes format suffix patterns appended to each of the URL patterns provided.\n\n\nArguments:\n\n\n\n\nurlpatterns\n: Required.  A URL pattern list.\n\n\nsuffix_required\n:  Optional.  A boolean indicating if suffixes in the URLs should be optional or mandatory.  Defaults to \nFalse\n, meaning that suffixes are optional by default.\n\n\nallowed\n:  Optional.  A list or tuple of valid format suffixes.  If not provided, a wildcard format suffix pattern will be used.\n\n\n\n\nExample:\n\n\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom blog import views\n\nurlpatterns = [\n    url(r'^/$', views.apt_root),\n    url(r'^comments/$', views.comment_list),\n    url(r'^comments/(?P<pk>[0-9]+)/$', views.comment_detail)\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns, allowed=['json', 'html'])\n\n\n\nWhen using \nformat_suffix_patterns\n, you must make sure to add the \n'format'\n keyword argument to the corresponding views.  For example:\n\n\n@api_view(('GET', 'POST'))\ndef comment_list(request, format=None):\n    # do stuff...\n\n\n\nOr with class-based views:\n\n\nclass CommentList(APIView):\n    def get(self, request, format=None):\n        # do stuff...\n\n    def post(self, request, format=None):\n        # do stuff...\n\n\n\nThe name of the kwarg used may be modified by using the \nFORMAT_SUFFIX_KWARG\n setting.\n\n\nAlso note that \nformat_suffix_patterns\n does not support descending into \ninclude\n URL patterns.\n\n\nUsing with \ni18n_patterns\n\n\nIf using the \ni18n_patterns\n function provided by Django, as well as \nformat_suffix_patterns\n you should make sure that the \ni18n_patterns\n function is applied as the final, or outermost function. For example:\n\n\nurl patterns = [\n    \u2026\n]\n\nurlpatterns = i18n_patterns(\n    format_suffix_patterns(urlpatterns, allowed=['json', 'html'])\n)\n\n\n\n\n\nQuery parameter formats\n\n\nAn alternative to the format suffixes is to include the requested format in a query parameter. REST framework provides this option by default, and it is used in the browsable API to switch between differing available representations.\n\n\nTo select a representation using its short format, use the \nformat\n query parameter. For example: \nhttp://example.com/organizations/?format=csv\n.\n\n\nThe name of this query parameter can be modified using the \nURL_FORMAT_OVERRIDE\n setting. Set the value to \nNone\n to disable this behavior.\n\n\n\n\nAccept headers vs. format suffixes\n\n\nThere seems to be a view among some of the Web community that filename extensions are not a RESTful pattern, and that \nHTTP Accept\n headers should always be used instead.\n\n\nIt is actually a misconception.  For example, take the following quote from Roy Fielding discussing the relative merits of query parameter media-type indicators vs. file extension media-type indicators:\n\n\n\u201cThat's why I always prefer extensions.  Neither choice has anything to do with REST.\u201d \u2014 Roy Fielding, \nREST discuss mailing list\n\n\nThe quote does not mention Accept headers, but it does make it clear that format suffixes should be considered an acceptable pattern.",
            "title": "Format suffixes"
        },
        {
            "location": "/api-guide/format-suffixes/#format-suffixes",
            "text": "Section 6.2.1 does not say that content negotiation should be\nused all the time.  \u2014 Roy Fielding,  REST discuss mailing list   A common pattern for Web APIs is to use filename extensions on URLs to provide an endpoint for a given media type.  For example, 'http://example.com/api/users.json' to serve a JSON representation.  Adding format-suffix patterns to each individual entry in the URLconf for your API is error-prone and non-DRY, so REST framework provides a shortcut to adding these patterns to your URLConf.",
            "title": "Format suffixes"
        },
        {
            "location": "/api-guide/format-suffixes/#format_suffix_patterns",
            "text": "Signature : format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None)  Returns a URL pattern list which includes format suffix patterns appended to each of the URL patterns provided.  Arguments:   urlpatterns : Required.  A URL pattern list.  suffix_required :  Optional.  A boolean indicating if suffixes in the URLs should be optional or mandatory.  Defaults to  False , meaning that suffixes are optional by default.  allowed :  Optional.  A list or tuple of valid format suffixes.  If not provided, a wildcard format suffix pattern will be used.   Example:  from rest_framework.urlpatterns import format_suffix_patterns\nfrom blog import views\n\nurlpatterns = [\n    url(r'^/$', views.apt_root),\n    url(r'^comments/$', views.comment_list),\n    url(r'^comments/(?P<pk>[0-9]+)/$', views.comment_detail)\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns, allowed=['json', 'html'])  When using  format_suffix_patterns , you must make sure to add the  'format'  keyword argument to the corresponding views.  For example:  @api_view(('GET', 'POST'))\ndef comment_list(request, format=None):\n    # do stuff...  Or with class-based views:  class CommentList(APIView):\n    def get(self, request, format=None):\n        # do stuff...\n\n    def post(self, request, format=None):\n        # do stuff...  The name of the kwarg used may be modified by using the  FORMAT_SUFFIX_KWARG  setting.  Also note that  format_suffix_patterns  does not support descending into  include  URL patterns.",
            "title": "format_suffix_patterns"
        },
        {
            "location": "/api-guide/format-suffixes/#using-with-i18n_patterns",
            "text": "If using the  i18n_patterns  function provided by Django, as well as  format_suffix_patterns  you should make sure that the  i18n_patterns  function is applied as the final, or outermost function. For example:  url patterns = [\n    \u2026\n]\n\nurlpatterns = i18n_patterns(\n    format_suffix_patterns(urlpatterns, allowed=['json', 'html'])\n)",
            "title": "Using with i18n_patterns"
        },
        {
            "location": "/api-guide/format-suffixes/#query-parameter-formats",
            "text": "An alternative to the format suffixes is to include the requested format in a query parameter. REST framework provides this option by default, and it is used in the browsable API to switch between differing available representations.  To select a representation using its short format, use the  format  query parameter. For example:  http://example.com/organizations/?format=csv .  The name of this query parameter can be modified using the  URL_FORMAT_OVERRIDE  setting. Set the value to  None  to disable this behavior.",
            "title": "Query parameter formats"
        },
        {
            "location": "/api-guide/format-suffixes/#accept-headers-vs-format-suffixes",
            "text": "There seems to be a view among some of the Web community that filename extensions are not a RESTful pattern, and that  HTTP Accept  headers should always be used instead.  It is actually a misconception.  For example, take the following quote from Roy Fielding discussing the relative merits of query parameter media-type indicators vs. file extension media-type indicators:  \u201cThat's why I always prefer extensions.  Neither choice has anything to do with REST.\u201d \u2014 Roy Fielding,  REST discuss mailing list  The quote does not mention Accept headers, but it does make it clear that format suffixes should be considered an acceptable pattern.",
            "title": "Accept headers vs. format suffixes"
        },
        {
            "location": "/api-guide/reverse/",
            "text": "Returning URLs\n\n\n\n\nThe central feature that distinguishes the REST architectural style from other network-based styles is its emphasis on a uniform interface between components.\n\n\n\u2014 Roy Fielding, \nArchitectural Styles and the Design of Network-based Software Architectures\n\n\n\n\nAs a rule, it's probably better practice to return absolute URIs from your Web APIs, such as \nhttp://example.com/foobar\n, rather than returning relative URIs, such as \n/foobar\n.\n\n\nThe advantages of doing so are:\n\n\n\n\nIt's more explicit.\n\n\nIt leaves less work for your API clients.\n\n\nThere's no ambiguity about the meaning of the string when it's found in representations such as JSON that do not have a native URI type.\n\n\nIt makes it easy to do things like markup HTML representations with hyperlinks.\n\n\n\n\nREST framework provides two utility functions to make it more simple to return absolute URIs from your Web API.\n\n\nThere's no requirement for you to use them, but if you do then the self-describing API will be able to automatically hyperlink its output for you, which makes browsing the API much easier.\n\n\nreverse\n\n\nSignature:\n \nreverse(viewname, *args, **kwargs)\n\n\nHas the same behavior as \ndjango.urls.reverse\n, except that it returns a fully qualified URL, using the request to determine the host and port.\n\n\nYou should \ninclude the request as a keyword argument\n to the function, for example:\n\n\nfrom rest_framework.reverse import reverse\nfrom rest_framework.views import APIView\nfrom django.utils.timezone import now\n\nclass APIRootView(APIView):\n    def get(self, request):\n        year = now().year\n        data = {\n            ...\n            'year-summary-url': reverse('year-summary', args=[year], request=request)\n        }\n        return Response(data)\n\n\n\nreverse_lazy\n\n\nSignature:\n \nreverse_lazy(viewname, *args, **kwargs)\n\n\nHas the same behavior as \ndjango.urls.reverse_lazy\n, except that it returns a fully qualified URL, using the request to determine the host and port.\n\n\nAs with the \nreverse\n function, you should \ninclude the request as a keyword argument\n to the function, for example:\n\n\napi_root = reverse_lazy('api-root', request=request)",
            "title": "Returning URLs"
        },
        {
            "location": "/api-guide/reverse/#returning-urls",
            "text": "The central feature that distinguishes the REST architectural style from other network-based styles is its emphasis on a uniform interface between components.  \u2014 Roy Fielding,  Architectural Styles and the Design of Network-based Software Architectures   As a rule, it's probably better practice to return absolute URIs from your Web APIs, such as  http://example.com/foobar , rather than returning relative URIs, such as  /foobar .  The advantages of doing so are:   It's more explicit.  It leaves less work for your API clients.  There's no ambiguity about the meaning of the string when it's found in representations such as JSON that do not have a native URI type.  It makes it easy to do things like markup HTML representations with hyperlinks.   REST framework provides two utility functions to make it more simple to return absolute URIs from your Web API.  There's no requirement for you to use them, but if you do then the self-describing API will be able to automatically hyperlink its output for you, which makes browsing the API much easier.",
            "title": "Returning URLs"
        },
        {
            "location": "/api-guide/reverse/#reverse",
            "text": "Signature:   reverse(viewname, *args, **kwargs)  Has the same behavior as  django.urls.reverse , except that it returns a fully qualified URL, using the request to determine the host and port.  You should  include the request as a keyword argument  to the function, for example:  from rest_framework.reverse import reverse\nfrom rest_framework.views import APIView\nfrom django.utils.timezone import now\n\nclass APIRootView(APIView):\n    def get(self, request):\n        year = now().year\n        data = {\n            ...\n            'year-summary-url': reverse('year-summary', args=[year], request=request)\n        }\n        return Response(data)",
            "title": "reverse"
        },
        {
            "location": "/api-guide/reverse/#reverse_lazy",
            "text": "Signature:   reverse_lazy(viewname, *args, **kwargs)  Has the same behavior as  django.urls.reverse_lazy , except that it returns a fully qualified URL, using the request to determine the host and port.  As with the  reverse  function, you should  include the request as a keyword argument  to the function, for example:  api_root = reverse_lazy('api-root', request=request)",
            "title": "reverse_lazy"
        },
        {
            "location": "/api-guide/exceptions/",
            "text": "Exceptions\n\n\n\n\nExceptions\u2026 allow error handling to be organized cleanly in a central or high-level place within the program structure.\n\n\n\u2014 Doug Hellmann, \nPython Exception Handling Techniques\n\n\n\n\nException handling in REST framework views\n\n\nREST framework's views handle various exceptions, and deal with returning appropriate error responses.\n\n\nThe handled exceptions are:\n\n\n\n\nSubclasses of \nAPIException\n raised inside REST framework.\n\n\nDjango's \nHttp404\n exception.\n\n\nDjango's \nPermissionDenied\n exception.\n\n\n\n\nIn each case, REST framework will return a response with an appropriate status code and content-type.  The body of the response will include any additional details regarding the nature of the error.\n\n\nMost error responses will include a key \ndetail\n in the body of the response.\n\n\nFor example, the following request:\n\n\nDELETE http://api.example.com/foo/bar HTTP/1.1\nAccept: application/json\n\n\n\nMight receive an error response indicating that the \nDELETE\n method is not allowed on that resource:\n\n\nHTTP/1.1 405 Method Not Allowed\nContent-Type: application/json\nContent-Length: 42\n\n{\"detail\": \"Method 'DELETE' not allowed.\"}\n\n\n\nValidation errors are handled slightly differently, and will include the field names as the keys in the response. If the validation error was not specific to a particular field then it will use the \"non_field_errors\" key, or whatever string value has been set for the \nNON_FIELD_ERRORS_KEY\n setting.\n\n\nAny example validation error might look like this:\n\n\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nContent-Length: 94\n\n{\"amount\": [\"A valid integer is required.\"], \"description\": [\"This field may not be blank.\"]}\n\n\n\nCustom exception handling\n\n\nYou can implement custom exception handling by creating a handler function that converts exceptions raised in your API views into response objects.  This allows you to control the style of error responses used by your API.\n\n\nThe function must take a pair of arguments, the first is the exception to be handled, and the second is a dictionary containing any extra context such as the view currently being handled. The exception handler function should either return a \nResponse\n object, or return \nNone\n if the exception cannot be handled.  If the handler returns \nNone\n then the exception will be re-raised and Django will return a standard HTTP 500 'server error' response.\n\n\nFor example, you might want to ensure that all error responses include the HTTP status code in the body of the response, like so:\n\n\nHTTP/1.1 405 Method Not Allowed\nContent-Type: application/json\nContent-Length: 62\n\n{\"status_code\": 405, \"detail\": \"Method 'DELETE' not allowed.\"}\n\n\n\nIn order to alter the style of the response, you could write the following custom exception handler:\n\n\nfrom rest_framework.views import exception_handler\n\ndef custom_exception_handler(exc, context):\n    # Call REST framework's default exception handler first,\n    # to get the standard error response.\n    response = exception_handler(exc, context)\n\n    #\u00a0Now add the HTTP status code to the response.\n    if response is not None:\n        response.data['status_code'] = response.status_code\n\n    return response\n\n\n\nThe context argument is not used by the default handler, but can be useful if the exception handler needs further information such as the view currently being handled, which can be accessed as \ncontext['view']\n.\n\n\nThe exception handler must also be configured in your settings, using the \nEXCEPTION_HANDLER\n setting key. For example:\n\n\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler'\n}\n\n\n\nIf not specified, the \n'EXCEPTION_HANDLER'\n setting defaults to the standard exception handler provided by REST framework:\n\n\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler'\n}\n\n\n\nNote that the exception handler will only be called for responses generated by raised exceptions.  It will not be used for any responses returned directly by the view, such as the \nHTTP_400_BAD_REQUEST\n responses that are returned by the generic views when serializer validation fails.\n\n\n\n\nAPI Reference\n\n\nAPIException\n\n\nSignature:\n \nAPIException()\n\n\nThe \nbase class\n for all exceptions raised inside an \nAPIView\n class or \n@api_view\n.\n\n\nTo provide a custom exception, subclass \nAPIException\n and set the \n.status_code\n, \n.default_detail\n, and \ndefault_code\n attributes on the class.\n\n\nFor example, if your API relies on a third party service that may sometimes be unreachable, you might want to implement an exception for the \"503 Service Unavailable\" HTTP response code.  You could do this like so:\n\n\nfrom rest_framework.exceptions import APIException\n\nclass ServiceUnavailable(APIException):\n    status_code = 503\n    default_detail = 'Service temporarily unavailable, try again later.'\n    default_code = 'service_unavailable'\n\n\n\nInspecting API exceptions\n\n\nThere are a number of different properties available for inspecting the status\nof an API exception. You can use these to build custom exception handling\nfor your project.\n\n\nThe available attributes and methods are:\n\n\n\n\n.detail\n - Return the textual description of the error.\n\n\n.get_codes()\n - Return the code identifier of the error.\n\n\n.get_full_details()\n - Return both the textual description and the code identifier.\n\n\n\n\nIn most cases the error detail will be a simple item:\n\n\n>>> print(exc.detail)\nYou do not have permission to perform this action.\n>>> print(exc.get_codes())\npermission_denied\n>>> print(exc.get_full_details())\n{'message':'You do not have permission to perform this action.','code':'permission_denied'}\n\n\n\nIn the case of validation errors the error detail will be either a list or\ndictionary of items:\n\n\n>>> print(exc.detail)\n{\"name\":\"This field is required.\",\"age\":\"A valid integer is required.\"}\n>>> print(exc.get_codes())\n{\"name\":\"required\",\"age\":\"invalid\"}\n>>> print(exc.get_full_details())\n{\"name\":{\"message\":\"This field is required.\",\"code\":\"required\"},\"age\":{\"message\":\"A valid integer is required.\",\"code\":\"invalid\"}}\n\n\n\nParseError\n\n\nSignature:\n \nParseError(detail=None, code=None)\n\n\nRaised if the request contains malformed data when accessing \nrequest.data\n.\n\n\nBy default this exception results in a response with the HTTP status code \"400 Bad Request\".\n\n\nAuthenticationFailed\n\n\nSignature:\n \nAuthenticationFailed(detail=None, code=None)\n\n\nRaised when an incoming request includes incorrect authentication.\n\n\nBy default this exception results in a response with the HTTP status code \"401 Unauthenticated\", but it may also result in a \"403 Forbidden\" response, depending on the authentication scheme in use.  See the \nauthentication documentation\n for more details.\n\n\nNotAuthenticated\n\n\nSignature:\n \nNotAuthenticated(detail=None, code=None)\n\n\nRaised when an unauthenticated request fails the permission checks.\n\n\nBy default this exception results in a response with the HTTP status code \"401 Unauthenticated\", but it may also result in a \"403 Forbidden\" response, depending on the authentication scheme in use.  See the \nauthentication documentation\n for more details.\n\n\nPermissionDenied\n\n\nSignature:\n \nPermissionDenied(detail=None, code=None)\n\n\nRaised when an authenticated request fails the permission checks.\n\n\nBy default this exception results in a response with the HTTP status code \"403 Forbidden\".\n\n\nNotFound\n\n\nSignature:\n \nNotFound(detail=None, code=None)\n\n\nRaised when a resource does not exists at the given URL. This exception is equivalent to the standard \nHttp404\n Django exception.\n\n\nBy default this exception results in a response with the HTTP status code \"404 Not Found\".\n\n\nMethodNotAllowed\n\n\nSignature:\n \nMethodNotAllowed(method, detail=None, code=None)\n\n\nRaised when an incoming request occurs that does not map to a handler method on the view.\n\n\nBy default this exception results in a response with the HTTP status code \"405 Method Not Allowed\".\n\n\nNotAcceptable\n\n\nSignature:\n \nNotAcceptable(detail=None, code=None)\n\n\nRaised when an incoming request occurs with an \nAccept\n header that cannot be satisfied by any of the available renderers.\n\n\nBy default this exception results in a response with the HTTP status code \"406 Not Acceptable\".\n\n\nUnsupportedMediaType\n\n\nSignature:\n \nUnsupportedMediaType(media_type, detail=None, code=None)\n\n\nRaised if there are no parsers that can handle the content type of the request data when accessing \nrequest.data\n.\n\n\nBy default this exception results in a response with the HTTP status code \"415 Unsupported Media Type\".\n\n\nThrottled\n\n\nSignature:\n \nThrottled(wait=None, detail=None, code=None)\n\n\nRaised when an incoming request fails the throttling checks.\n\n\nBy default this exception results in a response with the HTTP status code \"429 Too Many Requests\".\n\n\nValidationError\n\n\nSignature:\n \nValidationError(detail, code=None)\n\n\nThe \nValidationError\n exception is slightly different from the other \nAPIException\n classes:\n\n\n\n\nThe \ndetail\n argument is mandatory, not optional.\n\n\nThe \ndetail\n argument may be a list or dictionary of error details, and may also be a nested data structure.\n\n\nBy convention you should import the serializers module and use a fully qualified \nValidationError\n style, in order to differentiate it from Django's built-in validation error. For example. \nraise serializers.ValidationError('This field must be an integer value.')\n\n\n\n\nThe \nValidationError\n class should be used for serializer and field validation, and by validator classes. It is also raised when calling \nserializer.is_valid\n with the \nraise_exception\n keyword argument:\n\n\nserializer.is_valid(raise_exception=True)\n\n\n\nThe generic views use the \nraise_exception=True\n flag, which means that you can override the style of validation error responses globally in your API. To do so, use a custom exception handler, as described above.\n\n\nBy default this exception results in a response with the HTTP status code \"400 Bad Request\".",
            "title": "Exceptions"
        },
        {
            "location": "/api-guide/exceptions/#exceptions",
            "text": "Exceptions\u2026 allow error handling to be organized cleanly in a central or high-level place within the program structure.  \u2014 Doug Hellmann,  Python Exception Handling Techniques",
            "title": "Exceptions"
        },
        {
            "location": "/api-guide/exceptions/#exception-handling-in-rest-framework-views",
            "text": "REST framework's views handle various exceptions, and deal with returning appropriate error responses.  The handled exceptions are:   Subclasses of  APIException  raised inside REST framework.  Django's  Http404  exception.  Django's  PermissionDenied  exception.   In each case, REST framework will return a response with an appropriate status code and content-type.  The body of the response will include any additional details regarding the nature of the error.  Most error responses will include a key  detail  in the body of the response.  For example, the following request:  DELETE http://api.example.com/foo/bar HTTP/1.1\nAccept: application/json  Might receive an error response indicating that the  DELETE  method is not allowed on that resource:  HTTP/1.1 405 Method Not Allowed\nContent-Type: application/json\nContent-Length: 42\n\n{\"detail\": \"Method 'DELETE' not allowed.\"}  Validation errors are handled slightly differently, and will include the field names as the keys in the response. If the validation error was not specific to a particular field then it will use the \"non_field_errors\" key, or whatever string value has been set for the  NON_FIELD_ERRORS_KEY  setting.  Any example validation error might look like this:  HTTP/1.1 400 Bad Request\nContent-Type: application/json\nContent-Length: 94\n\n{\"amount\": [\"A valid integer is required.\"], \"description\": [\"This field may not be blank.\"]}",
            "title": "Exception handling in REST framework views"
        },
        {
            "location": "/api-guide/exceptions/#custom-exception-handling",
            "text": "You can implement custom exception handling by creating a handler function that converts exceptions raised in your API views into response objects.  This allows you to control the style of error responses used by your API.  The function must take a pair of arguments, the first is the exception to be handled, and the second is a dictionary containing any extra context such as the view currently being handled. The exception handler function should either return a  Response  object, or return  None  if the exception cannot be handled.  If the handler returns  None  then the exception will be re-raised and Django will return a standard HTTP 500 'server error' response.  For example, you might want to ensure that all error responses include the HTTP status code in the body of the response, like so:  HTTP/1.1 405 Method Not Allowed\nContent-Type: application/json\nContent-Length: 62\n\n{\"status_code\": 405, \"detail\": \"Method 'DELETE' not allowed.\"}  In order to alter the style of the response, you could write the following custom exception handler:  from rest_framework.views import exception_handler\n\ndef custom_exception_handler(exc, context):\n    # Call REST framework's default exception handler first,\n    # to get the standard error response.\n    response = exception_handler(exc, context)\n\n    #\u00a0Now add the HTTP status code to the response.\n    if response is not None:\n        response.data['status_code'] = response.status_code\n\n    return response  The context argument is not used by the default handler, but can be useful if the exception handler needs further information such as the view currently being handled, which can be accessed as  context['view'] .  The exception handler must also be configured in your settings, using the  EXCEPTION_HANDLER  setting key. For example:  REST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler'\n}  If not specified, the  'EXCEPTION_HANDLER'  setting defaults to the standard exception handler provided by REST framework:  REST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler'\n}  Note that the exception handler will only be called for responses generated by raised exceptions.  It will not be used for any responses returned directly by the view, such as the  HTTP_400_BAD_REQUEST  responses that are returned by the generic views when serializer validation fails.",
            "title": "Custom exception handling"
        },
        {
            "location": "/api-guide/exceptions/#api-reference",
            "text": "",
            "title": "API Reference"
        },
        {
            "location": "/api-guide/exceptions/#apiexception",
            "text": "Signature:   APIException()  The  base class  for all exceptions raised inside an  APIView  class or  @api_view .  To provide a custom exception, subclass  APIException  and set the  .status_code ,  .default_detail , and  default_code  attributes on the class.  For example, if your API relies on a third party service that may sometimes be unreachable, you might want to implement an exception for the \"503 Service Unavailable\" HTTP response code.  You could do this like so:  from rest_framework.exceptions import APIException\n\nclass ServiceUnavailable(APIException):\n    status_code = 503\n    default_detail = 'Service temporarily unavailable, try again later.'\n    default_code = 'service_unavailable'",
            "title": "APIException"
        },
        {
            "location": "/api-guide/exceptions/#inspecting-api-exceptions",
            "text": "There are a number of different properties available for inspecting the status\nof an API exception. You can use these to build custom exception handling\nfor your project.  The available attributes and methods are:   .detail  - Return the textual description of the error.  .get_codes()  - Return the code identifier of the error.  .get_full_details()  - Return both the textual description and the code identifier.   In most cases the error detail will be a simple item:  >>> print(exc.detail)\nYou do not have permission to perform this action.\n>>> print(exc.get_codes())\npermission_denied\n>>> print(exc.get_full_details())\n{'message':'You do not have permission to perform this action.','code':'permission_denied'}  In the case of validation errors the error detail will be either a list or\ndictionary of items:  >>> print(exc.detail)\n{\"name\":\"This field is required.\",\"age\":\"A valid integer is required.\"}\n>>> print(exc.get_codes())\n{\"name\":\"required\",\"age\":\"invalid\"}\n>>> print(exc.get_full_details())\n{\"name\":{\"message\":\"This field is required.\",\"code\":\"required\"},\"age\":{\"message\":\"A valid integer is required.\",\"code\":\"invalid\"}}",
            "title": "Inspecting API exceptions"
        },
        {
            "location": "/api-guide/exceptions/#parseerror",
            "text": "Signature:   ParseError(detail=None, code=None)  Raised if the request contains malformed data when accessing  request.data .  By default this exception results in a response with the HTTP status code \"400 Bad Request\".",
            "title": "ParseError"
        },
        {
            "location": "/api-guide/exceptions/#authenticationfailed",
            "text": "Signature:   AuthenticationFailed(detail=None, code=None)  Raised when an incoming request includes incorrect authentication.  By default this exception results in a response with the HTTP status code \"401 Unauthenticated\", but it may also result in a \"403 Forbidden\" response, depending on the authentication scheme in use.  See the  authentication documentation  for more details.",
            "title": "AuthenticationFailed"
        },
        {
            "location": "/api-guide/exceptions/#notauthenticated",
            "text": "Signature:   NotAuthenticated(detail=None, code=None)  Raised when an unauthenticated request fails the permission checks.  By default this exception results in a response with the HTTP status code \"401 Unauthenticated\", but it may also result in a \"403 Forbidden\" response, depending on the authentication scheme in use.  See the  authentication documentation  for more details.",
            "title": "NotAuthenticated"
        },
        {
            "location": "/api-guide/exceptions/#permissiondenied",
            "text": "Signature:   PermissionDenied(detail=None, code=None)  Raised when an authenticated request fails the permission checks.  By default this exception results in a response with the HTTP status code \"403 Forbidden\".",
            "title": "PermissionDenied"
        },
        {
            "location": "/api-guide/exceptions/#notfound",
            "text": "Signature:   NotFound(detail=None, code=None)  Raised when a resource does not exists at the given URL. This exception is equivalent to the standard  Http404  Django exception.  By default this exception results in a response with the HTTP status code \"404 Not Found\".",
            "title": "NotFound"
        },
        {
            "location": "/api-guide/exceptions/#methodnotallowed",
            "text": "Signature:   MethodNotAllowed(method, detail=None, code=None)  Raised when an incoming request occurs that does not map to a handler method on the view.  By default this exception results in a response with the HTTP status code \"405 Method Not Allowed\".",
            "title": "MethodNotAllowed"
        },
        {
            "location": "/api-guide/exceptions/#notacceptable",
            "text": "Signature:   NotAcceptable(detail=None, code=None)  Raised when an incoming request occurs with an  Accept  header that cannot be satisfied by any of the available renderers.  By default this exception results in a response with the HTTP status code \"406 Not Acceptable\".",
            "title": "NotAcceptable"
        },
        {
            "location": "/api-guide/exceptions/#unsupportedmediatype",
            "text": "Signature:   UnsupportedMediaType(media_type, detail=None, code=None)  Raised if there are no parsers that can handle the content type of the request data when accessing  request.data .  By default this exception results in a response with the HTTP status code \"415 Unsupported Media Type\".",
            "title": "UnsupportedMediaType"
        },
        {
            "location": "/api-guide/exceptions/#throttled",
            "text": "Signature:   Throttled(wait=None, detail=None, code=None)  Raised when an incoming request fails the throttling checks.  By default this exception results in a response with the HTTP status code \"429 Too Many Requests\".",
            "title": "Throttled"
        },
        {
            "location": "/api-guide/exceptions/#validationerror",
            "text": "Signature:   ValidationError(detail, code=None)  The  ValidationError  exception is slightly different from the other  APIException  classes:   The  detail  argument is mandatory, not optional.  The  detail  argument may be a list or dictionary of error details, and may also be a nested data structure.  By convention you should import the serializers module and use a fully qualified  ValidationError  style, in order to differentiate it from Django's built-in validation error. For example.  raise serializers.ValidationError('This field must be an integer value.')   The  ValidationError  class should be used for serializer and field validation, and by validator classes. It is also raised when calling  serializer.is_valid  with the  raise_exception  keyword argument:  serializer.is_valid(raise_exception=True)  The generic views use the  raise_exception=True  flag, which means that you can override the style of validation error responses globally in your API. To do so, use a custom exception handler, as described above.  By default this exception results in a response with the HTTP status code \"400 Bad Request\".",
            "title": "ValidationError"
        },
        {
            "location": "/api-guide/status-codes/",
            "text": "Status Codes\n\n\n\n\n418 I'm a teapot - Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\".  The resulting entity body MAY be short and stout.\n\n\n\u2014 \nRFC 2324\n, Hyper Text Coffee Pot Control Protocol\n\n\n\n\nUsing bare status codes in your responses isn't recommended.  REST framework includes a set of named constants that you can use to make more code more obvious and readable.\n\n\nfrom rest_framework import status\nfrom rest_framework.response import Response\n\ndef empty_view(self):\n    content = {'please move along': 'nothing to see here'}\n    return Response(content, status=status.HTTP_404_NOT_FOUND)\n\n\n\nThe full set of HTTP status codes included in the \nstatus\n module is listed below.\n\n\nThe module also includes a set of helper functions for testing if a status code is in a given range.\n\n\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\n\nclass ExampleTestCase(APITestCase):\n    def test_url_root(self):\n        url = reverse('index')\n        response = self.client.get(url)\n        self.assertTrue(status.is_success(response.status_code))\n\n\n\nFor more information on proper usage of HTTP status codes see \nRFC 2616\n\nand \nRFC 6585\n.\n\n\nInformational - 1xx\n\n\nThis class of status code indicates a provisional response.  There are no 1xx status codes used in REST framework by default.\n\n\nHTTP_100_CONTINUE\nHTTP_101_SWITCHING_PROTOCOLS\n\n\n\nSuccessful - 2xx\n\n\nThis class of status code indicates that the client's request was successfully received, understood, and accepted.\n\n\nHTTP_200_OK\nHTTP_201_CREATED\nHTTP_202_ACCEPTED\nHTTP_203_NON_AUTHORITATIVE_INFORMATION\nHTTP_204_NO_CONTENT\nHTTP_205_RESET_CONTENT\nHTTP_206_PARTIAL_CONTENT\nHTTP_207_MULTI_STATUS\n\n\n\nRedirection - 3xx\n\n\nThis class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request.\n\n\nHTTP_300_MULTIPLE_CHOICES\nHTTP_301_MOVED_PERMANENTLY\nHTTP_302_FOUND\nHTTP_303_SEE_OTHER\nHTTP_304_NOT_MODIFIED\nHTTP_305_USE_PROXY\nHTTP_306_RESERVED\nHTTP_307_TEMPORARY_REDIRECT\n\n\n\nClient Error - 4xx\n\n\nThe 4xx class of status code is intended for cases in which the client seems to have erred.  Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition.\n\n\nHTTP_400_BAD_REQUEST\nHTTP_401_UNAUTHORIZED\nHTTP_402_PAYMENT_REQUIRED\nHTTP_403_FORBIDDEN\nHTTP_404_NOT_FOUND\nHTTP_405_METHOD_NOT_ALLOWED\nHTTP_406_NOT_ACCEPTABLE\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED\nHTTP_408_REQUEST_TIMEOUT\nHTTP_409_CONFLICT\nHTTP_410_GONE\nHTTP_411_LENGTH_REQUIRED\nHTTP_412_PRECONDITION_FAILED\nHTTP_413_REQUEST_ENTITY_TOO_LARGE\nHTTP_414_REQUEST_URI_TOO_LONG\nHTTP_415_UNSUPPORTED_MEDIA_TYPE\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE\nHTTP_417_EXPECTATION_FAILED\nHTTP_422_UNPROCESSABLE_ENTITY\nHTTP_423_LOCKED\nHTTP_424_FAILED_DEPENDENCY\nHTTP_428_PRECONDITION_REQUIRED\nHTTP_429_TOO_MANY_REQUESTS\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS\n\n\n\nServer Error - 5xx\n\n\nResponse status codes beginning with the digit \"5\" indicate cases in which the server is aware that it has erred or is incapable of performing the request.  Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition.\n\n\nHTTP_500_INTERNAL_SERVER_ERROR\nHTTP_501_NOT_IMPLEMENTED\nHTTP_502_BAD_GATEWAY\nHTTP_503_SERVICE_UNAVAILABLE\nHTTP_504_GATEWAY_TIMEOUT\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED\nHTTP_507_INSUFFICIENT_STORAGE\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED\n\n\n\nHelper functions\n\n\nThe following helper functions are available for identifying the category of the response code.\n\n\nis_informational()  # 1xx\nis_success()        #\u00a02xx\nis_redirect()       # 3xx\nis_client_error()   # 4xx\nis_server_error()   # 5xx",
            "title": "Status codes"
        },
        {
            "location": "/api-guide/status-codes/#status-codes",
            "text": "418 I'm a teapot - Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\".  The resulting entity body MAY be short and stout.  \u2014  RFC 2324 , Hyper Text Coffee Pot Control Protocol   Using bare status codes in your responses isn't recommended.  REST framework includes a set of named constants that you can use to make more code more obvious and readable.  from rest_framework import status\nfrom rest_framework.response import Response\n\ndef empty_view(self):\n    content = {'please move along': 'nothing to see here'}\n    return Response(content, status=status.HTTP_404_NOT_FOUND)  The full set of HTTP status codes included in the  status  module is listed below.  The module also includes a set of helper functions for testing if a status code is in a given range.  from rest_framework import status\nfrom rest_framework.test import APITestCase\n\nclass ExampleTestCase(APITestCase):\n    def test_url_root(self):\n        url = reverse('index')\n        response = self.client.get(url)\n        self.assertTrue(status.is_success(response.status_code))  For more information on proper usage of HTTP status codes see  RFC 2616 \nand  RFC 6585 .",
            "title": "Status Codes"
        },
        {
            "location": "/api-guide/status-codes/#informational-1xx",
            "text": "This class of status code indicates a provisional response.  There are no 1xx status codes used in REST framework by default.  HTTP_100_CONTINUE\nHTTP_101_SWITCHING_PROTOCOLS",
            "title": "Informational - 1xx"
        },
        {
            "location": "/api-guide/status-codes/#successful-2xx",
            "text": "This class of status code indicates that the client's request was successfully received, understood, and accepted.  HTTP_200_OK\nHTTP_201_CREATED\nHTTP_202_ACCEPTED\nHTTP_203_NON_AUTHORITATIVE_INFORMATION\nHTTP_204_NO_CONTENT\nHTTP_205_RESET_CONTENT\nHTTP_206_PARTIAL_CONTENT\nHTTP_207_MULTI_STATUS",
            "title": "Successful - 2xx"
        },
        {
            "location": "/api-guide/status-codes/#redirection-3xx",
            "text": "This class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request.  HTTP_300_MULTIPLE_CHOICES\nHTTP_301_MOVED_PERMANENTLY\nHTTP_302_FOUND\nHTTP_303_SEE_OTHER\nHTTP_304_NOT_MODIFIED\nHTTP_305_USE_PROXY\nHTTP_306_RESERVED\nHTTP_307_TEMPORARY_REDIRECT",
            "title": "Redirection - 3xx"
        },
        {
            "location": "/api-guide/status-codes/#client-error-4xx",
            "text": "The 4xx class of status code is intended for cases in which the client seems to have erred.  Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition.  HTTP_400_BAD_REQUEST\nHTTP_401_UNAUTHORIZED\nHTTP_402_PAYMENT_REQUIRED\nHTTP_403_FORBIDDEN\nHTTP_404_NOT_FOUND\nHTTP_405_METHOD_NOT_ALLOWED\nHTTP_406_NOT_ACCEPTABLE\nHTTP_407_PROXY_AUTHENTICATION_REQUIRED\nHTTP_408_REQUEST_TIMEOUT\nHTTP_409_CONFLICT\nHTTP_410_GONE\nHTTP_411_LENGTH_REQUIRED\nHTTP_412_PRECONDITION_FAILED\nHTTP_413_REQUEST_ENTITY_TOO_LARGE\nHTTP_414_REQUEST_URI_TOO_LONG\nHTTP_415_UNSUPPORTED_MEDIA_TYPE\nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE\nHTTP_417_EXPECTATION_FAILED\nHTTP_422_UNPROCESSABLE_ENTITY\nHTTP_423_LOCKED\nHTTP_424_FAILED_DEPENDENCY\nHTTP_428_PRECONDITION_REQUIRED\nHTTP_429_TOO_MANY_REQUESTS\nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE\nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS",
            "title": "Client Error - 4xx"
        },
        {
            "location": "/api-guide/status-codes/#server-error-5xx",
            "text": "Response status codes beginning with the digit \"5\" indicate cases in which the server is aware that it has erred or is incapable of performing the request.  Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition.  HTTP_500_INTERNAL_SERVER_ERROR\nHTTP_501_NOT_IMPLEMENTED\nHTTP_502_BAD_GATEWAY\nHTTP_503_SERVICE_UNAVAILABLE\nHTTP_504_GATEWAY_TIMEOUT\nHTTP_505_HTTP_VERSION_NOT_SUPPORTED\nHTTP_507_INSUFFICIENT_STORAGE\nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED",
            "title": "Server Error - 5xx"
        },
        {
            "location": "/api-guide/status-codes/#helper-functions",
            "text": "The following helper functions are available for identifying the category of the response code.  is_informational()  # 1xx\nis_success()        #\u00a02xx\nis_redirect()       # 3xx\nis_client_error()   # 4xx\nis_server_error()   # 5xx",
            "title": "Helper functions"
        },
        {
            "location": "/api-guide/testing/",
            "text": "Testing\n\n\n\n\nCode without tests is broken as designed.\n\n\n\u2014 \nJacob Kaplan-Moss\n\n\n\n\nREST framework includes a few helper classes that extend Django's existing test framework, and improve support for making API requests.\n\n\nAPIRequestFactory\n\n\nExtends \nDjango's existing \nRequestFactory\n class\n.\n\n\nCreating test requests\n\n\nThe \nAPIRequestFactory\n class supports an almost identical API to Django's standard \nRequestFactory\n class.  This means that the standard \n.get()\n, \n.post()\n, \n.put()\n, \n.patch()\n, \n.delete()\n, \n.head()\n and \n.options()\n methods are all available.\n\n\nfrom rest_framework.test import APIRequestFactory\n\n# Using the standard RequestFactory API to create a form POST request\nfactory = APIRequestFactory()\nrequest = factory.post('/notes/', {'title': 'new idea'})\n\n\n\nUsing the \nformat\n argument\n\n\nMethods which create a request body, such as \npost\n, \nput\n and \npatch\n, include a \nformat\n argument, which make it easy to generate requests using a content type other than multipart form data.  For example:\n\n\n# Create a JSON POST request\nfactory = APIRequestFactory()\nrequest = factory.post('/notes/', {'title': 'new idea'}, format='json')\n\n\n\nBy default the available formats are \n'multipart'\n and \n'json'\n.  For compatibility with Django's existing \nRequestFactory\n the default format is \n'multipart'\n.\n\n\nTo support a wider set of request formats, or change the default format, \nsee the configuration section\n.\n\n\nExplicitly encoding the request body\n\n\nIf you need to explicitly encode the request body, you can do so by setting the \ncontent_type\n flag.  For example:\n\n\nrequest = factory.post('/notes/', json.dumps({'title': 'new idea'}), content_type='application/json')\n\n\n\nPUT and PATCH with form data\n\n\nOne difference worth noting between Django's \nRequestFactory\n and REST framework's \nAPIRequestFactory\n is that multipart form data will be encoded for methods other than just \n.post()\n.\n\n\nFor example, using \nAPIRequestFactory\n, you can make a form PUT request like so:\n\n\nfactory = APIRequestFactory()\nrequest = factory.put('/notes/547/', {'title': 'remember to email dave'})\n\n\n\nUsing Django's \nRequestFactory\n, you'd need to explicitly encode the data yourself:\n\n\nfrom django.test.client import encode_multipart, RequestFactory\n\nfactory = RequestFactory()\ndata = {'title': 'remember to email dave'}\ncontent = encode_multipart('BoUnDaRyStRiNg', data)\ncontent_type = 'multipart/form-data; boundary=BoUnDaRyStRiNg'\nrequest = factory.put('/notes/547/', content, content_type=content_type)\n\n\n\nForcing authentication\n\n\nWhen testing views directly using a request factory, it's often convenient to be able to directly authenticate the request, rather than having to construct the correct authentication credentials.\n\n\nTo forcibly authenticate a request, use the \nforce_authenticate()\n method.\n\n\nfrom rest_framework.test import force_authenticate\n\nfactory = APIRequestFactory()\nuser = User.objects.get(username='olivia')\nview = AccountDetail.as_view()\n\n# Make an authenticated request to the view...\nrequest = factory.get('/accounts/django-superstars/')\nforce_authenticate(request, user=user)\nresponse = view(request)\n\n\n\nThe signature for the method is \nforce_authenticate(request, user=None, token=None)\n.  When making the call, either or both of the user and token may be set.\n\n\nFor example, when forcibly authenticating using a token, you might do something like the following:\n\n\nuser = User.objects.get(username='olivia')\nrequest = factory.get('/accounts/django-superstars/')\nforce_authenticate(request, user=user, token=user.token)\n\n\n\n\n\nNote\n: When using \nAPIRequestFactory\n, the object that is returned is Django's standard \nHttpRequest\n, and not REST framework's \nRequest\n object, which is only generated once the view is called.\n\n\nThis means that setting attributes directly on the request object may not always have the effect you expect.  For example, setting \n.token\n directly will have no effect, and setting \n.user\n directly will only work if session authentication is being used.\n\n\n# Request will only authenticate if `SessionAuthentication` is in use.\nrequest = factory.get('/accounts/django-superstars/')\nrequest.user = user\nresponse = view(request)\n\n\n\n\n\nForcing CSRF validation\n\n\nBy default, requests created with \nAPIRequestFactory\n will not have CSRF validation applied when passed to a REST framework view.  If you need to explicitly turn CSRF validation on, you can do so by setting the \nenforce_csrf_checks\n flag when instantiating the factory.\n\n\nfactory = APIRequestFactory(enforce_csrf_checks=True)\n\n\n\n\n\nNote\n: It's worth noting that Django's standard \nRequestFactory\n doesn't need to include this option, because when using regular Django the CSRF validation takes place in middleware, which is not run when testing views directly.  When using REST framework, CSRF validation takes place inside the view, so the request factory needs to disable view-level CSRF checks.\n\n\n\n\nAPIClient\n\n\nExtends \nDjango's existing \nClient\n class\n.\n\n\nMaking requests\n\n\nThe \nAPIClient\n class supports the same request interface as Django's standard \nClient\n class.  This means the that standard \n.get()\n, \n.post()\n, \n.put()\n, \n.patch()\n, \n.delete()\n, \n.head()\n and \n.options()\n methods are all available.  For example:\n\n\nfrom rest_framework.test import APIClient\n\nclient = APIClient()\nclient.post('/notes/', {'title': 'new idea'}, format='json')\n\n\n\nTo support a wider set of request formats, or change the default format, \nsee the configuration section\n.\n\n\nAuthenticating\n\n\n.login(**kwargs)\n\n\nThe \nlogin\n method functions exactly as it does with Django's regular \nClient\n class.  This allows you to authenticate requests against any views which include \nSessionAuthentication\n.\n\n\n# Make all requests in the context of a logged in session.\nclient = APIClient()\nclient.login(username='lauren', password='secret')\n\n\n\nTo logout, call the \nlogout\n method as usual.\n\n\n# Log out\nclient.logout()\n\n\n\nThe \nlogin\n method is appropriate for testing APIs that use session authentication, for example web sites which include AJAX interaction with the API.\n\n\n.credentials(**kwargs)\n\n\nThe \ncredentials\n method can be used to set headers that will then be included on all subsequent requests by the test client.\n\n\nfrom rest_framework.authtoken.models import Token\nfrom rest_framework.test import APIClient\n\n# Include an appropriate `Authorization:` header on all requests.\ntoken = Token.objects.get(user__username='lauren')\nclient = APIClient()\nclient.credentials(HTTP_AUTHORIZATION='Token ' + token.key)\n\n\n\nNote that calling \ncredentials\n a second time overwrites any existing credentials.  You can unset any existing credentials by calling the method with no arguments.\n\n\n# Stop including any credentials\nclient.credentials()\n\n\n\nThe \ncredentials\n method is appropriate for testing APIs that require authentication headers, such as basic authentication, OAuth1a and OAuth2 authentication, and simple token authentication schemes.\n\n\n.force_authenticate(user=None, token=None)\n\n\nSometimes you may want to bypass authentication, and simple force all requests by the test client to be automatically treated as authenticated.\n\n\nThis can be a useful shortcut if you're testing the API but don't want to have to construct valid authentication credentials in order to make test requests.\n\n\nuser = User.objects.get(username='lauren')\nclient = APIClient()\nclient.force_authenticate(user=user)\n\n\n\nTo unauthenticate subsequent requests, call \nforce_authenticate\n setting the user and/or token to \nNone\n.\n\n\nclient.force_authenticate(user=None)\n\n\n\nCSRF validation\n\n\nBy default CSRF validation is not applied when using \nAPIClient\n.  If you need to explicitly enable CSRF validation, you can do so by setting the \nenforce_csrf_checks\n flag when instantiating the client.\n\n\nclient = APIClient(enforce_csrf_checks=True)\n\n\n\nAs usual CSRF validation will only apply to any session authenticated views.  This means CSRF validation will only occur if the client has been logged in by calling \nlogin()\n.\n\n\n\n\nRequestsClient\n\n\nREST framework also includes a client for interacting with your application\nusing the popular Python library, \nrequests\n. This may be useful if:\n\n\n\n\nYou are expecting to interface with the API primarily from another Python service,\nand want to test the service at the same level as the client will see.\n\n\nYou want to write tests in such a way that they can also be run against a staging or\nlive environment. (See \"Live tests\" below.)\n\n\n\n\nThis exposes exactly the same interface as if you were using a requests session\ndirectly.\n\n\nclient = RequestsClient()\nresponse = client.get('http://testserver/users/')\nassert response.status_code == 200\n\n\n\nNote that the requests client requires you to pass fully qualified URLs.\n\n\nRequestsClient\n and working with the database\n\n\nThe \nRequestsClient\n class is useful if you want to write tests that solely interact with the service interface. This is a little stricter than using the standard Django test client, as it means that all interactions should be via the API.\n\n\nIf you're using \nRequestsClient\n you'll want to ensure that test setup, and results assertions are performed as regular API calls, rather than interacting with the database models directly. For example, rather than checking that \nCustomer.objects.count() == 3\n you would list the customers endpoint, and ensure that it contains three records.\n\n\nHeaders & Authentication\n\n\nCustom headers and authentication credentials can be provided in the same way\nas \nwhen using a standard \nrequests.Session\n instance\n.\n\n\nfrom requests.auth import HTTPBasicAuth\n\nclient.auth = HTTPBasicAuth('user', 'pass')\nclient.headers.update({'x-test': 'true'})\n\n\n\nCSRF\n\n\nIf you're using \nSessionAuthentication\n then you'll need to include a CSRF token\nfor any \nPOST\n, \nPUT\n, \nPATCH\n or \nDELETE\n requests.\n\n\nYou can do so by following the same flow that a JavaScript based client would use.\nFirst make a \nGET\n request in order to obtain a CRSF token, then present that\ntoken in the following request.\n\n\nFor example...\n\n\nclient = RequestsClient()\n\n# Obtain a CSRF token.\nresponse = client.get('/homepage/')\nassert response.status_code == 200\ncsrftoken = response.cookies['csrftoken']\n\n# Interact with the API.\nresponse = client.post('/organisations/', json={\n    'name': 'MegaCorp',\n    'status': 'active'\n}, headers={'X-CSRFToken': csrftoken})\nassert response.status_code == 200\n\n\n\nLive tests\n\n\nWith careful usage both the \nRequestsClient\n and the \nCoreAPIClient\n provide\nthe ability to write test cases that can run either in development, or be run\ndirectly against your staging server or production environment.\n\n\nUsing this style to create basic tests of a few core piece of functionality is\na powerful way to validate your live service. Doing so may require some careful\nattention to setup and teardown to ensure that the tests run in a way that they\ndo not directly affect customer data.\n\n\n\n\nCoreAPIClient\n\n\nThe CoreAPIClient allows you to interact with your API using the Python\n\ncoreapi\n client library.\n\n\n# Fetch the API schema\nclient = CoreAPIClient()\nschema = client.get('http://testserver/schema/')\n\n# Create a new organisation\nparams = {'name': 'MegaCorp', 'status': 'active'}\nclient.action(schema, ['organisations', 'create'], params)\n\n# Ensure that the organisation exists in the listing\ndata = client.action(schema, ['organisations', 'list'])\nassert(len(data) == 1)\nassert(data == [{'name': 'MegaCorp', 'status': 'active'}])\n\n\n\nHeaders & Authentication\n\n\nCustom headers and authentication may be used with \nCoreAPIClient\n in a\nsimilar way as with \nRequestsClient\n.\n\n\nfrom requests.auth import HTTPBasicAuth\n\nclient = CoreAPIClient()\nclient.session.auth = HTTPBasicAuth('user', 'pass')\nclient.session.headers.update({'x-test': 'true'})\n\n\n\n\n\nTest cases\n\n\nREST framework includes the following test case classes, that mirror the existing Django test case classes, but use \nAPIClient\n instead of Django's default \nClient\n.\n\n\n\n\nAPISimpleTestCase\n\n\nAPITransactionTestCase\n\n\nAPITestCase\n\n\nAPILiveServerTestCase\n\n\n\n\nExample\n\n\nYou can use any of REST framework's test case classes as you would for the regular Django test case classes.  The \nself.client\n attribute will be an \nAPIClient\n instance.\n\n\nfrom django.urls import reverse\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\nfrom myproject.apps.core.models import Account\n\nclass AccountTests(APITestCase):\n    def test_create_account(self):\n        \"\"\"\n        Ensure we can create a new account object.\n        \"\"\"\n        url = reverse('account-list')\n        data = {'name': 'DabApps'}\n        response = self.client.post(url, data, format='json')\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(Account.objects.count(), 1)\n        self.assertEqual(Account.objects.get().name, 'DabApps')\n\n\n\n\n\nTesting responses\n\n\nChecking the response data\n\n\nWhen checking the validity of test responses it's often more convenient to inspect the data that the response was created with, rather than inspecting the fully rendered response.\n\n\nFor example, it's easier to inspect \nresponse.data\n:\n\n\nresponse = self.client.get('/users/4/')\nself.assertEqual(response.data, {'id': 4, 'username': 'lauren'})\n\n\n\nInstead of inspecting the result of parsing \nresponse.content\n:\n\n\nresponse = self.client.get('/users/4/')\nself.assertEqual(json.loads(response.content), {'id': 4, 'username': 'lauren'})\n\n\n\nRendering responses\n\n\nIf you're testing views directly using \nAPIRequestFactory\n, the responses that are returned will not yet be rendered, as rendering of template responses is performed by Django's internal request-response cycle.  In order to access \nresponse.content\n, you'll first need to render the response.\n\n\nview = UserDetail.as_view()\nrequest = factory.get('/users/4')\nresponse = view(request, pk='4')\nresponse.render()  # Cannot access `response.content` without this.\nself.assertEqual(response.content, '{\"username\": \"lauren\", \"id\": 4}')\n\n\n\n\n\nConfiguration\n\n\nSetting the default format\n\n\nThe default format used to make test requests may be set using the \nTEST_REQUEST_DEFAULT_FORMAT\n setting key.  For example, to always use JSON for test requests by default instead of standard multipart form requests, set the following in your \nsettings.py\n file:\n\n\nREST_FRAMEWORK = {\n    ...\n    'TEST_REQUEST_DEFAULT_FORMAT': 'json'\n}\n\n\n\nSetting the available formats\n\n\nIf you need to test requests using something other than multipart or json requests, you can do so by setting the \nTEST_REQUEST_RENDERER_CLASSES\n setting.\n\n\nFor example, to add support for using \nformat='html'\n in test requests, you might have something like this in your \nsettings.py\n file.\n\n\nREST_FRAMEWORK = {\n    ...\n    'TEST_REQUEST_RENDERER_CLASSES': (\n        'rest_framework.renderers.MultiPartRenderer',\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.TemplateHTMLRenderer'\n    )\n}",
            "title": "Testing"
        },
        {
            "location": "/api-guide/testing/#testing",
            "text": "Code without tests is broken as designed.  \u2014  Jacob Kaplan-Moss   REST framework includes a few helper classes that extend Django's existing test framework, and improve support for making API requests.",
            "title": "Testing"
        },
        {
            "location": "/api-guide/testing/#apirequestfactory",
            "text": "Extends  Django's existing  RequestFactory  class .",
            "title": "APIRequestFactory"
        },
        {
            "location": "/api-guide/testing/#creating-test-requests",
            "text": "The  APIRequestFactory  class supports an almost identical API to Django's standard  RequestFactory  class.  This means that the standard  .get() ,  .post() ,  .put() ,  .patch() ,  .delete() ,  .head()  and  .options()  methods are all available.  from rest_framework.test import APIRequestFactory\n\n# Using the standard RequestFactory API to create a form POST request\nfactory = APIRequestFactory()\nrequest = factory.post('/notes/', {'title': 'new idea'})",
            "title": "Creating test requests"
        },
        {
            "location": "/api-guide/testing/#using-the-format-argument",
            "text": "Methods which create a request body, such as  post ,  put  and  patch , include a  format  argument, which make it easy to generate requests using a content type other than multipart form data.  For example:  # Create a JSON POST request\nfactory = APIRequestFactory()\nrequest = factory.post('/notes/', {'title': 'new idea'}, format='json')  By default the available formats are  'multipart'  and  'json' .  For compatibility with Django's existing  RequestFactory  the default format is  'multipart' .  To support a wider set of request formats, or change the default format,  see the configuration section .",
            "title": "Using the format argument"
        },
        {
            "location": "/api-guide/testing/#explicitly-encoding-the-request-body",
            "text": "If you need to explicitly encode the request body, you can do so by setting the  content_type  flag.  For example:  request = factory.post('/notes/', json.dumps({'title': 'new idea'}), content_type='application/json')",
            "title": "Explicitly encoding the request body"
        },
        {
            "location": "/api-guide/testing/#put-and-patch-with-form-data",
            "text": "One difference worth noting between Django's  RequestFactory  and REST framework's  APIRequestFactory  is that multipart form data will be encoded for methods other than just  .post() .  For example, using  APIRequestFactory , you can make a form PUT request like so:  factory = APIRequestFactory()\nrequest = factory.put('/notes/547/', {'title': 'remember to email dave'})  Using Django's  RequestFactory , you'd need to explicitly encode the data yourself:  from django.test.client import encode_multipart, RequestFactory\n\nfactory = RequestFactory()\ndata = {'title': 'remember to email dave'}\ncontent = encode_multipart('BoUnDaRyStRiNg', data)\ncontent_type = 'multipart/form-data; boundary=BoUnDaRyStRiNg'\nrequest = factory.put('/notes/547/', content, content_type=content_type)",
            "title": "PUT and PATCH with form data"
        },
        {
            "location": "/api-guide/testing/#forcing-authentication",
            "text": "When testing views directly using a request factory, it's often convenient to be able to directly authenticate the request, rather than having to construct the correct authentication credentials.  To forcibly authenticate a request, use the  force_authenticate()  method.  from rest_framework.test import force_authenticate\n\nfactory = APIRequestFactory()\nuser = User.objects.get(username='olivia')\nview = AccountDetail.as_view()\n\n# Make an authenticated request to the view...\nrequest = factory.get('/accounts/django-superstars/')\nforce_authenticate(request, user=user)\nresponse = view(request)  The signature for the method is  force_authenticate(request, user=None, token=None) .  When making the call, either or both of the user and token may be set.  For example, when forcibly authenticating using a token, you might do something like the following:  user = User.objects.get(username='olivia')\nrequest = factory.get('/accounts/django-superstars/')\nforce_authenticate(request, user=user, token=user.token)   Note : When using  APIRequestFactory , the object that is returned is Django's standard  HttpRequest , and not REST framework's  Request  object, which is only generated once the view is called.  This means that setting attributes directly on the request object may not always have the effect you expect.  For example, setting  .token  directly will have no effect, and setting  .user  directly will only work if session authentication is being used.  # Request will only authenticate if `SessionAuthentication` is in use.\nrequest = factory.get('/accounts/django-superstars/')\nrequest.user = user\nresponse = view(request)",
            "title": "Forcing authentication"
        },
        {
            "location": "/api-guide/testing/#forcing-csrf-validation",
            "text": "By default, requests created with  APIRequestFactory  will not have CSRF validation applied when passed to a REST framework view.  If you need to explicitly turn CSRF validation on, you can do so by setting the  enforce_csrf_checks  flag when instantiating the factory.  factory = APIRequestFactory(enforce_csrf_checks=True)   Note : It's worth noting that Django's standard  RequestFactory  doesn't need to include this option, because when using regular Django the CSRF validation takes place in middleware, which is not run when testing views directly.  When using REST framework, CSRF validation takes place inside the view, so the request factory needs to disable view-level CSRF checks.",
            "title": "Forcing CSRF validation"
        },
        {
            "location": "/api-guide/testing/#apiclient",
            "text": "Extends  Django's existing  Client  class .",
            "title": "APIClient"
        },
        {
            "location": "/api-guide/testing/#making-requests",
            "text": "The  APIClient  class supports the same request interface as Django's standard  Client  class.  This means the that standard  .get() ,  .post() ,  .put() ,  .patch() ,  .delete() ,  .head()  and  .options()  methods are all available.  For example:  from rest_framework.test import APIClient\n\nclient = APIClient()\nclient.post('/notes/', {'title': 'new idea'}, format='json')  To support a wider set of request formats, or change the default format,  see the configuration section .",
            "title": "Making requests"
        },
        {
            "location": "/api-guide/testing/#authenticating",
            "text": "",
            "title": "Authenticating"
        },
        {
            "location": "/api-guide/testing/#loginkwargs",
            "text": "The  login  method functions exactly as it does with Django's regular  Client  class.  This allows you to authenticate requests against any views which include  SessionAuthentication .  # Make all requests in the context of a logged in session.\nclient = APIClient()\nclient.login(username='lauren', password='secret')  To logout, call the  logout  method as usual.  # Log out\nclient.logout()  The  login  method is appropriate for testing APIs that use session authentication, for example web sites which include AJAX interaction with the API.",
            "title": ".login(**kwargs)"
        },
        {
            "location": "/api-guide/testing/#credentialskwargs",
            "text": "The  credentials  method can be used to set headers that will then be included on all subsequent requests by the test client.  from rest_framework.authtoken.models import Token\nfrom rest_framework.test import APIClient\n\n# Include an appropriate `Authorization:` header on all requests.\ntoken = Token.objects.get(user__username='lauren')\nclient = APIClient()\nclient.credentials(HTTP_AUTHORIZATION='Token ' + token.key)  Note that calling  credentials  a second time overwrites any existing credentials.  You can unset any existing credentials by calling the method with no arguments.  # Stop including any credentials\nclient.credentials()  The  credentials  method is appropriate for testing APIs that require authentication headers, such as basic authentication, OAuth1a and OAuth2 authentication, and simple token authentication schemes.",
            "title": ".credentials(**kwargs)"
        },
        {
            "location": "/api-guide/testing/#force_authenticateusernone-tokennone",
            "text": "Sometimes you may want to bypass authentication, and simple force all requests by the test client to be automatically treated as authenticated.  This can be a useful shortcut if you're testing the API but don't want to have to construct valid authentication credentials in order to make test requests.  user = User.objects.get(username='lauren')\nclient = APIClient()\nclient.force_authenticate(user=user)  To unauthenticate subsequent requests, call  force_authenticate  setting the user and/or token to  None .  client.force_authenticate(user=None)",
            "title": ".force_authenticate(user=None, token=None)"
        },
        {
            "location": "/api-guide/testing/#csrf-validation",
            "text": "By default CSRF validation is not applied when using  APIClient .  If you need to explicitly enable CSRF validation, you can do so by setting the  enforce_csrf_checks  flag when instantiating the client.  client = APIClient(enforce_csrf_checks=True)  As usual CSRF validation will only apply to any session authenticated views.  This means CSRF validation will only occur if the client has been logged in by calling  login() .",
            "title": "CSRF validation"
        },
        {
            "location": "/api-guide/testing/#requestsclient",
            "text": "REST framework also includes a client for interacting with your application\nusing the popular Python library,  requests . This may be useful if:   You are expecting to interface with the API primarily from another Python service,\nand want to test the service at the same level as the client will see.  You want to write tests in such a way that they can also be run against a staging or\nlive environment. (See \"Live tests\" below.)   This exposes exactly the same interface as if you were using a requests session\ndirectly.  client = RequestsClient()\nresponse = client.get('http://testserver/users/')\nassert response.status_code == 200  Note that the requests client requires you to pass fully qualified URLs.",
            "title": "RequestsClient"
        },
        {
            "location": "/api-guide/testing/#requestsclient-and-working-with-the-database",
            "text": "The  RequestsClient  class is useful if you want to write tests that solely interact with the service interface. This is a little stricter than using the standard Django test client, as it means that all interactions should be via the API.  If you're using  RequestsClient  you'll want to ensure that test setup, and results assertions are performed as regular API calls, rather than interacting with the database models directly. For example, rather than checking that  Customer.objects.count() == 3  you would list the customers endpoint, and ensure that it contains three records.",
            "title": "RequestsClient and working with the database"
        },
        {
            "location": "/api-guide/testing/#headers-authentication",
            "text": "Custom headers and authentication credentials can be provided in the same way\nas  when using a standard  requests.Session  instance .  from requests.auth import HTTPBasicAuth\n\nclient.auth = HTTPBasicAuth('user', 'pass')\nclient.headers.update({'x-test': 'true'})",
            "title": "Headers &amp; Authentication"
        },
        {
            "location": "/api-guide/testing/#csrf",
            "text": "If you're using  SessionAuthentication  then you'll need to include a CSRF token\nfor any  POST ,  PUT ,  PATCH  or  DELETE  requests.  You can do so by following the same flow that a JavaScript based client would use.\nFirst make a  GET  request in order to obtain a CRSF token, then present that\ntoken in the following request.  For example...  client = RequestsClient()\n\n# Obtain a CSRF token.\nresponse = client.get('/homepage/')\nassert response.status_code == 200\ncsrftoken = response.cookies['csrftoken']\n\n# Interact with the API.\nresponse = client.post('/organisations/', json={\n    'name': 'MegaCorp',\n    'status': 'active'\n}, headers={'X-CSRFToken': csrftoken})\nassert response.status_code == 200",
            "title": "CSRF"
        },
        {
            "location": "/api-guide/testing/#live-tests",
            "text": "With careful usage both the  RequestsClient  and the  CoreAPIClient  provide\nthe ability to write test cases that can run either in development, or be run\ndirectly against your staging server or production environment.  Using this style to create basic tests of a few core piece of functionality is\na powerful way to validate your live service. Doing so may require some careful\nattention to setup and teardown to ensure that the tests run in a way that they\ndo not directly affect customer data.",
            "title": "Live tests"
        },
        {
            "location": "/api-guide/testing/#coreapiclient",
            "text": "The CoreAPIClient allows you to interact with your API using the Python coreapi  client library.  # Fetch the API schema\nclient = CoreAPIClient()\nschema = client.get('http://testserver/schema/')\n\n# Create a new organisation\nparams = {'name': 'MegaCorp', 'status': 'active'}\nclient.action(schema, ['organisations', 'create'], params)\n\n# Ensure that the organisation exists in the listing\ndata = client.action(schema, ['organisations', 'list'])\nassert(len(data) == 1)\nassert(data == [{'name': 'MegaCorp', 'status': 'active'}])",
            "title": "CoreAPIClient"
        },
        {
            "location": "/api-guide/testing/#headers-authentication_1",
            "text": "Custom headers and authentication may be used with  CoreAPIClient  in a\nsimilar way as with  RequestsClient .  from requests.auth import HTTPBasicAuth\n\nclient = CoreAPIClient()\nclient.session.auth = HTTPBasicAuth('user', 'pass')\nclient.session.headers.update({'x-test': 'true'})",
            "title": "Headers &amp; Authentication"
        },
        {
            "location": "/api-guide/testing/#test-cases",
            "text": "REST framework includes the following test case classes, that mirror the existing Django test case classes, but use  APIClient  instead of Django's default  Client .   APISimpleTestCase  APITransactionTestCase  APITestCase  APILiveServerTestCase",
            "title": "Test cases"
        },
        {
            "location": "/api-guide/testing/#example",
            "text": "You can use any of REST framework's test case classes as you would for the regular Django test case classes.  The  self.client  attribute will be an  APIClient  instance.  from django.urls import reverse\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\nfrom myproject.apps.core.models import Account\n\nclass AccountTests(APITestCase):\n    def test_create_account(self):\n        \"\"\"\n        Ensure we can create a new account object.\n        \"\"\"\n        url = reverse('account-list')\n        data = {'name': 'DabApps'}\n        response = self.client.post(url, data, format='json')\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(Account.objects.count(), 1)\n        self.assertEqual(Account.objects.get().name, 'DabApps')",
            "title": "Example"
        },
        {
            "location": "/api-guide/testing/#testing-responses",
            "text": "",
            "title": "Testing responses"
        },
        {
            "location": "/api-guide/testing/#checking-the-response-data",
            "text": "When checking the validity of test responses it's often more convenient to inspect the data that the response was created with, rather than inspecting the fully rendered response.  For example, it's easier to inspect  response.data :  response = self.client.get('/users/4/')\nself.assertEqual(response.data, {'id': 4, 'username': 'lauren'})  Instead of inspecting the result of parsing  response.content :  response = self.client.get('/users/4/')\nself.assertEqual(json.loads(response.content), {'id': 4, 'username': 'lauren'})",
            "title": "Checking the response data"
        },
        {
            "location": "/api-guide/testing/#rendering-responses",
            "text": "If you're testing views directly using  APIRequestFactory , the responses that are returned will not yet be rendered, as rendering of template responses is performed by Django's internal request-response cycle.  In order to access  response.content , you'll first need to render the response.  view = UserDetail.as_view()\nrequest = factory.get('/users/4')\nresponse = view(request, pk='4')\nresponse.render()  # Cannot access `response.content` without this.\nself.assertEqual(response.content, '{\"username\": \"lauren\", \"id\": 4}')",
            "title": "Rendering responses"
        },
        {
            "location": "/api-guide/testing/#configuration",
            "text": "",
            "title": "Configuration"
        },
        {
            "location": "/api-guide/testing/#setting-the-default-format",
            "text": "The default format used to make test requests may be set using the  TEST_REQUEST_DEFAULT_FORMAT  setting key.  For example, to always use JSON for test requests by default instead of standard multipart form requests, set the following in your  settings.py  file:  REST_FRAMEWORK = {\n    ...\n    'TEST_REQUEST_DEFAULT_FORMAT': 'json'\n}",
            "title": "Setting the default format"
        },
        {
            "location": "/api-guide/testing/#setting-the-available-formats",
            "text": "If you need to test requests using something other than multipart or json requests, you can do so by setting the  TEST_REQUEST_RENDERER_CLASSES  setting.  For example, to add support for using  format='html'  in test requests, you might have something like this in your  settings.py  file.  REST_FRAMEWORK = {\n    ...\n    'TEST_REQUEST_RENDERER_CLASSES': (\n        'rest_framework.renderers.MultiPartRenderer',\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.TemplateHTMLRenderer'\n    )\n}",
            "title": "Setting the available formats"
        },
        {
            "location": "/api-guide/settings/",
            "text": "Settings\n\n\n\n\nNamespaces are one honking great idea - let's do more of those!\n\n\n\u2014 \nThe Zen of Python\n\n\n\n\nConfiguration for REST framework is all namespaced inside a single Django setting, named \nREST_FRAMEWORK\n.\n\n\nFor example your project's \nsettings.py\n file might include something like this:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n    ),\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework.parsers.JSONParser',\n    )\n}\n\n\n\nAccessing settings\n\n\nIf you need to access the values of REST framework's API settings in your project,\nyou should use the \napi_settings\n object.  For example.\n\n\nfrom rest_framework.settings import api_settings\n\nprint api_settings.DEFAULT_AUTHENTICATION_CLASSES\n\n\n\nThe \napi_settings\n object will check for any user-defined settings, and otherwise fall back to the default values.  Any setting that uses string import paths to refer to a class will automatically import and return the referenced class, instead of the string literal.\n\n\n\n\nAPI Reference\n\n\nAPI policy settings\n\n\nThe following settings control the basic API policies, and are applied to every \nAPIView\n class-based view, or \n@api_view\n function based view.\n\n\nDEFAULT_RENDERER_CLASSES\n\n\nA list or tuple of renderer classes, that determines the default set of renderers that may be used when returning a \nResponse\n object.\n\n\nDefault:\n\n\n(\n    'rest_framework.renderers.JSONRenderer',\n    'rest_framework.renderers.BrowsableAPIRenderer',\n)\n\n\n\nDEFAULT_PARSER_CLASSES\n\n\nA list or tuple of parser classes, that determines the default set of parsers used when accessing the \nrequest.data\n property.\n\n\nDefault:\n\n\n(\n    'rest_framework.parsers.JSONParser',\n    'rest_framework.parsers.FormParser',\n    'rest_framework.parsers.MultiPartParser'\n)\n\n\n\nDEFAULT_AUTHENTICATION_CLASSES\n\n\nA list or tuple of authentication classes, that determines the default set of authenticators used when accessing the \nrequest.user\n or \nrequest.auth\n properties.\n\n\nDefault:\n\n\n(\n    'rest_framework.authentication.SessionAuthentication',\n    'rest_framework.authentication.BasicAuthentication'\n)\n\n\n\nDEFAULT_PERMISSION_CLASSES\n\n\nA list or tuple of permission classes, that determines the default set of permissions checked at the start of a view. Permission must be granted by every class in the list.\n\n\nDefault:\n\n\n(\n    'rest_framework.permissions.AllowAny',\n)\n\n\n\nDEFAULT_THROTTLE_CLASSES\n\n\nA list or tuple of throttle classes, that determines the default set of throttles checked at the start of a view.\n\n\nDefault: \n()\n\n\nDEFAULT_CONTENT_NEGOTIATION_CLASS\n\n\nA content negotiation class, that determines how a renderer is selected for the response, given an incoming request.\n\n\nDefault: \n'rest_framework.negotiation.DefaultContentNegotiation'\n\n\n\n\nGeneric view settings\n\n\nThe following settings control the behavior of the generic class-based views.\n\n\nDEFAULT_PAGINATION_SERIALIZER_CLASS\n\n\n\n\nThis setting has been removed.\n\n\nThe pagination API does not use serializers to determine the output format, and\nyou'll need to instead override the `get_paginated_response method on a\npagination class in order to specify how the output format is controlled.\n\n\n\n\nDEFAULT_FILTER_BACKENDS\n\n\nA list of filter backend classes that should be used for generic filtering.\nIf set to \nNone\n then generic filtering is disabled.\n\n\nPAGINATE_BY\n\n\n\n\nThis setting has been removed.\n\n\nSee the pagination documentation for further guidance on \nsetting the pagination style\n.\n\n\n\n\nPAGE_SIZE\n\n\nThe default page size to use for pagination.  If set to \nNone\n, pagination is disabled by default.\n\n\nDefault: \nNone\n\n\nPAGINATE_BY_PARAM\n\n\n\n\nThis setting has been removed.\n\n\nSee the pagination documentation for further guidance on \nsetting the pagination style\n.\n\n\n\n\nMAX_PAGINATE_BY\n\n\n\n\nThis setting is pending deprecation.\n\n\nSee the pagination documentation for further guidance on \nsetting the pagination style\n.\n\n\n\n\nSEARCH_PARAM\n\n\nThe name of a query parameter, which can be used to specify the search term used by \nSearchFilter\n.\n\n\nDefault: \nsearch\n\n\nORDERING_PARAM\n\n\nThe name of a query parameter, which can be used to specify the ordering of results returned by \nOrderingFilter\n.\n\n\nDefault: \nordering\n\n\n\n\nVersioning settings\n\n\nDEFAULT_VERSION\n\n\nThe value that should be used for \nrequest.version\n when no versioning information is present.\n\n\nDefault: \nNone\n\n\nALLOWED_VERSIONS\n\n\nIf set, this value will restrict the set of versions that may be returned by the versioning scheme, and will raise an error if the provided version if not in this set.\n\n\nDefault: \nNone\n\n\nVERSION_PARAM\n\n\nThe string that should used for any versioning parameters, such as in the media type or URL query parameters.\n\n\nDefault: \n'version'\n\n\n\n\nAuthentication settings\n\n\nThe following settings control the behavior of unauthenticated requests.\n\n\nUNAUTHENTICATED_USER\n\n\nThe class that should be used to initialize \nrequest.user\n for unauthenticated requests.\n\n\nDefault: \ndjango.contrib.auth.models.AnonymousUser\n\n\nUNAUTHENTICATED_TOKEN\n\n\nThe class that should be used to initialize \nrequest.auth\n for unauthenticated requests.\n\n\nDefault: \nNone\n\n\n\n\nTest settings\n\n\nThe following settings control the behavior of APIRequestFactory and APIClient\n\n\nTEST_REQUEST_DEFAULT_FORMAT\n\n\nThe default format that should be used when making test requests.\n\n\nThis should match up with the format of one of the renderer classes in the \nTEST_REQUEST_RENDERER_CLASSES\n setting.\n\n\nDefault: \n'multipart'\n\n\nTEST_REQUEST_RENDERER_CLASSES\n\n\nThe renderer classes that are supported when building test requests.\n\n\nThe format of any of these renderer classes may be used when constructing a test request, for example: \nclient.post('/users', {'username': 'jamie'}, format='json')\n\n\nDefault:\n\n\n(\n    'rest_framework.renderers.MultiPartRenderer',\n    'rest_framework.renderers.JSONRenderer'\n)\n\n\n\n\n\nSchema generation controls\n\n\nSCHEMA_COERCE_PATH_PK\n\n\nIf set, this maps the \n'pk'\n identifier in the URL conf onto the actual field\nname when generating a schema path parameter. Typically this will be \n'id'\n.\nThis gives a more suitable representation as \"primary key\" is an implementation\ndetail, whereas \"identifier\" is a more general concept.\n\n\nDefault: \nTrue\n\n\nSCHEMA_COERCE_METHOD_NAMES\n\n\nIf set, this is used to map internal viewset method names onto external action\nnames used in the schema generation. This allows us to generate names that\nare more suitable for an external representation than those that are used\ninternally in the codebase.\n\n\nDefault: \n{'retrieve': 'read', 'destroy': 'delete'}\n\n\n\n\nContent type controls\n\n\nURL_FORMAT_OVERRIDE\n\n\nThe name of a URL parameter that may be used to override the default content negotiation \nAccept\n header behavior, by using a \nformat=\u2026\n query parameter in the request URL.\n\n\nFor example: \nhttp://example.com/organizations/?format=csv\n\n\nIf the value of this setting is \nNone\n then URL format overrides will be disabled.\n\n\nDefault: \n'format'\n\n\nFORMAT_SUFFIX_KWARG\n\n\nThe name of a parameter in the URL conf that may be used to provide a format suffix. This setting is applied when using \nformat_suffix_patterns\n to include suffixed URL patterns.\n\n\nFor example: \nhttp://example.com/organizations.csv/\n\n\nDefault: \n'format'\n\n\n\n\nDate and time formatting\n\n\nThe following settings are used to control how date and time representations may be parsed and rendered.\n\n\nDATETIME_FORMAT\n\n\nA format string that should be used by default for rendering the output of \nDateTimeField\n serializer fields.  If \nNone\n, then \nDateTimeField\n serializer fields will return Python \ndatetime\n objects, and the datetime encoding will be determined by the renderer.\n\n\nMay be any of \nNone\n, \n'iso-8601'\n or a Python \nstrftime format\n string.\n\n\nDefault: \n'iso-8601'\n\n\nDATETIME_INPUT_FORMATS\n\n\nA list of format strings that should be used by default for parsing inputs to \nDateTimeField\n serializer fields.\n\n\nMay be a list including the string \n'iso-8601'\n or Python \nstrftime format\n strings.\n\n\nDefault: \n['iso-8601']\n\n\nDATE_FORMAT\n\n\nA format string that should be used by default for rendering the output of \nDateField\n serializer fields.  If \nNone\n, then \nDateField\n serializer fields will return Python \ndate\n objects, and the date encoding will be determined by the renderer.\n\n\nMay be any of \nNone\n, \n'iso-8601'\n or a Python \nstrftime format\n string.\n\n\nDefault: \n'iso-8601'\n\n\nDATE_INPUT_FORMATS\n\n\nA list of format strings that should be used by default for parsing inputs to \nDateField\n serializer fields.\n\n\nMay be a list including the string \n'iso-8601'\n or Python \nstrftime format\n strings.\n\n\nDefault: \n['iso-8601']\n\n\nTIME_FORMAT\n\n\nA format string that should be used by default for rendering the output of \nTimeField\n serializer fields.  If \nNone\n, then \nTimeField\n serializer fields will return Python \ntime\n objects, and the time encoding will be determined by the renderer.\n\n\nMay be any of \nNone\n, \n'iso-8601'\n or a Python \nstrftime format\n string.\n\n\nDefault: \n'iso-8601'\n\n\nTIME_INPUT_FORMATS\n\n\nA list of format strings that should be used by default for parsing inputs to \nTimeField\n serializer fields.\n\n\nMay be a list including the string \n'iso-8601'\n or Python \nstrftime format\n strings.\n\n\nDefault: \n['iso-8601']\n\n\n\n\nEncodings\n\n\nUNICODE_JSON\n\n\nWhen set to \nTrue\n, JSON responses will allow unicode characters in responses. For example:\n\n\n{\"unicode black star\":\"\u2605\"}\n\n\n\nWhen set to \nFalse\n, JSON responses will escape non-ascii characters, like so:\n\n\n{\"unicode black star\":\"\\u2605\"}\n\n\n\nBoth styles conform to \nRFC 4627\n, and are syntactically valid JSON. The unicode style is preferred as being more user-friendly when inspecting API responses.\n\n\nDefault: \nTrue\n\n\nCOMPACT_JSON\n\n\nWhen set to \nTrue\n, JSON responses will return compact representations, with no spacing after \n':'\n and \n','\n characters. For example:\n\n\n{\"is_admin\":false,\"email\":\"jane@example\"}\n\n\n\nWhen set to \nFalse\n, JSON responses will return slightly more verbose representations, like so:\n\n\n{\"is_admin\": false, \"email\": \"jane@example\"}\n\n\n\nThe default style is to return minified responses, in line with \nHeroku's API design guidelines\n.\n\n\nDefault: \nTrue\n\n\nCOERCE_DECIMAL_TO_STRING\n\n\nWhen returning decimal objects in API representations that do not support a native decimal type, it is normally best to return the value as a string. This avoids the loss of precision that occurs with binary floating point implementations.\n\n\nWhen set to \nTrue\n, the serializer \nDecimalField\n class will return strings instead of \nDecimal\n objects. When set to \nFalse\n, serializers will return \nDecimal\n objects, which the default JSON encoder will return as floats.\n\n\nDefault: \nTrue\n\n\n\n\nView names and descriptions\n\n\nThe following settings are used to generate the view names and descriptions, as used in responses to \nOPTIONS\n requests, and as used in the browsable API.\n\n\nVIEW_NAME_FUNCTION\n\n\nA string representing the function that should be used when generating view names.\n\n\nThis should be a function with the following signature:\n\n\nview_name(cls, suffix=None)\n\n\n\n\n\ncls\n: The view class.  Typically the name function would inspect the name of the class when generating a descriptive name, by accessing \ncls.__name__\n.\n\n\nsuffix\n: The optional suffix used when differentiating individual views in a viewset.\n\n\n\n\nDefault: \n'rest_framework.views.get_view_name'\n\n\nVIEW_DESCRIPTION_FUNCTION\n\n\nA string representing the function that should be used when generating view descriptions.\n\n\nThis setting can be changed to support markup styles other than the default markdown.  For example, you can use it to support \nrst\n markup in your view docstrings being output in the browsable API.\n\n\nThis should be a function with the following signature:\n\n\nview_description(cls, html=False)\n\n\n\n\n\ncls\n: The view class.  Typically the description function would inspect the docstring of the class when generating a description, by accessing \ncls.__doc__\n\n\nhtml\n: A boolean indicating if HTML output is required.  \nTrue\n when used in the browsable API, and \nFalse\n when used in generating \nOPTIONS\n responses.\n\n\n\n\nDefault: \n'rest_framework.views.get_view_description'\n\n\nHTML Select Field cutoffs\n\n\nGlobal settings for \nselect field cutoffs for rendering relational fields\n in the browsable API.\n\n\nHTML_SELECT_CUTOFF\n\n\nGlobal setting for the \nhtml_cutoff\n value.  Must be an integer.\n\n\nDefault: 1000\n\n\nHTML_SELECT_CUTOFF_TEXT\n\n\nA string representing a global setting for \nhtml_cutoff_text\n.\n\n\nDefault: \n\"More than {count} items...\"\n\n\n\n\nMiscellaneous settings\n\n\nEXCEPTION_HANDLER\n\n\nA string representing the function that should be used when returning a response for any given exception.  If the function returns \nNone\n, a 500 error will be raised.\n\n\nThis setting can be changed to support error responses other than the default \n{\"detail\": \"Failure...\"}\n responses.  For example, you can use it to provide API responses like \n{\"errors\": [{\"message\": \"Failure...\", \"code\": \"\"} ...]}\n.\n\n\nThis should be a function with the following signature:\n\n\nexception_handler(exc, context)\n\n\n\n\n\nexc\n: The exception.\n\n\n\n\nDefault: \n'rest_framework.views.exception_handler'\n\n\nNON_FIELD_ERRORS_KEY\n\n\nA string representing the key that should be used for serializer errors that do not refer to a specific field, but are instead general errors.\n\n\nDefault: \n'non_field_errors'\n\n\nURL_FIELD_NAME\n\n\nA string representing the key that should be used for the URL fields generated by \nHyperlinkedModelSerializer\n.\n\n\nDefault: \n'url'\n\n\nNUM_PROXIES\n\n\nAn integer of 0 or more, that may be used to specify the number of application proxies that the API runs behind.  This allows throttling to more accurately identify client IP addresses.  If set to \nNone\n then less strict IP matching will be used by the throttle classes.\n\n\nDefault: \nNone",
            "title": "Settings"
        },
        {
            "location": "/api-guide/settings/#settings",
            "text": "Namespaces are one honking great idea - let's do more of those!  \u2014  The Zen of Python   Configuration for REST framework is all namespaced inside a single Django setting, named  REST_FRAMEWORK .  For example your project's  settings.py  file might include something like this:  REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n    ),\n    'DEFAULT_PARSER_CLASSES': (\n        'rest_framework.parsers.JSONParser',\n    )\n}",
            "title": "Settings"
        },
        {
            "location": "/api-guide/settings/#accessing-settings",
            "text": "If you need to access the values of REST framework's API settings in your project,\nyou should use the  api_settings  object.  For example.  from rest_framework.settings import api_settings\n\nprint api_settings.DEFAULT_AUTHENTICATION_CLASSES  The  api_settings  object will check for any user-defined settings, and otherwise fall back to the default values.  Any setting that uses string import paths to refer to a class will automatically import and return the referenced class, instead of the string literal.",
            "title": "Accessing settings"
        },
        {
            "location": "/api-guide/settings/#api-reference",
            "text": "",
            "title": "API Reference"
        },
        {
            "location": "/api-guide/settings/#api-policy-settings",
            "text": "The following settings control the basic API policies, and are applied to every  APIView  class-based view, or  @api_view  function based view.",
            "title": "API policy settings"
        },
        {
            "location": "/api-guide/settings/#default_renderer_classes",
            "text": "A list or tuple of renderer classes, that determines the default set of renderers that may be used when returning a  Response  object.  Default:  (\n    'rest_framework.renderers.JSONRenderer',\n    'rest_framework.renderers.BrowsableAPIRenderer',\n)",
            "title": "DEFAULT_RENDERER_CLASSES"
        },
        {
            "location": "/api-guide/settings/#default_parser_classes",
            "text": "A list or tuple of parser classes, that determines the default set of parsers used when accessing the  request.data  property.  Default:  (\n    'rest_framework.parsers.JSONParser',\n    'rest_framework.parsers.FormParser',\n    'rest_framework.parsers.MultiPartParser'\n)",
            "title": "DEFAULT_PARSER_CLASSES"
        },
        {
            "location": "/api-guide/settings/#default_authentication_classes",
            "text": "A list or tuple of authentication classes, that determines the default set of authenticators used when accessing the  request.user  or  request.auth  properties.  Default:  (\n    'rest_framework.authentication.SessionAuthentication',\n    'rest_framework.authentication.BasicAuthentication'\n)",
            "title": "DEFAULT_AUTHENTICATION_CLASSES"
        },
        {
            "location": "/api-guide/settings/#default_permission_classes",
            "text": "A list or tuple of permission classes, that determines the default set of permissions checked at the start of a view. Permission must be granted by every class in the list.  Default:  (\n    'rest_framework.permissions.AllowAny',\n)",
            "title": "DEFAULT_PERMISSION_CLASSES"
        },
        {
            "location": "/api-guide/settings/#default_throttle_classes",
            "text": "A list or tuple of throttle classes, that determines the default set of throttles checked at the start of a view.  Default:  ()",
            "title": "DEFAULT_THROTTLE_CLASSES"
        },
        {
            "location": "/api-guide/settings/#default_content_negotiation_class",
            "text": "A content negotiation class, that determines how a renderer is selected for the response, given an incoming request.  Default:  'rest_framework.negotiation.DefaultContentNegotiation'",
            "title": "DEFAULT_CONTENT_NEGOTIATION_CLASS"
        },
        {
            "location": "/api-guide/settings/#generic-view-settings",
            "text": "The following settings control the behavior of the generic class-based views.",
            "title": "Generic view settings"
        },
        {
            "location": "/api-guide/settings/#default_pagination_serializer_class",
            "text": "This setting has been removed.  The pagination API does not use serializers to determine the output format, and\nyou'll need to instead override the `get_paginated_response method on a\npagination class in order to specify how the output format is controlled.",
            "title": "DEFAULT_PAGINATION_SERIALIZER_CLASS"
        },
        {
            "location": "/api-guide/settings/#default_filter_backends",
            "text": "A list of filter backend classes that should be used for generic filtering.\nIf set to  None  then generic filtering is disabled.",
            "title": "DEFAULT_FILTER_BACKENDS"
        },
        {
            "location": "/api-guide/settings/#paginate_by",
            "text": "This setting has been removed.  See the pagination documentation for further guidance on  setting the pagination style .",
            "title": "PAGINATE_BY"
        },
        {
            "location": "/api-guide/settings/#page_size",
            "text": "The default page size to use for pagination.  If set to  None , pagination is disabled by default.  Default:  None",
            "title": "PAGE_SIZE"
        },
        {
            "location": "/api-guide/settings/#paginate_by_param",
            "text": "This setting has been removed.  See the pagination documentation for further guidance on  setting the pagination style .",
            "title": "PAGINATE_BY_PARAM"
        },
        {
            "location": "/api-guide/settings/#max_paginate_by",
            "text": "This setting is pending deprecation.  See the pagination documentation for further guidance on  setting the pagination style .",
            "title": "MAX_PAGINATE_BY"
        },
        {
            "location": "/api-guide/settings/#search_param",
            "text": "The name of a query parameter, which can be used to specify the search term used by  SearchFilter .  Default:  search",
            "title": "SEARCH_PARAM"
        },
        {
            "location": "/api-guide/settings/#ordering_param",
            "text": "The name of a query parameter, which can be used to specify the ordering of results returned by  OrderingFilter .  Default:  ordering",
            "title": "ORDERING_PARAM"
        },
        {
            "location": "/api-guide/settings/#versioning-settings",
            "text": "",
            "title": "Versioning settings"
        },
        {
            "location": "/api-guide/settings/#default_version",
            "text": "The value that should be used for  request.version  when no versioning information is present.  Default:  None",
            "title": "DEFAULT_VERSION"
        },
        {
            "location": "/api-guide/settings/#allowed_versions",
            "text": "If set, this value will restrict the set of versions that may be returned by the versioning scheme, and will raise an error if the provided version if not in this set.  Default:  None",
            "title": "ALLOWED_VERSIONS"
        },
        {
            "location": "/api-guide/settings/#version_param",
            "text": "The string that should used for any versioning parameters, such as in the media type or URL query parameters.  Default:  'version'",
            "title": "VERSION_PARAM"
        },
        {
            "location": "/api-guide/settings/#authentication-settings",
            "text": "The following settings control the behavior of unauthenticated requests.",
            "title": "Authentication settings"
        },
        {
            "location": "/api-guide/settings/#unauthenticated_user",
            "text": "The class that should be used to initialize  request.user  for unauthenticated requests.  Default:  django.contrib.auth.models.AnonymousUser",
            "title": "UNAUTHENTICATED_USER"
        },
        {
            "location": "/api-guide/settings/#unauthenticated_token",
            "text": "The class that should be used to initialize  request.auth  for unauthenticated requests.  Default:  None",
            "title": "UNAUTHENTICATED_TOKEN"
        },
        {
            "location": "/api-guide/settings/#test-settings",
            "text": "The following settings control the behavior of APIRequestFactory and APIClient",
            "title": "Test settings"
        },
        {
            "location": "/api-guide/settings/#test_request_default_format",
            "text": "The default format that should be used when making test requests.  This should match up with the format of one of the renderer classes in the  TEST_REQUEST_RENDERER_CLASSES  setting.  Default:  'multipart'",
            "title": "TEST_REQUEST_DEFAULT_FORMAT"
        },
        {
            "location": "/api-guide/settings/#test_request_renderer_classes",
            "text": "The renderer classes that are supported when building test requests.  The format of any of these renderer classes may be used when constructing a test request, for example:  client.post('/users', {'username': 'jamie'}, format='json')  Default:  (\n    'rest_framework.renderers.MultiPartRenderer',\n    'rest_framework.renderers.JSONRenderer'\n)",
            "title": "TEST_REQUEST_RENDERER_CLASSES"
        },
        {
            "location": "/api-guide/settings/#schema-generation-controls",
            "text": "",
            "title": "Schema generation controls"
        },
        {
            "location": "/api-guide/settings/#schema_coerce_path_pk",
            "text": "If set, this maps the  'pk'  identifier in the URL conf onto the actual field\nname when generating a schema path parameter. Typically this will be  'id' .\nThis gives a more suitable representation as \"primary key\" is an implementation\ndetail, whereas \"identifier\" is a more general concept.  Default:  True",
            "title": "SCHEMA_COERCE_PATH_PK"
        },
        {
            "location": "/api-guide/settings/#schema_coerce_method_names",
            "text": "If set, this is used to map internal viewset method names onto external action\nnames used in the schema generation. This allows us to generate names that\nare more suitable for an external representation than those that are used\ninternally in the codebase.  Default:  {'retrieve': 'read', 'destroy': 'delete'}",
            "title": "SCHEMA_COERCE_METHOD_NAMES"
        },
        {
            "location": "/api-guide/settings/#content-type-controls",
            "text": "",
            "title": "Content type controls"
        },
        {
            "location": "/api-guide/settings/#url_format_override",
            "text": "The name of a URL parameter that may be used to override the default content negotiation  Accept  header behavior, by using a  format=\u2026  query parameter in the request URL.  For example:  http://example.com/organizations/?format=csv  If the value of this setting is  None  then URL format overrides will be disabled.  Default:  'format'",
            "title": "URL_FORMAT_OVERRIDE"
        },
        {
            "location": "/api-guide/settings/#format_suffix_kwarg",
            "text": "The name of a parameter in the URL conf that may be used to provide a format suffix. This setting is applied when using  format_suffix_patterns  to include suffixed URL patterns.  For example:  http://example.com/organizations.csv/  Default:  'format'",
            "title": "FORMAT_SUFFIX_KWARG"
        },
        {
            "location": "/api-guide/settings/#date-and-time-formatting",
            "text": "The following settings are used to control how date and time representations may be parsed and rendered.",
            "title": "Date and time formatting"
        },
        {
            "location": "/api-guide/settings/#datetime_format",
            "text": "A format string that should be used by default for rendering the output of  DateTimeField  serializer fields.  If  None , then  DateTimeField  serializer fields will return Python  datetime  objects, and the datetime encoding will be determined by the renderer.  May be any of  None ,  'iso-8601'  or a Python  strftime format  string.  Default:  'iso-8601'",
            "title": "DATETIME_FORMAT"
        },
        {
            "location": "/api-guide/settings/#datetime_input_formats",
            "text": "A list of format strings that should be used by default for parsing inputs to  DateTimeField  serializer fields.  May be a list including the string  'iso-8601'  or Python  strftime format  strings.  Default:  ['iso-8601']",
            "title": "DATETIME_INPUT_FORMATS"
        },
        {
            "location": "/api-guide/settings/#date_format",
            "text": "A format string that should be used by default for rendering the output of  DateField  serializer fields.  If  None , then  DateField  serializer fields will return Python  date  objects, and the date encoding will be determined by the renderer.  May be any of  None ,  'iso-8601'  or a Python  strftime format  string.  Default:  'iso-8601'",
            "title": "DATE_FORMAT"
        },
        {
            "location": "/api-guide/settings/#date_input_formats",
            "text": "A list of format strings that should be used by default for parsing inputs to  DateField  serializer fields.  May be a list including the string  'iso-8601'  or Python  strftime format  strings.  Default:  ['iso-8601']",
            "title": "DATE_INPUT_FORMATS"
        },
        {
            "location": "/api-guide/settings/#time_format",
            "text": "A format string that should be used by default for rendering the output of  TimeField  serializer fields.  If  None , then  TimeField  serializer fields will return Python  time  objects, and the time encoding will be determined by the renderer.  May be any of  None ,  'iso-8601'  or a Python  strftime format  string.  Default:  'iso-8601'",
            "title": "TIME_FORMAT"
        },
        {
            "location": "/api-guide/settings/#time_input_formats",
            "text": "A list of format strings that should be used by default for parsing inputs to  TimeField  serializer fields.  May be a list including the string  'iso-8601'  or Python  strftime format  strings.  Default:  ['iso-8601']",
            "title": "TIME_INPUT_FORMATS"
        },
        {
            "location": "/api-guide/settings/#encodings",
            "text": "",
            "title": "Encodings"
        },
        {
            "location": "/api-guide/settings/#unicode_json",
            "text": "When set to  True , JSON responses will allow unicode characters in responses. For example:  {\"unicode black star\":\"\u2605\"}  When set to  False , JSON responses will escape non-ascii characters, like so:  {\"unicode black star\":\"\\u2605\"}  Both styles conform to  RFC 4627 , and are syntactically valid JSON. The unicode style is preferred as being more user-friendly when inspecting API responses.  Default:  True",
            "title": "UNICODE_JSON"
        },
        {
            "location": "/api-guide/settings/#compact_json",
            "text": "When set to  True , JSON responses will return compact representations, with no spacing after  ':'  and  ','  characters. For example:  {\"is_admin\":false,\"email\":\"jane@example\"}  When set to  False , JSON responses will return slightly more verbose representations, like so:  {\"is_admin\": false, \"email\": \"jane@example\"}  The default style is to return minified responses, in line with  Heroku's API design guidelines .  Default:  True",
            "title": "COMPACT_JSON"
        },
        {
            "location": "/api-guide/settings/#coerce_decimal_to_string",
            "text": "When returning decimal objects in API representations that do not support a native decimal type, it is normally best to return the value as a string. This avoids the loss of precision that occurs with binary floating point implementations.  When set to  True , the serializer  DecimalField  class will return strings instead of  Decimal  objects. When set to  False , serializers will return  Decimal  objects, which the default JSON encoder will return as floats.  Default:  True",
            "title": "COERCE_DECIMAL_TO_STRING"
        },
        {
            "location": "/api-guide/settings/#view-names-and-descriptions",
            "text": "The following settings are used to generate the view names and descriptions, as used in responses to  OPTIONS  requests, and as used in the browsable API.",
            "title": "View names and descriptions"
        },
        {
            "location": "/api-guide/settings/#view_name_function",
            "text": "A string representing the function that should be used when generating view names.  This should be a function with the following signature:  view_name(cls, suffix=None)   cls : The view class.  Typically the name function would inspect the name of the class when generating a descriptive name, by accessing  cls.__name__ .  suffix : The optional suffix used when differentiating individual views in a viewset.   Default:  'rest_framework.views.get_view_name'",
            "title": "VIEW_NAME_FUNCTION"
        },
        {
            "location": "/api-guide/settings/#view_description_function",
            "text": "A string representing the function that should be used when generating view descriptions.  This setting can be changed to support markup styles other than the default markdown.  For example, you can use it to support  rst  markup in your view docstrings being output in the browsable API.  This should be a function with the following signature:  view_description(cls, html=False)   cls : The view class.  Typically the description function would inspect the docstring of the class when generating a description, by accessing  cls.__doc__  html : A boolean indicating if HTML output is required.   True  when used in the browsable API, and  False  when used in generating  OPTIONS  responses.   Default:  'rest_framework.views.get_view_description'",
            "title": "VIEW_DESCRIPTION_FUNCTION"
        },
        {
            "location": "/api-guide/settings/#html-select-field-cutoffs",
            "text": "Global settings for  select field cutoffs for rendering relational fields  in the browsable API.",
            "title": "HTML Select Field cutoffs"
        },
        {
            "location": "/api-guide/settings/#html_select_cutoff",
            "text": "Global setting for the  html_cutoff  value.  Must be an integer.  Default: 1000",
            "title": "HTML_SELECT_CUTOFF"
        },
        {
            "location": "/api-guide/settings/#html_select_cutoff_text",
            "text": "A string representing a global setting for  html_cutoff_text .  Default:  \"More than {count} items...\"",
            "title": "HTML_SELECT_CUTOFF_TEXT"
        },
        {
            "location": "/api-guide/settings/#miscellaneous-settings",
            "text": "",
            "title": "Miscellaneous settings"
        },
        {
            "location": "/api-guide/settings/#exception_handler",
            "text": "A string representing the function that should be used when returning a response for any given exception.  If the function returns  None , a 500 error will be raised.  This setting can be changed to support error responses other than the default  {\"detail\": \"Failure...\"}  responses.  For example, you can use it to provide API responses like  {\"errors\": [{\"message\": \"Failure...\", \"code\": \"\"} ...]} .  This should be a function with the following signature:  exception_handler(exc, context)   exc : The exception.   Default:  'rest_framework.views.exception_handler'",
            "title": "EXCEPTION_HANDLER"
        },
        {
            "location": "/api-guide/settings/#non_field_errors_key",
            "text": "A string representing the key that should be used for serializer errors that do not refer to a specific field, but are instead general errors.  Default:  'non_field_errors'",
            "title": "NON_FIELD_ERRORS_KEY"
        },
        {
            "location": "/api-guide/settings/#url_field_name",
            "text": "A string representing the key that should be used for the URL fields generated by  HyperlinkedModelSerializer .  Default:  'url'",
            "title": "URL_FIELD_NAME"
        },
        {
            "location": "/api-guide/settings/#num_proxies",
            "text": "An integer of 0 or more, that may be used to specify the number of application proxies that the API runs behind.  This allows throttling to more accurately identify client IP addresses.  If set to  None  then less strict IP matching will be used by the throttle classes.  Default:  None",
            "title": "NUM_PROXIES"
        },
        {
            "location": "/topics/documenting-your-api/",
            "text": "Documenting your API\n\n\n\n\nA REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state.\n\n\n\u2014 Roy Fielding, \nREST APIs must be hypertext driven\n\n\n\n\nThere are a variety of approaches to API documentation.  This document introduces a few of the various tools and options you might choose from.  The approaches should not be considered exclusive - you may want to provide more than one documentation style for you API, such as a self describing API that also includes static documentation of the various API endpoints.\n\n\nEndpoint documentation\n\n\nThe most common way to document Web APIs today is to produce documentation that lists the API endpoints verbatim, and describes the allowable operations on each.  There are various tools that allow you to do this in an automated or semi-automated way.\n\n\n\n\nDRF Docs\n\n\nDRF Docs\n allows you to document Web APIs made with Django REST Framework and it is authored by Emmanouil Konstantinidis. It's made to work out of the box and its setup should not take more than a couple of minutes. Complete documentation can be found on the \nwebsite\n while there is also a \ndemo\n available for people to see what it looks like. \nLive API Endpoints\n allow you to utilize the endpoints from within the documentation in a neat way.\n\n\nFeatures include customizing the template with your branding, settings for hiding the docs depending on the environment and more.\n\n\nBoth this package and Django REST Swagger are fully documented, well supported, and come highly recommended.\n\n\n\n\n\n\nDjango REST Swagger\n\n\nMarc Gibbons' \nDjango REST Swagger\n integrates REST framework with the \nSwagger\n API documentation tool.  The package produces well presented API documentation, and includes interactive tools for testing API endpoints.\n\n\nDjango REST Swagger supports REST framework versions 2.3 and above.\n\n\nMark is also the author of the \nREST Framework Docs\n package which offers clean, simple autogenerated documentation for your API but is deprecated and has moved to Django REST Swagger.\n\n\nBoth this package and DRF docs are fully documented, well supported, and come highly recommended.\n\n\n\n\n\n\nDRF AutoDocs\n\n\nOleksander Mashianovs' \nDRF Auto Docs\n automated api renderer.\n\n\nCollects almost all the code you written into documentation effortlessly.\n\n\nSupports:\n\n\n\n\nfunctional view docs\n\n\ntree-like structure\n\n\nDocstrings:\n\n\nmarkdown\n\n\npreserve space & newlines\n\n\nformatting with nice syntax\n\n\nFields:\n\n\nchoices rendering\n\n\nhelp_text (to specify SerializerMethodField output, etc)\n\n\nsmart read_only/required rendering\n\n\nEndpoint properties:\n\n\nfilter_backends\n\n\nauthentication_classes\n\n\npermission_classes\n\n\nextra url params(GET params)\n\n\n\n\n\n\n\n\nApiary\n\n\nThere are various other online tools and services for providing API documentation.  One notable service is \nApiary\n.  With Apiary, you describe your API using a simple markdown-like syntax.  The generated documentation includes API interaction, a mock server for testing & prototyping, and various other tools.\n\n\n\n\n\n\nSelf describing APIs\n\n\nThe browsable API that REST framework provides makes it possible for your API to be entirely self describing.  The documentation for each API endpoint can be provided simply by visiting the URL in your browser.\n\n\n\n\n\n\nSetting the title\n\n\nThe title that is used in the browsable API is generated from the view class name or function name.  Any trailing \nView\n or \nViewSet\n suffix is stripped, and the string is whitespace separated on uppercase/lowercase boundaries or underscores.\n\n\nFor example, the view \nUserListView\n, will be named \nUser List\n when presented in the browsable API.\n\n\nWhen working with viewsets, an appropriate suffix is appended to each generated view.  For example, the view set \nUserViewSet\n will generate views named \nUser List\n and \nUser Instance\n.\n\n\nSetting the description\n\n\nThe description in the browsable API is generated from the docstring of the view or viewset.\n\n\nIf the python \nmarkdown\n library is installed, then \nmarkdown syntax\n may be used in the docstring, and will be converted to HTML in the browsable API.  For example:\n\n\nclass AccountListView(views.APIView):\n    \"\"\"\n    Returns a list of all **active** accounts in the system.\n\n    For more details on how accounts are activated please [see here][ref].\n\n    [ref]: http://example.com/activating-accounts\n    \"\"\"\n\n\n\nNote that when using viewsets the basic docstring is used for all generated views.  To provide descriptions for each view, such as for the the list and retrieve views, use docstring sections as described in \nSchemas as documentation: Examples\n.\n\n\nThe \nOPTIONS\n method\n\n\nREST framework APIs also support programmatically accessible descriptions, using the \nOPTIONS\n HTTP method.  A view will respond to an \nOPTIONS\n request with metadata including the name, description, and the various media types it accepts and responds with.\n\n\nWhen using the generic views, any \nOPTIONS\n requests will additionally respond with metadata regarding any \nPOST\n or \nPUT\n actions available, describing which fields are on the serializer.\n\n\nYou can modify the response behavior to \nOPTIONS\n requests by overriding the \nmetadata\n view method.  For example:\n\n\ndef metadata(self, request):\n    \"\"\"\n    Don't include the view description in OPTIONS responses.\n    \"\"\"\n    data = super(ExampleView, self).metadata(request)\n    data.pop('description')\n    return data\n\n\n\n\n\nThe hypermedia approach\n\n\nTo be fully RESTful an API should present its available actions as hypermedia controls in the responses that it sends.\n\n\nIn this approach, rather than documenting the available API endpoints up front, the description instead concentrates on the \nmedia types\n that are used.  The available actions that may be taken on any given URL are not strictly fixed, but are instead made available by the presence of link and form controls in the returned document.\n\n\nTo implement a hypermedia API you'll need to decide on an appropriate media type for the API, and implement a custom renderer and parser for that media type.  The \nREST, Hypermedia & HATEOAS\n section of the documentation includes pointers to background reading, as well as links to various hypermedia formats.",
            "title": "Documenting your API"
        },
        {
            "location": "/topics/documenting-your-api/#documenting-your-api",
            "text": "A REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state.  \u2014 Roy Fielding,  REST APIs must be hypertext driven   There are a variety of approaches to API documentation.  This document introduces a few of the various tools and options you might choose from.  The approaches should not be considered exclusive - you may want to provide more than one documentation style for you API, such as a self describing API that also includes static documentation of the various API endpoints.",
            "title": "Documenting your API"
        },
        {
            "location": "/topics/documenting-your-api/#endpoint-documentation",
            "text": "The most common way to document Web APIs today is to produce documentation that lists the API endpoints verbatim, and describes the allowable operations on each.  There are various tools that allow you to do this in an automated or semi-automated way.",
            "title": "Endpoint documentation"
        },
        {
            "location": "/topics/documenting-your-api/#drf-docs",
            "text": "DRF Docs  allows you to document Web APIs made with Django REST Framework and it is authored by Emmanouil Konstantinidis. It's made to work out of the box and its setup should not take more than a couple of minutes. Complete documentation can be found on the  website  while there is also a  demo  available for people to see what it looks like.  Live API Endpoints  allow you to utilize the endpoints from within the documentation in a neat way.  Features include customizing the template with your branding, settings for hiding the docs depending on the environment and more.  Both this package and Django REST Swagger are fully documented, well supported, and come highly recommended.",
            "title": "DRF Docs"
        },
        {
            "location": "/topics/documenting-your-api/#django-rest-swagger",
            "text": "Marc Gibbons'  Django REST Swagger  integrates REST framework with the  Swagger  API documentation tool.  The package produces well presented API documentation, and includes interactive tools for testing API endpoints.  Django REST Swagger supports REST framework versions 2.3 and above.  Mark is also the author of the  REST Framework Docs  package which offers clean, simple autogenerated documentation for your API but is deprecated and has moved to Django REST Swagger.  Both this package and DRF docs are fully documented, well supported, and come highly recommended.",
            "title": "Django REST Swagger"
        },
        {
            "location": "/topics/documenting-your-api/#drf-autodocs",
            "text": "Oleksander Mashianovs'  DRF Auto Docs  automated api renderer.  Collects almost all the code you written into documentation effortlessly.  Supports:   functional view docs  tree-like structure  Docstrings:  markdown  preserve space & newlines  formatting with nice syntax  Fields:  choices rendering  help_text (to specify SerializerMethodField output, etc)  smart read_only/required rendering  Endpoint properties:  filter_backends  authentication_classes  permission_classes  extra url params(GET params)",
            "title": "DRF AutoDocs"
        },
        {
            "location": "/topics/documenting-your-api/#apiary",
            "text": "There are various other online tools and services for providing API documentation.  One notable service is  Apiary .  With Apiary, you describe your API using a simple markdown-like syntax.  The generated documentation includes API interaction, a mock server for testing & prototyping, and various other tools.",
            "title": "Apiary"
        },
        {
            "location": "/topics/documenting-your-api/#self-describing-apis",
            "text": "The browsable API that REST framework provides makes it possible for your API to be entirely self describing.  The documentation for each API endpoint can be provided simply by visiting the URL in your browser.",
            "title": "Self describing APIs"
        },
        {
            "location": "/topics/documenting-your-api/#setting-the-title",
            "text": "The title that is used in the browsable API is generated from the view class name or function name.  Any trailing  View  or  ViewSet  suffix is stripped, and the string is whitespace separated on uppercase/lowercase boundaries or underscores.  For example, the view  UserListView , will be named  User List  when presented in the browsable API.  When working with viewsets, an appropriate suffix is appended to each generated view.  For example, the view set  UserViewSet  will generate views named  User List  and  User Instance .",
            "title": "Setting the title"
        },
        {
            "location": "/topics/documenting-your-api/#setting-the-description",
            "text": "The description in the browsable API is generated from the docstring of the view or viewset.  If the python  markdown  library is installed, then  markdown syntax  may be used in the docstring, and will be converted to HTML in the browsable API.  For example:  class AccountListView(views.APIView):\n    \"\"\"\n    Returns a list of all **active** accounts in the system.\n\n    For more details on how accounts are activated please [see here][ref].\n\n    [ref]: http://example.com/activating-accounts\n    \"\"\"  Note that when using viewsets the basic docstring is used for all generated views.  To provide descriptions for each view, such as for the the list and retrieve views, use docstring sections as described in  Schemas as documentation: Examples .",
            "title": "Setting the description"
        },
        {
            "location": "/topics/documenting-your-api/#the-options-method",
            "text": "REST framework APIs also support programmatically accessible descriptions, using the  OPTIONS  HTTP method.  A view will respond to an  OPTIONS  request with metadata including the name, description, and the various media types it accepts and responds with.  When using the generic views, any  OPTIONS  requests will additionally respond with metadata regarding any  POST  or  PUT  actions available, describing which fields are on the serializer.  You can modify the response behavior to  OPTIONS  requests by overriding the  metadata  view method.  For example:  def metadata(self, request):\n    \"\"\"\n    Don't include the view description in OPTIONS responses.\n    \"\"\"\n    data = super(ExampleView, self).metadata(request)\n    data.pop('description')\n    return data",
            "title": "The OPTIONS method"
        },
        {
            "location": "/topics/documenting-your-api/#the-hypermedia-approach",
            "text": "To be fully RESTful an API should present its available actions as hypermedia controls in the responses that it sends.  In this approach, rather than documenting the available API endpoints up front, the description instead concentrates on the  media types  that are used.  The available actions that may be taken on any given URL are not strictly fixed, but are instead made available by the presence of link and form controls in the returned document.  To implement a hypermedia API you'll need to decide on an appropriate media type for the API, and implement a custom renderer and parser for that media type.  The  REST, Hypermedia & HATEOAS  section of the documentation includes pointers to background reading, as well as links to various hypermedia formats.",
            "title": "The hypermedia approach"
        },
        {
            "location": "/topics/api-clients/",
            "text": "API Clients\n\n\nAn API client handles the underlying details of how network requests are made\nand how responses are decoded. They present the developer with an application\ninterface to work against, rather than working directly with the network interface.\n\n\nThe API clients documented here are not restricted to APIs built with Django REST framework.\n They can be used with any API that exposes a supported schema format.\n\n\nFor example, \nthe Heroku platform API\n exposes a schema in the JSON\nHyperschema format. As a result, the Core API command line client and Python\nclient library can be \nused to interact with the Heroku API\n.\n\n\nClient-side Core API\n\n\nCore API\n is a document specification that can be used to describe APIs. It can\nbe used either server-side, as is done with REST framework's \nschema generation\n,\nor used client-side, as described here.\n\n\nWhen used client-side, Core API allows for \ndynamically driven client libraries\n\nthat can interact with any API that exposes a supported schema or hypermedia\nformat.\n\n\nUsing a dynamically driven client has a number of advantages over interacting\nwith an API by building HTTP requests directly.\n\n\nMore meaningful interaction\n\n\nAPI interactions are presented in a more meaningful way. You're working at\nthe application interface layer, rather than the network interface layer.\n\n\nResilience & evolvability\n\n\nThe client determines what endpoints are available, what parameters exist\nagainst each particular endpoint, and how HTTP requests are formed.\n\n\nThis also allows for a degree of API evolvability. URLs can be modified\nwithout breaking existing clients, or more efficient encodings can be used\non-the-wire, with clients transparently upgrading.\n\n\nSelf-descriptive APIs\n\n\nA dynamically driven client is able to present documentation on the API to the\nend user. This documentation allows the user to discover the available endpoints\nand parameters, and better understand the API they are working with.\n\n\nBecause this documentation is driven by the API schema it will always be fully\nup to date with the most recently deployed version of the service.\n\n\n\n\nCommand line client\n\n\nThe command line client allows you to inspect and interact with any API that\nexposes a supported schema format.\n\n\nGetting started\n\n\nTo install the Core API command line client, use \npip\n.\n\n\nNote that the command-line client is a separate package to the\npython client library. Make sure to install \ncoreapi-cli\n.\n\n\n$ pip install coreapi-cli\n\n\n\nTo start inspecting and interacting with an API the schema must first be loaded\nfrom the network.\n\n\n$ coreapi get http://api.example.org/\n<Pastebin API \"http://127.0.0.1:8000/\">\nsnippets: {\n    create(code, [title], [linenos], [language], [style])\n    destroy(pk)\n    highlight(pk)\n    list([page])\n    partial_update(pk, [title], [code], [linenos], [language], [style])\n    retrieve(pk)\n    update(pk, code, [title], [linenos], [language], [style])\n}\nusers: {\n    list([page])\n    retrieve(pk)\n}\n\n\n\nThis will then load the schema, displaying the resulting \nDocument\n. This\n\nDocument\n includes all the available interactions that may be made against the API.\n\n\nTo interact with the API, use the \naction\n command. This command requires a list\nof keys that are used to index into the link.\n\n\n$ coreapi action users list\n[\n    {\n        \"url\": \"http://127.0.0.1:8000/users/2/\",\n        \"id\": 2,\n        \"username\": \"aziz\",\n        \"snippets\": []\n    },\n    ...\n]\n\n\n\nTo inspect the underlying HTTP request and response, use the \n--debug\n flag.\n\n\n$ coreapi action users list --debug\n> GET /users/ HTTP/1.1\n> Accept: application/vnd.coreapi+json, */*\n> Authorization: Basic bWF4Om1heA==\n> Host: 127.0.0.1\n> User-Agent: coreapi\n< 200 OK\n< Allow: GET, HEAD, OPTIONS\n< Content-Type: application/json\n< Date: Thu, 30 Jun 2016 10:51:46 GMT\n< Server: WSGIServer/0.1 Python/2.7.10\n< Vary: Accept, Cookie\n<\n< [{\"url\":\"http://127.0.0.1/users/2/\",\"id\":2,\"username\":\"aziz\",\"snippets\":[]},{\"url\":\"http://127.0.0.1/users/3/\",\"id\":3,\"username\":\"amy\",\"snippets\":[\"http://127.0.0.1/snippets/3/\"]},{\"url\":\"http://127.0.0.1/users/4/\",\"id\":4,\"username\":\"max\",\"snippets\":[\"http://127.0.0.1/snippets/4/\",\"http://127.0.0.1/snippets/5/\",\"http://127.0.0.1/snippets/6/\",\"http://127.0.0.1/snippets/7/\"]},{\"url\":\"http://127.0.0.1/users/5/\",\"id\":5,\"username\":\"jose\",\"snippets\":[]},{\"url\":\"http://127.0.0.1/users/6/\",\"id\":6,\"username\":\"admin\",\"snippets\":[\"http://127.0.0.1/snippets/1/\",\"http://127.0.0.1/snippets/2/\"]}]\n\n[\n    ...\n]\n\n\n\nSome actions may include optional or required parameters.\n\n\n$ coreapi action users create --param username=example\n\n\n\nWhen using \n--param\n, the type of the input will be determined automatically.\n\n\nIf you want to be more explicit about the parameter type then use \n--data\n for\nany null, numeric, boolean, list, or object inputs, and use \n--string\n for string inputs.\n\n\n$ coreapi action users edit --string username=tomchristie --data is_admin=true\n\n\n\nAuthentication & headers\n\n\nThe \ncredentials\n command is used to manage the request \nAuthentication:\n header.\nAny credentials added are always linked to a particular domain, so as to ensure\nthat credentials are not leaked across differing APIs.\n\n\nThe format for adding a new credential is:\n\n\n$ coreapi credentials add <domain> <credentials string>\n\n\n\nFor instance:\n\n\n$ coreapi credentials add api.example.org \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\"\n\n\n\nThe optional \n--auth\n flag also allows you to add specific types of authentication,\nhandling the encoding for you. Currently only \n\"basic\"\n is supported as an option here.\nFor example:\n\n\n$ coreapi credentials add api.example.org tomchristie:foobar --auth basic\n\n\n\nYou can also add specific request headers, using the \nheaders\n command:\n\n\n$ coreapi headers add api.example.org x-api-version 2\n\n\n\nFor more information and a listing of the available subcommands use \ncoreapi\ncredentials --help\n or \ncoreapi headers --help\n.\n\n\nCodecs\n\n\nBy default the command line client only includes support for reading Core JSON\nschemas, however it includes a plugin system for installing additional codecs.\n\n\n$ pip install openapi-codec jsonhyperschema-codec hal-codec\n$ coreapi codecs show\nCodecs\ncorejson        application/vnd.coreapi+json encoding, decoding\nhal             application/hal+json         encoding, decoding\nopenapi         application/openapi+json     encoding, decoding\njsonhyperschema application/schema+json      decoding\njson            application/json             data\ntext            text/*                       data\n\n\n\nUtilities\n\n\nThe command line client includes functionality for bookmarking API URLs\nunder a memorable name. For example, you can add a bookmark for the\nexisting API, like so...\n\n\n$ coreapi bookmarks add accountmanagement\n\n\n\nThere is also functionality for navigating forward or backward through the\nhistory of which API URLs have been accessed.\n\n\n$ coreapi history show\n$ coreapi history back\n\n\n\nFor more information and a listing of the available subcommands use\n\ncoreapi bookmarks --help\n or \ncoreapi history --help\n.\n\n\nOther commands\n\n\nTo display the current \nDocument\n:\n\n\n$ coreapi show\n\n\n\nTo reload the current \nDocument\n from the network:\n\n\n$ coreapi reload\n\n\n\nTo load a schema file from disk:\n\n\n$ coreapi load my-api-schema.json --format corejson\n\n\n\nTo dump the current document to console in a given format:\n\n\n$ coreapi dump --format openapi\n\n\n\nTo remove the current document, along with all currently saved history,\ncredentials, headers and bookmarks:\n\n\n$ coreapi clear\n\n\n\n\n\nPython client library\n\n\nThe \ncoreapi\n Python package allows you to programmatically interact with any\nAPI that exposes a supported schema format.\n\n\nGetting started\n\n\nYou'll need to install the \ncoreapi\n package using \npip\n before you can get\nstarted.\n\n\n$ pip install coreapi\n\n\n\nIn order to start working with an API, we first need a \nClient\n instance. The\nclient holds any configuration around which codecs and transports are supported\nwhen interacting with an API, which allows you to provide for more advanced\nkinds of behaviour.\n\n\nimport coreapi\nclient = coreapi.Client()\n\n\n\nOnce we have a \nClient\n instance, we can fetch an API schema from the network.\n\n\nschema = client.get('https://api.example.org/')\n\n\n\nThe object returned from this call will be a \nDocument\n instance, which is\nthe internal representation of the interface that we are interacting with.\n\n\nNow that we have our schema \nDocument\n, we can now start to interact with the API:\n\n\nusers = client.action(schema, ['users', 'list'])\n\n\n\nSome endpoints may include named parameters, which might be either optional or required:\n\n\nnew_user = client.action(schema, ['users', 'create'], params={\"username\": \"max\"})\n\n\n\nCodecs\n\n\nCodecs are responsible for encoding or decoding Documents.\n\n\nThe decoding process is used by a client to take a bytestring of an API schema\ndefinition, and returning the Core API \nDocument\n that represents that interface.\n\n\nA codec should be associated with a particular media type, such as \n'application/coreapi+json'\n.\n\n\nThis media type is used by the server in the response \nContent-Type\n header,\nin order to indicate what kind of data is being returned in the response.\n\n\nConfiguring codecs\n\n\nThe codecs that are available can be configured when instantiating a client.\nThe keyword argument used here is \ndecoders\n, because in the context of a\nclient the codecs are only for \ndecoding\n responses.\n\n\nIn the following example we'll configure a client to only accept \nCore JSON\n\nand \nJSON\n responses. This will allow us to receive and decode a Core JSON schema,\nand subsequently to receive JSON responses made against the API.\n\n\nfrom coreapi import codecs, Client\n\ndecoders = [codecs.CoreJSONCodec(), codecs.JSONCodec()]\nclient = Client(decoders=decoders)\n\n\n\nLoading and saving schemas\n\n\nYou can use a codec directly, in order to load an existing schema definition,\nand return the resulting \nDocument\n.\n\n\ninput_file = open('my-api-schema.json', 'rb')\nschema_definition = input_file.read()\ncodec = codecs.CoreJSONCodec()\nschema = codec.load(schema_definition)\n\n\n\nYou can also use a codec directly to generate a schema definition given a \nDocument\n instance:\n\n\nschema_definition = codec.dump(schema)\noutput_file = open('my-api-schema.json', 'rb')\noutput_file.write(schema_definition)\n\n\n\nTransports\n\n\nTransports are responsible for making network requests. The set of transports\nthat a client has installed determines which network protocols it is able to\nsupport.\n\n\nCurrently the \ncoreapi\n library only includes an HTTP/HTTPS transport, but\nother protocols can also be supported.\n\n\nConfiguring transports\n\n\nThe behaviour of the network layer can be customized by configuring the\ntransports that the client is instantiated with.\n\n\nimport requests\nfrom coreapi import transports, Client\n\ncredentials = {'api.example.org': 'Token 3bd44a009d16ff'}\ntransports = transports.HTTPTransport(credentials=credentials)\nclient = Client(transports=transports)\n\n\n\nMore complex customizations can also be achieved, for example modifying the\nunderlying \nrequests.Session\n instance to \nattach transport adaptors\n\nthat modify the outgoing requests.",
            "title": "API Clients"
        },
        {
            "location": "/topics/api-clients/#api-clients",
            "text": "An API client handles the underlying details of how network requests are made\nand how responses are decoded. They present the developer with an application\ninterface to work against, rather than working directly with the network interface.  The API clients documented here are not restricted to APIs built with Django REST framework.\n They can be used with any API that exposes a supported schema format.  For example,  the Heroku platform API  exposes a schema in the JSON\nHyperschema format. As a result, the Core API command line client and Python\nclient library can be  used to interact with the Heroku API .",
            "title": "API Clients"
        },
        {
            "location": "/topics/api-clients/#client-side-core-api",
            "text": "Core API  is a document specification that can be used to describe APIs. It can\nbe used either server-side, as is done with REST framework's  schema generation ,\nor used client-side, as described here.  When used client-side, Core API allows for  dynamically driven client libraries \nthat can interact with any API that exposes a supported schema or hypermedia\nformat.  Using a dynamically driven client has a number of advantages over interacting\nwith an API by building HTTP requests directly.",
            "title": "Client-side Core API"
        },
        {
            "location": "/topics/api-clients/#more-meaningful-interaction",
            "text": "API interactions are presented in a more meaningful way. You're working at\nthe application interface layer, rather than the network interface layer.",
            "title": "More meaningful interaction"
        },
        {
            "location": "/topics/api-clients/#resilience-evolvability",
            "text": "The client determines what endpoints are available, what parameters exist\nagainst each particular endpoint, and how HTTP requests are formed.  This also allows for a degree of API evolvability. URLs can be modified\nwithout breaking existing clients, or more efficient encodings can be used\non-the-wire, with clients transparently upgrading.",
            "title": "Resilience &amp; evolvability"
        },
        {
            "location": "/topics/api-clients/#self-descriptive-apis",
            "text": "A dynamically driven client is able to present documentation on the API to the\nend user. This documentation allows the user to discover the available endpoints\nand parameters, and better understand the API they are working with.  Because this documentation is driven by the API schema it will always be fully\nup to date with the most recently deployed version of the service.",
            "title": "Self-descriptive APIs"
        },
        {
            "location": "/topics/api-clients/#command-line-client",
            "text": "The command line client allows you to inspect and interact with any API that\nexposes a supported schema format.",
            "title": "Command line client"
        },
        {
            "location": "/topics/api-clients/#getting-started",
            "text": "To install the Core API command line client, use  pip .  Note that the command-line client is a separate package to the\npython client library. Make sure to install  coreapi-cli .  $ pip install coreapi-cli  To start inspecting and interacting with an API the schema must first be loaded\nfrom the network.  $ coreapi get http://api.example.org/\n<Pastebin API \"http://127.0.0.1:8000/\">\nsnippets: {\n    create(code, [title], [linenos], [language], [style])\n    destroy(pk)\n    highlight(pk)\n    list([page])\n    partial_update(pk, [title], [code], [linenos], [language], [style])\n    retrieve(pk)\n    update(pk, code, [title], [linenos], [language], [style])\n}\nusers: {\n    list([page])\n    retrieve(pk)\n}  This will then load the schema, displaying the resulting  Document . This Document  includes all the available interactions that may be made against the API.  To interact with the API, use the  action  command. This command requires a list\nof keys that are used to index into the link.  $ coreapi action users list\n[\n    {\n        \"url\": \"http://127.0.0.1:8000/users/2/\",\n        \"id\": 2,\n        \"username\": \"aziz\",\n        \"snippets\": []\n    },\n    ...\n]  To inspect the underlying HTTP request and response, use the  --debug  flag.  $ coreapi action users list --debug\n> GET /users/ HTTP/1.1\n> Accept: application/vnd.coreapi+json, */*\n> Authorization: Basic bWF4Om1heA==\n> Host: 127.0.0.1\n> User-Agent: coreapi\n< 200 OK\n< Allow: GET, HEAD, OPTIONS\n< Content-Type: application/json\n< Date: Thu, 30 Jun 2016 10:51:46 GMT\n< Server: WSGIServer/0.1 Python/2.7.10\n< Vary: Accept, Cookie\n<\n< [{\"url\":\"http://127.0.0.1/users/2/\",\"id\":2,\"username\":\"aziz\",\"snippets\":[]},{\"url\":\"http://127.0.0.1/users/3/\",\"id\":3,\"username\":\"amy\",\"snippets\":[\"http://127.0.0.1/snippets/3/\"]},{\"url\":\"http://127.0.0.1/users/4/\",\"id\":4,\"username\":\"max\",\"snippets\":[\"http://127.0.0.1/snippets/4/\",\"http://127.0.0.1/snippets/5/\",\"http://127.0.0.1/snippets/6/\",\"http://127.0.0.1/snippets/7/\"]},{\"url\":\"http://127.0.0.1/users/5/\",\"id\":5,\"username\":\"jose\",\"snippets\":[]},{\"url\":\"http://127.0.0.1/users/6/\",\"id\":6,\"username\":\"admin\",\"snippets\":[\"http://127.0.0.1/snippets/1/\",\"http://127.0.0.1/snippets/2/\"]}]\n\n[\n    ...\n]  Some actions may include optional or required parameters.  $ coreapi action users create --param username=example  When using  --param , the type of the input will be determined automatically.  If you want to be more explicit about the parameter type then use  --data  for\nany null, numeric, boolean, list, or object inputs, and use  --string  for string inputs.  $ coreapi action users edit --string username=tomchristie --data is_admin=true",
            "title": "Getting started"
        },
        {
            "location": "/topics/api-clients/#authentication-headers",
            "text": "The  credentials  command is used to manage the request  Authentication:  header.\nAny credentials added are always linked to a particular domain, so as to ensure\nthat credentials are not leaked across differing APIs.  The format for adding a new credential is:  $ coreapi credentials add <domain> <credentials string>  For instance:  $ coreapi credentials add api.example.org \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\"  The optional  --auth  flag also allows you to add specific types of authentication,\nhandling the encoding for you. Currently only  \"basic\"  is supported as an option here.\nFor example:  $ coreapi credentials add api.example.org tomchristie:foobar --auth basic  You can also add specific request headers, using the  headers  command:  $ coreapi headers add api.example.org x-api-version 2  For more information and a listing of the available subcommands use  coreapi\ncredentials --help  or  coreapi headers --help .",
            "title": "Authentication &amp; headers"
        },
        {
            "location": "/topics/api-clients/#codecs",
            "text": "By default the command line client only includes support for reading Core JSON\nschemas, however it includes a plugin system for installing additional codecs.  $ pip install openapi-codec jsonhyperschema-codec hal-codec\n$ coreapi codecs show\nCodecs\ncorejson        application/vnd.coreapi+json encoding, decoding\nhal             application/hal+json         encoding, decoding\nopenapi         application/openapi+json     encoding, decoding\njsonhyperschema application/schema+json      decoding\njson            application/json             data\ntext            text/*                       data",
            "title": "Codecs"
        },
        {
            "location": "/topics/api-clients/#utilities",
            "text": "The command line client includes functionality for bookmarking API URLs\nunder a memorable name. For example, you can add a bookmark for the\nexisting API, like so...  $ coreapi bookmarks add accountmanagement  There is also functionality for navigating forward or backward through the\nhistory of which API URLs have been accessed.  $ coreapi history show\n$ coreapi history back  For more information and a listing of the available subcommands use coreapi bookmarks --help  or  coreapi history --help .",
            "title": "Utilities"
        },
        {
            "location": "/topics/api-clients/#other-commands",
            "text": "To display the current  Document :  $ coreapi show  To reload the current  Document  from the network:  $ coreapi reload  To load a schema file from disk:  $ coreapi load my-api-schema.json --format corejson  To dump the current document to console in a given format:  $ coreapi dump --format openapi  To remove the current document, along with all currently saved history,\ncredentials, headers and bookmarks:  $ coreapi clear",
            "title": "Other commands"
        },
        {
            "location": "/topics/api-clients/#python-client-library",
            "text": "The  coreapi  Python package allows you to programmatically interact with any\nAPI that exposes a supported schema format.",
            "title": "Python client library"
        },
        {
            "location": "/topics/api-clients/#getting-started_1",
            "text": "You'll need to install the  coreapi  package using  pip  before you can get\nstarted.  $ pip install coreapi  In order to start working with an API, we first need a  Client  instance. The\nclient holds any configuration around which codecs and transports are supported\nwhen interacting with an API, which allows you to provide for more advanced\nkinds of behaviour.  import coreapi\nclient = coreapi.Client()  Once we have a  Client  instance, we can fetch an API schema from the network.  schema = client.get('https://api.example.org/')  The object returned from this call will be a  Document  instance, which is\nthe internal representation of the interface that we are interacting with.  Now that we have our schema  Document , we can now start to interact with the API:  users = client.action(schema, ['users', 'list'])  Some endpoints may include named parameters, which might be either optional or required:  new_user = client.action(schema, ['users', 'create'], params={\"username\": \"max\"})",
            "title": "Getting started"
        },
        {
            "location": "/topics/api-clients/#codecs_1",
            "text": "Codecs are responsible for encoding or decoding Documents.  The decoding process is used by a client to take a bytestring of an API schema\ndefinition, and returning the Core API  Document  that represents that interface.  A codec should be associated with a particular media type, such as  'application/coreapi+json' .  This media type is used by the server in the response  Content-Type  header,\nin order to indicate what kind of data is being returned in the response.",
            "title": "Codecs"
        },
        {
            "location": "/topics/api-clients/#configuring-codecs",
            "text": "The codecs that are available can be configured when instantiating a client.\nThe keyword argument used here is  decoders , because in the context of a\nclient the codecs are only for  decoding  responses.  In the following example we'll configure a client to only accept  Core JSON \nand  JSON  responses. This will allow us to receive and decode a Core JSON schema,\nand subsequently to receive JSON responses made against the API.  from coreapi import codecs, Client\n\ndecoders = [codecs.CoreJSONCodec(), codecs.JSONCodec()]\nclient = Client(decoders=decoders)",
            "title": "Configuring codecs"
        },
        {
            "location": "/topics/api-clients/#loading-and-saving-schemas",
            "text": "You can use a codec directly, in order to load an existing schema definition,\nand return the resulting  Document .  input_file = open('my-api-schema.json', 'rb')\nschema_definition = input_file.read()\ncodec = codecs.CoreJSONCodec()\nschema = codec.load(schema_definition)  You can also use a codec directly to generate a schema definition given a  Document  instance:  schema_definition = codec.dump(schema)\noutput_file = open('my-api-schema.json', 'rb')\noutput_file.write(schema_definition)",
            "title": "Loading and saving schemas"
        },
        {
            "location": "/topics/api-clients/#transports",
            "text": "Transports are responsible for making network requests. The set of transports\nthat a client has installed determines which network protocols it is able to\nsupport.  Currently the  coreapi  library only includes an HTTP/HTTPS transport, but\nother protocols can also be supported.",
            "title": "Transports"
        },
        {
            "location": "/topics/api-clients/#configuring-transports",
            "text": "The behaviour of the network layer can be customized by configuring the\ntransports that the client is instantiated with.  import requests\nfrom coreapi import transports, Client\n\ncredentials = {'api.example.org': 'Token 3bd44a009d16ff'}\ntransports = transports.HTTPTransport(credentials=credentials)\nclient = Client(transports=transports)  More complex customizations can also be achieved, for example modifying the\nunderlying  requests.Session  instance to  attach transport adaptors \nthat modify the outgoing requests.",
            "title": "Configuring transports"
        },
        {
            "location": "/topics/internationalization/",
            "text": "Internationalization\n\n\n\n\nSupporting internationalization is not optional. It must be a core feature.\n\n\n\u2014 \nJannis Leidel, speaking at Django Under the Hood, 2015\n.\n\n\n\n\nREST framework ships with translatable error messages. You can make these appear in your language enabling \nDjango's standard translation mechanisms\n.\n\n\nDoing so will allow you to:\n\n\n\n\nSelect a language other than English as the default, using the standard \nLANGUAGE_CODE\n Django setting.\n\n\nAllow clients to choose a language themselves, using the \nLocaleMiddleware\n included with Django. A typical usage for API clients would be to include an \nAccept-Language\n request header.\n\n\n\n\nEnabling internationalized APIs\n\n\nYou can change the default language by using the standard Django \nLANGUAGE_CODE\n setting:\n\n\nLANGUAGE_CODE = \"es-es\"\n\n\n\nYou can turn on per-request language requests by adding \nLocalMiddleware\n to your \nMIDDLEWARE_CLASSES\n setting:\n\n\nMIDDLEWARE_CLASSES = [\n    ...\n    'django.middleware.locale.LocaleMiddleware'\n]\n\n\n\nWhen per-request internationalization is enabled, client requests will respect the \nAccept-Language\n header where possible. For example, let's make a request for an unsupported media type:\n\n\nRequest\n\n\nGET /api/users HTTP/1.1\nAccept: application/xml\nAccept-Language: es-es\nHost: example.org\n\n\n\nResponse\n\n\nHTTP/1.0 406 NOT ACCEPTABLE\n\n{\"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\"}\n\n\n\nREST framework includes these built-in translations both for standard exception cases, and for serializer validation errors.\n\n\nNote that the translations only apply to the error strings themselves. The format of error messages, and the keys of field names will remain the same. An example \n400 Bad Request\n response body might look like this:\n\n\n{\"detail\": {\"username\": [\"Esse campo deve ser unico.\"]}}\n\n\n\nIf you want to use different string for parts of the response such as \ndetail\n and \nnon_field_errors\n then you can modify this behavior by using a \ncustom exception handler\n.\n\n\nSpecifying the set of supported languages.\n\n\nBy default all available languages will be supported.\n\n\nIf you only wish to support a subset of the available languages, use Django's standard \nLANGUAGES\n setting:\n\n\nLANGUAGES = [\n    ('de', _('German')),\n    ('en', _('English')),\n]\n\n\n\nAdding new translations\n\n\nREST framework translations are managed online using \nTransifex\n. You can use the Transifex service to add new translation languages. The maintenance team will then ensure that these translation strings are included in the REST framework package.\n\n\nSometimes you may need to add translation strings to your project locally. You may need to do this if:\n\n\n\n\nYou want to use REST Framework in a language which has not been translated yet on Transifex.\n\n\nYour project includes custom error messages, which are not part of REST framework's default translation strings.\n\n\n\n\nTranslating a new language locally\n\n\nThis guide assumes you are already familiar with how to translate a Django app.  If you're not, start by reading \nDjango's translation docs\n.\n\n\nIf you're translating a new language you'll need to translate the existing REST framework error messages:\n\n\n\n\n\n\nMake a new folder where you want to store the internationalization resources. Add this path to your \nLOCALE_PATHS\n setting.\n\n\n\n\n\n\nNow create a subfolder for the language you want to translate. The folder should be named using \nlocale name\n notation. For example: \nde\n, \npt_BR\n, \nes_AR\n.\n\n\n\n\n\n\nNow copy the \nbase translations file\n from the REST framework source code into your translations folder.\n\n\n\n\n\n\nEdit the \ndjango.po\n file you've just copied, translating all the error messages.\n\n\n\n\n\n\nRun \nmanage.py compilemessages -l pt_BR\n to make the translations \navailable for Django to use. You should see a message like \nprocessing file django.po in <...>/locale/pt_BR/LC_MESSAGES\n.\n\n\n\n\n\n\nRestart your development server to see the changes take effect.\n\n\n\n\n\n\nIf you're only translating custom error messages that exist inside your project codebase you don't need to copy the REST framework source \ndjango.po\n file into a \nLOCALE_PATHS\n folder, and can instead simply run Django's standard \nmakemessages\n process.\n\n\nHow the language is determined\n\n\nIf you want to allow per-request language preferences you'll need to include \ndjango.middleware.locale.LocaleMiddleware\n in your \nMIDDLEWARE_CLASSES\n setting.\n\n\nYou can find more information on how the language preference is determined in the \nDjango documentation\n. For reference, the method is:\n\n\n\n\nFirst, it looks for the language prefix in the requested URL.\n\n\nFailing that, it looks for the \nLANGUAGE_SESSION_KEY\n key in the current user\u2019s session.\n\n\nFailing that, it looks for a cookie.\n\n\nFailing that, it looks at the \nAccept-Language\n HTTP header.\n\n\nFailing that, it uses the global \nLANGUAGE_CODE\n setting.\n\n\n\n\nFor API clients the most appropriate of these will typically be to use the \nAccept-Language\n header; Sessions and cookies will not be available unless using session authentication, and generally better practice to prefer an \nAccept-Language\n header for API clients rather than using language URL prefixes.",
            "title": "Internationalization"
        },
        {
            "location": "/topics/internationalization/#internationalization",
            "text": "Supporting internationalization is not optional. It must be a core feature.  \u2014  Jannis Leidel, speaking at Django Under the Hood, 2015 .   REST framework ships with translatable error messages. You can make these appear in your language enabling  Django's standard translation mechanisms .  Doing so will allow you to:   Select a language other than English as the default, using the standard  LANGUAGE_CODE  Django setting.  Allow clients to choose a language themselves, using the  LocaleMiddleware  included with Django. A typical usage for API clients would be to include an  Accept-Language  request header.",
            "title": "Internationalization"
        },
        {
            "location": "/topics/internationalization/#enabling-internationalized-apis",
            "text": "You can change the default language by using the standard Django  LANGUAGE_CODE  setting:  LANGUAGE_CODE = \"es-es\"  You can turn on per-request language requests by adding  LocalMiddleware  to your  MIDDLEWARE_CLASSES  setting:  MIDDLEWARE_CLASSES = [\n    ...\n    'django.middleware.locale.LocaleMiddleware'\n]  When per-request internationalization is enabled, client requests will respect the  Accept-Language  header where possible. For example, let's make a request for an unsupported media type:  Request  GET /api/users HTTP/1.1\nAccept: application/xml\nAccept-Language: es-es\nHost: example.org  Response  HTTP/1.0 406 NOT ACCEPTABLE\n\n{\"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\"}  REST framework includes these built-in translations both for standard exception cases, and for serializer validation errors.  Note that the translations only apply to the error strings themselves. The format of error messages, and the keys of field names will remain the same. An example  400 Bad Request  response body might look like this:  {\"detail\": {\"username\": [\"Esse campo deve ser unico.\"]}}  If you want to use different string for parts of the response such as  detail  and  non_field_errors  then you can modify this behavior by using a  custom exception handler .",
            "title": "Enabling internationalized APIs"
        },
        {
            "location": "/topics/internationalization/#specifying-the-set-of-supported-languages",
            "text": "By default all available languages will be supported.  If you only wish to support a subset of the available languages, use Django's standard  LANGUAGES  setting:  LANGUAGES = [\n    ('de', _('German')),\n    ('en', _('English')),\n]",
            "title": "Specifying the set of supported languages."
        },
        {
            "location": "/topics/internationalization/#adding-new-translations",
            "text": "REST framework translations are managed online using  Transifex . You can use the Transifex service to add new translation languages. The maintenance team will then ensure that these translation strings are included in the REST framework package.  Sometimes you may need to add translation strings to your project locally. You may need to do this if:   You want to use REST Framework in a language which has not been translated yet on Transifex.  Your project includes custom error messages, which are not part of REST framework's default translation strings.",
            "title": "Adding new translations"
        },
        {
            "location": "/topics/internationalization/#translating-a-new-language-locally",
            "text": "This guide assumes you are already familiar with how to translate a Django app.  If you're not, start by reading  Django's translation docs .  If you're translating a new language you'll need to translate the existing REST framework error messages:    Make a new folder where you want to store the internationalization resources. Add this path to your  LOCALE_PATHS  setting.    Now create a subfolder for the language you want to translate. The folder should be named using  locale name  notation. For example:  de ,  pt_BR ,  es_AR .    Now copy the  base translations file  from the REST framework source code into your translations folder.    Edit the  django.po  file you've just copied, translating all the error messages.    Run  manage.py compilemessages -l pt_BR  to make the translations \navailable for Django to use. You should see a message like  processing file django.po in <...>/locale/pt_BR/LC_MESSAGES .    Restart your development server to see the changes take effect.    If you're only translating custom error messages that exist inside your project codebase you don't need to copy the REST framework source  django.po  file into a  LOCALE_PATHS  folder, and can instead simply run Django's standard  makemessages  process.",
            "title": "Translating a new language locally"
        },
        {
            "location": "/topics/internationalization/#how-the-language-is-determined",
            "text": "If you want to allow per-request language preferences you'll need to include  django.middleware.locale.LocaleMiddleware  in your  MIDDLEWARE_CLASSES  setting.  You can find more information on how the language preference is determined in the  Django documentation . For reference, the method is:   First, it looks for the language prefix in the requested URL.  Failing that, it looks for the  LANGUAGE_SESSION_KEY  key in the current user\u2019s session.  Failing that, it looks for a cookie.  Failing that, it looks at the  Accept-Language  HTTP header.  Failing that, it uses the global  LANGUAGE_CODE  setting.   For API clients the most appropriate of these will typically be to use the  Accept-Language  header; Sessions and cookies will not be available unless using session authentication, and generally better practice to prefer an  Accept-Language  header for API clients rather than using language URL prefixes.",
            "title": "How the language is determined"
        },
        {
            "location": "/topics/ajax-csrf-cors_zh/",
            "text": "\u4f7f\u7528AJAX\uff0cCSRF\u548cCORS\n\n\n\n\n\"\u4ed4\u7ec6\u89c2\u5bdf\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u7684\u53ef\u80fd\u7684CSRF/XSRF\u6f0f\u6d1e\u3002\u5b83\u4eec\u662f\u6700\u7cdf\u7cd5\u7684\u6f0f\u6d1e \u2014 \u975e\u5e38\u5bb9\u6613\u88ab\u653b\u51fb\u8005\u5229\u7528\u3002\u4f46\u5bf9\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u81f3\u5c11\u76f4\u5230\u4f60\u88ab\u653b\u51fb\u4e86\u4f60\u624d\u80fd\u76f4\u89c2\u7684\u7406\u89e3\u3002\"\n\n\n\u2014 \nJeff Atwood\n\n\n\n\nJavascript\u5ba2\u6237\u7aef\n\n\n\u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4e00\u4e2aJavaScript\u5ba2\u6237\u7aef\u6765\u548cWeb API\u5bf9\u63a5\uff0c\u4f60\u5c06\u9700\u8981\u8003\u8651\u5ba2\u6237\u7aef\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u7f51\u7ad9\u5176\u4ed6\u90e8\u5206\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\uff0c\u5e76\u786e\u5b9a\u662f\u5426\u9700\u8981\u4f7f\u7528CSRF\u4ee4\u724c\u6216CORS\u6807\u5934\u3002\n\n\n\u4e0e\u6b63\u5728\u4ea4\u4e92\u7684API\u76f8\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u53d1\u8d77\u7684AJAX\u8bf7\u6c42\u901a\u5e38\u5c06\u4f7f\u7528 \nSessionAuthentication\n\u3002 \u8fd9\u786e\u4fdd\u4e00\u65e6\u7528\u6237\u767b\u5f55\uff0c\u4efb\u4f55AJAX\u8bf7\u6c42\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0e\u7f51\u7ad9\u5176\u4ed6\u90e8\u5206\u76f8\u540c\u7684\u57fa\u4e8e\u4f1a\u8bdd\u7684\u8eab\u4efd\u9a8c\u8bc1\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\n\n\n\u4e0e\u5176\u901a\u4fe1\u7684API\u5728\u4e0d\u540c\u7ad9\u70b9\u4e0a\u53d1\u8d77\u7684AJAX\u8bf7\u6c42\u901a\u5e38\u9700\u8981\u4f7f\u7528\u57fa\u4e8e\u975e\u4f1a\u8bdd\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u4f8b\u5982\nTokenAuthentication\n\u3002\n\n\nCSRF\u4fdd\u62a4\n\n\nCross Site Request Forgery\n\u4fdd\u62a4\u662f\u9632\u6b62\u7279\u5b9a\u7c7b\u578b\u7684\u653b\u51fb\u7684\u673a\u5236\uff0c\u5f53\u7528\u6237\u6ca1\u6709\u6ce8\u9500\u767b\u51fa\u7f51\u7ad9\u5e76\u4e14\u5177\u6709\u6709\u6548\u7684\u4f1a\u8bdd\u65f6\uff0c\u8fd9\u79cd\u653b\u51fb\u53ef\u80fd\u53d1\u751f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6076\u610f\u7ad9\u70b9\u53ef\u80fd\u4f1a\u5728\u767b\u5f55\u4f1a\u8bdd\u7684\u4e0a\u4e0b\u6587\u4e2d\u9488\u5bf9\u76ee\u6807\u7ad9\u70b9\u6267\u884c\u653b\u51fb\u64cd\u4f5c\u3002\n\n\n\u4e3a\u4e86\u9632\u8303\u8fd9\u4e9b\u7c7b\u578b\u7684\u653b\u51fb\uff0c\u4f60\u9700\u8981\u505a\u4e24\u4ef6\u4e8b\u60c5\uff1a\n\n\n\n\n\u786e\u4fdd\u201c\u5b89\u5168\u201d\u7684HTTP\u64cd\u4f5c\uff08\u5982\uff1a\nGET\n\uff0c\nHEAD\n\u548c\nOPTIONS\n\uff09\u4e0d\u80fd\u7528\u4e8e\u66f4\u6539\u4efb\u4f55\u670d\u52a1\u5668\u7aef\u72b6\u6001\u3002\n\n\n\u786e\u4fdd\u201c\u4e0d\u5b89\u5168\u201d\u7684HTTP\u64cd\u4f5c\uff08\u5982\uff1a\nPOST\n\uff0c\nPUT\n\uff0c\nPATCH\n\u548c\nDELETE\n\uff09\u59cb\u7ec8\u9700\u8981\u6709\u6548\u7684CSRF\u4ee4\u724c\u3002\n\n\n\n\n\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\nSessionAuthentication\n \u5219\u9700\u8981\u4e3a\u4efb\u4f55\nPOST\n\uff0c\nPUT\n\uff0c\nPATCH\n\u6216\nDELETE\n\u64cd\u4f5c\u5305\u542b\u6709\u6548\u7684CSRF\u4ee4\u724c\u3002\n\n\n\u4e3a\u4e86\u4f7f\u7528AJAX\u8bf7\u6c42\uff0c\u4f60\u9700\u8981\u5728HTTP\u6807\u5934\u4e2d\u5305\u542bCSRF\u4ee4\u724c\uff0c\u5982\nDjango\u6587\u6863\u4e2d\u6240\u8ff0\n\u3002\n\n\nCORS\n\n\nCross-Origin Resource Sharing\n\u662f\u5141\u8bb8\u5ba2\u6237\u7aef\u4e0e\u6258\u7ba1\u5728\u4e0d\u540c\u57df\u4e0a\u7684API\u4ea4\u4e92\u7684\u673a\u5236\u3002CORS\u7684\u5de5\u4f5c\u539f\u7406\u662f\u8981\u6c42\u670d\u52a1\u5668\u5305\u542b\u4e00\u7ec4\u7279\u5b9a\u7684\u6807\u5934\u4fe1\u606f\uff0c\u5141\u8bb8\u6d4f\u89c8\u5668\u786e\u5b9a\u662f\u5426\u548c\u4f55\u65f6\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u3002\n\n\n\u5728REST\u6846\u67b6\u4e2d\u5904\u7406CORS\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u5728\u4e2d\u95f4\u4ef6\u4e2d\u6dfb\u52a0\u6240\u9700\u7684\u54cd\u5e94\u5934\u4fe1\u606f\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fddCORS\u5f97\u5230\u900f\u660e\u652f\u6301\uff0c\u800c\u65e0\u9700\u66f4\u6539\u89c6\u56fe\u4e2d\u7684\u4efb\u4f55\u884c\u4e3a\u3002\n\n\nOtto Yiu\n\u7ef4\u62a4\u7740\u80fd\u5728REST\u6846\u67b6\u642d\u5efa\u7684API\u4e0b\u6b63\u5e38\u4f7f\u7528\u7684\ndjango-cors-headers\n\u5305\u3002",
            "title": "AJAX, CSRF & CORS"
        },
        {
            "location": "/topics/ajax-csrf-cors_zh/#ajaxcsrfcors",
            "text": "\"\u4ed4\u7ec6\u89c2\u5bdf\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u7684\u53ef\u80fd\u7684CSRF/XSRF\u6f0f\u6d1e\u3002\u5b83\u4eec\u662f\u6700\u7cdf\u7cd5\u7684\u6f0f\u6d1e \u2014 \u975e\u5e38\u5bb9\u6613\u88ab\u653b\u51fb\u8005\u5229\u7528\u3002\u4f46\u5bf9\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u81f3\u5c11\u76f4\u5230\u4f60\u88ab\u653b\u51fb\u4e86\u4f60\u624d\u80fd\u76f4\u89c2\u7684\u7406\u89e3\u3002\"  \u2014  Jeff Atwood",
            "title": "\u4f7f\u7528AJAX\uff0cCSRF\u548cCORS"
        },
        {
            "location": "/topics/ajax-csrf-cors_zh/#javascript",
            "text": "\u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4e00\u4e2aJavaScript\u5ba2\u6237\u7aef\u6765\u548cWeb API\u5bf9\u63a5\uff0c\u4f60\u5c06\u9700\u8981\u8003\u8651\u5ba2\u6237\u7aef\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u7f51\u7ad9\u5176\u4ed6\u90e8\u5206\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\uff0c\u5e76\u786e\u5b9a\u662f\u5426\u9700\u8981\u4f7f\u7528CSRF\u4ee4\u724c\u6216CORS\u6807\u5934\u3002  \u4e0e\u6b63\u5728\u4ea4\u4e92\u7684API\u76f8\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u53d1\u8d77\u7684AJAX\u8bf7\u6c42\u901a\u5e38\u5c06\u4f7f\u7528  SessionAuthentication \u3002 \u8fd9\u786e\u4fdd\u4e00\u65e6\u7528\u6237\u767b\u5f55\uff0c\u4efb\u4f55AJAX\u8bf7\u6c42\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0e\u7f51\u7ad9\u5176\u4ed6\u90e8\u5206\u76f8\u540c\u7684\u57fa\u4e8e\u4f1a\u8bdd\u7684\u8eab\u4efd\u9a8c\u8bc1\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002  \u4e0e\u5176\u901a\u4fe1\u7684API\u5728\u4e0d\u540c\u7ad9\u70b9\u4e0a\u53d1\u8d77\u7684AJAX\u8bf7\u6c42\u901a\u5e38\u9700\u8981\u4f7f\u7528\u57fa\u4e8e\u975e\u4f1a\u8bdd\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u4f8b\u5982 TokenAuthentication \u3002",
            "title": "Javascript\u5ba2\u6237\u7aef"
        },
        {
            "location": "/topics/ajax-csrf-cors_zh/#csrf",
            "text": "Cross Site Request Forgery \u4fdd\u62a4\u662f\u9632\u6b62\u7279\u5b9a\u7c7b\u578b\u7684\u653b\u51fb\u7684\u673a\u5236\uff0c\u5f53\u7528\u6237\u6ca1\u6709\u6ce8\u9500\u767b\u51fa\u7f51\u7ad9\u5e76\u4e14\u5177\u6709\u6709\u6548\u7684\u4f1a\u8bdd\u65f6\uff0c\u8fd9\u79cd\u653b\u51fb\u53ef\u80fd\u53d1\u751f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6076\u610f\u7ad9\u70b9\u53ef\u80fd\u4f1a\u5728\u767b\u5f55\u4f1a\u8bdd\u7684\u4e0a\u4e0b\u6587\u4e2d\u9488\u5bf9\u76ee\u6807\u7ad9\u70b9\u6267\u884c\u653b\u51fb\u64cd\u4f5c\u3002  \u4e3a\u4e86\u9632\u8303\u8fd9\u4e9b\u7c7b\u578b\u7684\u653b\u51fb\uff0c\u4f60\u9700\u8981\u505a\u4e24\u4ef6\u4e8b\u60c5\uff1a   \u786e\u4fdd\u201c\u5b89\u5168\u201d\u7684HTTP\u64cd\u4f5c\uff08\u5982\uff1a GET \uff0c HEAD \u548c OPTIONS \uff09\u4e0d\u80fd\u7528\u4e8e\u66f4\u6539\u4efb\u4f55\u670d\u52a1\u5668\u7aef\u72b6\u6001\u3002  \u786e\u4fdd\u201c\u4e0d\u5b89\u5168\u201d\u7684HTTP\u64cd\u4f5c\uff08\u5982\uff1a POST \uff0c PUT \uff0c PATCH \u548c DELETE \uff09\u59cb\u7ec8\u9700\u8981\u6709\u6548\u7684CSRF\u4ee4\u724c\u3002   \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f SessionAuthentication  \u5219\u9700\u8981\u4e3a\u4efb\u4f55 POST \uff0c PUT \uff0c PATCH \u6216 DELETE \u64cd\u4f5c\u5305\u542b\u6709\u6548\u7684CSRF\u4ee4\u724c\u3002  \u4e3a\u4e86\u4f7f\u7528AJAX\u8bf7\u6c42\uff0c\u4f60\u9700\u8981\u5728HTTP\u6807\u5934\u4e2d\u5305\u542bCSRF\u4ee4\u724c\uff0c\u5982 Django\u6587\u6863\u4e2d\u6240\u8ff0 \u3002",
            "title": "CSRF\u4fdd\u62a4"
        },
        {
            "location": "/topics/ajax-csrf-cors_zh/#cors",
            "text": "Cross-Origin Resource Sharing \u662f\u5141\u8bb8\u5ba2\u6237\u7aef\u4e0e\u6258\u7ba1\u5728\u4e0d\u540c\u57df\u4e0a\u7684API\u4ea4\u4e92\u7684\u673a\u5236\u3002CORS\u7684\u5de5\u4f5c\u539f\u7406\u662f\u8981\u6c42\u670d\u52a1\u5668\u5305\u542b\u4e00\u7ec4\u7279\u5b9a\u7684\u6807\u5934\u4fe1\u606f\uff0c\u5141\u8bb8\u6d4f\u89c8\u5668\u786e\u5b9a\u662f\u5426\u548c\u4f55\u65f6\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u3002  \u5728REST\u6846\u67b6\u4e2d\u5904\u7406CORS\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u5728\u4e2d\u95f4\u4ef6\u4e2d\u6dfb\u52a0\u6240\u9700\u7684\u54cd\u5e94\u5934\u4fe1\u606f\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fddCORS\u5f97\u5230\u900f\u660e\u652f\u6301\uff0c\u800c\u65e0\u9700\u66f4\u6539\u89c6\u56fe\u4e2d\u7684\u4efb\u4f55\u884c\u4e3a\u3002  Otto Yiu \u7ef4\u62a4\u7740\u80fd\u5728REST\u6846\u67b6\u642d\u5efa\u7684API\u4e0b\u6b63\u5e38\u4f7f\u7528\u7684 django-cors-headers \u5305\u3002",
            "title": "CORS"
        },
        {
            "location": "/topics/html-and-forms/",
            "text": "HTML & Forms\n\n\nREST framework is suitable for returning both API style responses, and regular HTML pages. Additionally, serializers can used as HTML forms and rendered in templates.\n\n\nRendering HTML\n\n\nIn order to return HTML responses you'll need to either \nTemplateHTMLRenderer\n, or \nStaticHTMLRenderer\n.\n\n\nThe \nTemplateHTMLRenderer\n class expects the response to contain a dictionary of context data, and renders an HTML page based on a template that must be specified either in the view or on the response.\n\n\nThe \nStaticHTMLRender\n class expects the response to contain a string of the pre-rendered HTML content.\n\n\nBecause static HTML pages typically have different behavior from API responses you'll probably need to write any HTML views explicitly, rather than relying on the built-in generic views.\n\n\nHere's an example of a view that returns a list of \"Profile\" instances, rendered in an HTML template:\n\n\nviews.py\n:\n\n\nfrom my_project.example.models import Profile\nfrom rest_framework.renderers import TemplateHTMLRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\n\nclass ProfileList(APIView):\n    renderer_classes = [TemplateHTMLRenderer]\n    template_name = 'profile_list.html'\n\n    def get(self, request):\n        queryset = Profile.objects.all()\n        return Response({'profiles': queryset})\n\n\n\nprofile_list.html\n:\n\n\n<html><body>\n<h1>Profiles</h1>\n<ul>\n    {% for profile in profiles %}\n    <li>{{ profile.name }}</li>\n    {% endfor %}\n</ul>\n</body></html>\n\n\n\nRendering Forms\n\n\nSerializers may be rendered as forms by using the \nrender_form\n template tag, and including the serializer instance as context to the template.\n\n\nThe following view demonstrates an example of using a serializer in a template for viewing and updating a model instance:\n\n\nviews.py\n:\n\n\nfrom django.shortcuts import get_object_or_404\nfrom my_project.example.models import Profile\nfrom rest_framework.renderers import TemplateHTMLRenderer\nfrom rest_framework.views import APIView\n\n\nclass ProfileDetail(APIView):\n    renderer_classes = [TemplateHTMLRenderer]\n    template_name = 'profile_detail.html'\n\n    def get(self, request, pk):\n        profile = get_object_or_404(Profile, pk=pk)\n        serializer = ProfileSerializer(profile)\n        return Response({'serializer': serializer, 'profile': profile})\n\n    def post(self, request, pk):\n        profile = get_object_or_404(Profile, pk=pk)\n        serializer = ProfileSerializer(profile, data=request.data)\n        if not serializer.is_valid():\n            return Response({'serializer': serializer, 'profile': profile})\n        serializer.save()\n        return redirect('profile-list')\n\n\n\nprofile_detail.html\n:\n\n\n{% load rest_framework %}\n\n<html><body>\n\n<h1>Profile - {{ profile.name }}</h1>\n\n<form action=\"{% url 'profile-detail' pk=profile.pk %}\" method=\"POST\">\n    {% csrf_token %}\n    {% render_form serializer %}\n    <input type=\"submit\" value=\"Save\">\n</form>\n\n</body></html>\n\n\n\nUsing template packs\n\n\nThe \nrender_form\n tag takes an optional \ntemplate_pack\n argument, that specifies which template directory should be used for rendering the form and form fields.\n\n\nREST framework includes three built-in template packs, all based on Bootstrap 3. The built-in styles are \nhorizontal\n, \nvertical\n, and \ninline\n. The default style is \nhorizontal\n. To use any of these template packs you'll want to also include the Bootstrap 3 CSS.\n\n\nThe following HTML will link to a CDN hosted version of the Bootstrap 3 CSS:\n\n\n<head>\n    \u2026\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\">\n</head>\n\n\n\nThird party packages may include alternate template packs, by bundling a template directory containing the necessary form and field templates.\n\n\nLet's take a look at how to render each of the three available template packs. For these examples we'll use a single serializer class to present a \"Login\" form.\n\n\nclass LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField(\n        max_length=100,\n        style={'placeholder': 'Email', 'autofocus': True}\n    )\n    password = serializers.CharField(\n        max_length=100,\n        style={'input_type': 'password', 'placeholder': 'Password'}\n    )\n    remember_me = serializers.BooleanField()\n\n\n\n\n\nrest_framework/vertical\n\n\nPresents form labels above their corresponding control inputs, using the standard Bootstrap layout.\n\n\nThis is the default template pack.\n\n\n{% load rest_framework %}\n\n...\n\n<form action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer template_pack='rest_framework/vertical' %}\n    <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>\n\n\n\n\n\n\n\nrest_framework/horizontal\n\n\nPresents labels and controls alongside each other, using a 2/10 column split.\n\n\nThis is the form style used in the browsable API and admin renderers.\n\n\n{% load rest_framework %}\n\n...\n\n<form class=\"form-horizontal\" action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer %}\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n            <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n        </div>\n    </div>\n</form>\n\n\n\n\n\n\n\nrest_framework/inline\n\n\nA compact form style that presents all the controls inline.\n\n\n{% load rest_framework %}\n\n...\n\n<form class=\"form-inline\" action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer template_pack='rest_framework/inline' %}\n    <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>\n\n\n\n\n\nField styles\n\n\nSerializer fields can have their rendering style customized by using the \nstyle\n keyword argument. This argument is a dictionary of options that control the template and layout used.\n\n\nThe most common way to customize the field style is to use the \nbase_template\n style keyword argument to select which template in the template pack should be use.\n\n\nFor example, to render a \nCharField\n as an HTML textarea rather than the default HTML input, you would use something like this:\n\n\ndetails = serializers.CharField(\n    max_length=1000,\n    style={'base_template': 'textarea.html'}\n)\n\n\n\nIf you instead want a field to be rendered using a custom template that is \nnot part of an included template pack\n, you can instead use the \ntemplate\n style option, to fully specify a template name:\n\n\ndetails = serializers.CharField(\n    max_length=1000,\n    style={'template': 'my-field-templates/custom-input.html'}\n)\n\n\n\nField templates can also use additional style properties, depending on their type. For example, the \ntextarea.html\n template also accepts a \nrows\n property that can be used to affect the sizing of the control.\n\n\ndetails = serializers.CharField(\n    max_length=1000,\n    style={'base_template': 'textarea.html', 'rows': 10}\n)\n\n\n\nThe complete list of \nbase_template\n options and their associated style options is listed below.\n\n\n\n\n\n\n\n\nbase_template\n\n\nValid field types\n\n\nAdditional style options\n\n\n\n\n\n\n\n\n\n\ninput.html\n\n\nAny string, numeric or date/time field\n\n\ninput_type, placeholder, hide_label, autofocus\n\n\n\n\n\n\ntextarea.html\n\n\nCharField\n\n\nrows, placeholder, hide_label\n\n\n\n\n\n\nselect.html\n\n\nChoiceField\n or relational field types\n\n\nhide_label\n\n\n\n\n\n\nradio.html\n\n\nChoiceField\n or relational field types\n\n\ninline, hide_label\n\n\n\n\n\n\nselect_multiple.html\n\n\nMultipleChoiceField\n or relational fields with \nmany=True\n\n\nhide_label\n\n\n\n\n\n\ncheckbox_multiple.html\n\n\nMultipleChoiceField\n or relational fields with \nmany=True\n\n\ninline, hide_label\n\n\n\n\n\n\ncheckbox.html\n\n\nBooleanField\n\n\nhide_label\n\n\n\n\n\n\nfieldset.html\n\n\nNested serializer\n\n\nhide_label\n\n\n\n\n\n\nlist_fieldset.html\n\n\nListField\n or nested serializer with \nmany=True\n\n\nhide_label",
            "title": "HTML & Forms"
        },
        {
            "location": "/topics/html-and-forms/#html-forms",
            "text": "REST framework is suitable for returning both API style responses, and regular HTML pages. Additionally, serializers can used as HTML forms and rendered in templates.",
            "title": "HTML &amp; Forms"
        },
        {
            "location": "/topics/html-and-forms/#rendering-html",
            "text": "In order to return HTML responses you'll need to either  TemplateHTMLRenderer , or  StaticHTMLRenderer .  The  TemplateHTMLRenderer  class expects the response to contain a dictionary of context data, and renders an HTML page based on a template that must be specified either in the view or on the response.  The  StaticHTMLRender  class expects the response to contain a string of the pre-rendered HTML content.  Because static HTML pages typically have different behavior from API responses you'll probably need to write any HTML views explicitly, rather than relying on the built-in generic views.  Here's an example of a view that returns a list of \"Profile\" instances, rendered in an HTML template:  views.py :  from my_project.example.models import Profile\nfrom rest_framework.renderers import TemplateHTMLRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\n\nclass ProfileList(APIView):\n    renderer_classes = [TemplateHTMLRenderer]\n    template_name = 'profile_list.html'\n\n    def get(self, request):\n        queryset = Profile.objects.all()\n        return Response({'profiles': queryset})  profile_list.html :  <html><body>\n<h1>Profiles</h1>\n<ul>\n    {% for profile in profiles %}\n    <li>{{ profile.name }}</li>\n    {% endfor %}\n</ul>\n</body></html>",
            "title": "Rendering HTML"
        },
        {
            "location": "/topics/html-and-forms/#rendering-forms",
            "text": "Serializers may be rendered as forms by using the  render_form  template tag, and including the serializer instance as context to the template.  The following view demonstrates an example of using a serializer in a template for viewing and updating a model instance:  views.py :  from django.shortcuts import get_object_or_404\nfrom my_project.example.models import Profile\nfrom rest_framework.renderers import TemplateHTMLRenderer\nfrom rest_framework.views import APIView\n\n\nclass ProfileDetail(APIView):\n    renderer_classes = [TemplateHTMLRenderer]\n    template_name = 'profile_detail.html'\n\n    def get(self, request, pk):\n        profile = get_object_or_404(Profile, pk=pk)\n        serializer = ProfileSerializer(profile)\n        return Response({'serializer': serializer, 'profile': profile})\n\n    def post(self, request, pk):\n        profile = get_object_or_404(Profile, pk=pk)\n        serializer = ProfileSerializer(profile, data=request.data)\n        if not serializer.is_valid():\n            return Response({'serializer': serializer, 'profile': profile})\n        serializer.save()\n        return redirect('profile-list')  profile_detail.html :  {% load rest_framework %}\n\n<html><body>\n\n<h1>Profile - {{ profile.name }}</h1>\n\n<form action=\"{% url 'profile-detail' pk=profile.pk %}\" method=\"POST\">\n    {% csrf_token %}\n    {% render_form serializer %}\n    <input type=\"submit\" value=\"Save\">\n</form>\n\n</body></html>",
            "title": "Rendering Forms"
        },
        {
            "location": "/topics/html-and-forms/#using-template-packs",
            "text": "The  render_form  tag takes an optional  template_pack  argument, that specifies which template directory should be used for rendering the form and form fields.  REST framework includes three built-in template packs, all based on Bootstrap 3. The built-in styles are  horizontal ,  vertical , and  inline . The default style is  horizontal . To use any of these template packs you'll want to also include the Bootstrap 3 CSS.  The following HTML will link to a CDN hosted version of the Bootstrap 3 CSS:  <head>\n    \u2026\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\">\n</head>  Third party packages may include alternate template packs, by bundling a template directory containing the necessary form and field templates.  Let's take a look at how to render each of the three available template packs. For these examples we'll use a single serializer class to present a \"Login\" form.  class LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField(\n        max_length=100,\n        style={'placeholder': 'Email', 'autofocus': True}\n    )\n    password = serializers.CharField(\n        max_length=100,\n        style={'input_type': 'password', 'placeholder': 'Password'}\n    )\n    remember_me = serializers.BooleanField()",
            "title": "Using template packs"
        },
        {
            "location": "/topics/html-and-forms/#rest_frameworkvertical",
            "text": "Presents form labels above their corresponding control inputs, using the standard Bootstrap layout.  This is the default template pack.  {% load rest_framework %}\n\n...\n\n<form action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer template_pack='rest_framework/vertical' %}\n    <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>",
            "title": "rest_framework/vertical"
        },
        {
            "location": "/topics/html-and-forms/#rest_frameworkhorizontal",
            "text": "Presents labels and controls alongside each other, using a 2/10 column split.  This is the form style used in the browsable API and admin renderers.  {% load rest_framework %}\n\n...\n\n<form class=\"form-horizontal\" action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer %}\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n            <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n        </div>\n    </div>\n</form>",
            "title": "rest_framework/horizontal"
        },
        {
            "location": "/topics/html-and-forms/#rest_frameworkinline",
            "text": "A compact form style that presents all the controls inline.  {% load rest_framework %}\n\n...\n\n<form class=\"form-inline\" action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer template_pack='rest_framework/inline' %}\n    <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>",
            "title": "rest_framework/inline"
        },
        {
            "location": "/topics/html-and-forms/#field-styles",
            "text": "Serializer fields can have their rendering style customized by using the  style  keyword argument. This argument is a dictionary of options that control the template and layout used.  The most common way to customize the field style is to use the  base_template  style keyword argument to select which template in the template pack should be use.  For example, to render a  CharField  as an HTML textarea rather than the default HTML input, you would use something like this:  details = serializers.CharField(\n    max_length=1000,\n    style={'base_template': 'textarea.html'}\n)  If you instead want a field to be rendered using a custom template that is  not part of an included template pack , you can instead use the  template  style option, to fully specify a template name:  details = serializers.CharField(\n    max_length=1000,\n    style={'template': 'my-field-templates/custom-input.html'}\n)  Field templates can also use additional style properties, depending on their type. For example, the  textarea.html  template also accepts a  rows  property that can be used to affect the sizing of the control.  details = serializers.CharField(\n    max_length=1000,\n    style={'base_template': 'textarea.html', 'rows': 10}\n)  The complete list of  base_template  options and their associated style options is listed below.     base_template  Valid field types  Additional style options      input.html  Any string, numeric or date/time field  input_type, placeholder, hide_label, autofocus    textarea.html  CharField  rows, placeholder, hide_label    select.html  ChoiceField  or relational field types  hide_label    radio.html  ChoiceField  or relational field types  inline, hide_label    select_multiple.html  MultipleChoiceField  or relational fields with  many=True  hide_label    checkbox_multiple.html  MultipleChoiceField  or relational fields with  many=True  inline, hide_label    checkbox.html  BooleanField  hide_label    fieldset.html  Nested serializer  hide_label    list_fieldset.html  ListField  or nested serializer with  many=True  hide_label",
            "title": "Field styles"
        },
        {
            "location": "/topics/browser-enhancements/",
            "text": "Browser enhancements\n\n\n\n\n\"There are two noncontroversial uses for overloaded POST.  The first is to \nsimulate\n HTTP's uniform interface for clients like web browsers that don't support PUT or DELETE\"\n\n\n\u2014 \nRESTful Web Services\n, Leonard Richardson & Sam Ruby.\n\n\n\n\nIn order to allow the browsable API to function, there are a couple of browser enhancements that REST framework needs to provide.\n\n\nAs of version 3.3.0 onwards these are enabled with javascript, using the \najax-form\n library.\n\n\nBrowser based PUT, DELETE, etc...\n\n\nThe \nAJAX form library\n supports browser-based \nPUT\n, \nDELETE\n and other methods on HTML forms.\n\n\nAfter including the library, use the \ndata-method\n attribute on the form, like so:\n\n\n<form action=\"/\" data-method=\"PUT\">\n    <input name='foo'/>\n    ...\n</form>\n\n\n\nNote that prior to 3.3.0, this support was server-side rather than javascript based. The method overloading style (as used in \nRuby on Rails\n) is no longer supported due to subtle issues that it introduces in request parsing.\n\n\nBrowser based submission of non-form content\n\n\nBrowser-based submission of content types such as JSON are supported by the \nAJAX form library\n, using form fields with \ndata-override='content-type'\n and \ndata-override='content'\n attributes.\n\n\nFor example:\n\n\n    <form action=\"/\">\n        <input data-override='content-type' value='application/json' type='hidden'/>\n        <textarea data-override='content'>{}</textarea>\n        <input type=\"submit\"/>\n    </form>\n\n\n\nNote that prior to 3.3.0, this support was server-side rather than javascript based.\n\n\nURL based format suffixes\n\n\nREST framework can take \n?format=json\n style URL parameters, which can be a\nuseful shortcut for determining which content type should be returned from\nthe view.\n\n\nThis behavior is controlled using the \nURL_FORMAT_OVERRIDE\n setting.\n\n\nHTTP header based method overriding\n\n\nPrior to version 3.3.0 the semi extension header \nX-HTTP-Method-Override\n was supported for overriding the request method. This behavior is no longer in core, but can be adding if needed using middleware.\n\n\nFor example:\n\n\nMETHOD_OVERRIDE_HEADER = 'HTTP_X_HTTP_METHOD_OVERRIDE'\n\nclass MethodOverrideMiddleware(object):\n    def process_view(self, request, callback, callback_args, callback_kwargs):\n        if request.method != 'POST':\n            return\n        if METHOD_OVERRIDE_HEADER not in request.META:\n            return\n        request.method = request.META[METHOD_OVERRIDE_HEADER]\n\n\n\nURL based accept headers\n\n\nUntil version 3.3.0 REST framework included built-in support for \n?accept=application/json\n style URL parameters, which would allow the \nAccept\n header to be overridden.\n\n\nSince the introduction of the content negotiation API this behavior is no longer included in core, but may be added using a custom content negotiation class, if needed.\n\n\nFor example:\n\n\nclass AcceptQueryParamOverride()\n    def get_accept_list(self, request):\n       header = request.META.get('HTTP_ACCEPT', '*/*')\n       header = request.query_params.get('_accept', header)\n       return [token.strip() for token in header.split(',')]\n\n\n\nDoesn't HTML5 support PUT and DELETE forms?\n\n\nNope.  It was at one point intended to support \nPUT\n and \nDELETE\n forms, but\nwas later \ndropped from the spec\n.  There remains\n\nongoing discussion\n about adding support for \nPUT\n and \nDELETE\n,\nas well as how to support content types other than form-encoded data.",
            "title": "Browser Enhancements"
        },
        {
            "location": "/topics/browser-enhancements/#browser-enhancements",
            "text": "\"There are two noncontroversial uses for overloaded POST.  The first is to  simulate  HTTP's uniform interface for clients like web browsers that don't support PUT or DELETE\"  \u2014  RESTful Web Services , Leonard Richardson & Sam Ruby.   In order to allow the browsable API to function, there are a couple of browser enhancements that REST framework needs to provide.  As of version 3.3.0 onwards these are enabled with javascript, using the  ajax-form  library.",
            "title": "Browser enhancements"
        },
        {
            "location": "/topics/browser-enhancements/#browser-based-put-delete-etc",
            "text": "The  AJAX form library  supports browser-based  PUT ,  DELETE  and other methods on HTML forms.  After including the library, use the  data-method  attribute on the form, like so:  <form action=\"/\" data-method=\"PUT\">\n    <input name='foo'/>\n    ...\n</form>  Note that prior to 3.3.0, this support was server-side rather than javascript based. The method overloading style (as used in  Ruby on Rails ) is no longer supported due to subtle issues that it introduces in request parsing.",
            "title": "Browser based PUT, DELETE, etc..."
        },
        {
            "location": "/topics/browser-enhancements/#browser-based-submission-of-non-form-content",
            "text": "Browser-based submission of content types such as JSON are supported by the  AJAX form library , using form fields with  data-override='content-type'  and  data-override='content'  attributes.  For example:      <form action=\"/\">\n        <input data-override='content-type' value='application/json' type='hidden'/>\n        <textarea data-override='content'>{}</textarea>\n        <input type=\"submit\"/>\n    </form>  Note that prior to 3.3.0, this support was server-side rather than javascript based.",
            "title": "Browser based submission of non-form content"
        },
        {
            "location": "/topics/browser-enhancements/#url-based-format-suffixes",
            "text": "REST framework can take  ?format=json  style URL parameters, which can be a\nuseful shortcut for determining which content type should be returned from\nthe view.  This behavior is controlled using the  URL_FORMAT_OVERRIDE  setting.",
            "title": "URL based format suffixes"
        },
        {
            "location": "/topics/browser-enhancements/#http-header-based-method-overriding",
            "text": "Prior to version 3.3.0 the semi extension header  X-HTTP-Method-Override  was supported for overriding the request method. This behavior is no longer in core, but can be adding if needed using middleware.  For example:  METHOD_OVERRIDE_HEADER = 'HTTP_X_HTTP_METHOD_OVERRIDE'\n\nclass MethodOverrideMiddleware(object):\n    def process_view(self, request, callback, callback_args, callback_kwargs):\n        if request.method != 'POST':\n            return\n        if METHOD_OVERRIDE_HEADER not in request.META:\n            return\n        request.method = request.META[METHOD_OVERRIDE_HEADER]",
            "title": "HTTP header based method overriding"
        },
        {
            "location": "/topics/browser-enhancements/#url-based-accept-headers",
            "text": "Until version 3.3.0 REST framework included built-in support for  ?accept=application/json  style URL parameters, which would allow the  Accept  header to be overridden.  Since the introduction of the content negotiation API this behavior is no longer included in core, but may be added using a custom content negotiation class, if needed.  For example:  class AcceptQueryParamOverride()\n    def get_accept_list(self, request):\n       header = request.META.get('HTTP_ACCEPT', '*/*')\n       header = request.query_params.get('_accept', header)\n       return [token.strip() for token in header.split(',')]",
            "title": "URL based accept headers"
        },
        {
            "location": "/topics/browser-enhancements/#doesnt-html5-support-put-and-delete-forms",
            "text": "Nope.  It was at one point intended to support  PUT  and  DELETE  forms, but\nwas later  dropped from the spec .  There remains ongoing discussion  about adding support for  PUT  and  DELETE ,\nas well as how to support content types other than form-encoded data.",
            "title": "Doesn't HTML5 support PUT and DELETE forms?"
        },
        {
            "location": "/topics/browsable-api/",
            "text": "The Browsable API\n\n\n\n\nIt is a profoundly erroneous truism... that we should cultivate the habit of thinking of what we are doing.  The precise opposite is the case.  Civilization advances by extending the number of important operations which we can perform without thinking about them.\n\n\n\u2014 \nAlfred North Whitehead\n, An Introduction to Mathematics (1911)\n\n\n\n\nAPI may stand for Application \nProgramming\n Interface, but humans have to be able to read the APIs, too; someone has to do the programming.  Django REST Framework supports generating human-friendly HTML output for each resource when the \nHTML\n format is requested.  These pages allow for easy browsing of resources, as well as forms for submitting data to the resources using \nPOST\n, \nPUT\n, and \nDELETE\n.\n\n\nURLs\n\n\nIf you include fully-qualified URLs in your resource output, they will be 'urlized' and made clickable for easy browsing by humans.  The \nrest_framework\n package includes a \nreverse\n helper for this purpose.\n\n\nFormats\n\n\nBy default, the API will return the format specified by the headers, which in the case of the browser is HTML.  The format can be specified using \n?format=\n in the request, so you can look at the raw JSON response in a browser by adding \n?format=json\n to the URL.  There are helpful extensions for viewing JSON in \nFirefox\n and \nChrome\n.\n\n\nCustomizing\n\n\nThe browsable API is built with \nTwitter's Bootstrap\n (v 3.3.5), making it easy to customize the look-and-feel.\n\n\nTo customize the default style, create a template called \nrest_framework/api.html\n that extends from \nrest_framework/base.html\n.  For example:\n\n\ntemplates/rest_framework/api.html\n\n\n{% extends \"rest_framework/base.html\" %}\n\n...  # Override blocks with required customizations\n\n\n\nOverriding the default theme\n\n\nTo replace the default theme, add a \nbootstrap_theme\n block to your \napi.html\n and insert a \nlink\n to the desired Bootstrap theme css file.  This will completely replace the included theme.\n\n\n{% block bootstrap_theme %}\n    <link rel=\"stylesheet\" href=\"/path/to/my/bootstrap.css\" type=\"text/css\">\n{% endblock %}\n\n\n\nSuitable pre-made replacement themes are available at \nBootswatch\n.  To use any of the Bootswatch themes, simply download the theme's \nbootstrap.min.css\n file, add it to your project, and replace the default one as described above.\n\n\nYou can also change the navbar variant, which by default is \nnavbar-inverse\n, using the \nbootstrap_navbar_variant\n block.  The empty \n{% block bootstrap_navbar_variant %}{% endblock %}\n will use the original Bootstrap navbar style.\n\n\nFull example:\n\n\n{% extends \"rest_framework/base.html\" %}\n\n{% block bootstrap_theme %}\n    <link rel=\"stylesheet\" href=\"http://bootswatch.com/flatly/bootstrap.min.css\" type=\"text/css\">\n{% endblock %}\n\n{% block bootstrap_navbar_variant %}{% endblock %}\n\n\n\nFor more specific CSS tweaks than simply overriding the default bootstrap theme you can override the \nstyle\n block.\n\n\n\n\n\n\nScreenshot of the bootswatch 'Cerulean' theme\n\n\n\n\n\n\nScreenshot of the bootswatch 'Slate' theme\n\n\n\n\nBlocks\n\n\nAll of the blocks available in the browsable API base template that can be used in your \napi.html\n.\n\n\n\n\nbody\n                       - The entire html \n<body>\n.\n\n\nbodyclass\n                  - Class attribute for the \n<body>\n tag, empty by default.\n\n\nbootstrap_theme\n            - CSS for the Bootstrap theme.\n\n\nbootstrap_navbar_variant\n   - CSS class for the navbar.\n\n\nbranding\n                   - Branding section of the navbar, see \nBootstrap components\n.\n\n\nbreadcrumbs\n                - Links showing resource nesting, allowing the user to go back up the resources.  It's recommended to preserve these, but they can be overridden using the breadcrumbs block.\n\n\nscript\n                     - JavaScript files for the page.\n\n\nstyle\n                      - CSS stylesheets for the page.\n\n\ntitle\n                      - Title of the page.\n\n\nuserlinks\n                  - This is a list of links on the right of the header, by default containing login/logout links.  To add links instead of replace, use \n{{ block.super }}\n to preserve the authentication links.\n\n\n\n\nComponents\n\n\nAll of the standard \nBootstrap components\n are available.\n\n\nTooltips\n\n\nThe browsable API makes use of the Bootstrap tooltips component.  Any element with the \njs-tooltip\n class and a \ntitle\n attribute has that title content will display a tooltip on hover events.\n\n\nLogin Template\n\n\nTo add branding and customize the look-and-feel of the login template, create a template called \nlogin.html\n and add it to your project, eg: \ntemplates/rest_framework/login.html\n.  The template should extend from \nrest_framework/login_base.html\n.\n\n\nYou can add your site name or branding by including the branding block:\n\n\n{% block branding %}\n    <h3 style=\"margin: 0 0 20px;\">My Site Name</h3>\n{% endblock %}\n\n\n\nYou can also customize the style by adding the \nbootstrap_theme\n or \nstyle\n block similar to \napi.html\n.\n\n\nAdvanced Customization\n\n\nContext\n\n\nThe context that's available to the template:\n\n\n\n\nallowed_methods\n     : A list of methods allowed by the resource\n\n\napi_settings\n        : The API settings\n\n\navailable_formats\n   : A list of formats allowed by the resource\n\n\nbreadcrumblist\n      : The list of links following the chain of nested resources\n\n\ncontent\n             : The content of the API response\n\n\ndescription\n         : The description of the resource, generated from its docstring\n\n\nname\n                : The name of the resource\n\n\npost_form\n           : A form instance for use by the POST form (if allowed)\n\n\nput_form\n            : A form instance for use by the PUT form (if allowed)\n\n\ndisplay_edit_forms\n  : A boolean indicating whether or not POST, PUT and PATCH forms will be displayed\n\n\nrequest\n             : The request object\n\n\nresponse\n            : The response object\n\n\nversion\n             : The version of Django REST Framework\n\n\nview\n                : The view handling the request\n\n\nFORMAT_PARAM\n        : The view can accept a format override\n\n\nMETHOD_PARAM\n        : The view can accept a method override\n\n\n\n\nYou can override the \nBrowsableAPIRenderer.get_context()\n method to customise the context that gets passed to the template.\n\n\nNot using base.html\n\n\nFor more advanced customization, such as not having a Bootstrap basis or tighter integration with the rest of your site, you can simply choose not to have \napi.html\n extend \nbase.html\n.  Then the page content and capabilities are entirely up to you.\n\n\nHandling \nChoiceField\n with large numbers of items.\n\n\nWhen a relationship or \nChoiceField\n has too many items, rendering the widget containing all the options can become very slow, and cause the browsable API rendering to perform poorly.\n\n\nThe simplest option in this case is to replace the select input with a standard text input. For example:\n\n\n author = serializers.HyperlinkedRelatedField(\n    queryset=User.objects.all(),\n    style={'base_template': 'input.html'}\n)\n\n\n\nAutocomplete\n\n\nAn alternative, but more complex option would be to replace the input with an autocomplete widget, that only loads and renders a subset of the available options as needed. If you need to do this you'll need to do some work to build a custom autocomplete HTML template yourself.\n\n\nThere are \na variety of packages for autocomplete widgets\n, such as \ndjango-autocomplete-light\n, that you may want to refer to. Note that you will not be able to simply include these components as standard widgets, but will need to write the HTML template explicitly. This is because REST framework 3.0 no longer supports the \nwidget\n keyword argument since it now uses templated HTML generation.\n\n\nBetter support for autocomplete inputs is planned in future versions.",
            "title": "The Browsable API"
        },
        {
            "location": "/topics/browsable-api/#the-browsable-api",
            "text": "It is a profoundly erroneous truism... that we should cultivate the habit of thinking of what we are doing.  The precise opposite is the case.  Civilization advances by extending the number of important operations which we can perform without thinking about them.  \u2014  Alfred North Whitehead , An Introduction to Mathematics (1911)   API may stand for Application  Programming  Interface, but humans have to be able to read the APIs, too; someone has to do the programming.  Django REST Framework supports generating human-friendly HTML output for each resource when the  HTML  format is requested.  These pages allow for easy browsing of resources, as well as forms for submitting data to the resources using  POST ,  PUT , and  DELETE .",
            "title": "The Browsable API"
        },
        {
            "location": "/topics/browsable-api/#urls",
            "text": "If you include fully-qualified URLs in your resource output, they will be 'urlized' and made clickable for easy browsing by humans.  The  rest_framework  package includes a  reverse  helper for this purpose.",
            "title": "URLs"
        },
        {
            "location": "/topics/browsable-api/#formats",
            "text": "By default, the API will return the format specified by the headers, which in the case of the browser is HTML.  The format can be specified using  ?format=  in the request, so you can look at the raw JSON response in a browser by adding  ?format=json  to the URL.  There are helpful extensions for viewing JSON in  Firefox  and  Chrome .",
            "title": "Formats"
        },
        {
            "location": "/topics/browsable-api/#customizing",
            "text": "The browsable API is built with  Twitter's Bootstrap  (v 3.3.5), making it easy to customize the look-and-feel.  To customize the default style, create a template called  rest_framework/api.html  that extends from  rest_framework/base.html .  For example:  templates/rest_framework/api.html  {% extends \"rest_framework/base.html\" %}\n\n...  # Override blocks with required customizations",
            "title": "Customizing"
        },
        {
            "location": "/topics/browsable-api/#overriding-the-default-theme",
            "text": "To replace the default theme, add a  bootstrap_theme  block to your  api.html  and insert a  link  to the desired Bootstrap theme css file.  This will completely replace the included theme.  {% block bootstrap_theme %}\n    <link rel=\"stylesheet\" href=\"/path/to/my/bootstrap.css\" type=\"text/css\">\n{% endblock %}  Suitable pre-made replacement themes are available at  Bootswatch .  To use any of the Bootswatch themes, simply download the theme's  bootstrap.min.css  file, add it to your project, and replace the default one as described above.  You can also change the navbar variant, which by default is  navbar-inverse , using the  bootstrap_navbar_variant  block.  The empty  {% block bootstrap_navbar_variant %}{% endblock %}  will use the original Bootstrap navbar style.  Full example:  {% extends \"rest_framework/base.html\" %}\n\n{% block bootstrap_theme %}\n    <link rel=\"stylesheet\" href=\"http://bootswatch.com/flatly/bootstrap.min.css\" type=\"text/css\">\n{% endblock %}\n\n{% block bootstrap_navbar_variant %}{% endblock %}  For more specific CSS tweaks than simply overriding the default bootstrap theme you can override the  style  block.    Screenshot of the bootswatch 'Cerulean' theme    Screenshot of the bootswatch 'Slate' theme",
            "title": "Overriding the default theme"
        },
        {
            "location": "/topics/browsable-api/#blocks",
            "text": "All of the blocks available in the browsable API base template that can be used in your  api.html .   body                        - The entire html  <body> .  bodyclass                   - Class attribute for the  <body>  tag, empty by default.  bootstrap_theme             - CSS for the Bootstrap theme.  bootstrap_navbar_variant    - CSS class for the navbar.  branding                    - Branding section of the navbar, see  Bootstrap components .  breadcrumbs                 - Links showing resource nesting, allowing the user to go back up the resources.  It's recommended to preserve these, but they can be overridden using the breadcrumbs block.  script                      - JavaScript files for the page.  style                       - CSS stylesheets for the page.  title                       - Title of the page.  userlinks                   - This is a list of links on the right of the header, by default containing login/logout links.  To add links instead of replace, use  {{ block.super }}  to preserve the authentication links.",
            "title": "Blocks"
        },
        {
            "location": "/topics/browsable-api/#components",
            "text": "All of the standard  Bootstrap components  are available.",
            "title": "Components"
        },
        {
            "location": "/topics/browsable-api/#tooltips",
            "text": "The browsable API makes use of the Bootstrap tooltips component.  Any element with the  js-tooltip  class and a  title  attribute has that title content will display a tooltip on hover events.",
            "title": "Tooltips"
        },
        {
            "location": "/topics/browsable-api/#login-template",
            "text": "To add branding and customize the look-and-feel of the login template, create a template called  login.html  and add it to your project, eg:  templates/rest_framework/login.html .  The template should extend from  rest_framework/login_base.html .  You can add your site name or branding by including the branding block:  {% block branding %}\n    <h3 style=\"margin: 0 0 20px;\">My Site Name</h3>\n{% endblock %}  You can also customize the style by adding the  bootstrap_theme  or  style  block similar to  api.html .",
            "title": "Login Template"
        },
        {
            "location": "/topics/browsable-api/#advanced-customization",
            "text": "",
            "title": "Advanced Customization"
        },
        {
            "location": "/topics/browsable-api/#context",
            "text": "The context that's available to the template:   allowed_methods      : A list of methods allowed by the resource  api_settings         : The API settings  available_formats    : A list of formats allowed by the resource  breadcrumblist       : The list of links following the chain of nested resources  content              : The content of the API response  description          : The description of the resource, generated from its docstring  name                 : The name of the resource  post_form            : A form instance for use by the POST form (if allowed)  put_form             : A form instance for use by the PUT form (if allowed)  display_edit_forms   : A boolean indicating whether or not POST, PUT and PATCH forms will be displayed  request              : The request object  response             : The response object  version              : The version of Django REST Framework  view                 : The view handling the request  FORMAT_PARAM         : The view can accept a format override  METHOD_PARAM         : The view can accept a method override   You can override the  BrowsableAPIRenderer.get_context()  method to customise the context that gets passed to the template.",
            "title": "Context"
        },
        {
            "location": "/topics/browsable-api/#not-using-basehtml",
            "text": "For more advanced customization, such as not having a Bootstrap basis or tighter integration with the rest of your site, you can simply choose not to have  api.html  extend  base.html .  Then the page content and capabilities are entirely up to you.",
            "title": "Not using base.html"
        },
        {
            "location": "/topics/browsable-api/#handling-choicefield-with-large-numbers-of-items",
            "text": "When a relationship or  ChoiceField  has too many items, rendering the widget containing all the options can become very slow, and cause the browsable API rendering to perform poorly.  The simplest option in this case is to replace the select input with a standard text input. For example:   author = serializers.HyperlinkedRelatedField(\n    queryset=User.objects.all(),\n    style={'base_template': 'input.html'}\n)",
            "title": "Handling ChoiceField with large numbers of items."
        },
        {
            "location": "/topics/browsable-api/#autocomplete",
            "text": "An alternative, but more complex option would be to replace the input with an autocomplete widget, that only loads and renders a subset of the available options as needed. If you need to do this you'll need to do some work to build a custom autocomplete HTML template yourself.  There are  a variety of packages for autocomplete widgets , such as  django-autocomplete-light , that you may want to refer to. Note that you will not be able to simply include these components as standard widgets, but will need to write the HTML template explicitly. This is because REST framework 3.0 no longer supports the  widget  keyword argument since it now uses templated HTML generation.  Better support for autocomplete inputs is planned in future versions.",
            "title": "Autocomplete"
        },
        {
            "location": "/topics/rest-hypermedia-hateoas/",
            "text": "REST, Hypermedia & HATEOAS\n\n\n\n\nYou keep using that word \"REST\". I do not think it means what you think it means.\n\n\n\u2014 Mike Amundsen, \nREST fest 2012 keynote\n.\n\n\n\n\nFirst off, the disclaimer.  The name \"Django REST framework\" was decided back in early 2011 and was chosen simply to sure the project would be easily found by developers. Throughout the documentation we try to use the more simple and technically correct terminology of \"Web APIs\".\n\n\nIf you are serious about designing a Hypermedia API, you should look to resources outside of this documentation to help inform your design choices.\n\n\nThe following fall into the \"required reading\" category.\n\n\n\n\nRoy Fielding's dissertation - \nArchitectural Styles and\nthe Design of Network-based Software Architectures\n.\n\n\nRoy Fielding's \"\nREST APIs must be hypertext-driven\n\" blog post.\n\n\nLeonard Richardson & Mike Amundsen's \nRESTful Web APIs\n.\n\n\nMike Amundsen's \nBuilding Hypermedia APIs with HTML5 and Node\n.\n\n\nSteve Klabnik's \nDesigning Hypermedia APIs\n.\n\n\nThe \nRichardson Maturity Model\n.\n\n\n\n\nFor a more thorough background, check out Klabnik's \nHypermedia API reading list\n.\n\n\nBuilding Hypermedia APIs with REST framework\n\n\nREST framework is an agnostic Web API toolkit.  It does help guide you towards building well-connected APIs, and makes it easy to design appropriate media types, but it does not strictly enforce any particular design style.\n\n\nWhat REST framework provides.\n\n\nIt is self evident that REST framework makes it possible to build Hypermedia APIs.  The browsable API that it offers is built on HTML - the hypermedia language of the web.\n\n\nREST framework also includes \nserialization\n and \nparser\n/\nrenderer\n components that make it easy to build appropriate media types, \nhyperlinked relations\n for building well-connected systems, and great support for \ncontent negotiation\n.\n\n\nWhat REST framework doesn't provide.\n\n\nWhat REST framework doesn't do is give you machine readable hypermedia formats such as \nHAL\n, \nCollection+JSON\n, \nJSON API\n or HTML \nmicroformats\n by default, or the ability to auto-magically create fully HATEOAS style APIs that include hypermedia-based form descriptions and semantically labelled hyperlinks. Doing so would involve making opinionated choices about API design that should really remain outside of the framework's scope.",
            "title": "REST, Hypermedia & HATEOAS"
        },
        {
            "location": "/topics/rest-hypermedia-hateoas/#rest-hypermedia-hateoas",
            "text": "You keep using that word \"REST\". I do not think it means what you think it means.  \u2014 Mike Amundsen,  REST fest 2012 keynote .   First off, the disclaimer.  The name \"Django REST framework\" was decided back in early 2011 and was chosen simply to sure the project would be easily found by developers. Throughout the documentation we try to use the more simple and technically correct terminology of \"Web APIs\".  If you are serious about designing a Hypermedia API, you should look to resources outside of this documentation to help inform your design choices.  The following fall into the \"required reading\" category.   Roy Fielding's dissertation -  Architectural Styles and\nthe Design of Network-based Software Architectures .  Roy Fielding's \" REST APIs must be hypertext-driven \" blog post.  Leonard Richardson & Mike Amundsen's  RESTful Web APIs .  Mike Amundsen's  Building Hypermedia APIs with HTML5 and Node .  Steve Klabnik's  Designing Hypermedia APIs .  The  Richardson Maturity Model .   For a more thorough background, check out Klabnik's  Hypermedia API reading list .",
            "title": "REST, Hypermedia &amp; HATEOAS"
        },
        {
            "location": "/topics/rest-hypermedia-hateoas/#building-hypermedia-apis-with-rest-framework",
            "text": "REST framework is an agnostic Web API toolkit.  It does help guide you towards building well-connected APIs, and makes it easy to design appropriate media types, but it does not strictly enforce any particular design style.",
            "title": "Building Hypermedia APIs with REST framework"
        },
        {
            "location": "/topics/rest-hypermedia-hateoas/#what-rest-framework-provides",
            "text": "It is self evident that REST framework makes it possible to build Hypermedia APIs.  The browsable API that it offers is built on HTML - the hypermedia language of the web.  REST framework also includes  serialization  and  parser / renderer  components that make it easy to build appropriate media types,  hyperlinked relations  for building well-connected systems, and great support for  content negotiation .",
            "title": "What REST framework provides."
        },
        {
            "location": "/topics/rest-hypermedia-hateoas/#what-rest-framework-doesnt-provide",
            "text": "What REST framework doesn't do is give you machine readable hypermedia formats such as  HAL ,  Collection+JSON ,  JSON API  or HTML  microformats  by default, or the ability to auto-magically create fully HATEOAS style APIs that include hypermedia-based form descriptions and semantically labelled hyperlinks. Doing so would involve making opinionated choices about API design that should really remain outside of the framework's scope.",
            "title": "What REST framework doesn't provide."
        },
        {
            "location": "/topics/third-party-packages/",
            "text": "Third Party Packages\n\n\n\n\nSoftware ecosystems [\u2026] establish a community that further accelerates the sharing of knowledge, content, issues, expertise and skills.\n\n\n\u2014 \nJan Bosch\n.\n\n\n\n\nAbout Third Party Packages\n\n\nThird Party Packages allow developers to share code that extends the functionality of Django REST framework, in order to support additional use-cases.\n\n\nWe \nsupport\n, \nencourage\n and \nstrongly favor\n the creation of Third Party Packages to encapsulate new behavior rather than adding additional functionality directly to Django REST Framework.\n\n\nWe aim to make creating third party packages as easy as possible, whilst keeping a \nsimple\n and \nwell maintained\n core API. By promoting third party packages we ensure that the responsibility for a package remains with its author. If a package proves suitably popular it can always be considered for inclusion into the core REST framework.\n\n\nIf you have an idea for a new feature please consider how it may be packaged as a Third Party Package. We're always happy to discuss ideas on the \nMailing List\n.\n\n\nHow to create a Third Party Package\n\n\nCreating your package\n\n\nYou can use \nthis cookiecutter template\n for creating reusable Django REST Framework packages quickly. Cookiecutter creates projects from project templates. While optional, this cookiecutter template includes best practices from Django REST framework and other packages, as well as a Travis CI configuration, Tox configuration, and a sane setup.py for easy PyPI registration/distribution.\n\n\nNote: Let us know if you have an alternate cookiecuter package so we can also link to it.\n\n\nRunning the initial cookiecutter command\n\n\nTo run the initial cookiecutter command, you'll first need to install the Python \ncookiecutter\n package.\n\n\n$ pip install cookiecutter\n\n\n\nOnce \ncookiecutter\n is installed just run the following to create a new project.\n\n\n$ cookiecutter gh:jpadilla/cookiecutter-django-rest-framework\n\n\n\nYou'll be prompted for some questions, answer them, then it'll create your Python package in the current working directory based on those values.\n\n\nfull_name (default is \"Your full name here\")? Johnny Appleseed\nemail (default is \"you@example.com\")? jappleseed@example.com\ngithub_username (default is \"yourname\")? jappleseed\npypi_project_name (default is \"dj-package\")? djangorestframework-custom-auth\nrepo_name (default is \"dj-package\")? django-rest-framework-custom-auth\napp_name (default is \"djpackage\")? custom_auth\nproject_short_description (default is \"Your project description goes here\")?\nyear (default is \"2014\")?\nversion (default is \"0.1.0\")?\n\n\n\nGetting it onto GitHub\n\n\nTo put your project up on GitHub, you'll need a repository for it to live in. You can create a new repository \nhere\n. If you need help, check out the \nCreate A Repo\n article on GitHub.\n\n\nAdding to Travis CI\n\n\nWe recommend using \nTravis CI\n, a hosted continuous integration service which integrates well with GitHub and is free for public repositories.\n\n\nTo get started with Travis CI, \nsign in\n with your GitHub account. Once you're signed in, go to your \nprofile page\n and enable the service hook for the repository you want.\n\n\nIf you use the cookiecutter template, your project will already contain a \n.travis.yml\n file which Travis CI will use to build your project and run tests.  By default, builds are triggered everytime you push to your repository or create Pull Request.\n\n\nUploading to PyPI\n\n\nOnce you've got at least a prototype working and tests running, you should publish it on PyPI to allow others to install it via \npip\n.\n\n\nYou must \nregister\n an account before publishing to PyPI.\n\n\nTo register your package on PyPI run the following command.\n\n\n$ python setup.py register\n\n\n\nIf this is the first time publishing to PyPI, you'll be prompted to login.\n\n\nNote: Before publishing you'll need to make sure you have the latest pip that supports \nwheel\n as well as install the \nwheel\n package.\n\n\n$ pip install --upgrade pip\n$ pip install wheel\n\n\n\nAfter this, every time you want to release a new version on PyPI just run the following command.\n\n\n$ python setup.py publish\nYou probably want to also tag the version now:\n    git tag -a {0} -m 'version 0.1.0'\n    git push --tags\n\n\n\nAfter releasing a new version to PyPI, it's always a good idea to tag the version and make available as a GitHub Release.\n\n\nWe recommend to follow \nSemantic Versioning\n for your package's versions.\n\n\nDevelopment\n\n\nVersion requirements\n\n\nThe cookiecutter template assumes a set of supported versions will be provided for Python and Django. Make sure you correctly update your requirements, docs, \ntox.ini\n, \n.travis.yml\n, and \nsetup.py\n to match the set of versions you wish to support.\n\n\nTests\n\n\nThe cookiecutter template includes a \nruntests.py\n which uses the \npytest\n package as a test runner.\n\n\nBefore running, you'll need to install a couple test requirements.\n\n\n$ pip install -r requirements.txt\n\n\n\nOnce requirements installed, you can run \nruntests.py\n.\n\n\n$ ./runtests.py\n\n\n\nRun using a more concise output style.\n\n\n$ ./runtests.py -q\n\n\n\nRun the tests using a more concise output style, no coverage, no flake8.\n\n\n$ ./runtests.py --fast\n\n\n\nDon't run the flake8 code linting.\n\n\n$ ./runtests.py --nolint\n\n\n\nOnly run the flake8 code linting, don't run the tests.\n\n\n$ ./runtests.py --lintonly\n\n\n\nRun the tests for a given test case.\n\n\n$ ./runtests.py MyTestCase\n\n\n\nRun the tests for a given test method.\n\n\n$ ./runtests.py MyTestCase.test_this_method\n\n\n\nShorter form to run the tests for a given test method.\n\n\n$ ./runtests.py test_this_method\n\n\n\nTo run your tests against multiple versions of Python as different versions of requirements such as Django we recommend using \ntox\n. \nTox\n is a generic virtualenv management and test command line tool.\n\n\nFirst, install \ntox\n globally.\n\n\n$ pip install tox\n\n\n\nTo run \ntox\n, just simply run:\n\n\n$ tox\n\n\n\nTo run a particular \ntox\n environment:\n\n\n$ tox -e envlist\n\n\n\nenvlist\n is a comma-separated value to that specifies the environments to run tests against. To view a list of all possible test environments, run:\n\n\n$ tox -l\n\n\n\nVersion compatibility\n\n\nSometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into a \ncompat.py\n module, and should provide a single common interface that the rest of the codebase can use.\n\n\nCheck out Django REST framework's \ncompat.py\n for an example.\n\n\nOnce your package is available\n\n\nOnce your package is decently documented and available on PyPI, you might want share it with others that might find it useful.\n\n\nAdding to the Django REST framework grid\n\n\nWe suggest adding your package to the \nREST Framework\n grid on Django Packages.\n\n\nAdding to the Django REST framework docs\n\n\nCreate a \nPull Request\n or \nIssue\n on GitHub, and we'll add a link to it from the main REST framework documentation. You can add your package under \nThird party packages\n of the API Guide section that best applies, like \nAuthentication\n or \nPermissions\n. You can also link your package under the \nThird Party Packages\n section.\n\n\nAnnounce on the discussion group.\n\n\nYou can also let others know about your package through the \ndiscussion group\n.\n\n\nExisting Third Party Packages\n\n\nDjango REST Framework has a growing community of developers, packages, and resources.\n\n\nCheck out a grid detailing all the packages and ecosystem around Django REST Framework at \nDjango Packages\n.\n\n\nTo submit new content, \nopen an issue\n or \ncreate a pull request\n.\n\n\nAuthentication\n\n\n\n\ndjangorestframework-digestauth\n - Provides Digest Access Authentication support.\n\n\ndjango-oauth-toolkit\n - Provides OAuth 2.0 support.\n\n\ndoac\n - Provides OAuth 2.0 support.\n\n\ndjangorestframework-jwt\n - Provides JSON Web Token Authentication support.\n\n\nhawkrest\n - Provides Hawk HTTP Authorization.\n\n\ndjangorestframework-httpsignature\n - Provides an easy to use HTTP Signature Authentication mechanism.\n\n\ndjoser\n - Provides a set of views to handle basic actions such as registration, login, logout, password reset and account activation.\n\n\ndjango-rest-auth\n - Provides a set of REST API endpoints for registration, authentication (including social media authentication), password reset, retrieve and update user details, etc.\n\n\ndrf-oidc-auth\n - Implements OpenID Connect token authentication for DRF.\n\n\n\n\nPermissions\n\n\n\n\ndrf-any-permissions\n - Provides alternative permission handling.\n\n\ndjangorestframework-composed-permissions\n - Provides a simple way to define complex permissions.\n\n\nrest_condition\n - Another extension for building complex permissions in a simple and convenient way.\n\n\ndry-rest-permissions\n - Provides a simple way to define permissions for individual api actions.\n\n\n\n\nSerializers\n\n\n\n\ndjango-rest-framework-mongoengine\n - Serializer class that supports using MongoDB as the storage layer for Django REST framework.\n\n\ndjangorestframework-gis\n - Geographic add-ons\n\n\ndjangorestframework-hstore\n - Serializer class to support django-hstore DictionaryField model field and its schema-mode feature.\n\n\ndjangorestframework-jsonapi\n - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec.\n\n\nhtml-json-forms\n - Provides an algorithm and serializer to process HTML JSON Form submissions per the (inactive) spec.\n\n\ndjango-rest-framework-serializer-extensions\n -\n  Enables black/whitelisting fields, and conditionally expanding child serializers on a per-view/request basis.\n\n\ndjangorestframework-queryfields\n - Serializer mixin allowing clients to control which fields will be sent in the API response.\n\n\n\n\nSerializer fields\n\n\n\n\ndrf-compound-fields\n - Provides \"compound\" serializer fields, such as lists of simple values.\n\n\ndjango-extra-fields\n - Provides extra serializer fields.\n\n\ndjango-versatileimagefield\n - Provides a drop-in replacement for Django's stock \nImageField\n that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, \nclick here\n.\n\n\n\n\nViews\n\n\n\n\ndjangorestframework-bulk\n - Implements generic view mixins as well as some common concrete generic views to allow to apply bulk operations via API requests.\n\n\ndjango-rest-multiple-models\n - Provides a generic view (and mixin) for sending multiple serialized models and/or querysets via a single API request.\n\n\n\n\nRouters\n\n\n\n\ndrf-nested-routers\n - Provides routers and relationship fields for working with nested resources.\n\n\nwq.db.rest\n - Provides an admin-style model registration API with reasonable default URLs and viewsets.\n\n\n\n\nParsers\n\n\n\n\ndjangorestframework-msgpack\n - Provides MessagePack renderer and parser support.\n\n\ndjangorestframework-jsonapi\n - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec.\n\n\ndjangorestframework-camel-case\n - Provides camel case JSON renderers and parsers.\n\n\n\n\nRenderers\n\n\n\n\ndjangorestframework-csv\n - Provides CSV renderer support.\n\n\ndjangorestframework-jsonapi\n - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec.\n\n\ndrf_ujson\n - Implements JSON rendering using the UJSON package.\n\n\nrest-pandas\n - Pandas DataFrame-powered renderers including Excel, CSV, and SVG formats.\n\n\n\n\nFiltering\n\n\n\n\ndjangorestframework-chain\n - Allows arbitrary chaining of both relations and lookup filters.\n\n\ndjango-url-filter\n - Allows a safe way to filter data via human-friendly URLs. It is a generic library which is not tied to DRF but it provides easy integration with DRF.\n\n\ndrf-url-filter\n is a simple Django app to apply filters on drf \nModelViewSet\n's \nQueryset\n in a clean, simple and configurable way. It also supports validations on incoming query params and their values.\n\n\n\n\nMisc\n\n\n\n\ncookiecutter-django-rest\n - A cookiecutter template that takes care of the setup and configuration so you can focus on making your REST apis awesome.\n\n\ndjangorestrelationalhyperlink\n - A hyperlinked serialiser that can can be used to alter relationships via hyperlinks, but otherwise like a hyperlink model serializer.\n\n\ndjango-rest-swagger\n - An API documentation generator for Swagger UI.\n\n\ndjango-rest-framework-proxy\n - Proxy to redirect incoming request to another API server.\n\n\ngaiarestframework\n - Utils for django-rest-framework\n\n\ndrf-extensions\n - A collection of custom extensions\n\n\nember-django-adapter\n - An adapter for working with Ember.js\n\n\ndjango-versatileimagefield\n - Provides a drop-in replacement for Django's stock \nImageField\n that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, \nclick here\n.\n\n\ndrf-tracking\n - Utilities to track requests to DRF API views.\n\n\ndrf_tweaks\n - Serializers with one-step validation (and more), pagination without counts and other tweaks.\n\n\ndjango-rest-framework-braces\n - Collection of utilities for working with Django Rest Framework. The most notable ones are \nFormSerializer\n and \nSerializerForm\n, which are adapters between DRF serializers and Django forms.\n\n\ndrf-haystack\n - Haystack search for Django Rest Framework\n\n\ndjango-rest-framework-version-transforms\n - Enables the use of delta transformations for versioning of DRF resource representations.\n\n\ndjango-rest-messaging\n, \ndjango-rest-messaging-centrifugo\n and \ndjango-rest-messaging-js\n - A real-time pluggable messaging service using DRM.",
            "title": "Third Party Packages"
        },
        {
            "location": "/topics/third-party-packages/#third-party-packages",
            "text": "Software ecosystems [\u2026] establish a community that further accelerates the sharing of knowledge, content, issues, expertise and skills.  \u2014  Jan Bosch .",
            "title": "Third Party Packages"
        },
        {
            "location": "/topics/third-party-packages/#about-third-party-packages",
            "text": "Third Party Packages allow developers to share code that extends the functionality of Django REST framework, in order to support additional use-cases.  We  support ,  encourage  and  strongly favor  the creation of Third Party Packages to encapsulate new behavior rather than adding additional functionality directly to Django REST Framework.  We aim to make creating third party packages as easy as possible, whilst keeping a  simple  and  well maintained  core API. By promoting third party packages we ensure that the responsibility for a package remains with its author. If a package proves suitably popular it can always be considered for inclusion into the core REST framework.  If you have an idea for a new feature please consider how it may be packaged as a Third Party Package. We're always happy to discuss ideas on the  Mailing List .",
            "title": "About Third Party Packages"
        },
        {
            "location": "/topics/third-party-packages/#how-to-create-a-third-party-package",
            "text": "",
            "title": "How to create a Third Party Package"
        },
        {
            "location": "/topics/third-party-packages/#creating-your-package",
            "text": "You can use  this cookiecutter template  for creating reusable Django REST Framework packages quickly. Cookiecutter creates projects from project templates. While optional, this cookiecutter template includes best practices from Django REST framework and other packages, as well as a Travis CI configuration, Tox configuration, and a sane setup.py for easy PyPI registration/distribution.  Note: Let us know if you have an alternate cookiecuter package so we can also link to it.",
            "title": "Creating your package"
        },
        {
            "location": "/topics/third-party-packages/#running-the-initial-cookiecutter-command",
            "text": "To run the initial cookiecutter command, you'll first need to install the Python  cookiecutter  package.  $ pip install cookiecutter  Once  cookiecutter  is installed just run the following to create a new project.  $ cookiecutter gh:jpadilla/cookiecutter-django-rest-framework  You'll be prompted for some questions, answer them, then it'll create your Python package in the current working directory based on those values.  full_name (default is \"Your full name here\")? Johnny Appleseed\nemail (default is \"you@example.com\")? jappleseed@example.com\ngithub_username (default is \"yourname\")? jappleseed\npypi_project_name (default is \"dj-package\")? djangorestframework-custom-auth\nrepo_name (default is \"dj-package\")? django-rest-framework-custom-auth\napp_name (default is \"djpackage\")? custom_auth\nproject_short_description (default is \"Your project description goes here\")?\nyear (default is \"2014\")?\nversion (default is \"0.1.0\")?",
            "title": "Running the initial cookiecutter command"
        },
        {
            "location": "/topics/third-party-packages/#getting-it-onto-github",
            "text": "To put your project up on GitHub, you'll need a repository for it to live in. You can create a new repository  here . If you need help, check out the  Create A Repo  article on GitHub.",
            "title": "Getting it onto GitHub"
        },
        {
            "location": "/topics/third-party-packages/#adding-to-travis-ci",
            "text": "We recommend using  Travis CI , a hosted continuous integration service which integrates well with GitHub and is free for public repositories.  To get started with Travis CI,  sign in  with your GitHub account. Once you're signed in, go to your  profile page  and enable the service hook for the repository you want.  If you use the cookiecutter template, your project will already contain a  .travis.yml  file which Travis CI will use to build your project and run tests.  By default, builds are triggered everytime you push to your repository or create Pull Request.",
            "title": "Adding to Travis CI"
        },
        {
            "location": "/topics/third-party-packages/#uploading-to-pypi",
            "text": "Once you've got at least a prototype working and tests running, you should publish it on PyPI to allow others to install it via  pip .  You must  register  an account before publishing to PyPI.  To register your package on PyPI run the following command.  $ python setup.py register  If this is the first time publishing to PyPI, you'll be prompted to login.  Note: Before publishing you'll need to make sure you have the latest pip that supports  wheel  as well as install the  wheel  package.  $ pip install --upgrade pip\n$ pip install wheel  After this, every time you want to release a new version on PyPI just run the following command.  $ python setup.py publish\nYou probably want to also tag the version now:\n    git tag -a {0} -m 'version 0.1.0'\n    git push --tags  After releasing a new version to PyPI, it's always a good idea to tag the version and make available as a GitHub Release.  We recommend to follow  Semantic Versioning  for your package's versions.",
            "title": "Uploading to PyPI"
        },
        {
            "location": "/topics/third-party-packages/#development",
            "text": "",
            "title": "Development"
        },
        {
            "location": "/topics/third-party-packages/#version-requirements",
            "text": "The cookiecutter template assumes a set of supported versions will be provided for Python and Django. Make sure you correctly update your requirements, docs,  tox.ini ,  .travis.yml , and  setup.py  to match the set of versions you wish to support.",
            "title": "Version requirements"
        },
        {
            "location": "/topics/third-party-packages/#tests",
            "text": "The cookiecutter template includes a  runtests.py  which uses the  pytest  package as a test runner.  Before running, you'll need to install a couple test requirements.  $ pip install -r requirements.txt  Once requirements installed, you can run  runtests.py .  $ ./runtests.py  Run using a more concise output style.  $ ./runtests.py -q  Run the tests using a more concise output style, no coverage, no flake8.  $ ./runtests.py --fast  Don't run the flake8 code linting.  $ ./runtests.py --nolint  Only run the flake8 code linting, don't run the tests.  $ ./runtests.py --lintonly  Run the tests for a given test case.  $ ./runtests.py MyTestCase  Run the tests for a given test method.  $ ./runtests.py MyTestCase.test_this_method  Shorter form to run the tests for a given test method.  $ ./runtests.py test_this_method  To run your tests against multiple versions of Python as different versions of requirements such as Django we recommend using  tox .  Tox  is a generic virtualenv management and test command line tool.  First, install  tox  globally.  $ pip install tox  To run  tox , just simply run:  $ tox  To run a particular  tox  environment:  $ tox -e envlist  envlist  is a comma-separated value to that specifies the environments to run tests against. To view a list of all possible test environments, run:  $ tox -l",
            "title": "Tests"
        },
        {
            "location": "/topics/third-party-packages/#version-compatibility",
            "text": "Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into a  compat.py  module, and should provide a single common interface that the rest of the codebase can use.  Check out Django REST framework's  compat.py  for an example.",
            "title": "Version compatibility"
        },
        {
            "location": "/topics/third-party-packages/#once-your-package-is-available",
            "text": "Once your package is decently documented and available on PyPI, you might want share it with others that might find it useful.",
            "title": "Once your package is available"
        },
        {
            "location": "/topics/third-party-packages/#adding-to-the-django-rest-framework-grid",
            "text": "We suggest adding your package to the  REST Framework  grid on Django Packages.",
            "title": "Adding to the Django REST framework grid"
        },
        {
            "location": "/topics/third-party-packages/#adding-to-the-django-rest-framework-docs",
            "text": "Create a  Pull Request  or  Issue  on GitHub, and we'll add a link to it from the main REST framework documentation. You can add your package under  Third party packages  of the API Guide section that best applies, like  Authentication  or  Permissions . You can also link your package under the  Third Party Packages  section.",
            "title": "Adding to the Django REST framework docs"
        },
        {
            "location": "/topics/third-party-packages/#announce-on-the-discussion-group",
            "text": "You can also let others know about your package through the  discussion group .",
            "title": "Announce on the discussion group."
        },
        {
            "location": "/topics/third-party-packages/#existing-third-party-packages",
            "text": "Django REST Framework has a growing community of developers, packages, and resources.  Check out a grid detailing all the packages and ecosystem around Django REST Framework at  Django Packages .  To submit new content,  open an issue  or  create a pull request .",
            "title": "Existing Third Party Packages"
        },
        {
            "location": "/topics/third-party-packages/#authentication",
            "text": "djangorestframework-digestauth  - Provides Digest Access Authentication support.  django-oauth-toolkit  - Provides OAuth 2.0 support.  doac  - Provides OAuth 2.0 support.  djangorestframework-jwt  - Provides JSON Web Token Authentication support.  hawkrest  - Provides Hawk HTTP Authorization.  djangorestframework-httpsignature  - Provides an easy to use HTTP Signature Authentication mechanism.  djoser  - Provides a set of views to handle basic actions such as registration, login, logout, password reset and account activation.  django-rest-auth  - Provides a set of REST API endpoints for registration, authentication (including social media authentication), password reset, retrieve and update user details, etc.  drf-oidc-auth  - Implements OpenID Connect token authentication for DRF.",
            "title": "Authentication"
        },
        {
            "location": "/topics/third-party-packages/#permissions",
            "text": "drf-any-permissions  - Provides alternative permission handling.  djangorestframework-composed-permissions  - Provides a simple way to define complex permissions.  rest_condition  - Another extension for building complex permissions in a simple and convenient way.  dry-rest-permissions  - Provides a simple way to define permissions for individual api actions.",
            "title": "Permissions"
        },
        {
            "location": "/topics/third-party-packages/#serializers",
            "text": "django-rest-framework-mongoengine  - Serializer class that supports using MongoDB as the storage layer for Django REST framework.  djangorestframework-gis  - Geographic add-ons  djangorestframework-hstore  - Serializer class to support django-hstore DictionaryField model field and its schema-mode feature.  djangorestframework-jsonapi  - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec.  html-json-forms  - Provides an algorithm and serializer to process HTML JSON Form submissions per the (inactive) spec.  django-rest-framework-serializer-extensions  -\n  Enables black/whitelisting fields, and conditionally expanding child serializers on a per-view/request basis.  djangorestframework-queryfields  - Serializer mixin allowing clients to control which fields will be sent in the API response.",
            "title": "Serializers"
        },
        {
            "location": "/topics/third-party-packages/#serializer-fields",
            "text": "drf-compound-fields  - Provides \"compound\" serializer fields, such as lists of simple values.  django-extra-fields  - Provides extra serializer fields.  django-versatileimagefield  - Provides a drop-in replacement for Django's stock  ImageField  that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs,  click here .",
            "title": "Serializer fields"
        },
        {
            "location": "/topics/third-party-packages/#views",
            "text": "djangorestframework-bulk  - Implements generic view mixins as well as some common concrete generic views to allow to apply bulk operations via API requests.  django-rest-multiple-models  - Provides a generic view (and mixin) for sending multiple serialized models and/or querysets via a single API request.",
            "title": "Views"
        },
        {
            "location": "/topics/third-party-packages/#routers",
            "text": "drf-nested-routers  - Provides routers and relationship fields for working with nested resources.  wq.db.rest  - Provides an admin-style model registration API with reasonable default URLs and viewsets.",
            "title": "Routers"
        },
        {
            "location": "/topics/third-party-packages/#parsers",
            "text": "djangorestframework-msgpack  - Provides MessagePack renderer and parser support.  djangorestframework-jsonapi  - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec.  djangorestframework-camel-case  - Provides camel case JSON renderers and parsers.",
            "title": "Parsers"
        },
        {
            "location": "/topics/third-party-packages/#renderers",
            "text": "djangorestframework-csv  - Provides CSV renderer support.  djangorestframework-jsonapi  - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec.  drf_ujson  - Implements JSON rendering using the UJSON package.  rest-pandas  - Pandas DataFrame-powered renderers including Excel, CSV, and SVG formats.",
            "title": "Renderers"
        },
        {
            "location": "/topics/third-party-packages/#filtering",
            "text": "djangorestframework-chain  - Allows arbitrary chaining of both relations and lookup filters.  django-url-filter  - Allows a safe way to filter data via human-friendly URLs. It is a generic library which is not tied to DRF but it provides easy integration with DRF.  drf-url-filter  is a simple Django app to apply filters on drf  ModelViewSet 's  Queryset  in a clean, simple and configurable way. It also supports validations on incoming query params and their values.",
            "title": "Filtering"
        },
        {
            "location": "/topics/third-party-packages/#misc",
            "text": "cookiecutter-django-rest  - A cookiecutter template that takes care of the setup and configuration so you can focus on making your REST apis awesome.  djangorestrelationalhyperlink  - A hyperlinked serialiser that can can be used to alter relationships via hyperlinks, but otherwise like a hyperlink model serializer.  django-rest-swagger  - An API documentation generator for Swagger UI.  django-rest-framework-proxy  - Proxy to redirect incoming request to another API server.  gaiarestframework  - Utils for django-rest-framework  drf-extensions  - A collection of custom extensions  ember-django-adapter  - An adapter for working with Ember.js  django-versatileimagefield  - Provides a drop-in replacement for Django's stock  ImageField  that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs,  click here .  drf-tracking  - Utilities to track requests to DRF API views.  drf_tweaks  - Serializers with one-step validation (and more), pagination without counts and other tweaks.  django-rest-framework-braces  - Collection of utilities for working with Django Rest Framework. The most notable ones are  FormSerializer  and  SerializerForm , which are adapters between DRF serializers and Django forms.  drf-haystack  - Haystack search for Django Rest Framework  django-rest-framework-version-transforms  - Enables the use of delta transformations for versioning of DRF resource representations.  django-rest-messaging ,  django-rest-messaging-centrifugo  and  django-rest-messaging-js  - A real-time pluggable messaging service using DRM.",
            "title": "Misc"
        },
        {
            "location": "/topics/tutorials-and-resources/",
            "text": "Tutorials and Resources\n\n\nThere are a wide range of resources available for learning and using Django REST framework. We try to keep a comprehensive list available here.\n\n\nTutorials\n\n\n\n\nBeginner's Guide to the Django REST Framework\n\n\nDjango REST Framework - An Introduction\n\n\nDjango REST Framework Tutorial\n\n\nDjango REST Framework Course\n\n\nBuilding a RESTful API with Django REST Framework\n\n\nGetting Started with Django REST Framework and AngularJS\n\n\nEnd to End Web App with Django REST Framework & AngularJS\n\n\nStart Your API - Django REST Framework Part 1\n\n\nPermissions & Authentication - Django REST Framework Part 2\n\n\nViewSets and Routers - Django REST Framework Part 3\n\n\nDjango REST Framework User Endpoint\n\n\nCheck Credentials Using Django REST Framework\n\n\nCreating a Production Ready API with Python and Django REST Framework \u2013 Part 1\n\n\nCreating a Production Ready API with Python and Django REST Framework \u2013 Part 2\n\n\n\n\nVideos\n\n\nTalks\n\n\n\n\nHow to Make a Full Fledged REST API with Django OAuth Toolkit\n\n\nDjango REST API - So Easy You Can Learn It in 25 Minutes\n\n\nTom Christie about Django Rest Framework at Django: Under The Hood\n\n\nDjango REST Framework: Schemas, Hypermedia & Client Libraries\n\n\n\n\nTutorials\n\n\n\n\nDjango REST Framework Part 1\n\n\nDjango REST Framework in Your PJ's!\n\n\nBuilding a REST API Using Django & Django REST Framework\n\n\nBlog API with Django REST Framework\n\n\nEmber and Django Part 1\n\n\nDjango REST Framework Image Upload Tutorial (with AngularJS)\n\n\nDjango REST Framework Tutorials\n\n\n\n\nArticles\n\n\n\n\nWeb API performance: Profiling Django REST Framework\n\n\nAPI Development with Django and Django REST Framework\n\n\nIntegrating Pandas, Django REST Framework and Bokeh\n\n\nControlling Uncertainty on Web Applications and APIs\n\n\nFull Text Search in Django REST Framework with Database Backends\n\n\nOAuth2 Authentication with Django REST Framework and Custom Third-Party OAuth2 Backends\n\n\nNested Resources with Django REST Framework\n\n\nImage Fields with Django REST Framework\n\n\nChatbot Using Django REST Framework + api.ai + Slack\u200a\u2014\u200aPart 1/3\n\n\nNew Django Admin with DRF and EmberJS... What are the News?\n\n\nBlog posts about Django REST Framework\n\n\n\n\nBooks\n\n\n\n\nHello Web App: Intermediate Concepts, Chapter 10\n\n\n\n\nDocumentations\n\n\n\n\nClassy Django REST Framework\n\n\nDRF-schema-adapter\n\n\n\n\nWant your Django REST Framework talk/tutorial/article to be added to our website? Or know of a resource that's not yet included here? Please \nsubmit a pull request\n or [email us][mailto:anna@django-rest-framework.org]!",
            "title": "Tutorials and Resources"
        },
        {
            "location": "/topics/tutorials-and-resources/#tutorials-and-resources",
            "text": "There are a wide range of resources available for learning and using Django REST framework. We try to keep a comprehensive list available here.",
            "title": "Tutorials and Resources"
        },
        {
            "location": "/topics/tutorials-and-resources/#tutorials",
            "text": "Beginner's Guide to the Django REST Framework  Django REST Framework - An Introduction  Django REST Framework Tutorial  Django REST Framework Course  Building a RESTful API with Django REST Framework  Getting Started with Django REST Framework and AngularJS  End to End Web App with Django REST Framework & AngularJS  Start Your API - Django REST Framework Part 1  Permissions & Authentication - Django REST Framework Part 2  ViewSets and Routers - Django REST Framework Part 3  Django REST Framework User Endpoint  Check Credentials Using Django REST Framework  Creating a Production Ready API with Python and Django REST Framework \u2013 Part 1  Creating a Production Ready API with Python and Django REST Framework \u2013 Part 2",
            "title": "Tutorials"
        },
        {
            "location": "/topics/tutorials-and-resources/#videos",
            "text": "",
            "title": "Videos"
        },
        {
            "location": "/topics/tutorials-and-resources/#talks",
            "text": "How to Make a Full Fledged REST API with Django OAuth Toolkit  Django REST API - So Easy You Can Learn It in 25 Minutes  Tom Christie about Django Rest Framework at Django: Under The Hood  Django REST Framework: Schemas, Hypermedia & Client Libraries",
            "title": "Talks"
        },
        {
            "location": "/topics/tutorials-and-resources/#tutorials_1",
            "text": "Django REST Framework Part 1  Django REST Framework in Your PJ's!  Building a REST API Using Django & Django REST Framework  Blog API with Django REST Framework  Ember and Django Part 1  Django REST Framework Image Upload Tutorial (with AngularJS)  Django REST Framework Tutorials",
            "title": "Tutorials"
        },
        {
            "location": "/topics/tutorials-and-resources/#articles",
            "text": "Web API performance: Profiling Django REST Framework  API Development with Django and Django REST Framework  Integrating Pandas, Django REST Framework and Bokeh  Controlling Uncertainty on Web Applications and APIs  Full Text Search in Django REST Framework with Database Backends  OAuth2 Authentication with Django REST Framework and Custom Third-Party OAuth2 Backends  Nested Resources with Django REST Framework  Image Fields with Django REST Framework  Chatbot Using Django REST Framework + api.ai + Slack\u200a\u2014\u200aPart 1/3  New Django Admin with DRF and EmberJS... What are the News?  Blog posts about Django REST Framework",
            "title": "Articles"
        },
        {
            "location": "/topics/tutorials-and-resources/#books",
            "text": "Hello Web App: Intermediate Concepts, Chapter 10",
            "title": "Books"
        },
        {
            "location": "/topics/tutorials-and-resources/#documentations",
            "text": "Classy Django REST Framework  DRF-schema-adapter   Want your Django REST Framework talk/tutorial/article to be added to our website? Or know of a resource that's not yet included here? Please  submit a pull request  or [email us][mailto:anna@django-rest-framework.org]!",
            "title": "Documentations"
        },
        {
            "location": "/topics/contributing/",
            "text": "Contributing to REST framework\n\n\n\n\nThe world can only really be changed one piece at a time.  The art is picking that piece.\n\n\n\u2014 \nTim Berners-Lee\n\n\n\n\nThere are many ways you can contribute to Django REST framework.  We'd like it to be a community-led project, so please get involved and help shape the future of the project.\n\n\nCommunity\n\n\nThe most important thing you can do to help push the REST framework project forward is to be actively involved wherever possible.  Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case.\n\n\nIf you use REST framework, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about using REST framework, or publishing a tutorial about building a project with a particular JavaScript framework.  Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of REST framework are more difficult to understand and work with.\n\n\nOther really great ways you can help move the community forward include helping to answer questions on the \ndiscussion group\n, or setting up an \nemail alert on StackOverflow\n so that you get notified of any new questions with the \ndjango-rest-framework\n tag.\n\n\nWhen answering questions make sure to help future contributors find their way around by hyperlinking wherever possible to related threads and tickets, and include backlinks from those items if relevant.\n\n\nCode of conduct\n\n\nPlease keep the tone polite & professional.  For some users a discussion on the REST framework mailing list or ticket tracker may be their first engagement with the open source community.  First impressions count, so let's try to make everyone feel welcome.\n\n\nBe mindful in the language you choose.  As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive.  It's just as easy, and more inclusive to use gender neutral language in those situations.\n\n\nThe \nDjango code of conduct\n gives a fuller set of guidelines for participating in community forums.\n\n\nIssues\n\n\nIt's really helpful if you can make sure to address issues on the correct channel.  Usage questions should be directed to the \ndiscussion group\n.  Feature requests, bug reports and other issues should be raised on the GitHub \nissue tracker\n.\n\n\nSome tips on good issue reporting:\n\n\n\n\nWhen describing issues try to phrase your ticket in terms of the \nbehavior\n you think needs changing rather than the \ncode\n you think need changing.\n\n\nSearch the issue list first for related items, and make sure you're running the latest version of REST framework before reporting an issue.\n\n\nIf reporting a bug, then try to include a pull request with a failing test case.  This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one.\n\n\nFeature requests will often be closed with a recommendation that they be implemented outside of the core REST framework library.  Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead of REST framework, so that the focus can be on continued stability, bugfixes, and great documentation.\n\n\nClosing an issue doesn't necessarily mean the end of a discussion.  If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened.\n\n\n\n\nTriaging issues\n\n\nGetting involved in triaging incoming issues is a good way to start contributing.  Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be.  Anyone can help out with this, you just need to be willing to\n\n\n\n\nRead through the ticket - does it make sense, is it missing any context that would help explain it better?\n\n\nIs the ticket reported in the correct place, would it be better suited as a discussion on the discussion group?\n\n\nIf the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request?\n\n\nIf the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package?\n\n\nIf a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again.\n\n\n\n\nDevelopment\n\n\nTo start developing on Django REST framework, clone the repo:\n\n\ngit clone git@github.com:tomchristie/django-rest-framework.git\n\n\n\nChanges should broadly follow the \nPEP 8\n style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles.\n\n\nTesting\n\n\nTo run the tests, clone the repository, and then:\n\n\n# Setup the virtual environment\nvirtualenv env\nsource env/bin/activate\npip install django\npip install -r requirements.txt\n\n# Run the tests\n./runtests.py\n\n\n\nTest options\n\n\nRun using a more concise output style.\n\n\n./runtests.py -q\n\n\n\nRun the tests using a more concise output style, no coverage, no flake8.\n\n\n./runtests.py --fast\n\n\n\nDon't run the flake8 code linting.\n\n\n./runtests.py --nolint\n\n\n\nOnly run the flake8 code linting, don't run the tests.\n\n\n./runtests.py --lintonly\n\n\n\nRun the tests for a given test case.\n\n\n./runtests.py MyTestCase\n\n\n\nRun the tests for a given test method.\n\n\n./runtests.py MyTestCase.test_this_method\n\n\n\nShorter form to run the tests for a given test method.\n\n\n./runtests.py test_this_method\n\n\n\nNote: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given  command line input.\n\n\nRunning against multiple environments\n\n\nYou can also use the excellent \ntox\n testing tool to run the tests against all supported versions of Python and Django.  Install \ntox\n globally, and then simply run:\n\n\ntox\n\n\n\nPull requests\n\n\nIt's a good idea to make pull requests early on.  A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission.\n\n\nIt's also always best to make a new branch before starting work on a pull request.  This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests.\n\n\nIt's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests.\n\n\nGitHub's documentation for working on pull requests is \navailable here\n.\n\n\nAlways run the tests before submitting pull requests, and ideally run \ntox\n in order to check that your modifications are compatible with both Python 2 and Python 3, and that they run properly on all supported versions of Django.\n\n\nOnce you've made a pull request take a look at the Travis build status in the GitHub interface and make sure the tests are running as you'd expect.\n\n\n\n\nAbove: Travis build notifications\n\n\nManaging compatibility issues\n\n\nSometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment.  Any code that branches in this way should be isolated into the \ncompat.py\n module, and should provide a single common interface that the rest of the codebase can use.\n\n\nDocumentation\n\n\nThe documentation for REST framework is built from the \nMarkdown\n source files in \nthe docs directory\n.\n\n\nThere are many great Markdown editors that make working with the documentation really easy.  The \nMou editor for Mac\n is one such editor that comes highly recommended.\n\n\nBuilding the documentation\n\n\nTo build the documentation, install MkDocs with \npip install mkdocs\n and then run the following command.\n\n\nmkdocs build\n\n\n\nThis will build the documentation into the \nsite\n directory.\n\n\nYou can build the documentation and open a preview in a browser window by using the \nserve\n command.\n\n\nmkdocs serve\n\n\n\nLanguage style\n\n\nDocumentation should be in American English.  The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible.\n\n\nSome other tips:\n\n\n\n\nKeep paragraphs reasonably short.\n\n\nDon't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'.\n\n\n\n\nMarkdown style\n\n\nThere are a couple of conventions you should follow when working on the documentation.\n\n\n1. Headers\n\n\nHeaders should use the hash style.  For example:\n\n\n### Some important topic\n\n\n\nThe underline style should not be used.  \nDon't do this:\n\n\nSome important topic\n====================\n\n\n\n2. Links\n\n\nLinks should always use the reference style, with the referenced hyperlinks kept at the end of the document.\n\n\nHere is a link to [some other thing][other-thing].\n\nMore text...\n\n[other-thing]: http://example.com/other/thing\n\n\n\nThis style helps keep the documentation source consistent and readable.\n\n\nIf you are hyperlinking to another REST framework document, you should use a relative link, and link to the \n.md\n suffix.  For example:\n\n\n[authentication]: ../api-guide/authentication.md\n\n\n\nLinking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document.  When the documentation is built, these links will be converted into regular links to HTML pages.\n\n\n3. Notes\n\n\nIf you want to draw attention to a note or warning, use a pair of enclosing lines, like so:\n\n\n---\n\n**Note:** A useful documentation note.\n\n---",
            "title": "Contributing to REST framework"
        },
        {
            "location": "/topics/contributing/#contributing-to-rest-framework",
            "text": "The world can only really be changed one piece at a time.  The art is picking that piece.  \u2014  Tim Berners-Lee   There are many ways you can contribute to Django REST framework.  We'd like it to be a community-led project, so please get involved and help shape the future of the project.",
            "title": "Contributing to REST framework"
        },
        {
            "location": "/topics/contributing/#community",
            "text": "The most important thing you can do to help push the REST framework project forward is to be actively involved wherever possible.  Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case.  If you use REST framework, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about using REST framework, or publishing a tutorial about building a project with a particular JavaScript framework.  Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of REST framework are more difficult to understand and work with.  Other really great ways you can help move the community forward include helping to answer questions on the  discussion group , or setting up an  email alert on StackOverflow  so that you get notified of any new questions with the  django-rest-framework  tag.  When answering questions make sure to help future contributors find their way around by hyperlinking wherever possible to related threads and tickets, and include backlinks from those items if relevant.",
            "title": "Community"
        },
        {
            "location": "/topics/contributing/#code-of-conduct",
            "text": "Please keep the tone polite & professional.  For some users a discussion on the REST framework mailing list or ticket tracker may be their first engagement with the open source community.  First impressions count, so let's try to make everyone feel welcome.  Be mindful in the language you choose.  As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive.  It's just as easy, and more inclusive to use gender neutral language in those situations.  The  Django code of conduct  gives a fuller set of guidelines for participating in community forums.",
            "title": "Code of conduct"
        },
        {
            "location": "/topics/contributing/#issues",
            "text": "It's really helpful if you can make sure to address issues on the correct channel.  Usage questions should be directed to the  discussion group .  Feature requests, bug reports and other issues should be raised on the GitHub  issue tracker .  Some tips on good issue reporting:   When describing issues try to phrase your ticket in terms of the  behavior  you think needs changing rather than the  code  you think need changing.  Search the issue list first for related items, and make sure you're running the latest version of REST framework before reporting an issue.  If reporting a bug, then try to include a pull request with a failing test case.  This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one.  Feature requests will often be closed with a recommendation that they be implemented outside of the core REST framework library.  Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead of REST framework, so that the focus can be on continued stability, bugfixes, and great documentation.  Closing an issue doesn't necessarily mean the end of a discussion.  If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened.",
            "title": "Issues"
        },
        {
            "location": "/topics/contributing/#triaging-issues",
            "text": "Getting involved in triaging incoming issues is a good way to start contributing.  Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be.  Anyone can help out with this, you just need to be willing to   Read through the ticket - does it make sense, is it missing any context that would help explain it better?  Is the ticket reported in the correct place, would it be better suited as a discussion on the discussion group?  If the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request?  If the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package?  If a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again.",
            "title": "Triaging issues"
        },
        {
            "location": "/topics/contributing/#development",
            "text": "To start developing on Django REST framework, clone the repo:  git clone git@github.com:tomchristie/django-rest-framework.git  Changes should broadly follow the  PEP 8  style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles.",
            "title": "Development"
        },
        {
            "location": "/topics/contributing/#testing",
            "text": "To run the tests, clone the repository, and then:  # Setup the virtual environment\nvirtualenv env\nsource env/bin/activate\npip install django\npip install -r requirements.txt\n\n# Run the tests\n./runtests.py",
            "title": "Testing"
        },
        {
            "location": "/topics/contributing/#test-options",
            "text": "Run using a more concise output style.  ./runtests.py -q  Run the tests using a more concise output style, no coverage, no flake8.  ./runtests.py --fast  Don't run the flake8 code linting.  ./runtests.py --nolint  Only run the flake8 code linting, don't run the tests.  ./runtests.py --lintonly  Run the tests for a given test case.  ./runtests.py MyTestCase  Run the tests for a given test method.  ./runtests.py MyTestCase.test_this_method  Shorter form to run the tests for a given test method.  ./runtests.py test_this_method  Note: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given  command line input.",
            "title": "Test options"
        },
        {
            "location": "/topics/contributing/#running-against-multiple-environments",
            "text": "You can also use the excellent  tox  testing tool to run the tests against all supported versions of Python and Django.  Install  tox  globally, and then simply run:  tox",
            "title": "Running against multiple environments"
        },
        {
            "location": "/topics/contributing/#pull-requests",
            "text": "It's a good idea to make pull requests early on.  A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission.  It's also always best to make a new branch before starting work on a pull request.  This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests.  It's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests.  GitHub's documentation for working on pull requests is  available here .  Always run the tests before submitting pull requests, and ideally run  tox  in order to check that your modifications are compatible with both Python 2 and Python 3, and that they run properly on all supported versions of Django.  Once you've made a pull request take a look at the Travis build status in the GitHub interface and make sure the tests are running as you'd expect.   Above: Travis build notifications",
            "title": "Pull requests"
        },
        {
            "location": "/topics/contributing/#managing-compatibility-issues",
            "text": "Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment.  Any code that branches in this way should be isolated into the  compat.py  module, and should provide a single common interface that the rest of the codebase can use.",
            "title": "Managing compatibility issues"
        },
        {
            "location": "/topics/contributing/#documentation",
            "text": "The documentation for REST framework is built from the  Markdown  source files in  the docs directory .  There are many great Markdown editors that make working with the documentation really easy.  The  Mou editor for Mac  is one such editor that comes highly recommended.",
            "title": "Documentation"
        },
        {
            "location": "/topics/contributing/#building-the-documentation",
            "text": "To build the documentation, install MkDocs with  pip install mkdocs  and then run the following command.  mkdocs build  This will build the documentation into the  site  directory.  You can build the documentation and open a preview in a browser window by using the  serve  command.  mkdocs serve",
            "title": "Building the documentation"
        },
        {
            "location": "/topics/contributing/#language-style",
            "text": "Documentation should be in American English.  The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible.  Some other tips:   Keep paragraphs reasonably short.  Don't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'.",
            "title": "Language style"
        },
        {
            "location": "/topics/contributing/#markdown-style",
            "text": "There are a couple of conventions you should follow when working on the documentation.",
            "title": "Markdown style"
        },
        {
            "location": "/topics/contributing/#1-headers",
            "text": "Headers should use the hash style.  For example:  ### Some important topic  The underline style should not be used.   Don't do this:  Some important topic\n====================",
            "title": "1. Headers"
        },
        {
            "location": "/topics/contributing/#2-links",
            "text": "Links should always use the reference style, with the referenced hyperlinks kept at the end of the document.  Here is a link to [some other thing][other-thing].\n\nMore text...\n\n[other-thing]: http://example.com/other/thing  This style helps keep the documentation source consistent and readable.  If you are hyperlinking to another REST framework document, you should use a relative link, and link to the  .md  suffix.  For example:  [authentication]: ../api-guide/authentication.md  Linking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document.  When the documentation is built, these links will be converted into regular links to HTML pages.",
            "title": "2. Links"
        },
        {
            "location": "/topics/contributing/#3-notes",
            "text": "If you want to draw attention to a note or warning, use a pair of enclosing lines, like so:  ---\n\n**Note:** A useful documentation note.\n\n---",
            "title": "3. Notes"
        },
        {
            "location": "/topics/project-management/",
            "text": "Project management\n\n\n\n\n\"No one can whistle a symphony; it takes a whole orchestra to play it\"\n\n\n\u2014 Halford E. Luccock\n\n\n\n\nThis document outlines our project management processes for REST framework.\n\n\nThe aim is to ensure that the project has a high\n\n\"bus factor\"\n, and can continue to remain well supported for the foreseeable future. Suggestions for improvements to our process are welcome.\n\n\n\n\nMaintenance team\n\n\nWe have a quarterly maintenance cycle where new members may join the maintenance team. We currently cap the size of the team at 5 members, and may encourage folks to step out of the team for a cycle to allow new members to participate.\n\n\nCurrent team\n\n\nThe \nmaintenance team for Q4 2015\n:\n\n\n\n\n@tomchristie\n\n\n@xordoquy\n (Release manager.)\n\n\n@carltongibson\n\n\n@kevin-brown\n\n\n@jpadilla\n\n\n\n\nMaintenance cycles\n\n\nEach maintenance cycle is initiated by an issue being opened with the \nProcess\n label.\n\n\n\n\nTo be considered for a maintainer role simply comment against the issue.\n\n\nExisting members must explicitly opt-in to the next cycle by check-marking their name.\n\n\nThe final decision on the incoming team will be made by \n@tomchristie\n.\n\n\n\n\nMembers of the maintenance team will be added as collaborators to the repository.\n\n\nThe following template should be used for the description of the issue, and serves as the formal process for selecting the team.\n\n\nThis issue is for determining the maintenance team for the *** period.\n\nPlease see the [Project management](http://www.django-rest-framework.org/topics/project-management/) section of our documentation for more details.\n\n---\n\n#### Renewing existing members.\n\nThe following people are the current maintenance team. Please checkmark your name if you wish to continue to have write permission on the repository for the *** period.\n\n- [ ] @***\n- [ ] @***\n- [ ] @***\n- [ ] @***\n- [ ] @***\n\n---\n\n#### New members.\n\nIf you wish to be considered for this or a future date, please comment against this or subsequent issues.\n\nTo modify this process for future maintenance cycles make a pull request to the [project management](http://www.django-rest-framework.org/topics/project-management/) documentation.\n\n\n\nResponsibilities of team members\n\n\nTeam members have the following responsibilities.\n\n\n\n\nClose invalid or resolved tickets.\n\n\nAdd triage labels and milestones to tickets.\n\n\nMerge finalized pull requests.\n\n\nBuild and deploy the documentation, using \nmkdocs gh-deploy\n.\n\n\nBuild and update the included translation packs.\n\n\n\n\nFurther notes for maintainers:\n\n\n\n\nCode changes should come in the form of a pull request - do not push directly to master.\n\n\nMaintainers should typically not merge their own pull requests.\n\n\nEach issue/pull request should have exactly one label once triaged.\n\n\nSearch for un-triaged issues with \nis:open no:label\n.\n\n\n\n\nIt should be noted that participating actively in the REST framework project clearly \ndoes not require being part of the maintenance team\n. Almost every import part of issue triage and project improvement can be actively worked on regardless of your collaborator status on the repository.\n\n\n\n\nRelease process\n\n\nThe release manager is selected on every quarterly maintenance cycle.\n\n\n\n\nThe manager should be selected by \n@tomchristie\n.\n\n\nThe manager will then have the maintainer role added to PyPI package.\n\n\nThe previous manager will then have the maintainer role removed from the PyPI package.\n\n\n\n\nOur PyPI releases will be handled by either the current release manager, or by \n@tomchristie\n. Every release should have an open issue tagged with the \nRelease\n label and marked against the appropriate milestone.\n\n\nThe following template should be used for the description of the issue, and serves as a release checklist.\n\n\nRelease manager is @***.\nPull request is #***.\n\nDuring development cycle:\n\n- [ ] Upload the new content to be translated to [transifex](http://www.django-rest-framework.org/topics/project-management/#translations).\n\n\nChecklist:\n\n- [ ] Create pull request for [release notes](https://github.com/tomchristie/django-rest-framework/blob/master/docs/topics/release-notes.md) based on the [*.*.* milestone](https://github.com/tomchristie/django-rest-framework/milestones/***).\n- [ ] Update the translations from [transifex](http://www.django-rest-framework.org/topics/project-management/#translations).\n- [ ] Ensure the pull request increments the version to `*.*.*` in [`restframework/__init__.py`](https://github.com/tomchristie/django-rest-framework/blob/master/rest_framework/__init__.py).\n- [ ] Confirm with @tomchristie that release is finalized and ready to go.\n- [ ] Ensure that release date is included in pull request.\n- [ ] Merge the release pull request.\n- [ ] Push the package to PyPI with `./setup.py publish`.\n- [ ] Tag the release, with `git tag -a *.*.* -m 'version *.*.*'; git push --tags`.\n- [ ] Deploy the documentation with `mkdocs gh-deploy`.\n- [ ] Make a release announcement on the [discussion group](https://groups.google.com/forum/?fromgroups#!forum/django-rest-framework).\n- [ ] Make a release announcement on twitter.\n- [ ] Close the milestone on GitHub.\n\nTo modify this process for future releases make a pull request to the [project management](http://www.django-rest-framework.org/topics/project-management/) documentation.\n\n\n\nWhen pushing the release to PyPI ensure that your environment has been installed from our development \nrequirement.txt\n, so that documentation and PyPI installs are consistently being built against a pinned set of packages.\n\n\n\n\nTranslations\n\n\nThe maintenance team are responsible for managing the translation packs include in REST framework. Translating the source strings into multiple languages is managed through the \ntransifex service\n.\n\n\nManaging Transifex\n\n\nThe \nofficial Transifex client\n is used to upload and download translations to Transifex. The client is installed using pip:\n\n\npip install transifex-client\n\n\n\nTo use it you'll need a login to Transifex which has a password, and you'll need to have administrative access to the Transifex project. You'll need to create a \n~/.transifexrc\n file which contains your credentials.\n\n\n[https://www.transifex.com]\nusername = ***\ntoken = ***\npassword = ***\nhostname = https://www.transifex.com\n\n\n\nUpload new source files\n\n\nWhen any user visible strings are changed, they should be uploaded to Transifex so that the translators can start to translate them. To do this, just run:\n\n\n# 1. Update the source django.po file, which is the US English version.\ncd rest_framework\ndjango-admin.py makemessages -l en_US\n# 2. Push the source django.po file to Transifex.\ncd ..\ntx push -s\n\n\n\nWhen pushing source files, Transifex will update the source strings of a resource to match those from the new source file.\n\n\nHere's how differences between the old and new source files will be handled:\n\n\n\n\nNew strings will be added.\n\n\nModified strings will be added as well.\n\n\nStrings which do not exist in the new source file will be removed from the database, along with their translations. If that source strings gets re-added later then \nTransifex Translation Memory\n will automatically include the translation string.\n\n\n\n\nDownload translations\n\n\nWhen a translator has finished translating their work needs to be downloaded from Transifex into the REST framework repository. To do this, run:\n\n\n# 3. Pull the translated django.po files from Transifex.\ntx pull -a --minimum-perc 10\ncd rest_framework\n# 4. Compile the binary .mo files for all supported languages.\ndjango-admin.py compilemessages\n\n\n\n\n\nProject requirements\n\n\nAll our test requirements are pinned to exact versions, in order to ensure that our test runs are reproducible. We maintain the requirements in the \nrequirements\n directory. The requirements files are referenced from the \ntox.ini\n configuration file, ensuring we have a single source of truth for package versions used in testing.\n\n\nPackage upgrades should generally be treated as isolated pull requests. You can check if there are any packages available at a newer version, by using the \npip list --outdated\n.\n\n\n\n\nProject ownership\n\n\nThe PyPI package is owned by \n@tomchristie\n. As a backup \n@j4mie\n also has ownership of the package.\n\n\nIf \n@tomchristie\n ceases to participate in the project then \n@j4mie\n has responsibility for handing over ownership duties.\n\n\nOutstanding management & ownership issues\n\n\nThe following issues still need to be addressed:\n\n\n\n\nConsider moving the repo into a proper GitHub organization\n.\n\n\nEnsure \n@jamie\n has back-up access to the \ndjango-rest-framework.org\n domain setup and admin.\n\n\nDocument ownership of the \nlive example\n API.\n\n\nDocument ownership of the \nmailing list\n and IRC channel.\n\n\nDocument ownership and management of the security mailing list.",
            "title": "Project management"
        },
        {
            "location": "/topics/project-management/#project-management",
            "text": "\"No one can whistle a symphony; it takes a whole orchestra to play it\"  \u2014 Halford E. Luccock   This document outlines our project management processes for REST framework.  The aim is to ensure that the project has a high \"bus factor\" , and can continue to remain well supported for the foreseeable future. Suggestions for improvements to our process are welcome.",
            "title": "Project management"
        },
        {
            "location": "/topics/project-management/#maintenance-team",
            "text": "We have a quarterly maintenance cycle where new members may join the maintenance team. We currently cap the size of the team at 5 members, and may encourage folks to step out of the team for a cycle to allow new members to participate.",
            "title": "Maintenance team"
        },
        {
            "location": "/topics/project-management/#current-team",
            "text": "The  maintenance team for Q4 2015 :   @tomchristie  @xordoquy  (Release manager.)  @carltongibson  @kevin-brown  @jpadilla",
            "title": "Current team"
        },
        {
            "location": "/topics/project-management/#maintenance-cycles",
            "text": "Each maintenance cycle is initiated by an issue being opened with the  Process  label.   To be considered for a maintainer role simply comment against the issue.  Existing members must explicitly opt-in to the next cycle by check-marking their name.  The final decision on the incoming team will be made by  @tomchristie .   Members of the maintenance team will be added as collaborators to the repository.  The following template should be used for the description of the issue, and serves as the formal process for selecting the team.  This issue is for determining the maintenance team for the *** period.\n\nPlease see the [Project management](http://www.django-rest-framework.org/topics/project-management/) section of our documentation for more details.\n\n---\n\n#### Renewing existing members.\n\nThe following people are the current maintenance team. Please checkmark your name if you wish to continue to have write permission on the repository for the *** period.\n\n- [ ] @***\n- [ ] @***\n- [ ] @***\n- [ ] @***\n- [ ] @***\n\n---\n\n#### New members.\n\nIf you wish to be considered for this or a future date, please comment against this or subsequent issues.\n\nTo modify this process for future maintenance cycles make a pull request to the [project management](http://www.django-rest-framework.org/topics/project-management/) documentation.",
            "title": "Maintenance cycles"
        },
        {
            "location": "/topics/project-management/#responsibilities-of-team-members",
            "text": "Team members have the following responsibilities.   Close invalid or resolved tickets.  Add triage labels and milestones to tickets.  Merge finalized pull requests.  Build and deploy the documentation, using  mkdocs gh-deploy .  Build and update the included translation packs.   Further notes for maintainers:   Code changes should come in the form of a pull request - do not push directly to master.  Maintainers should typically not merge their own pull requests.  Each issue/pull request should have exactly one label once triaged.  Search for un-triaged issues with  is:open no:label .   It should be noted that participating actively in the REST framework project clearly  does not require being part of the maintenance team . Almost every import part of issue triage and project improvement can be actively worked on regardless of your collaborator status on the repository.",
            "title": "Responsibilities of team members"
        },
        {
            "location": "/topics/project-management/#release-process",
            "text": "The release manager is selected on every quarterly maintenance cycle.   The manager should be selected by  @tomchristie .  The manager will then have the maintainer role added to PyPI package.  The previous manager will then have the maintainer role removed from the PyPI package.   Our PyPI releases will be handled by either the current release manager, or by  @tomchristie . Every release should have an open issue tagged with the  Release  label and marked against the appropriate milestone.  The following template should be used for the description of the issue, and serves as a release checklist.  Release manager is @***.\nPull request is #***.\n\nDuring development cycle:\n\n- [ ] Upload the new content to be translated to [transifex](http://www.django-rest-framework.org/topics/project-management/#translations).\n\n\nChecklist:\n\n- [ ] Create pull request for [release notes](https://github.com/tomchristie/django-rest-framework/blob/master/docs/topics/release-notes.md) based on the [*.*.* milestone](https://github.com/tomchristie/django-rest-framework/milestones/***).\n- [ ] Update the translations from [transifex](http://www.django-rest-framework.org/topics/project-management/#translations).\n- [ ] Ensure the pull request increments the version to `*.*.*` in [`restframework/__init__.py`](https://github.com/tomchristie/django-rest-framework/blob/master/rest_framework/__init__.py).\n- [ ] Confirm with @tomchristie that release is finalized and ready to go.\n- [ ] Ensure that release date is included in pull request.\n- [ ] Merge the release pull request.\n- [ ] Push the package to PyPI with `./setup.py publish`.\n- [ ] Tag the release, with `git tag -a *.*.* -m 'version *.*.*'; git push --tags`.\n- [ ] Deploy the documentation with `mkdocs gh-deploy`.\n- [ ] Make a release announcement on the [discussion group](https://groups.google.com/forum/?fromgroups#!forum/django-rest-framework).\n- [ ] Make a release announcement on twitter.\n- [ ] Close the milestone on GitHub.\n\nTo modify this process for future releases make a pull request to the [project management](http://www.django-rest-framework.org/topics/project-management/) documentation.  When pushing the release to PyPI ensure that your environment has been installed from our development  requirement.txt , so that documentation and PyPI installs are consistently being built against a pinned set of packages.",
            "title": "Release process"
        },
        {
            "location": "/topics/project-management/#translations",
            "text": "The maintenance team are responsible for managing the translation packs include in REST framework. Translating the source strings into multiple languages is managed through the  transifex service .",
            "title": "Translations"
        },
        {
            "location": "/topics/project-management/#managing-transifex",
            "text": "The  official Transifex client  is used to upload and download translations to Transifex. The client is installed using pip:  pip install transifex-client  To use it you'll need a login to Transifex which has a password, and you'll need to have administrative access to the Transifex project. You'll need to create a  ~/.transifexrc  file which contains your credentials.  [https://www.transifex.com]\nusername = ***\ntoken = ***\npassword = ***\nhostname = https://www.transifex.com",
            "title": "Managing Transifex"
        },
        {
            "location": "/topics/project-management/#upload-new-source-files",
            "text": "When any user visible strings are changed, they should be uploaded to Transifex so that the translators can start to translate them. To do this, just run:  # 1. Update the source django.po file, which is the US English version.\ncd rest_framework\ndjango-admin.py makemessages -l en_US\n# 2. Push the source django.po file to Transifex.\ncd ..\ntx push -s  When pushing source files, Transifex will update the source strings of a resource to match those from the new source file.  Here's how differences between the old and new source files will be handled:   New strings will be added.  Modified strings will be added as well.  Strings which do not exist in the new source file will be removed from the database, along with their translations. If that source strings gets re-added later then  Transifex Translation Memory  will automatically include the translation string.",
            "title": "Upload new source files"
        },
        {
            "location": "/topics/project-management/#download-translations",
            "text": "When a translator has finished translating their work needs to be downloaded from Transifex into the REST framework repository. To do this, run:  # 3. Pull the translated django.po files from Transifex.\ntx pull -a --minimum-perc 10\ncd rest_framework\n# 4. Compile the binary .mo files for all supported languages.\ndjango-admin.py compilemessages",
            "title": "Download translations"
        },
        {
            "location": "/topics/project-management/#project-requirements",
            "text": "All our test requirements are pinned to exact versions, in order to ensure that our test runs are reproducible. We maintain the requirements in the  requirements  directory. The requirements files are referenced from the  tox.ini  configuration file, ensuring we have a single source of truth for package versions used in testing.  Package upgrades should generally be treated as isolated pull requests. You can check if there are any packages available at a newer version, by using the  pip list --outdated .",
            "title": "Project requirements"
        },
        {
            "location": "/topics/project-management/#project-ownership",
            "text": "The PyPI package is owned by  @tomchristie . As a backup  @j4mie  also has ownership of the package.  If  @tomchristie  ceases to participate in the project then  @j4mie  has responsibility for handing over ownership duties.",
            "title": "Project ownership"
        },
        {
            "location": "/topics/project-management/#outstanding-management-ownership-issues",
            "text": "The following issues still need to be addressed:   Consider moving the repo into a proper GitHub organization .  Ensure  @jamie  has back-up access to the  django-rest-framework.org  domain setup and admin.  Document ownership of the  live example  API.  Document ownership of the  mailing list  and IRC channel.  Document ownership and management of the security mailing list.",
            "title": "Outstanding management &amp; ownership issues"
        },
        {
            "location": "/topics/3.0-announcement/",
            "text": "Django REST framework 3.0\n\n\nThe 3.0 release of Django REST framework is the result of almost four years of iteration and refinement. It comprehensively addresses some of the previous remaining design issues in serializers, fields and the generic views.\n\n\nThis release is incremental in nature. There \nare\n some breaking API changes, and upgrading \nwill\n require you to read the release notes carefully, but the migration path should otherwise be relatively straightforward.\n\n\nThe difference in quality of the REST framework API and implementation should make writing, maintaining and debugging your application far easier.\n\n\n3.0 is the first of three releases that have been funded by our recent \nKickstarter campaign\n.\n\n\nAs ever, a huge thank you to our many \nwonderful sponsors\n. If you're looking for a Django gig, and want to work with smart community-minded folks, you should probably check out that list and see who's hiring.\n\n\n\n\nNew features\n\n\nNotable features of this new release include:\n\n\n\n\nPrintable representations on serializers that allow you to inspect exactly what fields are present on the instance.\n\n\nSimple model serializers that are vastly easier to understand and debug, and that make it easy to switch between the implicit \nModelSerializer\n class and the explicit \nSerializer\n class.\n\n\nA new \nBaseSerializer\n class, making it easier to write serializers for alternative storage backends, or to completely customize your serialization and validation logic.\n\n\nA cleaner fields API including new classes such as \nListField\n and \nMultipleChoiceField\n.\n\n\nSuper simple default implementations\n for the generic views.\n\n\nSupport for overriding how validation errors are handled by your API.\n\n\nA metadata API that allows you to customize how \nOPTIONS\n requests are handled by your API.\n\n\nA more compact JSON output with unicode style encoding turned on by default.\n\n\nTemplated based HTML form rendering for serializers. This will be finalized as  public API in the upcoming 3.1 release.\n\n\n\n\nSignificant new functionality continues to be planned for the 3.1 and 3.2 releases. These releases will correspond to the two \nKickstarter stretch goals\n - \"Feature improvements\" and \"Admin interface\". Further 3.x releases will present simple upgrades, without the same level of fundamental API changes necessary for the 3.0 release.\n\n\n\n\nREST framework: Under the hood.\n\n\nThis talk from the \nDjango: Under the Hood\n event in Amsterdam, Nov 2014, gives some good background context on the design decisions behind 3.0.\n\n\n\n\n\n\n\nBelow is an in-depth guide to the API changes and migration notes for 3.0.\n\n\nRequest objects\n\n\nThe \n.data\n and \n.query_params\n properties.\n\n\nThe usage of \nrequest.DATA\n and \nrequest.FILES\n is now pending deprecation in favor of a single \nrequest.data\n attribute that contains \nall\n the parsed data.\n\n\nHaving separate attributes is reasonable for web applications that only ever parse url-encoded or multipart requests, but makes less sense for the general-purpose request parsing that REST framework supports.\n\n\nYou may now pass all the request data to a serializer class in a single argument:\n\n\n# Do this...\nExampleSerializer(data=request.data)\n\n\n\nInstead of passing the files argument separately:\n\n\n# Don't do this...\nExampleSerializer(data=request.DATA, files=request.FILES)\n\n\n\nThe usage of \nrequest.QUERY_PARAMS\n is now pending deprecation in favor of the lowercased \nrequest.query_params\n.\n\n\n\n\nSerializers\n\n\nSingle-step object creation.\n\n\nPreviously the serializers used a two-step object creation, as follows:\n\n\n\n\nValidating the data would create an object instance. This instance would be available as \nserializer.object\n.\n\n\nCalling \nserializer.save()\n would then save the object instance to the database.\n\n\n\n\nThis style is in-line with how the \nModelForm\n class works in Django, but is problematic for a number of reasons:\n\n\n\n\nSome data, such as many-to-many relationships, cannot be added to the object instance until after it has been saved. This type of data needed to be hidden in some undocumented state on the object instance, or kept as state on the serializer instance so that it could be used when \n.save()\n is called.\n\n\nInstantiating model instances directly means that you cannot use model manager classes for instance creation, e.g. \nExampleModel.objects.create(...)\n. Manager classes are an excellent layer at which to enforce business logic and application-level data constraints.\n\n\nThe two step process makes it unclear where to put deserialization logic. For example, should extra attributes such as the current user get added to the instance during object creation or during object save?\n\n\n\n\nWe now use single-step object creation, like so:\n\n\n\n\nValidating the data makes the cleaned data available as \nserializer.validated_data\n.\n\n\nCalling \nserializer.save()\n then saves and returns the new object instance.\n\n\n\n\nThe resulting API changes are further detailed below.\n\n\nThe \n.create()\n and \n.update()\n methods.\n\n\nThe \n.restore_object()\n method is now removed, and we instead have two separate methods, \n.create()\n and \n.update()\n. These methods work slightly different to the previous \n.restore_object()\n.\n\n\nWhen using the \n.create()\n and \n.update()\n methods you should both create \nand save\n the object instance. This is in contrast to the previous \n.restore_object()\n behavior that would instantiate the object but not save it.\n\n\nThese methods also replace the optional \n.save_object()\n method, which no longer exists.\n\n\nThe following example from the tutorial previously used \nrestore_object()\n to handle both creating and updating object instances.\n\n\ndef restore_object(self, attrs, instance=None):\n    if instance:\n        # Update existing instance\n        instance.title = attrs.get('title', instance.title)\n        instance.code = attrs.get('code', instance.code)\n        instance.linenos = attrs.get('linenos', instance.linenos)\n        instance.language = attrs.get('language', instance.language)\n        instance.style = attrs.get('style', instance.style)\n        return instance\n\n    # Create new instance\n    return Snippet(**attrs)\n\n\n\nThis would now be split out into two separate methods.\n\n\ndef update(self, instance, validated_data):\n    instance.title = validated_data.get('title', instance.title)\n    instance.code = validated_data.get('code', instance.code)\n    instance.linenos = validated_data.get('linenos', instance.linenos)\n    instance.language = validated_data.get('language', instance.language)\n    instance.style = validated_data.get('style', instance.style)\n    instance.save()\n    return instance\n\ndef create(self, validated_data):\n    return Snippet.objects.create(**validated_data)\n\n\n\nNote that these methods should return the newly created object instance.\n\n\nUse \n.validated_data\n instead of \n.object\n.\n\n\nYou must now use the \n.validated_data\n attribute if you need to inspect the data before saving, rather than using the \n.object\n attribute, which no longer exists.\n\n\nFor example the following code \nis no longer valid\n:\n\n\nif serializer.is_valid():\n    name = serializer.object.name  # Inspect validated field data.\n    logging.info('Creating ticket \"%s\"' % name)\n    serializer.object.user = request.user  # Include the user when saving.\n    serializer.save()\n\n\n\nInstead of using \n.object\n to inspect a partially constructed instance, you would now use \n.validated_data\n to inspect the cleaned incoming values. Also you can't set extra attributes on the instance directly, but instead pass them to the \n.save()\n method as keyword arguments.\n\n\nThe corresponding code would now look like this:\n\n\nif serializer.is_valid():\n    name = serializer.validated_data['name']  # Inspect validated field data.\n    logging.info('Creating ticket \"%s\"' % name)\n    serializer.save(user=request.user)  # Include the user when saving.\n\n\n\nUsing \n.is_valid(raise_exception=True)\n\n\nThe \n.is_valid()\n method now takes an optional boolean flag, \nraise_exception\n.\n\n\nCalling \n.is_valid(raise_exception=True)\n will cause a \nValidationError\n to be raised if the serializer data contains validation errors. This error will be handled by REST framework's default exception handler, allowing you to remove error response handling from your view code.\n\n\nThe handling and formatting of error responses may be altered globally by using the \nEXCEPTION_HANDLER\n settings key.\n\n\nThis change also means it's now possible to alter the style of error responses used by the built-in generic views, without having to include mixin classes or other overrides.\n\n\nUsing \nserializers.ValidationError\n.\n\n\nPreviously \nserializers.ValidationError\n error was simply a synonym for \ndjango.core.exceptions.ValidationError\n. This has now been altered so that it inherits from the standard \nAPIException\n base class.\n\n\nThe reason behind this is that Django's \nValidationError\n class is intended for use with HTML forms and its API makes using it slightly awkward with nested validation errors that can occur in serializers.\n\n\nFor most users this change shouldn't require any updates to your codebase, but it is worth ensuring that whenever raising validation errors you should prefer using the \nserializers.ValidationError\n exception class, and not Django's built-in exception.\n\n\nWe strongly recommend that you use the namespaced import style of \nimport serializers\n and not \nfrom serializers import ValidationError\n in order to avoid any potential confusion.\n\n\nChange to \nvalidate_<field_name>\n.\n\n\nThe \nvalidate_<field_name>\n method hooks that can be attached to serializer classes change their signature slightly and return type. Previously these would take a dictionary of all incoming data, and a key representing the field name, and would return a dictionary including the validated data for that field:\n\n\ndef validate_score(self, attrs, source):\n    if attrs['score'] % 10 != 0:\n        raise serializers.ValidationError('This field should be a multiple of ten.')\n    return attrs\n\n\n\nThis is now simplified slightly, and the method hooks simply take the value to be validated, and return the validated value.\n\n\ndef validate_score(self, value):\n    if value % 10 != 0:\n        raise serializers.ValidationError('This field should be a multiple of ten.')\n    return value\n\n\n\nAny ad-hoc validation that applies to more than one field should go in the \n.validate(self, attrs)\n method as usual.\n\n\nBecause \n.validate_<field_name>\n would previously accept the complete dictionary of attributes, it could be used to validate a field depending on the input in another field. Now if you need to do this you should use \n.validate()\n instead.\n\n\nYou can either return \nnon_field_errors\n from the validate method by raising a simple \nValidationError\n\n\ndef validate(self, attrs):\n    # serializer.errors == {'non_field_errors': ['A non field error']}\n    raise serializers.ValidationError('A non field error')\n\n\n\nAlternatively if you want the errors to be against a specific field, use a dictionary of when instantiating the \nValidationError\n, like so:\n\n\ndef validate(self, attrs):\n    # serializer.errors == {'my_field': ['A field error']}\n    raise serializers.ValidationError({'my_field': 'A field error'})\n\n\n\nThis ensures you can still write validation that compares all the input fields, but that marks the error against a particular field.\n\n\nRemoval of \ntransform_<field_name>\n.\n\n\nThe under-used \ntransform_<field_name>\n on serializer classes is no longer provided. Instead you should just override \nto_representation()\n if you need to apply any modifications to the representation style.\n\n\nFor example:\n\n\ndef to_representation(self, instance):\n    ret = super(UserSerializer, self).to_representation(instance)\n    ret['username'] = ret['username'].lower()\n    return ret\n\n\n\nDropping the extra point of API means there's now only one right way to do things. This helps with repetition and reinforcement of the core API, rather than having multiple differing approaches.\n\n\nIf you absolutely need to preserve \ntransform_<field_name>\n behavior, for example, in order to provide a simpler 2.x to 3.0 upgrade, you can use a mixin, or serializer base class that add the behavior back in. For example:\n\n\nclass BaseModelSerializer(ModelSerializer):\n    \"\"\"\n    A custom ModelSerializer class that preserves 2.x style `transform_<field_name>` behavior.\n    \"\"\"\n    def to_representation(self, instance):\n        ret = super(BaseModelSerializer, self).to_representation(instance)\n        for key, value in ret.items():\n            method = getattr(self, 'transform_' + key, None)\n            if method is not None:\n                ret[key] = method(value)\n        return ret\n\n\n\nDifferences between ModelSerializer validation and ModelForm.\n\n\nThis change also means that we no longer use the \n.full_clean()\n method on model instances, but instead perform all validation explicitly on the serializer. This gives a cleaner separation, and ensures that there's no automatic validation behavior on \nModelSerializer\n classes that can't also be easily replicated on regular \nSerializer\n classes.\n\n\nFor the most part this change should be transparent. Field validation and uniqueness checks will still be run as normal, but the implementation is a little different.\n\n\nThe one difference that you do need to note is that the \n.clean()\n method will not be called as part of serializer validation, as it would be if using a \nModelForm\n. Use the serializer \n.validate()\n method to perform a final validation step on incoming data where required.\n\n\nThere may be some cases where you really do need to keep validation logic in the model \n.clean()\n method, and cannot instead separate it into the serializer \n.validate()\n. You can do so by explicitly instantiating a model instance in the \n.validate()\n method.\n\n\ndef validate(self, attrs):\n    instance = ExampleModel(**attrs)\n    instance.clean()\n    return attrs\n\n\n\nAgain, you really should look at properly separating the validation logic out of the model method if possible, but the above might be useful in some backwards compatibility cases, or for an easy migration path.\n\n\nWritable nested serialization.\n\n\nREST framework 2.x attempted to automatically support writable nested serialization, but the behavior was complex and non-obvious. Attempting to automatically handle these case is problematic:\n\n\n\n\nThere can be complex dependencies involved in order of saving multiple related model instances.\n\n\nIt's unclear what behavior the user should expect when related models are passed \nNone\n data.\n\n\nIt's unclear how the user should expect to-many relationships to handle updates, creations and deletions of multiple records.\n\n\n\n\nUsing the \ndepth\n option on \nModelSerializer\n will now create \nread-only nested serializers\n by default.\n\n\nIf you try to use a writable nested serializer without writing a custom \ncreate()\n and/or \nupdate()\n method you'll see an assertion error when you attempt to save the serializer. For example:\n\n\n>>> class ProfileSerializer(serializers.ModelSerializer):\n>>>     class Meta:\n>>>         model = Profile\n>>>         fields = ('address', 'phone')\n>>>\n>>> class UserSerializer(serializers.ModelSerializer):\n>>>     profile = ProfileSerializer()\n>>>     class Meta:\n>>>         model = User\n>>>         fields = ('username', 'email', 'profile')\n>>>\n>>> data = {\n>>>     'username': 'lizzy',\n>>>     'email': 'lizzy@example.com',\n>>>     'profile': {'address': '123 Acacia Avenue', 'phone': '01273 100200'}\n>>> }\n>>>\n>>> serializer = UserSerializer(data=data)\n>>> serializer.save()\nAssertionError: The `.create()` method does not support nested writable fields by default. Write an explicit `.create()` method for serializer `UserSerializer`, or set `read_only=True` on nested serializer fields.\n\n\n\nTo use writable nested serialization you'll want to declare a nested field on the serializer class, and write the \ncreate()\n and/or \nupdate()\n methods explicitly.\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    profile = ProfileSerializer()\n\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'profile')\n\n    def create(self, validated_data):\n        profile_data = validated_data.pop('profile')\n        user = User.objects.create(**validated_data)\n        Profile.objects.create(user=user, **profile_data)\n        return user\n\n\n\nThe single-step object creation makes this far simpler and more obvious than the previous \n.restore_object()\n behavior.\n\n\nPrintable serializer representations.\n\n\nSerializer instances now support a printable representation that allows you to inspect the fields present on the instance.\n\n\nFor instance, given the following example model:\n\n\nclass LocationRating(models.Model):\n    location = models.CharField(max_length=100)\n    rating = models.IntegerField()\n    created_by = models.ForeignKey(User)\n\n\n\nLet's create a simple \nModelSerializer\n class corresponding to the \nLocationRating\n model.\n\n\nclass LocationRatingSerializer(serializer.ModelSerializer):\n    class Meta:\n        model = LocationRating\n\n\n\nWe can now inspect the serializer representation in the Django shell, using \npython manage.py shell\n...\n\n\n>>> serializer = LocationRatingSerializer()\n>>> print(serializer)  # Or use `print serializer` in Python 2.x\nLocationRatingSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    location = CharField(max_length=100)\n    rating = IntegerField()\n    created_by = PrimaryKeyRelatedField(queryset=User.objects.all())\n\n\n\nThe \nextra_kwargs\n option.\n\n\nThe \nwrite_only_fields\n option on \nModelSerializer\n has been moved to \nPendingDeprecation\n and replaced with a more generic \nextra_kwargs\n.\n\n\nclass MySerializer(serializer.ModelSerializer):\n    class Meta:\n        model = MyModel\n        fields = ('id', 'email', 'notes', 'is_admin')\n        extra_kwargs = {\n                'is_admin': {'write_only': True}\n        }\n\n\n\nAlternatively, specify the field explicitly on the serializer class:\n\n\nclass MySerializer(serializer.ModelSerializer):\n    is_admin = serializers.BooleanField(write_only=True)\n\n    class Meta:\n        model = MyModel\n        fields = ('id', 'email', 'notes', 'is_admin')\n\n\n\nThe \nread_only_fields\n option remains as a convenient shortcut for the more common case.\n\n\nChanges to \nHyperlinkedModelSerializer\n.\n\n\nThe \nview_name\n and \nlookup_field\n options have been moved to \nPendingDeprecation\n. They are no longer required, as you can use the \nextra_kwargs\n argument instead:\n\n\nclass MySerializer(serializer.HyperlinkedModelSerializer):\n    class Meta:\n        model = MyModel\n        fields = ('url', 'email', 'notes', 'is_admin')\n        extra_kwargs = {\n            'url': {'lookup_field': 'uuid'}\n        }\n\n\n\nAlternatively, specify the field explicitly on the serializer class:\n\n\nclass MySerializer(serializer.HyperlinkedModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='mymodel-detail',\n        lookup_field='uuid'\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('url', 'email', 'notes', 'is_admin')\n\n\n\nFields for model methods and properties.\n\n\nWith \nModelSerializer\n you can now specify field names in the \nfields\n option that refer to model methods or properties. For example, suppose you have the following model:\n\n\nclass Invitation(models.Model):\n    created = models.DateTimeField()\n    to_email = models.EmailField()\n    message = models.CharField(max_length=1000)\n\n    def expiry_date(self):\n        return self.created + datetime.timedelta(days=30)\n\n\n\nYou can include \nexpiry_date\n as a field option on a \nModelSerializer\n class.\n\n\nclass InvitationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Invitation\n        fields = ('to_email', 'message', 'expiry_date')\n\n\n\nThese fields will be mapped to \nserializers.ReadOnlyField()\n instances.\n\n\n>>> serializer = InvitationSerializer()\n>>> print repr(serializer)\nInvitationSerializer():\n    to_email = EmailField(max_length=75)\n    message = CharField(max_length=1000)\n    expiry_date = ReadOnlyField()\n\n\n\nThe \nListSerializer\n class.\n\n\nThe \nListSerializer\n class has now been added, and allows you to create base serializer classes for only accepting multiple inputs.\n\n\nclass MultipleUserSerializer(ListSerializer):\n    child = UserSerializer()\n\n\n\nYou can also still use the \nmany=True\n argument to serializer classes. It's worth noting that \nmany=True\n argument transparently creates a \nListSerializer\n instance, allowing the validation logic for list and non-list data to be cleanly separated in the REST framework codebase.\n\n\nYou will typically want to \ncontinue to use the existing \nmany=True\n flag\n rather than declaring \nListSerializer\n classes explicitly, but declaring the classes explicitly can be useful if you need to write custom \ncreate\n or \nupdate\n methods for bulk updates, or provide for other custom behavior.\n\n\nSee also the new \nListField\n class, which validates input in the same way, but does not include the serializer interfaces of \n.is_valid()\n, \n.data\n, \n.save()\n and so on.\n\n\nThe \nBaseSerializer\n class.\n\n\nREST framework now includes a simple \nBaseSerializer\n class that can be used to easily support alternative serialization and deserialization styles.\n\n\nThis class implements the same basic API as the \nSerializer\n class:\n\n\n\n\n.data\n - Returns the outgoing primitive representation.\n\n\n.is_valid()\n - Deserializes and validates incoming data.\n\n\n.validated_data\n - Returns the validated incoming data.\n\n\n.errors\n - Returns an errors during validation.\n\n\n.save()\n - Persists the validated data into an object instance.\n\n\n\n\nThere are four methods that can be overridden, depending on what functionality you want the serializer class to support:\n\n\n\n\n.to_representation()\n - Override this to support serialization, for read operations.\n\n\n.to_internal_value()\n - Override this to support deserialization, for write operations.\n\n\n.create()\n and \n.update()\n - Override either or both of these to support saving instances.\n\n\n\n\nBecause this class provides the same interface as the \nSerializer\n class, you can use it with the existing generic class-based views exactly as you would for a regular \nSerializer\n or \nModelSerializer\n.\n\n\nThe only difference you'll notice when doing so is the \nBaseSerializer\n classes will not generate HTML forms in the browsable API. This is because the data they return does not include all the field information that would allow each field to be rendered into a suitable HTML input.\n\n\nRead-only \nBaseSerializer\n classes.\n\n\nTo implement a read-only serializer using the \nBaseSerializer\n class, we just need to override the \n.to_representation()\n method. Let's take a look at an example using a simple Django model:\n\n\nclass HighScore(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    player_name = models.CharField(max_length=10)\n    score = models.IntegerField()\n\n\n\nIt's simple to create a read-only serializer for converting \nHighScore\n instances into primitive data types.\n\n\nclass HighScoreSerializer(serializers.BaseSerializer):\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }\n\n\n\nWe can now use this class to serialize single \nHighScore\n instances:\n\n\n@api_view(['GET'])\ndef high_score(request, pk):\n    instance = HighScore.objects.get(pk=pk)\n    serializer = HighScoreSerializer(instance)\n    return Response(serializer.data)\n\n\n\nOr use it to serialize multiple instances:\n\n\n@api_view(['GET'])\ndef all_high_scores(request):\n    queryset = HighScore.objects.order_by('-score')\n    serializer = HighScoreSerializer(queryset, many=True)\n    return Response(serializer.data)\n\n\n\nRead-write \nBaseSerializer\n classes.\n\n\nTo create a read-write serializer we first need to implement a \n.to_internal_value()\n method. This method returns the validated values that will be used to construct the object instance, and may raise a \nValidationError\n if the supplied data is in an incorrect format.\n\n\nOnce you've implemented \n.to_internal_value()\n, the basic validation API will be available on the serializer, and you will be able to use \n.is_valid()\n, \n.validated_data\n and \n.errors\n.\n\n\nIf you want to also support \n.save()\n you'll need to also implement either or both of the \n.create()\n and \n.update()\n methods.\n\n\nHere's a complete example of our previous \nHighScoreSerializer\n, that's been updated to support both read and write operations.\n\n\nclass HighScoreSerializer(serializers.BaseSerializer):\n    def to_internal_value(self, data):\n        score = data.get('score')\n        player_name = data.get('player_name')\n\n        # Perform the data validation.\n        if not score:\n            raise ValidationError({\n                'score': 'This field is required.'\n            })\n        if not player_name:\n            raise ValidationError({\n                'player_name': 'This field is required.'\n            })\n        if len(player_name) > 10:\n            raise ValidationError({\n                'player_name': 'May not be more than 10 characters.'\n            })\n\n        # Return the validated values. This will be available as\n        # the `.validated_data` property.\n        return {\n            'score': int(score),\n            'player_name': player_name\n        }\n\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }\n\n    def create(self, validated_data):\n        return HighScore.objects.create(**validated_data)\n\n\n\nCreating new generic serializers with \nBaseSerializer\n.\n\n\nThe \nBaseSerializer\n class is also useful if you want to implement new generic serializer classes for dealing with particular serialization styles, or for integrating with alternative storage backends.\n\n\nThe following class is an example of a generic serializer that can handle coercing arbitrary objects into primitive representations.\n\n\nclass ObjectSerializer(serializers.BaseSerializer):\n    \"\"\"\n    A read-only serializer that coerces arbitrary complex objects\n    into primitive representations.\n    \"\"\"\n    def to_representation(self, obj):\n        for attribute_name in dir(obj):\n            attribute = getattr(obj, attribute_name)\n            if attribute_name('_'):\n                # Ignore private attributes.\n                pass\n            elif hasattr(attribute, '__call__'):\n                # Ignore methods and other callables.\n                pass\n            elif isinstance(attribute, (str, int, bool, float, type(None))):\n                # Primitive types can be passed through unmodified.\n                output[attribute_name] = attribute\n            elif isinstance(attribute, list):\n                # Recursively deal with items in lists.\n                output[attribute_name] = [\n                    self.to_representation(item) for item in attribute\n                ]\n            elif isinstance(attribute, dict):\n                # Recursively deal with items in dictionaries.\n                output[attribute_name] = {\n                    str(key): self.to_representation(value)\n                    for key, value in attribute.items()\n                }\n            else:\n                # Force anything else to its string representation.\n                output[attribute_name] = str(attribute)\n\n\n\n\n\nSerializer fields\n\n\nThe \nField\n and \nReadOnly\n field classes.\n\n\nThere are some minor tweaks to the field base classes.\n\n\nPreviously we had these two base classes:\n\n\n\n\nField\n as the base class for read-only fields. A default implementation was included for serializing data.\n\n\nWritableField\n as the base class for read-write fields.\n\n\n\n\nWe now use the following:\n\n\n\n\nField\n is the base class for all fields. It does not include any default implementation for either serializing or deserializing data.\n\n\nReadOnlyField\n is a concrete implementation for read-only fields that simply returns the attribute value without modification.\n\n\n\n\nThe \nrequired\n, \nallow_null\n, \nallow_blank\n and \ndefault\n arguments.\n\n\nREST framework now has more explicit and clear control over validating empty values for fields.\n\n\nPreviously the meaning of the \nrequired=False\n keyword argument was underspecified. In practice its use meant that a field could either be not included in the input, or it could be included, but be \nNone\n or the empty string.\n\n\nWe now have a better separation, with separate \nrequired\n, \nallow_null\n and \nallow_blank\n arguments.\n\n\nThe following set of arguments are used to control validation of empty values:\n\n\n\n\nrequired=False\n: The value does not need to be present in the input, and will not be passed to \n.create()\n or \n.update()\n if it is not seen.\n\n\ndefault=<value>\n: The value does not need to be present in the input, and a default value will be passed to \n.create()\n or \n.update()\n if it is not seen.\n\n\nallow_null=True\n: \nNone\n is a valid input.\n\n\nallow_blank=True\n: \n''\n is valid input. For \nCharField\n and subclasses only.\n\n\n\n\nTypically you'll want to use \nrequired=False\n if the corresponding model field has a default value, and additionally set either \nallow_null=True\n or \nallow_blank=True\n if required.\n\n\nThe \ndefault\n argument is also available and always implies that the field is not required to be in the input. It is unnecessary to use the \nrequired\n argument when a default is specified, and doing so will result in an error.\n\n\nCoercing output types.\n\n\nThe previous field implementations did not forcibly coerce returned values into the correct type in many cases. For example, an \nIntegerField\n would return a string output if the attribute value was a string. We now more strictly coerce to the correct return type, leading to more constrained and expected behavior.\n\n\nRemoval of \n.validate()\n.\n\n\nThe \n.validate()\n method is now removed from field classes. This method was in any case undocumented and not public API. You should instead simply override \nto_internal_value()\n.\n\n\nclass UppercaseCharField(serializers.CharField):\n    def to_internal_value(self, data):\n        value = super(UppercaseCharField, self).to_internal_value(data)\n        if value != value.upper():\n            raise serializers.ValidationError('The input should be uppercase only.')\n        return value\n\n\n\nPreviously validation errors could be raised in either \n.to_native()\n or \n.validate()\n, making it non-obvious which should be used. Providing only a single point of API ensures more repetition and reinforcement of the core API.\n\n\nThe \nListField\n class.\n\n\nThe \nListField\n class has now been added. This field validates list input. It takes a \nchild\n keyword argument which is used to specify the field used to validate each item in the list. For example:\n\n\nscores = ListField(child=IntegerField(min_value=0, max_value=100))\n\n\n\nYou can also use a declarative style to create new subclasses of \nListField\n, like this:\n\n\nclass ScoresField(ListField):\n    child = IntegerField(min_value=0, max_value=100)\n\n\n\nWe can now use the \nScoresField\n class inside another serializer:\n\n\nscores = ScoresField()\n\n\n\nSee also the new \nListSerializer\n class, which validates input in the same way, but also includes the serializer interfaces of \n.is_valid()\n, \n.data\n, \n.save()\n and so on.\n\n\nThe \nChoiceField\n class may now accept a flat list.\n\n\nThe \nChoiceField\n class may now accept a list of choices in addition to the existing style of using a list of pairs of \n(name, display_value)\n. The following is now valid:\n\n\ncolor = ChoiceField(choices=['red', 'green', 'blue'])\n\n\n\nThe \nMultipleChoiceField\n class.\n\n\nThe \nMultipleChoiceField\n class has been added. This field acts like \nChoiceField\n, but returns a set, which may include none, one or many of the valid choices.\n\n\nChanges to the custom field API.\n\n\nThe \nfrom_native(self, value)\n and \nto_native(self, data)\n method names have been replaced with the more obviously named \nto_internal_value(self, data)\n and \nto_representation(self, value)\n.\n\n\nThe \nfield_from_native()\n and \nfield_to_native()\n methods are removed. Previously you could use these methods if you wanted to customise the behaviour in a way that did not simply lookup the field value from the object. For example...\n\n\ndef field_to_native(self, obj, field_name):\n    \"\"\"A custom read-only field that returns the class name.\"\"\"\n    return obj.__class__.__name__\n\n\n\nNow if you need to access the entire object you'll instead need to override one or both of the following:\n\n\n\n\nUse \nget_attribute\n to modify the attribute value passed to \nto_representation()\n.\n\n\nUse \nget_value\n to modify the data value passed \nto_internal_value()\n.\n\n\n\n\nFor example:\n\n\ndef get_attribute(self, obj):\n    # Pass the entire object through to `to_representation()`,\n    # instead of the standard attribute lookup.\n    return obj\n\ndef to_representation(self, value):\n    return value.__class__.__name__\n\n\n\nExplicit \nqueryset\n required on relational fields.\n\n\nPreviously relational fields that were explicitly declared on a serializer class could omit the queryset argument if (and only if) they were declared on a \nModelSerializer\n.\n\n\nThis code \nwould be valid\n in \n2.4.3\n:\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    organizations = serializers.SlugRelatedField(slug_field='name')\n\n    class Meta:\n        model = Account\n\n\n\nHowever this code \nwould not be valid\n in \n3.0\n:\n\n\n# Missing `queryset`\nclass AccountSerializer(serializers.Serializer):\n    organizations = serializers.SlugRelatedField(slug_field='name')\n\n    def restore_object(self, attrs, instance=None):\n        # ...\n\n\n\nThe queryset argument is now always required for writable relational fields.\nThis removes some magic and makes it easier and more obvious to move between implicit \nModelSerializer\n classes and explicit \nSerializer\n classes.\n\n\nclass AccountSerializer(serializers.ModelSerializer):\n    organizations = serializers.SlugRelatedField(\n        slug_field='name',\n        queryset=Organization.objects.all()\n    )\n\n    class Meta:\n        model = Account\n\n\n\nThe \nqueryset\n argument is only ever required for writable fields, and is not required or valid for fields with \nread_only=True\n.\n\n\nOptional argument to \nSerializerMethodField\n.\n\n\nThe argument to \nSerializerMethodField\n is now optional, and defaults to \nget_<field_name>\n. For example the following is valid:\n\n\nclass AccountSerializer(serializers.Serializer):\n    # `method_name='get_billing_details'` by default.\n    billing_details = serializers.SerializerMethodField()\n\n    def get_billing_details(self, account):\n        return calculate_billing(account)\n\n\n\nIn order to ensure a consistent code style an assertion error will be raised if you include a redundant method name argument that matches the default method name. For example, the following code \nwill raise an error\n:\n\n\nbilling_details = serializers.SerializerMethodField('get_billing_details')\n\n\n\nEnforcing consistent \nsource\n usage.\n\n\nI've see several codebases that unnecessarily include the \nsource\n argument, setting it to the same value as the field name. This usage is redundant and confusing, making it less obvious that \nsource\n is usually not required.\n\n\nThe following usage will \nnow raise an error\n:\n\n\nemail = serializers.EmailField(source='email')\n\n\n\nThe \nUniqueValidator\n and \nUniqueTogetherValidator\n classes.\n\n\nREST framework now provides new validators that allow you to ensure field uniqueness, while still using a completely explicit \nSerializer\n class instead of using \nModelSerializer\n.\n\n\nThe \nUniqueValidator\n should be applied to a serializer field, and takes a single \nqueryset\n argument.\n\n\nfrom rest_framework import serializers\nfrom rest_framework.validators import UniqueValidator\n\nclass OrganizationSerializer(serializers.Serializer):\n    url = serializers.HyperlinkedIdentityField(view_name='organization_detail')\n    created = serializers.DateTimeField(read_only=True)\n    name = serializers.CharField(\n        max_length=100,\n        validators=UniqueValidator(queryset=Organization.objects.all())\n    )\n\n\n\nThe \nUniqueTogetherValidator\n should be applied to a serializer, and takes a \nqueryset\n argument and a \nfields\n argument which should be a list or tuple of field names.\n\n\nclass RaceResultSerializer(serializers.Serializer):\n    category = serializers.ChoiceField(['5k', '10k'])\n    position = serializers.IntegerField()\n    name = serializers.CharField(max_length=100)\n\n    class Meta:\n        validators = [UniqueTogetherValidator(\n            queryset=RaceResult.objects.all(),\n            fields=('category', 'position')\n        )]\n\n\n\nThe \nUniqueForDateValidator\n classes.\n\n\nREST framework also now includes explicit validator classes for validating the \nunique_for_date\n, \nunique_for_month\n, and \nunique_for_year\n model field constraints. These are used internally instead of calling into \nModel.full_clean()\n.\n\n\nThese classes are documented in the \nValidators\n section of the documentation.\n\n\n\n\nGeneric views\n\n\nSimplification of view logic.\n\n\nThe view logic for the default method handlers has been significantly simplified, due to the new serializers API.\n\n\nChanges to pre/post save hooks.\n\n\nThe \npre_save\n and \npost_save\n hooks no longer exist, but are replaced with \nperform_create(self, serializer)\n and \nperform_update(self, serializer)\n.\n\n\nThese methods should save the object instance by calling \nserializer.save()\n, adding in any additional arguments as required. They may also perform any custom pre-save or post-save behavior.\n\n\nFor example:\n\n\ndef perform_create(self, serializer):\n    # Include the owner attribute directly, rather than from request data.\n    instance = serializer.save(owner=self.request.user)\n    # Perform a custom post-save action.\n    send_email(instance.to_email, instance.message)\n\n\n\nThe \npre_delete\n and \npost_delete\n hooks no longer exist, and are replaced with \n.perform_destroy(self, instance)\n, which should delete the instance and perform any custom actions.\n\n\ndef perform_destroy(self, instance):\n    # Perform a custom pre-delete action.\n    send_deletion_alert(user=instance.created_by, deleted=instance)\n    # Delete the object instance.\n    instance.delete()\n\n\n\nRemoval of view attributes.\n\n\nThe \n.object\n and \n.object_list\n attributes are no longer set on the view instance. Treating views as mutable object instances that store state during the processing of the view tends to be poor design, and can lead to obscure flow logic.\n\n\nI would personally recommend that developers treat view instances as immutable objects in their application code.\n\n\nPUT as create.\n\n\nAllowing \nPUT\n as create operations is problematic, as it necessarily exposes information about the existence or non-existence of objects. It's also not obvious that transparently allowing re-creating of previously deleted instances is necessarily a better default behavior than simply returning \n404\n responses.\n\n\nBoth styles \"\nPUT\n as 404\" and \"\nPUT\n as create\" can be valid in different circumstances, but we've now opted for the 404 behavior as the default, due to it being simpler and more obvious.\n\n\nIf you need to restore the previous behavior you may want to include \nthis \nAllowPUTAsCreateMixin\n class\n as a mixin to your views.\n\n\nCustomizing error responses.\n\n\nThe generic views now raise \nValidationFailed\n exception for invalid data. This exception is then dealt with by the exception handler, rather than the view returning a \n400 Bad Request\n response directly.\n\n\nThis change means that you can now easily customize the style of error responses across your entire API, without having to modify any of the generic views.\n\n\n\n\nThe metadata API\n\n\nBehavior for dealing with \nOPTIONS\n requests was previously built directly into the class-based views. This has now been properly separated out into a Metadata API that allows the same pluggable style as other API policies in REST framework.\n\n\nThis makes it far easier to use a different style for \nOPTIONS\n responses throughout your API, and makes it possible to create third-party metadata policies.\n\n\n\n\nSerializers as HTML forms\n\n\nREST framework 3.0 includes templated HTML form rendering for serializers.\n\n\nThis API should not yet be considered finalized, and will only be promoted to public API for the 3.1 release.\n\n\nSignificant changes that you do need to be aware of include:\n\n\n\n\nNested HTML forms are now supported, for example, a \nUserSerializer\n with a nested \nProfileSerializer\n will now render a nested \nfieldset\n when used in the browsable API.\n\n\nNested lists of HTML forms are not yet supported, but are planned for 3.1.\n\n\nBecause we now use templated HTML form generation, \nthe \nwidget\n option is no longer available for serializer fields\n. You can instead control the template that is used for a given field, by using the \nstyle\n dictionary.\n\n\n\n\nThe \nstyle\n keyword argument for serializer fields.\n\n\nThe \nstyle\n keyword argument can be used to pass through additional information from a serializer field, to the renderer class. In particular, the \nHTMLFormRenderer\n uses the \nbase_template\n key to determine which template to render the field with.\n\n\nFor example, to use a \ntextarea\n control instead of the default \ninput\n control, you would use the following\u2026\n\n\nadditional_notes = serializers.CharField(\n    style={'base_template': 'textarea.html'}\n)\n\n\n\nSimilarly, to use a radio button control instead of the default \nselect\n control, you would use the following\u2026\n\n\ncolor_channel = serializers.ChoiceField(\n    choices=['red', 'blue', 'green'],\n    style={'base_template': 'radio.html'}\n)\n\n\n\nThis API should be considered provisional, and there may be minor alterations with the incoming 3.1 release.\n\n\n\n\nAPI style\n\n\nThere are some improvements in the default style we use in our API responses.\n\n\nUnicode JSON by default.\n\n\nUnicode JSON is now the default. The \nUnicodeJSONRenderer\n class no longer exists, and the \nUNICODE_JSON\n setting has been added. To revert this behavior use the new setting:\n\n\nREST_FRAMEWORK = {\n    'UNICODE_JSON': False\n}\n\n\n\nCompact JSON by default.\n\n\nWe now output compact JSON in responses by default. For example, we return:\n\n\n{\"email\":\"amy@example.com\",\"is_admin\":true}\n\n\n\nInstead of the following:\n\n\n{\"email\": \"amy@example.com\", \"is_admin\": true}\n\n\n\nThe \nCOMPACT_JSON\n setting has been added, and can be used to revert this behavior if needed:\n\n\nREST_FRAMEWORK = {\n    'COMPACT_JSON': False\n}\n\n\n\nFile fields as URLs\n\n\nThe \nFileField\n and \nImageField\n classes are now represented as URLs by default. You should ensure you set Django's \nstandard \nMEDIA_URL\n setting\n appropriately, and ensure your application \nserves the uploaded files\n.\n\n\nYou can revert this behavior, and display filenames in the representation by using the \nUPLOADED_FILES_USE_URL\n settings key:\n\n\nREST_FRAMEWORK = {\n    'UPLOADED_FILES_USE_URL': False\n}\n\n\n\nYou can also modify serializer fields individually, using the \nuse_url\n argument:\n\n\nuploaded_file = serializers.FileField(use_url=False)\n\n\n\nAlso note that you should pass the \nrequest\n object to the serializer as context when instantiating it, so that a fully qualified URL can be returned. Returned URLs will then be of the form \nhttps://example.com/url_path/filename.txt\n. For example:\n\n\ncontext = {'request': request}\nserializer = ExampleSerializer(instance, context=context)\nreturn Response(serializer.data)\n\n\n\nIf the request is omitted from the context, the returned URLs will be of the form \n/url_path/filename.txt\n.\n\n\nThrottle headers using \nRetry-After\n.\n\n\nThe custom \nX-Throttle-Wait-Second\n header has now been dropped in favor of the standard \nRetry-After\n header. You can revert this behavior if needed by writing a custom exception handler for your application.\n\n\nDate and time objects as ISO-8601 strings in serializer data.\n\n\nDate and Time objects are now coerced to strings by default in the serializer output. Previously they were returned as \nDate\n, \nTime\n and \nDateTime\n objects, and later coerced to strings by the renderer.\n\n\nYou can modify this behavior globally by settings the existing \nDATE_FORMAT\n, \nDATETIME_FORMAT\n and \nTIME_FORMAT\n settings keys. Setting these values to \nNone\n instead of their default value of \n'iso-8601'\n will result in native objects being returned in serializer data.\n\n\nREST_FRAMEWORK = {\n    # Return native `Date` and `Time` objects in `serializer.data`\n    'DATETIME_FORMAT': None\n    'DATE_FORMAT': None\n    'TIME_FORMAT': None\n}\n\n\n\nYou can also modify serializer fields individually, using the \ndate_format\n, \ntime_format\n and \ndatetime_format\n arguments:\n\n\n# Return `DateTime` instances in `serializer.data`, not strings.\ncreated = serializers.DateTimeField(format=None)\n\n\n\nDecimals as strings in serializer data.\n\n\nDecimals are now coerced to strings by default in the serializer output. Previously they were returned as \nDecimal\n objects, and later coerced to strings by the renderer.\n\n\nYou can modify this behavior globally by using the \nCOERCE_DECIMAL_TO_STRING\n settings key.\n\n\nREST_FRAMEWORK = {\n    'COERCE_DECIMAL_TO_STRING': False\n}\n\n\n\nOr modify it on an individual serializer field, using the \ncoerce_to_string\n keyword argument.\n\n\n# Return `Decimal` instances in `serializer.data`, not strings.\namount = serializers.DecimalField(\n    max_digits=10,\n    decimal_places=2,\n    coerce_to_string=False\n)\n\n\n\nThe default JSON renderer will return float objects for un-coerced \nDecimal\n instances. This allows you to easily switch between string or float representations for decimals depending on your API design needs.\n\n\n\n\nMiscellaneous notes\n\n\n\n\nThe serializer \nChoiceField\n does not currently display nested choices, as was the case in 2.4. This will be address as part of 3.1.\n\n\nDue to the new templated form rendering, the 'widget' option is no longer valid. This means there's no easy way of using third party \"autocomplete\" widgets for rendering select inputs that contain a large number of choices. You'll either need to use a regular select or a plain text input. We may consider addressing this in 3.1 or 3.2 if there's sufficient demand.\n\n\nSome of the default validation error messages were rewritten and might no longer be pre-translated. You can still \ncreate language files with Django\n if you wish to localize them.\n\n\nAPIException\n subclasses could previously take any arbitrary type in the \ndetail\n argument. These exceptions now use translatable text strings, and as a result call \nforce_text\n on the \ndetail\n argument, which \nmust be a string\n. If you need complex arguments to an \nAPIException\n class, you should subclass it and override the \n__init__()\n method. Typically you'll instead want to use a custom exception handler to provide for non-standard error responses.\n\n\n\n\n\n\nWhat's coming next\n\n\n3.0 is an incremental release, and there are several upcoming features that will build on the baseline improvements that it makes.\n\n\nThe 3.1 release is planned to address improvements in the following components:\n\n\n\n\nPublic API for using serializers as HTML forms.\n\n\nRequest parsing, mediatypes & the implementation of the browsable API.\n\n\nIntroduction of a new pagination API.\n\n\nBetter support for API versioning.\n\n\n\n\nThe 3.2 release is planned to introduce an alternative admin-style interface to the browsable API.\n\n\nYou can follow development on the GitHub site, where we use \nmilestones to indicate planning timescales\n.",
            "title": "3.0 Announcement"
        },
        {
            "location": "/topics/3.0-announcement/#django-rest-framework-30",
            "text": "The 3.0 release of Django REST framework is the result of almost four years of iteration and refinement. It comprehensively addresses some of the previous remaining design issues in serializers, fields and the generic views.  This release is incremental in nature. There  are  some breaking API changes, and upgrading  will  require you to read the release notes carefully, but the migration path should otherwise be relatively straightforward.  The difference in quality of the REST framework API and implementation should make writing, maintaining and debugging your application far easier.  3.0 is the first of three releases that have been funded by our recent  Kickstarter campaign .  As ever, a huge thank you to our many  wonderful sponsors . If you're looking for a Django gig, and want to work with smart community-minded folks, you should probably check out that list and see who's hiring.",
            "title": "Django REST framework 3.0"
        },
        {
            "location": "/topics/3.0-announcement/#new-features",
            "text": "Notable features of this new release include:   Printable representations on serializers that allow you to inspect exactly what fields are present on the instance.  Simple model serializers that are vastly easier to understand and debug, and that make it easy to switch between the implicit  ModelSerializer  class and the explicit  Serializer  class.  A new  BaseSerializer  class, making it easier to write serializers for alternative storage backends, or to completely customize your serialization and validation logic.  A cleaner fields API including new classes such as  ListField  and  MultipleChoiceField .  Super simple default implementations  for the generic views.  Support for overriding how validation errors are handled by your API.  A metadata API that allows you to customize how  OPTIONS  requests are handled by your API.  A more compact JSON output with unicode style encoding turned on by default.  Templated based HTML form rendering for serializers. This will be finalized as  public API in the upcoming 3.1 release.   Significant new functionality continues to be planned for the 3.1 and 3.2 releases. These releases will correspond to the two  Kickstarter stretch goals  - \"Feature improvements\" and \"Admin interface\". Further 3.x releases will present simple upgrades, without the same level of fundamental API changes necessary for the 3.0 release.",
            "title": "New features"
        },
        {
            "location": "/topics/3.0-announcement/#rest-framework-under-the-hood",
            "text": "This talk from the  Django: Under the Hood  event in Amsterdam, Nov 2014, gives some good background context on the design decisions behind 3.0.    Below is an in-depth guide to the API changes and migration notes for 3.0.",
            "title": "REST framework: Under the hood."
        },
        {
            "location": "/topics/3.0-announcement/#request-objects",
            "text": "",
            "title": "Request objects"
        },
        {
            "location": "/topics/3.0-announcement/#the-data-and-query_params-properties",
            "text": "The usage of  request.DATA  and  request.FILES  is now pending deprecation in favor of a single  request.data  attribute that contains  all  the parsed data.  Having separate attributes is reasonable for web applications that only ever parse url-encoded or multipart requests, but makes less sense for the general-purpose request parsing that REST framework supports.  You may now pass all the request data to a serializer class in a single argument:  # Do this...\nExampleSerializer(data=request.data)  Instead of passing the files argument separately:  # Don't do this...\nExampleSerializer(data=request.DATA, files=request.FILES)  The usage of  request.QUERY_PARAMS  is now pending deprecation in favor of the lowercased  request.query_params .",
            "title": "The .data and .query_params properties."
        },
        {
            "location": "/topics/3.0-announcement/#serializers",
            "text": "",
            "title": "Serializers"
        },
        {
            "location": "/topics/3.0-announcement/#single-step-object-creation",
            "text": "Previously the serializers used a two-step object creation, as follows:   Validating the data would create an object instance. This instance would be available as  serializer.object .  Calling  serializer.save()  would then save the object instance to the database.   This style is in-line with how the  ModelForm  class works in Django, but is problematic for a number of reasons:   Some data, such as many-to-many relationships, cannot be added to the object instance until after it has been saved. This type of data needed to be hidden in some undocumented state on the object instance, or kept as state on the serializer instance so that it could be used when  .save()  is called.  Instantiating model instances directly means that you cannot use model manager classes for instance creation, e.g.  ExampleModel.objects.create(...) . Manager classes are an excellent layer at which to enforce business logic and application-level data constraints.  The two step process makes it unclear where to put deserialization logic. For example, should extra attributes such as the current user get added to the instance during object creation or during object save?   We now use single-step object creation, like so:   Validating the data makes the cleaned data available as  serializer.validated_data .  Calling  serializer.save()  then saves and returns the new object instance.   The resulting API changes are further detailed below.",
            "title": "Single-step object creation."
        },
        {
            "location": "/topics/3.0-announcement/#the-create-and-update-methods",
            "text": "The  .restore_object()  method is now removed, and we instead have two separate methods,  .create()  and  .update() . These methods work slightly different to the previous  .restore_object() .  When using the  .create()  and  .update()  methods you should both create  and save  the object instance. This is in contrast to the previous  .restore_object()  behavior that would instantiate the object but not save it.  These methods also replace the optional  .save_object()  method, which no longer exists.  The following example from the tutorial previously used  restore_object()  to handle both creating and updating object instances.  def restore_object(self, attrs, instance=None):\n    if instance:\n        # Update existing instance\n        instance.title = attrs.get('title', instance.title)\n        instance.code = attrs.get('code', instance.code)\n        instance.linenos = attrs.get('linenos', instance.linenos)\n        instance.language = attrs.get('language', instance.language)\n        instance.style = attrs.get('style', instance.style)\n        return instance\n\n    # Create new instance\n    return Snippet(**attrs)  This would now be split out into two separate methods.  def update(self, instance, validated_data):\n    instance.title = validated_data.get('title', instance.title)\n    instance.code = validated_data.get('code', instance.code)\n    instance.linenos = validated_data.get('linenos', instance.linenos)\n    instance.language = validated_data.get('language', instance.language)\n    instance.style = validated_data.get('style', instance.style)\n    instance.save()\n    return instance\n\ndef create(self, validated_data):\n    return Snippet.objects.create(**validated_data)  Note that these methods should return the newly created object instance.",
            "title": "The .create() and .update() methods."
        },
        {
            "location": "/topics/3.0-announcement/#use-validated_data-instead-of-object",
            "text": "You must now use the  .validated_data  attribute if you need to inspect the data before saving, rather than using the  .object  attribute, which no longer exists.  For example the following code  is no longer valid :  if serializer.is_valid():\n    name = serializer.object.name  # Inspect validated field data.\n    logging.info('Creating ticket \"%s\"' % name)\n    serializer.object.user = request.user  # Include the user when saving.\n    serializer.save()  Instead of using  .object  to inspect a partially constructed instance, you would now use  .validated_data  to inspect the cleaned incoming values. Also you can't set extra attributes on the instance directly, but instead pass them to the  .save()  method as keyword arguments.  The corresponding code would now look like this:  if serializer.is_valid():\n    name = serializer.validated_data['name']  # Inspect validated field data.\n    logging.info('Creating ticket \"%s\"' % name)\n    serializer.save(user=request.user)  # Include the user when saving.",
            "title": "Use .validated_data instead of .object."
        },
        {
            "location": "/topics/3.0-announcement/#using-is_validraise_exceptiontrue",
            "text": "The  .is_valid()  method now takes an optional boolean flag,  raise_exception .  Calling  .is_valid(raise_exception=True)  will cause a  ValidationError  to be raised if the serializer data contains validation errors. This error will be handled by REST framework's default exception handler, allowing you to remove error response handling from your view code.  The handling and formatting of error responses may be altered globally by using the  EXCEPTION_HANDLER  settings key.  This change also means it's now possible to alter the style of error responses used by the built-in generic views, without having to include mixin classes or other overrides.",
            "title": "Using .is_valid(raise_exception=True)"
        },
        {
            "location": "/topics/3.0-announcement/#using-serializersvalidationerror",
            "text": "Previously  serializers.ValidationError  error was simply a synonym for  django.core.exceptions.ValidationError . This has now been altered so that it inherits from the standard  APIException  base class.  The reason behind this is that Django's  ValidationError  class is intended for use with HTML forms and its API makes using it slightly awkward with nested validation errors that can occur in serializers.  For most users this change shouldn't require any updates to your codebase, but it is worth ensuring that whenever raising validation errors you should prefer using the  serializers.ValidationError  exception class, and not Django's built-in exception.  We strongly recommend that you use the namespaced import style of  import serializers  and not  from serializers import ValidationError  in order to avoid any potential confusion.",
            "title": "Using serializers.ValidationError."
        },
        {
            "location": "/topics/3.0-announcement/#change-to-validate_field_name",
            "text": "The  validate_<field_name>  method hooks that can be attached to serializer classes change their signature slightly and return type. Previously these would take a dictionary of all incoming data, and a key representing the field name, and would return a dictionary including the validated data for that field:  def validate_score(self, attrs, source):\n    if attrs['score'] % 10 != 0:\n        raise serializers.ValidationError('This field should be a multiple of ten.')\n    return attrs  This is now simplified slightly, and the method hooks simply take the value to be validated, and return the validated value.  def validate_score(self, value):\n    if value % 10 != 0:\n        raise serializers.ValidationError('This field should be a multiple of ten.')\n    return value  Any ad-hoc validation that applies to more than one field should go in the  .validate(self, attrs)  method as usual.  Because  .validate_<field_name>  would previously accept the complete dictionary of attributes, it could be used to validate a field depending on the input in another field. Now if you need to do this you should use  .validate()  instead.  You can either return  non_field_errors  from the validate method by raising a simple  ValidationError  def validate(self, attrs):\n    # serializer.errors == {'non_field_errors': ['A non field error']}\n    raise serializers.ValidationError('A non field error')  Alternatively if you want the errors to be against a specific field, use a dictionary of when instantiating the  ValidationError , like so:  def validate(self, attrs):\n    # serializer.errors == {'my_field': ['A field error']}\n    raise serializers.ValidationError({'my_field': 'A field error'})  This ensures you can still write validation that compares all the input fields, but that marks the error against a particular field.",
            "title": "Change to validate_&lt;field_name&gt;."
        },
        {
            "location": "/topics/3.0-announcement/#removal-of-transform_field_name",
            "text": "The under-used  transform_<field_name>  on serializer classes is no longer provided. Instead you should just override  to_representation()  if you need to apply any modifications to the representation style.  For example:  def to_representation(self, instance):\n    ret = super(UserSerializer, self).to_representation(instance)\n    ret['username'] = ret['username'].lower()\n    return ret  Dropping the extra point of API means there's now only one right way to do things. This helps with repetition and reinforcement of the core API, rather than having multiple differing approaches.  If you absolutely need to preserve  transform_<field_name>  behavior, for example, in order to provide a simpler 2.x to 3.0 upgrade, you can use a mixin, or serializer base class that add the behavior back in. For example:  class BaseModelSerializer(ModelSerializer):\n    \"\"\"\n    A custom ModelSerializer class that preserves 2.x style `transform_<field_name>` behavior.\n    \"\"\"\n    def to_representation(self, instance):\n        ret = super(BaseModelSerializer, self).to_representation(instance)\n        for key, value in ret.items():\n            method = getattr(self, 'transform_' + key, None)\n            if method is not None:\n                ret[key] = method(value)\n        return ret",
            "title": "Removal of transform_&lt;field_name&gt;."
        },
        {
            "location": "/topics/3.0-announcement/#differences-between-modelserializer-validation-and-modelform",
            "text": "This change also means that we no longer use the  .full_clean()  method on model instances, but instead perform all validation explicitly on the serializer. This gives a cleaner separation, and ensures that there's no automatic validation behavior on  ModelSerializer  classes that can't also be easily replicated on regular  Serializer  classes.  For the most part this change should be transparent. Field validation and uniqueness checks will still be run as normal, but the implementation is a little different.  The one difference that you do need to note is that the  .clean()  method will not be called as part of serializer validation, as it would be if using a  ModelForm . Use the serializer  .validate()  method to perform a final validation step on incoming data where required.  There may be some cases where you really do need to keep validation logic in the model  .clean()  method, and cannot instead separate it into the serializer  .validate() . You can do so by explicitly instantiating a model instance in the  .validate()  method.  def validate(self, attrs):\n    instance = ExampleModel(**attrs)\n    instance.clean()\n    return attrs  Again, you really should look at properly separating the validation logic out of the model method if possible, but the above might be useful in some backwards compatibility cases, or for an easy migration path.",
            "title": "Differences between ModelSerializer validation and ModelForm."
        },
        {
            "location": "/topics/3.0-announcement/#writable-nested-serialization",
            "text": "REST framework 2.x attempted to automatically support writable nested serialization, but the behavior was complex and non-obvious. Attempting to automatically handle these case is problematic:   There can be complex dependencies involved in order of saving multiple related model instances.  It's unclear what behavior the user should expect when related models are passed  None  data.  It's unclear how the user should expect to-many relationships to handle updates, creations and deletions of multiple records.   Using the  depth  option on  ModelSerializer  will now create  read-only nested serializers  by default.  If you try to use a writable nested serializer without writing a custom  create()  and/or  update()  method you'll see an assertion error when you attempt to save the serializer. For example:  >>> class ProfileSerializer(serializers.ModelSerializer):\n>>>     class Meta:\n>>>         model = Profile\n>>>         fields = ('address', 'phone')\n>>>\n>>> class UserSerializer(serializers.ModelSerializer):\n>>>     profile = ProfileSerializer()\n>>>     class Meta:\n>>>         model = User\n>>>         fields = ('username', 'email', 'profile')\n>>>\n>>> data = {\n>>>     'username': 'lizzy',\n>>>     'email': 'lizzy@example.com',\n>>>     'profile': {'address': '123 Acacia Avenue', 'phone': '01273 100200'}\n>>> }\n>>>\n>>> serializer = UserSerializer(data=data)\n>>> serializer.save()\nAssertionError: The `.create()` method does not support nested writable fields by default. Write an explicit `.create()` method for serializer `UserSerializer`, or set `read_only=True` on nested serializer fields.  To use writable nested serialization you'll want to declare a nested field on the serializer class, and write the  create()  and/or  update()  methods explicitly.  class UserSerializer(serializers.ModelSerializer):\n    profile = ProfileSerializer()\n\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'profile')\n\n    def create(self, validated_data):\n        profile_data = validated_data.pop('profile')\n        user = User.objects.create(**validated_data)\n        Profile.objects.create(user=user, **profile_data)\n        return user  The single-step object creation makes this far simpler and more obvious than the previous  .restore_object()  behavior.",
            "title": "Writable nested serialization."
        },
        {
            "location": "/topics/3.0-announcement/#printable-serializer-representations",
            "text": "Serializer instances now support a printable representation that allows you to inspect the fields present on the instance.  For instance, given the following example model:  class LocationRating(models.Model):\n    location = models.CharField(max_length=100)\n    rating = models.IntegerField()\n    created_by = models.ForeignKey(User)  Let's create a simple  ModelSerializer  class corresponding to the  LocationRating  model.  class LocationRatingSerializer(serializer.ModelSerializer):\n    class Meta:\n        model = LocationRating  We can now inspect the serializer representation in the Django shell, using  python manage.py shell ...  >>> serializer = LocationRatingSerializer()\n>>> print(serializer)  # Or use `print serializer` in Python 2.x\nLocationRatingSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    location = CharField(max_length=100)\n    rating = IntegerField()\n    created_by = PrimaryKeyRelatedField(queryset=User.objects.all())",
            "title": "Printable serializer representations."
        },
        {
            "location": "/topics/3.0-announcement/#the-extra_kwargs-option",
            "text": "The  write_only_fields  option on  ModelSerializer  has been moved to  PendingDeprecation  and replaced with a more generic  extra_kwargs .  class MySerializer(serializer.ModelSerializer):\n    class Meta:\n        model = MyModel\n        fields = ('id', 'email', 'notes', 'is_admin')\n        extra_kwargs = {\n                'is_admin': {'write_only': True}\n        }  Alternatively, specify the field explicitly on the serializer class:  class MySerializer(serializer.ModelSerializer):\n    is_admin = serializers.BooleanField(write_only=True)\n\n    class Meta:\n        model = MyModel\n        fields = ('id', 'email', 'notes', 'is_admin')  The  read_only_fields  option remains as a convenient shortcut for the more common case.",
            "title": "The extra_kwargs option."
        },
        {
            "location": "/topics/3.0-announcement/#changes-to-hyperlinkedmodelserializer",
            "text": "The  view_name  and  lookup_field  options have been moved to  PendingDeprecation . They are no longer required, as you can use the  extra_kwargs  argument instead:  class MySerializer(serializer.HyperlinkedModelSerializer):\n    class Meta:\n        model = MyModel\n        fields = ('url', 'email', 'notes', 'is_admin')\n        extra_kwargs = {\n            'url': {'lookup_field': 'uuid'}\n        }  Alternatively, specify the field explicitly on the serializer class:  class MySerializer(serializer.HyperlinkedModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='mymodel-detail',\n        lookup_field='uuid'\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('url', 'email', 'notes', 'is_admin')",
            "title": "Changes to HyperlinkedModelSerializer."
        },
        {
            "location": "/topics/3.0-announcement/#fields-for-model-methods-and-properties",
            "text": "With  ModelSerializer  you can now specify field names in the  fields  option that refer to model methods or properties. For example, suppose you have the following model:  class Invitation(models.Model):\n    created = models.DateTimeField()\n    to_email = models.EmailField()\n    message = models.CharField(max_length=1000)\n\n    def expiry_date(self):\n        return self.created + datetime.timedelta(days=30)  You can include  expiry_date  as a field option on a  ModelSerializer  class.  class InvitationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Invitation\n        fields = ('to_email', 'message', 'expiry_date')  These fields will be mapped to  serializers.ReadOnlyField()  instances.  >>> serializer = InvitationSerializer()\n>>> print repr(serializer)\nInvitationSerializer():\n    to_email = EmailField(max_length=75)\n    message = CharField(max_length=1000)\n    expiry_date = ReadOnlyField()",
            "title": "Fields for model methods and properties."
        },
        {
            "location": "/topics/3.0-announcement/#the-listserializer-class",
            "text": "The  ListSerializer  class has now been added, and allows you to create base serializer classes for only accepting multiple inputs.  class MultipleUserSerializer(ListSerializer):\n    child = UserSerializer()  You can also still use the  many=True  argument to serializer classes. It's worth noting that  many=True  argument transparently creates a  ListSerializer  instance, allowing the validation logic for list and non-list data to be cleanly separated in the REST framework codebase.  You will typically want to  continue to use the existing  many=True  flag  rather than declaring  ListSerializer  classes explicitly, but declaring the classes explicitly can be useful if you need to write custom  create  or  update  methods for bulk updates, or provide for other custom behavior.  See also the new  ListField  class, which validates input in the same way, but does not include the serializer interfaces of  .is_valid() ,  .data ,  .save()  and so on.",
            "title": "The ListSerializer class."
        },
        {
            "location": "/topics/3.0-announcement/#the-baseserializer-class",
            "text": "REST framework now includes a simple  BaseSerializer  class that can be used to easily support alternative serialization and deserialization styles.  This class implements the same basic API as the  Serializer  class:   .data  - Returns the outgoing primitive representation.  .is_valid()  - Deserializes and validates incoming data.  .validated_data  - Returns the validated incoming data.  .errors  - Returns an errors during validation.  .save()  - Persists the validated data into an object instance.   There are four methods that can be overridden, depending on what functionality you want the serializer class to support:   .to_representation()  - Override this to support serialization, for read operations.  .to_internal_value()  - Override this to support deserialization, for write operations.  .create()  and  .update()  - Override either or both of these to support saving instances.   Because this class provides the same interface as the  Serializer  class, you can use it with the existing generic class-based views exactly as you would for a regular  Serializer  or  ModelSerializer .  The only difference you'll notice when doing so is the  BaseSerializer  classes will not generate HTML forms in the browsable API. This is because the data they return does not include all the field information that would allow each field to be rendered into a suitable HTML input.",
            "title": "The BaseSerializer class."
        },
        {
            "location": "/topics/3.0-announcement/#read-only-baseserializer-classes",
            "text": "To implement a read-only serializer using the  BaseSerializer  class, we just need to override the  .to_representation()  method. Let's take a look at an example using a simple Django model:  class HighScore(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    player_name = models.CharField(max_length=10)\n    score = models.IntegerField()  It's simple to create a read-only serializer for converting  HighScore  instances into primitive data types.  class HighScoreSerializer(serializers.BaseSerializer):\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }  We can now use this class to serialize single  HighScore  instances:  @api_view(['GET'])\ndef high_score(request, pk):\n    instance = HighScore.objects.get(pk=pk)\n    serializer = HighScoreSerializer(instance)\n    return Response(serializer.data)  Or use it to serialize multiple instances:  @api_view(['GET'])\ndef all_high_scores(request):\n    queryset = HighScore.objects.order_by('-score')\n    serializer = HighScoreSerializer(queryset, many=True)\n    return Response(serializer.data)",
            "title": "Read-only BaseSerializer classes."
        },
        {
            "location": "/topics/3.0-announcement/#read-write-baseserializer-classes",
            "text": "To create a read-write serializer we first need to implement a  .to_internal_value()  method. This method returns the validated values that will be used to construct the object instance, and may raise a  ValidationError  if the supplied data is in an incorrect format.  Once you've implemented  .to_internal_value() , the basic validation API will be available on the serializer, and you will be able to use  .is_valid() ,  .validated_data  and  .errors .  If you want to also support  .save()  you'll need to also implement either or both of the  .create()  and  .update()  methods.  Here's a complete example of our previous  HighScoreSerializer , that's been updated to support both read and write operations.  class HighScoreSerializer(serializers.BaseSerializer):\n    def to_internal_value(self, data):\n        score = data.get('score')\n        player_name = data.get('player_name')\n\n        # Perform the data validation.\n        if not score:\n            raise ValidationError({\n                'score': 'This field is required.'\n            })\n        if not player_name:\n            raise ValidationError({\n                'player_name': 'This field is required.'\n            })\n        if len(player_name) > 10:\n            raise ValidationError({\n                'player_name': 'May not be more than 10 characters.'\n            })\n\n        # Return the validated values. This will be available as\n        # the `.validated_data` property.\n        return {\n            'score': int(score),\n            'player_name': player_name\n        }\n\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }\n\n    def create(self, validated_data):\n        return HighScore.objects.create(**validated_data)",
            "title": "Read-write BaseSerializer classes."
        },
        {
            "location": "/topics/3.0-announcement/#creating-new-generic-serializers-with-baseserializer",
            "text": "The  BaseSerializer  class is also useful if you want to implement new generic serializer classes for dealing with particular serialization styles, or for integrating with alternative storage backends.  The following class is an example of a generic serializer that can handle coercing arbitrary objects into primitive representations.  class ObjectSerializer(serializers.BaseSerializer):\n    \"\"\"\n    A read-only serializer that coerces arbitrary complex objects\n    into primitive representations.\n    \"\"\"\n    def to_representation(self, obj):\n        for attribute_name in dir(obj):\n            attribute = getattr(obj, attribute_name)\n            if attribute_name('_'):\n                # Ignore private attributes.\n                pass\n            elif hasattr(attribute, '__call__'):\n                # Ignore methods and other callables.\n                pass\n            elif isinstance(attribute, (str, int, bool, float, type(None))):\n                # Primitive types can be passed through unmodified.\n                output[attribute_name] = attribute\n            elif isinstance(attribute, list):\n                # Recursively deal with items in lists.\n                output[attribute_name] = [\n                    self.to_representation(item) for item in attribute\n                ]\n            elif isinstance(attribute, dict):\n                # Recursively deal with items in dictionaries.\n                output[attribute_name] = {\n                    str(key): self.to_representation(value)\n                    for key, value in attribute.items()\n                }\n            else:\n                # Force anything else to its string representation.\n                output[attribute_name] = str(attribute)",
            "title": "Creating new generic serializers with BaseSerializer."
        },
        {
            "location": "/topics/3.0-announcement/#serializer-fields",
            "text": "",
            "title": "Serializer fields"
        },
        {
            "location": "/topics/3.0-announcement/#the-field-and-readonly-field-classes",
            "text": "There are some minor tweaks to the field base classes.  Previously we had these two base classes:   Field  as the base class for read-only fields. A default implementation was included for serializing data.  WritableField  as the base class for read-write fields.   We now use the following:   Field  is the base class for all fields. It does not include any default implementation for either serializing or deserializing data.  ReadOnlyField  is a concrete implementation for read-only fields that simply returns the attribute value without modification.",
            "title": "The Field and ReadOnly field classes."
        },
        {
            "location": "/topics/3.0-announcement/#the-required-allow_null-allow_blank-and-default-arguments",
            "text": "REST framework now has more explicit and clear control over validating empty values for fields.  Previously the meaning of the  required=False  keyword argument was underspecified. In practice its use meant that a field could either be not included in the input, or it could be included, but be  None  or the empty string.  We now have a better separation, with separate  required ,  allow_null  and  allow_blank  arguments.  The following set of arguments are used to control validation of empty values:   required=False : The value does not need to be present in the input, and will not be passed to  .create()  or  .update()  if it is not seen.  default=<value> : The value does not need to be present in the input, and a default value will be passed to  .create()  or  .update()  if it is not seen.  allow_null=True :  None  is a valid input.  allow_blank=True :  ''  is valid input. For  CharField  and subclasses only.   Typically you'll want to use  required=False  if the corresponding model field has a default value, and additionally set either  allow_null=True  or  allow_blank=True  if required.  The  default  argument is also available and always implies that the field is not required to be in the input. It is unnecessary to use the  required  argument when a default is specified, and doing so will result in an error.",
            "title": "The required, allow_null, allow_blank and default arguments."
        },
        {
            "location": "/topics/3.0-announcement/#coercing-output-types",
            "text": "The previous field implementations did not forcibly coerce returned values into the correct type in many cases. For example, an  IntegerField  would return a string output if the attribute value was a string. We now more strictly coerce to the correct return type, leading to more constrained and expected behavior.",
            "title": "Coercing output types."
        },
        {
            "location": "/topics/3.0-announcement/#removal-of-validate",
            "text": "The  .validate()  method is now removed from field classes. This method was in any case undocumented and not public API. You should instead simply override  to_internal_value() .  class UppercaseCharField(serializers.CharField):\n    def to_internal_value(self, data):\n        value = super(UppercaseCharField, self).to_internal_value(data)\n        if value != value.upper():\n            raise serializers.ValidationError('The input should be uppercase only.')\n        return value  Previously validation errors could be raised in either  .to_native()  or  .validate() , making it non-obvious which should be used. Providing only a single point of API ensures more repetition and reinforcement of the core API.",
            "title": "Removal of .validate()."
        },
        {
            "location": "/topics/3.0-announcement/#the-listfield-class",
            "text": "The  ListField  class has now been added. This field validates list input. It takes a  child  keyword argument which is used to specify the field used to validate each item in the list. For example:  scores = ListField(child=IntegerField(min_value=0, max_value=100))  You can also use a declarative style to create new subclasses of  ListField , like this:  class ScoresField(ListField):\n    child = IntegerField(min_value=0, max_value=100)  We can now use the  ScoresField  class inside another serializer:  scores = ScoresField()  See also the new  ListSerializer  class, which validates input in the same way, but also includes the serializer interfaces of  .is_valid() ,  .data ,  .save()  and so on.",
            "title": "The ListField class."
        },
        {
            "location": "/topics/3.0-announcement/#the-choicefield-class-may-now-accept-a-flat-list",
            "text": "The  ChoiceField  class may now accept a list of choices in addition to the existing style of using a list of pairs of  (name, display_value) . The following is now valid:  color = ChoiceField(choices=['red', 'green', 'blue'])",
            "title": "The ChoiceField class may now accept a flat list."
        },
        {
            "location": "/topics/3.0-announcement/#the-multiplechoicefield-class",
            "text": "The  MultipleChoiceField  class has been added. This field acts like  ChoiceField , but returns a set, which may include none, one or many of the valid choices.",
            "title": "The MultipleChoiceField class."
        },
        {
            "location": "/topics/3.0-announcement/#changes-to-the-custom-field-api",
            "text": "The  from_native(self, value)  and  to_native(self, data)  method names have been replaced with the more obviously named  to_internal_value(self, data)  and  to_representation(self, value) .  The  field_from_native()  and  field_to_native()  methods are removed. Previously you could use these methods if you wanted to customise the behaviour in a way that did not simply lookup the field value from the object. For example...  def field_to_native(self, obj, field_name):\n    \"\"\"A custom read-only field that returns the class name.\"\"\"\n    return obj.__class__.__name__  Now if you need to access the entire object you'll instead need to override one or both of the following:   Use  get_attribute  to modify the attribute value passed to  to_representation() .  Use  get_value  to modify the data value passed  to_internal_value() .   For example:  def get_attribute(self, obj):\n    # Pass the entire object through to `to_representation()`,\n    # instead of the standard attribute lookup.\n    return obj\n\ndef to_representation(self, value):\n    return value.__class__.__name__",
            "title": "Changes to the custom field API."
        },
        {
            "location": "/topics/3.0-announcement/#explicit-queryset-required-on-relational-fields",
            "text": "Previously relational fields that were explicitly declared on a serializer class could omit the queryset argument if (and only if) they were declared on a  ModelSerializer .  This code  would be valid  in  2.4.3 :  class AccountSerializer(serializers.ModelSerializer):\n    organizations = serializers.SlugRelatedField(slug_field='name')\n\n    class Meta:\n        model = Account  However this code  would not be valid  in  3.0 :  # Missing `queryset`\nclass AccountSerializer(serializers.Serializer):\n    organizations = serializers.SlugRelatedField(slug_field='name')\n\n    def restore_object(self, attrs, instance=None):\n        # ...  The queryset argument is now always required for writable relational fields.\nThis removes some magic and makes it easier and more obvious to move between implicit  ModelSerializer  classes and explicit  Serializer  classes.  class AccountSerializer(serializers.ModelSerializer):\n    organizations = serializers.SlugRelatedField(\n        slug_field='name',\n        queryset=Organization.objects.all()\n    )\n\n    class Meta:\n        model = Account  The  queryset  argument is only ever required for writable fields, and is not required or valid for fields with  read_only=True .",
            "title": "Explicit queryset required on relational fields."
        },
        {
            "location": "/topics/3.0-announcement/#optional-argument-to-serializermethodfield",
            "text": "The argument to  SerializerMethodField  is now optional, and defaults to  get_<field_name> . For example the following is valid:  class AccountSerializer(serializers.Serializer):\n    # `method_name='get_billing_details'` by default.\n    billing_details = serializers.SerializerMethodField()\n\n    def get_billing_details(self, account):\n        return calculate_billing(account)  In order to ensure a consistent code style an assertion error will be raised if you include a redundant method name argument that matches the default method name. For example, the following code  will raise an error :  billing_details = serializers.SerializerMethodField('get_billing_details')",
            "title": "Optional argument to SerializerMethodField."
        },
        {
            "location": "/topics/3.0-announcement/#enforcing-consistent-source-usage",
            "text": "I've see several codebases that unnecessarily include the  source  argument, setting it to the same value as the field name. This usage is redundant and confusing, making it less obvious that  source  is usually not required.  The following usage will  now raise an error :  email = serializers.EmailField(source='email')",
            "title": "Enforcing consistent source usage."
        },
        {
            "location": "/topics/3.0-announcement/#the-uniquevalidator-and-uniquetogethervalidator-classes",
            "text": "REST framework now provides new validators that allow you to ensure field uniqueness, while still using a completely explicit  Serializer  class instead of using  ModelSerializer .  The  UniqueValidator  should be applied to a serializer field, and takes a single  queryset  argument.  from rest_framework import serializers\nfrom rest_framework.validators import UniqueValidator\n\nclass OrganizationSerializer(serializers.Serializer):\n    url = serializers.HyperlinkedIdentityField(view_name='organization_detail')\n    created = serializers.DateTimeField(read_only=True)\n    name = serializers.CharField(\n        max_length=100,\n        validators=UniqueValidator(queryset=Organization.objects.all())\n    )  The  UniqueTogetherValidator  should be applied to a serializer, and takes a  queryset  argument and a  fields  argument which should be a list or tuple of field names.  class RaceResultSerializer(serializers.Serializer):\n    category = serializers.ChoiceField(['5k', '10k'])\n    position = serializers.IntegerField()\n    name = serializers.CharField(max_length=100)\n\n    class Meta:\n        validators = [UniqueTogetherValidator(\n            queryset=RaceResult.objects.all(),\n            fields=('category', 'position')\n        )]",
            "title": "The UniqueValidator and UniqueTogetherValidator classes."
        },
        {
            "location": "/topics/3.0-announcement/#the-uniquefordatevalidator-classes",
            "text": "REST framework also now includes explicit validator classes for validating the  unique_for_date ,  unique_for_month , and  unique_for_year  model field constraints. These are used internally instead of calling into  Model.full_clean() .  These classes are documented in the  Validators  section of the documentation.",
            "title": "The UniqueForDateValidator classes."
        },
        {
            "location": "/topics/3.0-announcement/#generic-views",
            "text": "",
            "title": "Generic views"
        },
        {
            "location": "/topics/3.0-announcement/#simplification-of-view-logic",
            "text": "The view logic for the default method handlers has been significantly simplified, due to the new serializers API.",
            "title": "Simplification of view logic."
        },
        {
            "location": "/topics/3.0-announcement/#changes-to-prepost-save-hooks",
            "text": "The  pre_save  and  post_save  hooks no longer exist, but are replaced with  perform_create(self, serializer)  and  perform_update(self, serializer) .  These methods should save the object instance by calling  serializer.save() , adding in any additional arguments as required. They may also perform any custom pre-save or post-save behavior.  For example:  def perform_create(self, serializer):\n    # Include the owner attribute directly, rather than from request data.\n    instance = serializer.save(owner=self.request.user)\n    # Perform a custom post-save action.\n    send_email(instance.to_email, instance.message)  The  pre_delete  and  post_delete  hooks no longer exist, and are replaced with  .perform_destroy(self, instance) , which should delete the instance and perform any custom actions.  def perform_destroy(self, instance):\n    # Perform a custom pre-delete action.\n    send_deletion_alert(user=instance.created_by, deleted=instance)\n    # Delete the object instance.\n    instance.delete()",
            "title": "Changes to pre/post save hooks."
        },
        {
            "location": "/topics/3.0-announcement/#removal-of-view-attributes",
            "text": "The  .object  and  .object_list  attributes are no longer set on the view instance. Treating views as mutable object instances that store state during the processing of the view tends to be poor design, and can lead to obscure flow logic.  I would personally recommend that developers treat view instances as immutable objects in their application code.",
            "title": "Removal of view attributes."
        },
        {
            "location": "/topics/3.0-announcement/#put-as-create",
            "text": "Allowing  PUT  as create operations is problematic, as it necessarily exposes information about the existence or non-existence of objects. It's also not obvious that transparently allowing re-creating of previously deleted instances is necessarily a better default behavior than simply returning  404  responses.  Both styles \" PUT  as 404\" and \" PUT  as create\" can be valid in different circumstances, but we've now opted for the 404 behavior as the default, due to it being simpler and more obvious.  If you need to restore the previous behavior you may want to include  this  AllowPUTAsCreateMixin  class  as a mixin to your views.",
            "title": "PUT as create."
        },
        {
            "location": "/topics/3.0-announcement/#customizing-error-responses",
            "text": "The generic views now raise  ValidationFailed  exception for invalid data. This exception is then dealt with by the exception handler, rather than the view returning a  400 Bad Request  response directly.  This change means that you can now easily customize the style of error responses across your entire API, without having to modify any of the generic views.",
            "title": "Customizing error responses."
        },
        {
            "location": "/topics/3.0-announcement/#the-metadata-api",
            "text": "Behavior for dealing with  OPTIONS  requests was previously built directly into the class-based views. This has now been properly separated out into a Metadata API that allows the same pluggable style as other API policies in REST framework.  This makes it far easier to use a different style for  OPTIONS  responses throughout your API, and makes it possible to create third-party metadata policies.",
            "title": "The metadata API"
        },
        {
            "location": "/topics/3.0-announcement/#serializers-as-html-forms",
            "text": "REST framework 3.0 includes templated HTML form rendering for serializers.  This API should not yet be considered finalized, and will only be promoted to public API for the 3.1 release.  Significant changes that you do need to be aware of include:   Nested HTML forms are now supported, for example, a  UserSerializer  with a nested  ProfileSerializer  will now render a nested  fieldset  when used in the browsable API.  Nested lists of HTML forms are not yet supported, but are planned for 3.1.  Because we now use templated HTML form generation,  the  widget  option is no longer available for serializer fields . You can instead control the template that is used for a given field, by using the  style  dictionary.",
            "title": "Serializers as HTML forms"
        },
        {
            "location": "/topics/3.0-announcement/#the-style-keyword-argument-for-serializer-fields",
            "text": "The  style  keyword argument can be used to pass through additional information from a serializer field, to the renderer class. In particular, the  HTMLFormRenderer  uses the  base_template  key to determine which template to render the field with.  For example, to use a  textarea  control instead of the default  input  control, you would use the following\u2026  additional_notes = serializers.CharField(\n    style={'base_template': 'textarea.html'}\n)  Similarly, to use a radio button control instead of the default  select  control, you would use the following\u2026  color_channel = serializers.ChoiceField(\n    choices=['red', 'blue', 'green'],\n    style={'base_template': 'radio.html'}\n)  This API should be considered provisional, and there may be minor alterations with the incoming 3.1 release.",
            "title": "The style keyword argument for serializer fields."
        },
        {
            "location": "/topics/3.0-announcement/#api-style",
            "text": "There are some improvements in the default style we use in our API responses.",
            "title": "API style"
        },
        {
            "location": "/topics/3.0-announcement/#unicode-json-by-default",
            "text": "Unicode JSON is now the default. The  UnicodeJSONRenderer  class no longer exists, and the  UNICODE_JSON  setting has been added. To revert this behavior use the new setting:  REST_FRAMEWORK = {\n    'UNICODE_JSON': False\n}",
            "title": "Unicode JSON by default."
        },
        {
            "location": "/topics/3.0-announcement/#compact-json-by-default",
            "text": "We now output compact JSON in responses by default. For example, we return:  {\"email\":\"amy@example.com\",\"is_admin\":true}  Instead of the following:  {\"email\": \"amy@example.com\", \"is_admin\": true}  The  COMPACT_JSON  setting has been added, and can be used to revert this behavior if needed:  REST_FRAMEWORK = {\n    'COMPACT_JSON': False\n}",
            "title": "Compact JSON by default."
        },
        {
            "location": "/topics/3.0-announcement/#file-fields-as-urls",
            "text": "The  FileField  and  ImageField  classes are now represented as URLs by default. You should ensure you set Django's  standard  MEDIA_URL  setting  appropriately, and ensure your application  serves the uploaded files .  You can revert this behavior, and display filenames in the representation by using the  UPLOADED_FILES_USE_URL  settings key:  REST_FRAMEWORK = {\n    'UPLOADED_FILES_USE_URL': False\n}  You can also modify serializer fields individually, using the  use_url  argument:  uploaded_file = serializers.FileField(use_url=False)  Also note that you should pass the  request  object to the serializer as context when instantiating it, so that a fully qualified URL can be returned. Returned URLs will then be of the form  https://example.com/url_path/filename.txt . For example:  context = {'request': request}\nserializer = ExampleSerializer(instance, context=context)\nreturn Response(serializer.data)  If the request is omitted from the context, the returned URLs will be of the form  /url_path/filename.txt .",
            "title": "File fields as URLs"
        },
        {
            "location": "/topics/3.0-announcement/#throttle-headers-using-retry-after",
            "text": "The custom  X-Throttle-Wait-Second  header has now been dropped in favor of the standard  Retry-After  header. You can revert this behavior if needed by writing a custom exception handler for your application.",
            "title": "Throttle headers using Retry-After."
        },
        {
            "location": "/topics/3.0-announcement/#date-and-time-objects-as-iso-8601-strings-in-serializer-data",
            "text": "Date and Time objects are now coerced to strings by default in the serializer output. Previously they were returned as  Date ,  Time  and  DateTime  objects, and later coerced to strings by the renderer.  You can modify this behavior globally by settings the existing  DATE_FORMAT ,  DATETIME_FORMAT  and  TIME_FORMAT  settings keys. Setting these values to  None  instead of their default value of  'iso-8601'  will result in native objects being returned in serializer data.  REST_FRAMEWORK = {\n    # Return native `Date` and `Time` objects in `serializer.data`\n    'DATETIME_FORMAT': None\n    'DATE_FORMAT': None\n    'TIME_FORMAT': None\n}  You can also modify serializer fields individually, using the  date_format ,  time_format  and  datetime_format  arguments:  # Return `DateTime` instances in `serializer.data`, not strings.\ncreated = serializers.DateTimeField(format=None)",
            "title": "Date and time objects as ISO-8601 strings in serializer data."
        },
        {
            "location": "/topics/3.0-announcement/#decimals-as-strings-in-serializer-data",
            "text": "Decimals are now coerced to strings by default in the serializer output. Previously they were returned as  Decimal  objects, and later coerced to strings by the renderer.  You can modify this behavior globally by using the  COERCE_DECIMAL_TO_STRING  settings key.  REST_FRAMEWORK = {\n    'COERCE_DECIMAL_TO_STRING': False\n}  Or modify it on an individual serializer field, using the  coerce_to_string  keyword argument.  # Return `Decimal` instances in `serializer.data`, not strings.\namount = serializers.DecimalField(\n    max_digits=10,\n    decimal_places=2,\n    coerce_to_string=False\n)  The default JSON renderer will return float objects for un-coerced  Decimal  instances. This allows you to easily switch between string or float representations for decimals depending on your API design needs.",
            "title": "Decimals as strings in serializer data."
        },
        {
            "location": "/topics/3.0-announcement/#miscellaneous-notes",
            "text": "The serializer  ChoiceField  does not currently display nested choices, as was the case in 2.4. This will be address as part of 3.1.  Due to the new templated form rendering, the 'widget' option is no longer valid. This means there's no easy way of using third party \"autocomplete\" widgets for rendering select inputs that contain a large number of choices. You'll either need to use a regular select or a plain text input. We may consider addressing this in 3.1 or 3.2 if there's sufficient demand.  Some of the default validation error messages were rewritten and might no longer be pre-translated. You can still  create language files with Django  if you wish to localize them.  APIException  subclasses could previously take any arbitrary type in the  detail  argument. These exceptions now use translatable text strings, and as a result call  force_text  on the  detail  argument, which  must be a string . If you need complex arguments to an  APIException  class, you should subclass it and override the  __init__()  method. Typically you'll instead want to use a custom exception handler to provide for non-standard error responses.",
            "title": "Miscellaneous notes"
        },
        {
            "location": "/topics/3.0-announcement/#whats-coming-next",
            "text": "3.0 is an incremental release, and there are several upcoming features that will build on the baseline improvements that it makes.  The 3.1 release is planned to address improvements in the following components:   Public API for using serializers as HTML forms.  Request parsing, mediatypes & the implementation of the browsable API.  Introduction of a new pagination API.  Better support for API versioning.   The 3.2 release is planned to introduce an alternative admin-style interface to the browsable API.  You can follow development on the GitHub site, where we use  milestones to indicate planning timescales .",
            "title": "What's coming next"
        },
        {
            "location": "/topics/3.1-announcement/",
            "text": "Django REST framework 3.1\n\n\nThe 3.1 release is an intermediate step in the Kickstarter project releases, and includes a range of new functionality.\n\n\nSome highlights include:\n\n\n\n\nA super-smart cursor pagination scheme.\n\n\nAn improved pagination API, supporting header or in-body pagination styles.\n\n\nPagination controls rendering in the browsable API.\n\n\nBetter support for API versioning.\n\n\nBuilt-in internationalization support.\n\n\nSupport for Django 1.8's \nHStoreField\n and \nArrayField\n.\n\n\n\n\n\n\nPagination\n\n\nThe pagination API has been improved, making it both easier to use, and more powerful.\n\n\nA guide to the headline features follows. For full details, see \nthe pagination documentation\n.\n\n\nNote that as a result of this work a number of settings keys and generic view attributes are now moved to pending deprecation. Controlling pagination styles is now largely handled by overriding a pagination class and modifying its configuration attributes.\n\n\n\n\nThe \nPAGINATE_BY\n settings key will continue to work but is now pending deprecation. The more obviously named \nPAGE_SIZE\n settings key should now be used instead.\n\n\nThe \nPAGINATE_BY_PARAM\n, \nMAX_PAGINATE_BY\n settings keys will continue to work but are now pending deprecation, in favor of setting configuration attributes on the configured pagination class.\n\n\nThe \npaginate_by\n, \npage_query_param\n, \npaginate_by_param\n and \nmax_paginate_by\n generic view attributes will continue to work but are now pending deprecation, in favor of setting configuration attributes on the configured pagination class.\n\n\nThe \npagination_serializer_class\n view attribute and \nDEFAULT_PAGINATION_SERIALIZER_CLASS\n settings key \nare no longer valid\n. The pagination API does not use serializers to determine the output format, and you'll need to instead override the \nget_paginated_response\n method on a pagination class in order to specify how the output format is controlled.\n\n\n\n\nNew pagination schemes.\n\n\nUntil now, there has only been a single built-in pagination style in REST framework. We now have page, limit/offset and cursor based schemes included by default.\n\n\nThe cursor based pagination scheme is particularly smart, and is a better approach for clients iterating through large or frequently changing result sets. The scheme supports paging against non-unique indexes, by using both cursor and limit/offset information. It also allows for both forward and reverse cursor pagination. Much credit goes to David Cramer for \nthis blog post\n on the subject.\n\n\nPagination controls in the browsable API.\n\n\nPaginated results now include controls that render directly in the browsable API. If you're using the page or limit/offset style, then you'll see a page based control displayed in the browsable API:\n\n\n\n\nThe cursor based pagination renders a more simple style of control:\n\n\n\n\nSupport for header-based pagination.\n\n\nThe pagination API was previously only able to alter the pagination style in the body of the response. The API now supports being able to write pagination information in response headers, making it possible to use pagination schemes that use the \nLink\n or \nContent-Range\n headers.\n\n\nFor more information, see the \ncustom pagination styles\n documentation.\n\n\n\n\nVersioning\n\n\nWe've made it \neasier to build versioned APIs\n. Built-in schemes for versioning include both URL based and Accept header based variations.\n\n\nWhen using a URL based scheme, hyperlinked serializers will resolve relationships to the same API version as used on the incoming request.\n\n\nFor example, when using \nNamespaceVersioning\n, and the following hyperlinked serializer:\n\n\nclass AccountsSerializer(serializer.HyperlinkedModelSerializer):\n    class Meta:\n        model = Accounts\n        fields = ('account_name', 'users')\n\n\n\nThe output representation would match the version used on the incoming request. Like so:\n\n\nGET http://example.org/v2/accounts/10  # Version 'v2'\n\n{\n    \"account_name\": \"europa\",\n    \"users\": [\n        \"http://example.org/v2/users/12\",  # Version 'v2'\n        \"http://example.org/v2/users/54\",\n        \"http://example.org/v2/users/87\"\n    ]\n}\n\n\n\n\n\nInternationalization\n\n\nREST framework now includes a built-in set of translations, and \nsupports internationalized error responses\n. This allows you to either change the default language, or to allow clients to specify the language via the \nAccept-Language\n header.\n\n\nYou can change the default language by using the standard Django \nLANGUAGE_CODE\n setting:\n\n\nLANGUAGE_CODE = \"es-es\"\n\n\n\nYou can turn on per-request language requests by adding \nLocalMiddleware\n to your \nMIDDLEWARE_CLASSES\n setting:\n\n\nMIDDLEWARE_CLASSES = [\n    ...\n    'django.middleware.locale.LocaleMiddleware'\n]\n\n\n\nWhen per-request internationalization is enabled, client requests will respect the \nAccept-Language\n header where possible. For example, let's make a request for an unsupported media type:\n\n\nRequest\n\n\nGET /api/users HTTP/1.1\nAccept: application/xml\nAccept-Language: es-es\nHost: example.org\n\n\n\nResponse\n\n\nHTTP/1.0 406 NOT ACCEPTABLE\n\n{\n    \"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\"\n}\n\n\n\nNote that the structure of the error responses is still the same. We still have a \ndetail\n key in the response. If needed you can modify this behavior too, by using a \ncustom exception handler\n.\n\n\nWe include built-in translations both for standard exception cases, and for serializer validation errors.\n\n\nThe full list of supported languages can be found on our \nTransifex project page\n.\n\n\nIf you only wish to support a subset of the supported languages, use Django's standard \nLANGUAGES\n setting:\n\n\nLANGUAGES = [\n    ('de', _('German')),\n    ('en', _('English')),\n]\n\n\n\nFor more details, see the \ninternationalization documentation\n.\n\n\nMany thanks to \nCraig Blaszczyk\n for helping push this through.\n\n\n\n\nNew field types\n\n\nDjango 1.8's new \nArrayField\n, \nHStoreField\n and \nUUIDField\n are now all fully supported.\n\n\nThis work also means that we now have both \nserializers.DictField()\n, and \nserializers.ListField()\n types, allowing you to express and validate a wider set of representations.\n\n\nIf you're building a new 1.8 project, then you should probably consider using \nUUIDField\n as the primary keys for all your models. This style will work automatically with hyperlinked serializers, returning URLs in the following style:\n\n\nhttp://example.org/api/purchases/9b1a433f-e90d-4948-848b-300fdc26365d\n\n\n\n\n\nModelSerializer API\n\n\nThe serializer redesign in 3.0 did not include any public API for modifying how ModelSerializer classes automatically generate a set of fields from a given mode class. We've now re-introduced an API for this, allowing you to create new ModelSerializer base classes that behave differently, such as using a different default style for relationships.\n\n\nFor more information, see the documentation on \ncustomizing field mappings\n for ModelSerializer classes.\n\n\n\n\nMoving packages out of core\n\n\nWe've now moved a number of packages out of the core of REST framework, and into separately installable packages. If you're currently using these you don't need to worry, you simply need to \npip install\n the new packages, and change any import paths.\n\n\nWe're making this change in order to help distribute the maintenance workload, and keep better focus of the core essentials of the framework.\n\n\nThe change also means we can be more flexible with which external packages we recommend. For example, the excellently maintained \nDjango OAuth toolkit\n has now been promoted as our recommended option for integrating OAuth support.\n\n\nThe following packages are now moved out of core and should be separately installed:\n\n\n\n\nOAuth - \ndjangorestframework-oauth\n\n\nXML - \ndjangorestframework-xml\n\n\nYAML - \ndjangorestframework-yaml\n\n\nJSONP - \ndjangorestframework-jsonp\n\n\n\n\nIt's worth reiterating that this change in policy shouldn't mean any work in your codebase other than adding a new requirement and modifying some import paths. For example to install XML rendering, you would now do:\n\n\npip install djangorestframework-xml\n\n\n\nAnd modify your settings, like so:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n        'rest_framework_xml.renderers.XMLRenderer'\n    ]\n}\n\n\n\nThanks go to the latest member of our maintenance team, \nJos\u00e9 Padilla\n, for handling this work and taking on ownership of these packages.\n\n\n\n\nDeprecations\n\n\nThe \nrequest.DATA\n, \nrequest.FILES\n and \nrequest.QUERY_PARAMS\n attributes move from pending deprecation, to deprecated. Use \nrequest.data\n and \nrequest.query_params\n instead, as discussed in the 3.0 release notes.\n\n\nThe ModelSerializer Meta options for \nwrite_only_fields\n, \nview_name\n and \nlookup_field\n are also moved from pending deprecation, to deprecated. Use \nextra_kwargs\n instead, as discussed in the 3.0 release notes.\n\n\nAll these attributes and options will still work in 3.1, but their usage will raise a warning. They will be fully removed in 3.2.\n\n\n\n\nWhat's next?\n\n\nThe next focus will be on HTML renderings of API output and will include:\n\n\n\n\nHTML form rendering of serializers.\n\n\nFiltering controls built-in to the browsable API.\n\n\nAn alternative admin-style interface.\n\n\n\n\nThis will either be made as a single 3.2 release, or split across two separate releases, with the HTML forms and filter controls coming in 3.2, and the admin-style interface coming in a 3.3 release.",
            "title": "3.1 Announcement"
        },
        {
            "location": "/topics/3.1-announcement/#django-rest-framework-31",
            "text": "The 3.1 release is an intermediate step in the Kickstarter project releases, and includes a range of new functionality.  Some highlights include:   A super-smart cursor pagination scheme.  An improved pagination API, supporting header or in-body pagination styles.  Pagination controls rendering in the browsable API.  Better support for API versioning.  Built-in internationalization support.  Support for Django 1.8's  HStoreField  and  ArrayField .",
            "title": "Django REST framework 3.1"
        },
        {
            "location": "/topics/3.1-announcement/#pagination",
            "text": "The pagination API has been improved, making it both easier to use, and more powerful.  A guide to the headline features follows. For full details, see  the pagination documentation .  Note that as a result of this work a number of settings keys and generic view attributes are now moved to pending deprecation. Controlling pagination styles is now largely handled by overriding a pagination class and modifying its configuration attributes.   The  PAGINATE_BY  settings key will continue to work but is now pending deprecation. The more obviously named  PAGE_SIZE  settings key should now be used instead.  The  PAGINATE_BY_PARAM ,  MAX_PAGINATE_BY  settings keys will continue to work but are now pending deprecation, in favor of setting configuration attributes on the configured pagination class.  The  paginate_by ,  page_query_param ,  paginate_by_param  and  max_paginate_by  generic view attributes will continue to work but are now pending deprecation, in favor of setting configuration attributes on the configured pagination class.  The  pagination_serializer_class  view attribute and  DEFAULT_PAGINATION_SERIALIZER_CLASS  settings key  are no longer valid . The pagination API does not use serializers to determine the output format, and you'll need to instead override the  get_paginated_response  method on a pagination class in order to specify how the output format is controlled.",
            "title": "Pagination"
        },
        {
            "location": "/topics/3.1-announcement/#new-pagination-schemes",
            "text": "Until now, there has only been a single built-in pagination style in REST framework. We now have page, limit/offset and cursor based schemes included by default.  The cursor based pagination scheme is particularly smart, and is a better approach for clients iterating through large or frequently changing result sets. The scheme supports paging against non-unique indexes, by using both cursor and limit/offset information. It also allows for both forward and reverse cursor pagination. Much credit goes to David Cramer for  this blog post  on the subject.",
            "title": "New pagination schemes."
        },
        {
            "location": "/topics/3.1-announcement/#pagination-controls-in-the-browsable-api",
            "text": "Paginated results now include controls that render directly in the browsable API. If you're using the page or limit/offset style, then you'll see a page based control displayed in the browsable API:   The cursor based pagination renders a more simple style of control:",
            "title": "Pagination controls in the browsable API."
        },
        {
            "location": "/topics/3.1-announcement/#support-for-header-based-pagination",
            "text": "The pagination API was previously only able to alter the pagination style in the body of the response. The API now supports being able to write pagination information in response headers, making it possible to use pagination schemes that use the  Link  or  Content-Range  headers.  For more information, see the  custom pagination styles  documentation.",
            "title": "Support for header-based pagination."
        },
        {
            "location": "/topics/3.1-announcement/#versioning",
            "text": "We've made it  easier to build versioned APIs . Built-in schemes for versioning include both URL based and Accept header based variations.  When using a URL based scheme, hyperlinked serializers will resolve relationships to the same API version as used on the incoming request.  For example, when using  NamespaceVersioning , and the following hyperlinked serializer:  class AccountsSerializer(serializer.HyperlinkedModelSerializer):\n    class Meta:\n        model = Accounts\n        fields = ('account_name', 'users')  The output representation would match the version used on the incoming request. Like so:  GET http://example.org/v2/accounts/10  # Version 'v2'\n\n{\n    \"account_name\": \"europa\",\n    \"users\": [\n        \"http://example.org/v2/users/12\",  # Version 'v2'\n        \"http://example.org/v2/users/54\",\n        \"http://example.org/v2/users/87\"\n    ]\n}",
            "title": "Versioning"
        },
        {
            "location": "/topics/3.1-announcement/#internationalization",
            "text": "REST framework now includes a built-in set of translations, and  supports internationalized error responses . This allows you to either change the default language, or to allow clients to specify the language via the  Accept-Language  header.  You can change the default language by using the standard Django  LANGUAGE_CODE  setting:  LANGUAGE_CODE = \"es-es\"  You can turn on per-request language requests by adding  LocalMiddleware  to your  MIDDLEWARE_CLASSES  setting:  MIDDLEWARE_CLASSES = [\n    ...\n    'django.middleware.locale.LocaleMiddleware'\n]  When per-request internationalization is enabled, client requests will respect the  Accept-Language  header where possible. For example, let's make a request for an unsupported media type:  Request  GET /api/users HTTP/1.1\nAccept: application/xml\nAccept-Language: es-es\nHost: example.org  Response  HTTP/1.0 406 NOT ACCEPTABLE\n\n{\n    \"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\"\n}  Note that the structure of the error responses is still the same. We still have a  detail  key in the response. If needed you can modify this behavior too, by using a  custom exception handler .  We include built-in translations both for standard exception cases, and for serializer validation errors.  The full list of supported languages can be found on our  Transifex project page .  If you only wish to support a subset of the supported languages, use Django's standard  LANGUAGES  setting:  LANGUAGES = [\n    ('de', _('German')),\n    ('en', _('English')),\n]  For more details, see the  internationalization documentation .  Many thanks to  Craig Blaszczyk  for helping push this through.",
            "title": "Internationalization"
        },
        {
            "location": "/topics/3.1-announcement/#new-field-types",
            "text": "Django 1.8's new  ArrayField ,  HStoreField  and  UUIDField  are now all fully supported.  This work also means that we now have both  serializers.DictField() , and  serializers.ListField()  types, allowing you to express and validate a wider set of representations.  If you're building a new 1.8 project, then you should probably consider using  UUIDField  as the primary keys for all your models. This style will work automatically with hyperlinked serializers, returning URLs in the following style:  http://example.org/api/purchases/9b1a433f-e90d-4948-848b-300fdc26365d",
            "title": "New field types"
        },
        {
            "location": "/topics/3.1-announcement/#modelserializer-api",
            "text": "The serializer redesign in 3.0 did not include any public API for modifying how ModelSerializer classes automatically generate a set of fields from a given mode class. We've now re-introduced an API for this, allowing you to create new ModelSerializer base classes that behave differently, such as using a different default style for relationships.  For more information, see the documentation on  customizing field mappings  for ModelSerializer classes.",
            "title": "ModelSerializer API"
        },
        {
            "location": "/topics/3.1-announcement/#moving-packages-out-of-core",
            "text": "We've now moved a number of packages out of the core of REST framework, and into separately installable packages. If you're currently using these you don't need to worry, you simply need to  pip install  the new packages, and change any import paths.  We're making this change in order to help distribute the maintenance workload, and keep better focus of the core essentials of the framework.  The change also means we can be more flexible with which external packages we recommend. For example, the excellently maintained  Django OAuth toolkit  has now been promoted as our recommended option for integrating OAuth support.  The following packages are now moved out of core and should be separately installed:   OAuth -  djangorestframework-oauth  XML -  djangorestframework-xml  YAML -  djangorestframework-yaml  JSONP -  djangorestframework-jsonp   It's worth reiterating that this change in policy shouldn't mean any work in your codebase other than adding a new requirement and modifying some import paths. For example to install XML rendering, you would now do:  pip install djangorestframework-xml  And modify your settings, like so:  REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n        'rest_framework_xml.renderers.XMLRenderer'\n    ]\n}  Thanks go to the latest member of our maintenance team,  Jos\u00e9 Padilla , for handling this work and taking on ownership of these packages.",
            "title": "Moving packages out of core"
        },
        {
            "location": "/topics/3.1-announcement/#deprecations",
            "text": "The  request.DATA ,  request.FILES  and  request.QUERY_PARAMS  attributes move from pending deprecation, to deprecated. Use  request.data  and  request.query_params  instead, as discussed in the 3.0 release notes.  The ModelSerializer Meta options for  write_only_fields ,  view_name  and  lookup_field  are also moved from pending deprecation, to deprecated. Use  extra_kwargs  instead, as discussed in the 3.0 release notes.  All these attributes and options will still work in 3.1, but their usage will raise a warning. They will be fully removed in 3.2.",
            "title": "Deprecations"
        },
        {
            "location": "/topics/3.1-announcement/#whats-next",
            "text": "The next focus will be on HTML renderings of API output and will include:   HTML form rendering of serializers.  Filtering controls built-in to the browsable API.  An alternative admin-style interface.   This will either be made as a single 3.2 release, or split across two separate releases, with the HTML forms and filter controls coming in 3.2, and the admin-style interface coming in a 3.3 release.",
            "title": "What's next?"
        },
        {
            "location": "/topics/3.2-announcement/",
            "text": "Django REST framework 3.2\n\n\nThe 3.2 release is the first version to include an admin interface for the browsable API.\n\n\n\n\nThis interface is intended to act as a more user-friendly interface to the API. It can be used either as a replacement to the existing \nBrowsableAPIRenderer\n, or used together with it, allowing you to switch between the two styles as required.\n\n\nWe've also fixed a huge number of issues, and made numerous cleanups and improvements.\n\n\nOver the course of the 3.1.x series we've \nresolved nearly 600 tickets\n on our GitHub issue tracker. This means we're currently running at a rate of \nclosing around 100 issues or pull requests per month\n.\n\n\nNone of this would have been possible without the support of our wonderful Kickstarter backers. If you're looking for a job in Django development we'd strongly recommend taking \na look through our sponsors\n and finding out who's hiring.\n\n\nAdminRenderer\n\n\nTo include \nAdminRenderer\n simply add it to your settings:\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.AdminRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer'\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 100\n}\n\n\n\nThere are some limitations to the \nAdminRenderer\n, in particular it is not yet able to handle list or dictionary inputs, as we do not have any HTML form fields that support those.\n\n\nAlso note that this is an initial release and we do not yet have a public API for modifying the behavior or documentation on overriding the templates.\n\n\nThe idea is to get this released to users early, so we can start getting feedback and release a more fully featured version in 3.3.\n\n\nSupported versions\n\n\nThis release drops support for Django 1.4.\n\n\nOur supported Django versions are now 1.5.6+, 1.6.3+, 1.7 and 1.8.\n\n\nDeprecations\n\n\nThere are no new deprecations in 3.2, although a number of existing deprecations have now escalated in line with our deprecation policy.\n\n\n\n\nrequest.DATA\n was put on the deprecation path in 3.0. It has now been removed and its usage will result in an error. Use the more pythonic style of \nrequest.data\n instead.\n\n\nrequest.QUERY_PARAMS\n was put on the deprecation path in 3.0. It has now been removed and its usage will result in an error. Use the more pythonic style of \nrequest.query_params\n instead.\n\n\nThe following \nModelSerializer.Meta\n options have now been removed: \nwrite_only_fields\n, \nview_name\n, \nlookup_field\n. Use the more general \nextra_kwargs\n option instead.\n\n\n\n\nThe following pagination view attributes and settings have been moved into attributes on the pagination class since 3.1. Their usage was formerly in 'pending deprecation', and has now escalated to 'deprecated'. They will continue to function but will raise errors.\n\n\n\n\nview.paginate_by\n - Use \npaginator.page_size\n instead.\n\n\nview.page_query_param\n - Use \npaginator.page_query_param\n instead.\n\n\nview.paginate_by_param\n - Use \npaginator.page_size_query_param\n instead.\n\n\nview.max_paginate_by\n - Use \npaginator.max_page_size\n instead.\n\n\nsettings.PAGINATE_BY\n - Use \npaginator.page_size\n instead.\n\n\nsettings.PAGINATE_BY_PARAM\n - Use \npaginator.page_size_query_param\n instead.\n\n\nsettings.MAX_PAGINATE_BY\n - Use \npaginator.max_page_size\n instead.\n\n\n\n\nModifications to list behaviors\n\n\nThere are a couple of bug fixes that are worth calling out as they introduce differing behavior.\n\n\nThese are a little subtle and probably won't affect most users, but are worth understanding before upgrading your project.\n\n\nManyToMany fields and blank=True\n\n\nWe've now added an \nallow_empty\n argument, which can be used with \nListSerializer\n, or with  \nmany=True\n relationships. This is \nTrue\n by default, but can be set to \nFalse\n if you want to disallow empty lists as valid input.\n\n\nAs a follow-up to this we are now able to properly mirror the behavior of Django's \nModelForm\n with respect to how many-to-many fields are validated.\n\n\nPreviously a many-to-many field on a model would map to a serializer field that would allow either empty or non-empty list inputs. Now, a many-to-many field will map to a serializer field that requires at least one input, unless the model field has \nblank=True\n set.\n\n\nHere's what the mapping looks like in practice:\n\n\n\n\nmodels.ManyToManyField()\n \u2192 \nserializers.PrimaryKeyRelatedField(many=True, allow_empty=False)\n\n\nmodels.ManyToManyField(blank=True)\n \u2192 \nserializers.PrimaryKeyRelatedField(many=True)\n\n\n\n\nThe upshot is this: If you have many to many fields in your models, then make sure you've included the argument \nblank=True\n if you want to allow empty inputs in the equivalent \nModelSerializer\n fields.\n\n\nList fields and allow_null\n\n\nWhen using \nallow_null\n with \nListField\n or a nested \nmany=True\n serializer the previous behavior was to allow \nnull\n values as items in the list. The behavior is now to allow \nnull\n values instead of the list.\n\n\nFor example, take the following field:\n\n\nNestedSerializer(many=True, allow_null=True)\n\n\n\nPreviously the validation behavior would be:\n\n\n\n\n[{\u2026}, null, {\u2026}]\n is \nvalid\n.\n\n\nnull\n is \ninvalid\n.\n\n\n\n\nOur validation behavior as of 3.2.0 is now:\n\n\n\n\n[{\u2026}, null, {\u2026}]\n is \ninvalid\n.\n\n\nnull\n is \nvalid\n.\n\n\n\n\nIf you want to allow \nnull\n child items, you'll need to instead specify \nallow_null\n on the child class, using an explicit \nListField\n instead of \nmany=True\n. For example:\n\n\nListField(child=NestedSerializer(allow_null=True))\n\n\n\nWhat's next?\n\n\nThe 3.3 release is currently planned for the start of October, and will be the last Kickstarter-funded release.\n\n\nThis release is planned to include:\n\n\n\n\nSearch and filtering controls in the browsable API and admin interface.\n\n\nImprovements and public API for the admin interface.\n\n\nImprovements and public API for our templated HTML forms and fields.\n\n\nNested object and list support in HTML forms.\n\n\n\n\nThanks once again to all our sponsors and supporters.",
            "title": "3.2 Announcement"
        },
        {
            "location": "/topics/3.2-announcement/#django-rest-framework-32",
            "text": "The 3.2 release is the first version to include an admin interface for the browsable API.   This interface is intended to act as a more user-friendly interface to the API. It can be used either as a replacement to the existing  BrowsableAPIRenderer , or used together with it, allowing you to switch between the two styles as required.  We've also fixed a huge number of issues, and made numerous cleanups and improvements.  Over the course of the 3.1.x series we've  resolved nearly 600 tickets  on our GitHub issue tracker. This means we're currently running at a rate of  closing around 100 issues or pull requests per month .  None of this would have been possible without the support of our wonderful Kickstarter backers. If you're looking for a job in Django development we'd strongly recommend taking  a look through our sponsors  and finding out who's hiring.",
            "title": "Django REST framework 3.2"
        },
        {
            "location": "/topics/3.2-announcement/#adminrenderer",
            "text": "To include  AdminRenderer  simply add it to your settings:  REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.AdminRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer'\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 100\n}  There are some limitations to the  AdminRenderer , in particular it is not yet able to handle list or dictionary inputs, as we do not have any HTML form fields that support those.  Also note that this is an initial release and we do not yet have a public API for modifying the behavior or documentation on overriding the templates.  The idea is to get this released to users early, so we can start getting feedback and release a more fully featured version in 3.3.",
            "title": "AdminRenderer"
        },
        {
            "location": "/topics/3.2-announcement/#supported-versions",
            "text": "This release drops support for Django 1.4.  Our supported Django versions are now 1.5.6+, 1.6.3+, 1.7 and 1.8.",
            "title": "Supported versions"
        },
        {
            "location": "/topics/3.2-announcement/#deprecations",
            "text": "There are no new deprecations in 3.2, although a number of existing deprecations have now escalated in line with our deprecation policy.   request.DATA  was put on the deprecation path in 3.0. It has now been removed and its usage will result in an error. Use the more pythonic style of  request.data  instead.  request.QUERY_PARAMS  was put on the deprecation path in 3.0. It has now been removed and its usage will result in an error. Use the more pythonic style of  request.query_params  instead.  The following  ModelSerializer.Meta  options have now been removed:  write_only_fields ,  view_name ,  lookup_field . Use the more general  extra_kwargs  option instead.   The following pagination view attributes and settings have been moved into attributes on the pagination class since 3.1. Their usage was formerly in 'pending deprecation', and has now escalated to 'deprecated'. They will continue to function but will raise errors.   view.paginate_by  - Use  paginator.page_size  instead.  view.page_query_param  - Use  paginator.page_query_param  instead.  view.paginate_by_param  - Use  paginator.page_size_query_param  instead.  view.max_paginate_by  - Use  paginator.max_page_size  instead.  settings.PAGINATE_BY  - Use  paginator.page_size  instead.  settings.PAGINATE_BY_PARAM  - Use  paginator.page_size_query_param  instead.  settings.MAX_PAGINATE_BY  - Use  paginator.max_page_size  instead.",
            "title": "Deprecations"
        },
        {
            "location": "/topics/3.2-announcement/#modifications-to-list-behaviors",
            "text": "There are a couple of bug fixes that are worth calling out as they introduce differing behavior.  These are a little subtle and probably won't affect most users, but are worth understanding before upgrading your project.",
            "title": "Modifications to list behaviors"
        },
        {
            "location": "/topics/3.2-announcement/#manytomany-fields-and-blanktrue",
            "text": "We've now added an  allow_empty  argument, which can be used with  ListSerializer , or with   many=True  relationships. This is  True  by default, but can be set to  False  if you want to disallow empty lists as valid input.  As a follow-up to this we are now able to properly mirror the behavior of Django's  ModelForm  with respect to how many-to-many fields are validated.  Previously a many-to-many field on a model would map to a serializer field that would allow either empty or non-empty list inputs. Now, a many-to-many field will map to a serializer field that requires at least one input, unless the model field has  blank=True  set.  Here's what the mapping looks like in practice:   models.ManyToManyField()  \u2192  serializers.PrimaryKeyRelatedField(many=True, allow_empty=False)  models.ManyToManyField(blank=True)  \u2192  serializers.PrimaryKeyRelatedField(many=True)   The upshot is this: If you have many to many fields in your models, then make sure you've included the argument  blank=True  if you want to allow empty inputs in the equivalent  ModelSerializer  fields.",
            "title": "ManyToMany fields and blank=True"
        },
        {
            "location": "/topics/3.2-announcement/#list-fields-and-allow_null",
            "text": "When using  allow_null  with  ListField  or a nested  many=True  serializer the previous behavior was to allow  null  values as items in the list. The behavior is now to allow  null  values instead of the list.  For example, take the following field:  NestedSerializer(many=True, allow_null=True)  Previously the validation behavior would be:   [{\u2026}, null, {\u2026}]  is  valid .  null  is  invalid .   Our validation behavior as of 3.2.0 is now:   [{\u2026}, null, {\u2026}]  is  invalid .  null  is  valid .   If you want to allow  null  child items, you'll need to instead specify  allow_null  on the child class, using an explicit  ListField  instead of  many=True . For example:  ListField(child=NestedSerializer(allow_null=True))",
            "title": "List fields and allow_null"
        },
        {
            "location": "/topics/3.2-announcement/#whats-next",
            "text": "The 3.3 release is currently planned for the start of October, and will be the last Kickstarter-funded release.  This release is planned to include:   Search and filtering controls in the browsable API and admin interface.  Improvements and public API for the admin interface.  Improvements and public API for our templated HTML forms and fields.  Nested object and list support in HTML forms.   Thanks once again to all our sponsors and supporters.",
            "title": "What's next?"
        },
        {
            "location": "/topics/3.3-announcement/",
            "text": "Django REST framework 3.3\n\n\nThe 3.3 release marks the final work in the Kickstarter funded series. We'd like to offer a final resounding \nthank you\n to all our wonderful sponsors and supporters.\n\n\nThe amount of work that has been achieved as a direct result of the funding is immense. We've added a huge amounts of new functionality, resolved nearly 2,000 tickets, and redesigned & refined large parts of the project.\n\n\nIn order to continue driving REST framework forward, we'll shortly be announcing a new set of funding plans. Follow \n@_tomchristie\n to keep up to date with these announcements, and be among the first set of sign ups.\n\n\nWe strongly believe that collaboratively funded software development yields outstanding results for a relatively low investment-per-head. If you or your company use REST framework commercially, then we would strongly urge you to participate in this latest funding drive, and help us continue to build an increasingly polished & professional product.\n\n\n\n\nRelease notes\n\n\nSignificant new functionality in the 3.3 release includes:\n\n\n\n\nFilters presented as HTML controls in the browsable API.\n\n\nA \nforms API\n, allowing serializers to be rendered as HTML forms.\n\n\nDjango 1.9 support.\n\n\nA \nJSONField\n serializer field\n, corresponding to Django 1.9's Postgres \nJSONField\n model field.\n\n\nBrowsable API support \nvia AJAX\n, rather than server side request overloading.\n\n\n\n\n\n\nExample of the new filter controls\n\n\n\n\nSupported versions\n\n\nThis release drops support for Django 1.5 and 1.6. Django 1.7, 1.8 or 1.9 are now required.\n\n\nThis brings our supported versions into line with Django's \ncurrently supported versions\n\n\nDeprecations\n\n\nThe AJAX based support for the browsable API means that there are a number of internal cleanups in the \nrequest\n class. For the vast majority of developers this should largely remain transparent:\n\n\n\n\nTo support form based \nPUT\n and \nDELETE\n, or to support form content types such as JSON, you should now use the \nAJAX forms\n javascript library. This replaces the previous 'method and content type overloading' that required significant internal complexity to the request class.\n\n\nThe \naccept\n query parameter is no longer supported by the default content negotiation class. If you require it then you'll need to \nuse a custom content negotiation class\n.\n\n\nThe custom \nHTTP_X_HTTP_METHOD_OVERRIDE\n header is no longer supported by default. If you require it then you'll need to \nuse custom middleware\n.\n\n\n\n\nThe following pagination view attributes and settings have been moved into attributes on the pagination class since 3.1. Their usage was formerly deprecated, and has now been removed entirely, in line with the deprecation policy.\n\n\n\n\nview.paginate_by\n - Use \npaginator.page_size\n instead.\n\n\nview.page_query_param\n - Use \npaginator.page_query_param\n instead.\n\n\nview.paginate_by_param\n - Use \npaginator.page_size_query_param\n instead.\n\n\nview.max_paginate_by\n - Use \npaginator.max_page_size\n instead.\n\n\nsettings.PAGINATE_BY\n - Use \npaginator.page_size\n instead.\n\n\nsettings.PAGINATE_BY_PARAM\n - Use \npaginator.page_size_query_param\n instead.\n\n\nsettings.MAX_PAGINATE_BY\n - Use \npaginator.max_page_size\n instead.\n\n\n\n\nThe \nModelSerializer\n and \nHyperlinkedModelSerializer\n classes should now include either a \nfields\n or \nexclude\n option, although the \nfields = '__all__'\n shortcut may be used. Failing to include either of these two options is currently pending deprecation, and will be removed entirely in the 3.5 release. This behavior brings \nModelSerializer\n more closely in line with Django's \nModelForm\n behavior.",
            "title": "3.3 Announcement"
        },
        {
            "location": "/topics/3.3-announcement/#django-rest-framework-33",
            "text": "The 3.3 release marks the final work in the Kickstarter funded series. We'd like to offer a final resounding  thank you  to all our wonderful sponsors and supporters.  The amount of work that has been achieved as a direct result of the funding is immense. We've added a huge amounts of new functionality, resolved nearly 2,000 tickets, and redesigned & refined large parts of the project.  In order to continue driving REST framework forward, we'll shortly be announcing a new set of funding plans. Follow  @_tomchristie  to keep up to date with these announcements, and be among the first set of sign ups.  We strongly believe that collaboratively funded software development yields outstanding results for a relatively low investment-per-head. If you or your company use REST framework commercially, then we would strongly urge you to participate in this latest funding drive, and help us continue to build an increasingly polished & professional product.",
            "title": "Django REST framework 3.3"
        },
        {
            "location": "/topics/3.3-announcement/#release-notes",
            "text": "Significant new functionality in the 3.3 release includes:   Filters presented as HTML controls in the browsable API.  A  forms API , allowing serializers to be rendered as HTML forms.  Django 1.9 support.  A  JSONField  serializer field , corresponding to Django 1.9's Postgres  JSONField  model field.  Browsable API support  via AJAX , rather than server side request overloading.    Example of the new filter controls",
            "title": "Release notes"
        },
        {
            "location": "/topics/3.3-announcement/#supported-versions",
            "text": "This release drops support for Django 1.5 and 1.6. Django 1.7, 1.8 or 1.9 are now required.  This brings our supported versions into line with Django's  currently supported versions",
            "title": "Supported versions"
        },
        {
            "location": "/topics/3.3-announcement/#deprecations",
            "text": "The AJAX based support for the browsable API means that there are a number of internal cleanups in the  request  class. For the vast majority of developers this should largely remain transparent:   To support form based  PUT  and  DELETE , or to support form content types such as JSON, you should now use the  AJAX forms  javascript library. This replaces the previous 'method and content type overloading' that required significant internal complexity to the request class.  The  accept  query parameter is no longer supported by the default content negotiation class. If you require it then you'll need to  use a custom content negotiation class .  The custom  HTTP_X_HTTP_METHOD_OVERRIDE  header is no longer supported by default. If you require it then you'll need to  use custom middleware .   The following pagination view attributes and settings have been moved into attributes on the pagination class since 3.1. Their usage was formerly deprecated, and has now been removed entirely, in line with the deprecation policy.   view.paginate_by  - Use  paginator.page_size  instead.  view.page_query_param  - Use  paginator.page_query_param  instead.  view.paginate_by_param  - Use  paginator.page_size_query_param  instead.  view.max_paginate_by  - Use  paginator.max_page_size  instead.  settings.PAGINATE_BY  - Use  paginator.page_size  instead.  settings.PAGINATE_BY_PARAM  - Use  paginator.page_size_query_param  instead.  settings.MAX_PAGINATE_BY  - Use  paginator.max_page_size  instead.   The  ModelSerializer  and  HyperlinkedModelSerializer  classes should now include either a  fields  or  exclude  option, although the  fields = '__all__'  shortcut may be used. Failing to include either of these two options is currently pending deprecation, and will be removed entirely in the 3.5 release. This behavior brings  ModelSerializer  more closely in line with Django's  ModelForm  behavior.",
            "title": "Deprecations"
        },
        {
            "location": "/topics/3.4-announcement/",
            "text": ".promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n\n\n\n\nDjango REST framework 3.4\n\n\nThe 3.4 release is the first in a planned series that will be addressing schema\ngeneration, hypermedia support, API clients, and finally realtime support.\n\n\n\n\nFunding\n\n\nThe 3.4 release has been made possible a recent \nMozilla grant\n, and by our\n\ncollaborative funding model\n. If you use REST framework commercially, and would\nlike to see this work continue, we strongly encourage you to invest in its\ncontinued development by \nsigning up for a paid plan\n.\n\n\nThe initial aim is to provide a single full-time position on REST framework.\nRight now we're over 60% of the way towards achieving that.\n\nEvery single sign-up makes a significant impact.\n\n\n\n    \nRover.com\n\n    \nSentry\n\n    \nStream\n\n\n\n\n\n\n\n\nMany thanks to all our \nawesome sponsors\n, and in particular to our premium backers, \nRover\n, \nSentry\n, and \nStream\n.\n\n\n\n\nSchemas & client libraries\n\n\nREST framework 3.4 brings built-in support for generating API schemas.\n\n\nWe provide this support by using \nCore API\n, a Document Object Model\nfor describing APIs.\n\n\nBecause Core API represents the API schema in an format-independent\nmanner, we're able to render the Core API \nDocument\n object into many different\nschema formats, by allowing the renderer class to determine how the internal\nrepresentation maps onto the external schema format.\n\n\nThis approach should also open the door to a range of auto-generated API\ndocumentation options in the future, by rendering the \nDocument\n object into\nHTML documentation pages.\n\n\nAlongside the built-in schema support, we're also now providing the following:\n\n\n\n\nA \ncommand line tool\n for interacting with APIs.\n\n\nA \nPython client library\n for interacting with APIs.\n\n\n\n\nThese API clients are dynamically driven, and able to interact with any API\nthat exposes a supported schema format.\n\n\nDynamically driven clients allow you to interact with an API at an application\nlayer interface, rather than a network layer interface, while still providing\nthe benefits of RESTful Web API design.\n\n\nWe're expecting to expand the range of languages that we provide client libraries\nfor over the coming months.\n\n\nFurther work on maturing the API schema support is also planned, including\ndocumentation on supporting file upload and download, and improved support for\ndocumentation generation and parameter annotation.\n\n\n\n\nCurrent support for schema formats is as follows:\n\n\n\n\n\n\n\n\nName\n\n\nSupport\n\n\nPyPI package\n\n\n\n\n\n\n\n\n\n\nCore JSON\n\n\nSchema generation & client support.\n\n\nBuilt-in support in \ncoreapi\n.\n\n\n\n\n\n\nSwagger / OpenAPI\n\n\nSchema generation & client support.\n\n\nThe \nopenapi-codec\n package.\n\n\n\n\n\n\nJSON Hyper-Schema\n\n\nCurrently client support only.\n\n\nThe \nhyperschema-codec\n package.\n\n\n\n\n\n\nAPI Blueprint\n\n\nNot yet available.\n\n\nNot yet available.\n\n\n\n\n\n\n\n\n\n\nYou can read more about any of this new functionality in the following:\n\n\n\n\nNew tutorial section on \nschemas & client libraries\n.\n\n\nDocumentation page on \nschema generation\n.\n\n\nTopic page on \nAPI clients\n.\n\n\n\n\nIt is also worth noting that Marc Gibbons is currently working towards a 2.0 release of\nthe popular Django REST Swagger package, which will tie in with our new built-in support.\n\n\n\n\nSupported versions\n\n\nThe 3.4.0 release adds support for Django 1.10.\n\n\nThe following versions of Python and Django are now supported:\n\n\n\n\nDjango versions 1.8, 1.9, and 1.10.\n\n\nPython versions 2.7, 3.2(*), 3.3(*), 3.4, 3.5.\n\n\n\n\n(*) Note that Python 3.2 and 3.3 are not supported from Django 1.9 onwards.\n\n\n\n\nDeprecations and changes\n\n\nThe 3.4 release includes very limited deprecation or behavioral changes, and\nshould present a straightforward upgrade.\n\n\nUse fields or exclude on serializer classes.\n\n\nThe following change in 3.3.0 is now escalated from \"pending deprecation\" to\n\"deprecated\". Its usage will continue to function but will raise warnings:\n\n\nModelSerializer\n and \nHyperlinkedModelSerializer\n should include either a \nfields\n\noption, or an \nexclude\n option. The \nfields = '__all__'\n shortcut may be used\nto explicitly include all fields.\n\n\nMicrosecond precision when returning time or datetime.\n\n\nUsing the default JSON renderer and directly returning a \ndatetime\n or \ntime\n\ninstance will now render with microsecond precision (6 digits), rather than\nmillisecond precision (3 digits). This makes the output format consistent with the\ndefault string output of \nserializers.DateTimeField\n and \nserializers.TimeField\n.\n\n\nThis change \ndoes not affect the default behavior when using serializers\n,\nwhich is to serialize \ndatetime\n and \ntime\n instances into strings with\nmicrosecond precision.\n\n\nThe serializer behavior can be modified if needed, using the \nDATETIME_FORMAT\n\nand \nTIME_FORMAT\n settings.\n\n\nThe renderer behavior can be modified by setting a custom \nencoder_class\n\nattribute on a \nJSONRenderer\n subclass.\n\n\nRelational choices no longer displayed in OPTIONS requests.\n\n\nMaking an \nOPTIONS\n request to views that have a serializer choice field\nwill result in a list of the available choices being returned in the response.\n\n\nIn cases where there is a relational field, the previous behavior would be\nto return a list of available instances to choose from for that relational field.\n\n\nIn order to minimise exposed information the behavior now is to \nnot\n return\nchoices information for relational fields.\n\n\nIf you want to override this new behavior you'll need to \nimplement a custom\nmetadata class\n.\n\n\nSee \nissue #3751\n for more information on this behavioral change.\n\n\n\n\nOther improvements\n\n\nThis release includes further work from a huge number of \npull requests and issues\n.\n\n\nMany thanks to all our contributors who've been involved in the release, either through raising issues, giving feedback, improving the documentation, or suggesting and implementing code changes.\n\n\nThe full set of itemized release notes \nare available here\n.",
            "title": "3.4 Announcement"
        },
        {
            "location": "/topics/3.4-announcement/#django-rest-framework-34",
            "text": "The 3.4 release is the first in a planned series that will be addressing schema\ngeneration, hypermedia support, API clients, and finally realtime support.",
            "title": "Django REST framework 3.4"
        },
        {
            "location": "/topics/3.4-announcement/#funding",
            "text": "The 3.4 release has been made possible a recent  Mozilla grant , and by our collaborative funding model . If you use REST framework commercially, and would\nlike to see this work continue, we strongly encourage you to invest in its\ncontinued development by  signing up for a paid plan .  The initial aim is to provide a single full-time position on REST framework.\nRight now we're over 60% of the way towards achieving that. Every single sign-up makes a significant impact.  \n     Rover.com \n     Sentry \n     Stream    Many thanks to all our  awesome sponsors , and in particular to our premium backers,  Rover ,  Sentry , and  Stream .",
            "title": "Funding"
        },
        {
            "location": "/topics/3.4-announcement/#schemas-client-libraries",
            "text": "REST framework 3.4 brings built-in support for generating API schemas.  We provide this support by using  Core API , a Document Object Model\nfor describing APIs.  Because Core API represents the API schema in an format-independent\nmanner, we're able to render the Core API  Document  object into many different\nschema formats, by allowing the renderer class to determine how the internal\nrepresentation maps onto the external schema format.  This approach should also open the door to a range of auto-generated API\ndocumentation options in the future, by rendering the  Document  object into\nHTML documentation pages.  Alongside the built-in schema support, we're also now providing the following:   A  command line tool  for interacting with APIs.  A  Python client library  for interacting with APIs.   These API clients are dynamically driven, and able to interact with any API\nthat exposes a supported schema format.  Dynamically driven clients allow you to interact with an API at an application\nlayer interface, rather than a network layer interface, while still providing\nthe benefits of RESTful Web API design.  We're expecting to expand the range of languages that we provide client libraries\nfor over the coming months.  Further work on maturing the API schema support is also planned, including\ndocumentation on supporting file upload and download, and improved support for\ndocumentation generation and parameter annotation.   Current support for schema formats is as follows:     Name  Support  PyPI package      Core JSON  Schema generation & client support.  Built-in support in  coreapi .    Swagger / OpenAPI  Schema generation & client support.  The  openapi-codec  package.    JSON Hyper-Schema  Currently client support only.  The  hyperschema-codec  package.    API Blueprint  Not yet available.  Not yet available.      You can read more about any of this new functionality in the following:   New tutorial section on  schemas & client libraries .  Documentation page on  schema generation .  Topic page on  API clients .   It is also worth noting that Marc Gibbons is currently working towards a 2.0 release of\nthe popular Django REST Swagger package, which will tie in with our new built-in support.",
            "title": "Schemas &amp; client libraries"
        },
        {
            "location": "/topics/3.4-announcement/#supported-versions",
            "text": "The 3.4.0 release adds support for Django 1.10.  The following versions of Python and Django are now supported:   Django versions 1.8, 1.9, and 1.10.  Python versions 2.7, 3.2(*), 3.3(*), 3.4, 3.5.   (*) Note that Python 3.2 and 3.3 are not supported from Django 1.9 onwards.",
            "title": "Supported versions"
        },
        {
            "location": "/topics/3.4-announcement/#deprecations-and-changes",
            "text": "The 3.4 release includes very limited deprecation or behavioral changes, and\nshould present a straightforward upgrade.",
            "title": "Deprecations and changes"
        },
        {
            "location": "/topics/3.4-announcement/#use-fields-or-exclude-on-serializer-classes",
            "text": "The following change in 3.3.0 is now escalated from \"pending deprecation\" to\n\"deprecated\". Its usage will continue to function but will raise warnings:  ModelSerializer  and  HyperlinkedModelSerializer  should include either a  fields \noption, or an  exclude  option. The  fields = '__all__'  shortcut may be used\nto explicitly include all fields.",
            "title": "Use fields or exclude on serializer classes."
        },
        {
            "location": "/topics/3.4-announcement/#microsecond-precision-when-returning-time-or-datetime",
            "text": "Using the default JSON renderer and directly returning a  datetime  or  time \ninstance will now render with microsecond precision (6 digits), rather than\nmillisecond precision (3 digits). This makes the output format consistent with the\ndefault string output of  serializers.DateTimeField  and  serializers.TimeField .  This change  does not affect the default behavior when using serializers ,\nwhich is to serialize  datetime  and  time  instances into strings with\nmicrosecond precision.  The serializer behavior can be modified if needed, using the  DATETIME_FORMAT \nand  TIME_FORMAT  settings.  The renderer behavior can be modified by setting a custom  encoder_class \nattribute on a  JSONRenderer  subclass.",
            "title": "Microsecond precision when returning time or datetime."
        },
        {
            "location": "/topics/3.4-announcement/#relational-choices-no-longer-displayed-in-options-requests",
            "text": "Making an  OPTIONS  request to views that have a serializer choice field\nwill result in a list of the available choices being returned in the response.  In cases where there is a relational field, the previous behavior would be\nto return a list of available instances to choose from for that relational field.  In order to minimise exposed information the behavior now is to  not  return\nchoices information for relational fields.  If you want to override this new behavior you'll need to  implement a custom\nmetadata class .  See  issue #3751  for more information on this behavioral change.",
            "title": "Relational choices no longer displayed in OPTIONS requests."
        },
        {
            "location": "/topics/3.4-announcement/#other-improvements",
            "text": "This release includes further work from a huge number of  pull requests and issues .  Many thanks to all our contributors who've been involved in the release, either through raising issues, giving feedback, improving the documentation, or suggesting and implementing code changes.  The full set of itemized release notes  are available here .",
            "title": "Other improvements"
        },
        {
            "location": "/topics/3.5-announcement/",
            "text": ".promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n\n\n\n\nDjango REST framework 3.5\n\n\nThe 3.5 release is the second in a planned series that is addressing schema\ngeneration, hypermedia support, API client libraries, and finally realtime support.\n\n\n\n\nFunding\n\n\nThe 3.5 release would not have been possible without our \ncollaborative funding model\n.\nIf you use REST framework commercially and would like to see this work continue,\nwe strongly encourage you to invest in its continued development by\n\nsigning up for a paid\u00a0plan\n.\n\n\n\n    \nRover.com\n\n    \nSentry\n\n    \nStream\n\n    \nMachinalis\n\n\n\n\n\n\n\n\nMany thanks to all our \nsponsors\n, and in particular to our premium backers, \nRover\n, \nSentry\n, \nStream\n, and \nMachinalis\n.\n\n\n\n\nImproved schema generation\n\n\nDocstrings on views are now pulled through into schema definitions, allowing\nyou to \nuse the schema definition to document your\u00a0API\n.\n\n\nThere is now also a shortcut function, \nget_schema_view()\n, which makes it easier to\n\nadding schema views\n to your API.\n\n\nFor example, to include a swagger schema to your API, you would do the following:\n\n\n\n\n\n\nRun \npip install django-rest-swagger\n.\n\n\n\n\n\n\nAdd \n'rest_framework_swagger'\n to your \nINSTALLED_APPS\n setting.\n\n\n\n\n\n\nInclude the schema view in your URL conf:\n\n\n\n\n\n\nfrom rest_framework.schemas import get_schema_view\nfrom rest_framework_swagger.renderers import OpenAPIRenderer, SwaggerUIRenderer\n\nschema_view = get_schema_view(\n    title='Example API',\n    renderer_classes=[OpenAPIRenderer, SwaggerUIRenderer]\n)\n\nurlpatterns = [\n    url(r'^swagger/$', schema_view),\n    ...\n]\n\n\n\n\nThere have been a large number of fixes to the schema generation. These should\nresolve issues for anyone using the latest version of the \ndjango-rest-swagger\n\npackage.\n\n\nSome of these changes do affect the resulting schema structure,\nso if you're already using schema generation you should make sure to review\n\nthe deprecation notes\n, particularly if you're currently using\na dynamic client library to interact with your API.\n\n\nFinally, we're also now exposing the schema generation as a\n\npublicly documented API\n, allowing you to more easily\noverride the behaviour.\n\n\nRequests test client\n\n\nYou can now test your project using the \nrequests\n library.\n\n\nThis exposes exactly the same interface as if you were using a standard\nrequests session instance.\n\n\nclient = RequestsClient()\nresponse = client.get('http://testserver/users/')\nassert response.status_code == 200\n\n\n\nRather than sending any HTTP requests to the network, this interface will\ncoerce all outgoing requests into WSGI, and call into your application directly.\n\n\nCore API client\n\n\nYou can also now test your project by interacting with it using the \ncoreapi\n\nclient library.\n\n\n# Fetch the API schema\nclient = CoreAPIClient()\nschema = client.get('http://testserver/schema/')\n\n# Create a new organisation\nparams = {'name': 'MegaCorp', 'status': 'active'}\nclient.action(schema, ['organisations', 'create'], params)\n\n# Ensure that the organisation exists in the listing\ndata = client.action(schema, ['organisations', 'list'])\nassert(len(data) == 1)\nassert(data == [{'name': 'MegaCorp', 'status': 'active'}])\n\n\n\nAgain, this will call directly into the application using the WSGI interface,\nrather than making actual network calls.\n\n\nThis is a good option if you are planning for clients to mainly interact with\nyour API using the \ncoreapi\n client library, or some other auto-generated client.\n\n\nLive tests\n\n\nOne interesting aspect of both the \nrequests\n client and the \ncoreapi\n client\nis that they allow you to write tests in such a way that they can also be made\nto run against a live service.\n\n\nBy switching the WSGI based client instances to actual instances of \nrequests.Session\n\nor \ncoreapi.Client\n you can have the test cases make actual network calls.\n\n\nBeing able to write test cases that can exercise your staging or production\nenvironment is a powerful tool. However in order to do this, you'll need to pay\nclose attention to how you handle setup and teardown to ensure a strict isolation\nof test data from other live or staging data.\n\n\nRAML support\n\n\nWe now have preliminary support for \nRAML documentation generation\n.\n\n\n\n\nFurther work on the encoding and documentation generation is planned, in order to\nmake features such as the 'Try it now' support available at a later date.\n\n\nThis work also now means that you can use the Core API client libraries to interact\nwith APIs that expose a RAML specification. The \nRAML codec\n gives some examples of\ninteracting with the Spotify API in this way.\n\n\nValidation codes\n\n\nExceptions raised by REST framework now include short code identifiers.\nWhen used together with our customizable error handling, this now allows you to\nmodify the style of API error messages.\n\n\nAs an example, this allows for the following style of error responses:\n\n\n{\n    \"message\": \"You do not have permission to perform this action.\",\n    \"code\": \"permission_denied\"\n}\n\n\n\nThis is particularly useful with validation errors, which use appropriate\ncodes to identify differing kinds of failure...\n\n\n{\n    \"name\": {\"message\": \"This field is required.\", \"code\": \"required\"},\n    \"age\": {\"message\": \"A valid integer is required.\", \"code\": \"invalid\"}\n}\n\n\n\nClient upload & download support\n\n\nThe Python \ncoreapi\n client library and the Core API command line tool both\nnow fully support file \nuploads\n and \ndownloads\n.\n\n\n\n\nDeprecations\n\n\nGenerating schemas from Router\n\n\nThe router arguments for generating a schema view, such as \nschema_title\n,\nare now pending deprecation.\n\n\nInstead of using \nDefaultRouter(schema_title='Example API')\n, you should use\nthe \nget_schema_view()\n function, and include the view in your URL conf.\n\n\nMake sure to include the view before your router urls. For example:\n\n\nfrom rest_framework.schemas import get_schema_view\nfrom my_project.routers import router\n\nschema_view = get_schema_view(title='Example API')\n\nurlpatterns = [\n    url('^$', schema_view),\n    url(r'^', include(router.urls)),\n]\n\n\n\nSchema path representations\n\n\nThe \n'pk'\n identifier in schema paths is now mapped onto the actually model field\nname by default. This will typically be \n'id'\n.\n\n\nThis gives a better external representation for schemas, with less implementation\ndetail being exposed. It also reflects the behaviour of using a ModelSerializer\nclass with \nfields = '__all__'\n.\n\n\nYou can revert to the previous behaviour by setting \n'SCHEMA_COERCE_PATH_PK': False\n\nin the REST framework settings.\n\n\nSchema action name representations\n\n\nThe internal \nretrieve()\n and \ndestroy()\n method names are now coerced to an\nexternal representation of \nread\n and \ndelete\n.\n\n\nYou can revert to the previous behaviour by setting \n'SCHEMA_COERCE_METHOD_NAMES': {}\n\nin the REST framework settings.\n\n\nDjangoFilterBackend\n\n\nThe functionality of the built-in \nDjangoFilterBackend\n is now completely\nincluded by the \ndjango-filter\n package.\n\n\nYou should change your imports and REST framework filter settings as follows:\n\n\n\n\nrest_framework.filters.DjangoFilterBackend\n becomes \ndjango_filters.rest_framework.DjangoFilterBackend\n.\n\n\nrest_framework.filters.FilterSet\n becomes \ndjango_filters.rest_framework.FilterSet\n.\n\n\n\n\nThe existing imports will continue to work but are now pending deprecation.\n\n\nCoreJSON media type\n\n\nThe media type for \nCoreJSON\n is now \napplication/json+coreapi\n, rather than\nthe previous \napplication/vnd.json+coreapi\n. This brings it more into line with\nother custom media types, such as those used by Swagger and RAML.\n\n\nThe clients currently accept either media type. The old style-media type will\nbe deprecated at a later date.\n\n\nModelSerializer 'fields' and 'exclude'\n\n\nModelSerializer and HyperlinkedModelSerializer must include either a fields\noption, or an exclude option. The \nfields = '__all__'\n shortcut may be used to\nexplicitly include all fields.\n\n\nFailing to set either \nfields\n or \nexclude\n raised a pending deprecation warning\nin version 3.3 and raised a deprecation warning in 3.4. Its usage is now mandatory.",
            "title": "3.5 Announcement"
        },
        {
            "location": "/topics/3.5-announcement/#django-rest-framework-35",
            "text": "The 3.5 release is the second in a planned series that is addressing schema\ngeneration, hypermedia support, API client libraries, and finally realtime support.",
            "title": "Django REST framework 3.5"
        },
        {
            "location": "/topics/3.5-announcement/#funding",
            "text": "The 3.5 release would not have been possible without our  collaborative funding model .\nIf you use REST framework commercially and would like to see this work continue,\nwe strongly encourage you to invest in its continued development by signing up for a paid\u00a0plan .  \n     Rover.com \n     Sentry \n     Stream \n     Machinalis    Many thanks to all our  sponsors , and in particular to our premium backers,  Rover ,  Sentry ,  Stream , and  Machinalis .",
            "title": "Funding"
        },
        {
            "location": "/topics/3.5-announcement/#improved-schema-generation",
            "text": "Docstrings on views are now pulled through into schema definitions, allowing\nyou to  use the schema definition to document your\u00a0API .  There is now also a shortcut function,  get_schema_view() , which makes it easier to adding schema views  to your API.  For example, to include a swagger schema to your API, you would do the following:    Run  pip install django-rest-swagger .    Add  'rest_framework_swagger'  to your  INSTALLED_APPS  setting.    Include the schema view in your URL conf:    from rest_framework.schemas import get_schema_view\nfrom rest_framework_swagger.renderers import OpenAPIRenderer, SwaggerUIRenderer\n\nschema_view = get_schema_view(\n    title='Example API',\n    renderer_classes=[OpenAPIRenderer, SwaggerUIRenderer]\n)\n\nurlpatterns = [\n    url(r'^swagger/$', schema_view),\n    ...\n]  There have been a large number of fixes to the schema generation. These should\nresolve issues for anyone using the latest version of the  django-rest-swagger \npackage.  Some of these changes do affect the resulting schema structure,\nso if you're already using schema generation you should make sure to review the deprecation notes , particularly if you're currently using\na dynamic client library to interact with your API.  Finally, we're also now exposing the schema generation as a publicly documented API , allowing you to more easily\noverride the behaviour.",
            "title": "Improved schema generation"
        },
        {
            "location": "/topics/3.5-announcement/#requests-test-client",
            "text": "You can now test your project using the  requests  library.  This exposes exactly the same interface as if you were using a standard\nrequests session instance.  client = RequestsClient()\nresponse = client.get('http://testserver/users/')\nassert response.status_code == 200  Rather than sending any HTTP requests to the network, this interface will\ncoerce all outgoing requests into WSGI, and call into your application directly.",
            "title": "Requests test client"
        },
        {
            "location": "/topics/3.5-announcement/#core-api-client",
            "text": "You can also now test your project by interacting with it using the  coreapi \nclient library.  # Fetch the API schema\nclient = CoreAPIClient()\nschema = client.get('http://testserver/schema/')\n\n# Create a new organisation\nparams = {'name': 'MegaCorp', 'status': 'active'}\nclient.action(schema, ['organisations', 'create'], params)\n\n# Ensure that the organisation exists in the listing\ndata = client.action(schema, ['organisations', 'list'])\nassert(len(data) == 1)\nassert(data == [{'name': 'MegaCorp', 'status': 'active'}])  Again, this will call directly into the application using the WSGI interface,\nrather than making actual network calls.  This is a good option if you are planning for clients to mainly interact with\nyour API using the  coreapi  client library, or some other auto-generated client.",
            "title": "Core API client"
        },
        {
            "location": "/topics/3.5-announcement/#live-tests",
            "text": "One interesting aspect of both the  requests  client and the  coreapi  client\nis that they allow you to write tests in such a way that they can also be made\nto run against a live service.  By switching the WSGI based client instances to actual instances of  requests.Session \nor  coreapi.Client  you can have the test cases make actual network calls.  Being able to write test cases that can exercise your staging or production\nenvironment is a powerful tool. However in order to do this, you'll need to pay\nclose attention to how you handle setup and teardown to ensure a strict isolation\nof test data from other live or staging data.",
            "title": "Live tests"
        },
        {
            "location": "/topics/3.5-announcement/#raml-support",
            "text": "We now have preliminary support for  RAML documentation generation .   Further work on the encoding and documentation generation is planned, in order to\nmake features such as the 'Try it now' support available at a later date.  This work also now means that you can use the Core API client libraries to interact\nwith APIs that expose a RAML specification. The  RAML codec  gives some examples of\ninteracting with the Spotify API in this way.",
            "title": "RAML support"
        },
        {
            "location": "/topics/3.5-announcement/#validation-codes",
            "text": "Exceptions raised by REST framework now include short code identifiers.\nWhen used together with our customizable error handling, this now allows you to\nmodify the style of API error messages.  As an example, this allows for the following style of error responses:  {\n    \"message\": \"You do not have permission to perform this action.\",\n    \"code\": \"permission_denied\"\n}  This is particularly useful with validation errors, which use appropriate\ncodes to identify differing kinds of failure...  {\n    \"name\": {\"message\": \"This field is required.\", \"code\": \"required\"},\n    \"age\": {\"message\": \"A valid integer is required.\", \"code\": \"invalid\"}\n}",
            "title": "Validation codes"
        },
        {
            "location": "/topics/3.5-announcement/#client-upload-download-support",
            "text": "The Python  coreapi  client library and the Core API command line tool both\nnow fully support file  uploads  and  downloads .",
            "title": "Client upload &amp; download support"
        },
        {
            "location": "/topics/3.5-announcement/#deprecations",
            "text": "",
            "title": "Deprecations"
        },
        {
            "location": "/topics/3.5-announcement/#generating-schemas-from-router",
            "text": "The router arguments for generating a schema view, such as  schema_title ,\nare now pending deprecation.  Instead of using  DefaultRouter(schema_title='Example API') , you should use\nthe  get_schema_view()  function, and include the view in your URL conf.  Make sure to include the view before your router urls. For example:  from rest_framework.schemas import get_schema_view\nfrom my_project.routers import router\n\nschema_view = get_schema_view(title='Example API')\n\nurlpatterns = [\n    url('^$', schema_view),\n    url(r'^', include(router.urls)),\n]",
            "title": "Generating schemas from Router"
        },
        {
            "location": "/topics/3.5-announcement/#schema-path-representations",
            "text": "The  'pk'  identifier in schema paths is now mapped onto the actually model field\nname by default. This will typically be  'id' .  This gives a better external representation for schemas, with less implementation\ndetail being exposed. It also reflects the behaviour of using a ModelSerializer\nclass with  fields = '__all__' .  You can revert to the previous behaviour by setting  'SCHEMA_COERCE_PATH_PK': False \nin the REST framework settings.",
            "title": "Schema path representations"
        },
        {
            "location": "/topics/3.5-announcement/#schema-action-name-representations",
            "text": "The internal  retrieve()  and  destroy()  method names are now coerced to an\nexternal representation of  read  and  delete .  You can revert to the previous behaviour by setting  'SCHEMA_COERCE_METHOD_NAMES': {} \nin the REST framework settings.",
            "title": "Schema action name representations"
        },
        {
            "location": "/topics/3.5-announcement/#djangofilterbackend",
            "text": "The functionality of the built-in  DjangoFilterBackend  is now completely\nincluded by the  django-filter  package.  You should change your imports and REST framework filter settings as follows:   rest_framework.filters.DjangoFilterBackend  becomes  django_filters.rest_framework.DjangoFilterBackend .  rest_framework.filters.FilterSet  becomes  django_filters.rest_framework.FilterSet .   The existing imports will continue to work but are now pending deprecation.",
            "title": "DjangoFilterBackend"
        },
        {
            "location": "/topics/3.5-announcement/#corejson-media-type",
            "text": "The media type for  CoreJSON  is now  application/json+coreapi , rather than\nthe previous  application/vnd.json+coreapi . This brings it more into line with\nother custom media types, such as those used by Swagger and RAML.  The clients currently accept either media type. The old style-media type will\nbe deprecated at a later date.",
            "title": "CoreJSON media type"
        },
        {
            "location": "/topics/3.5-announcement/#modelserializer-fields-and-exclude",
            "text": "ModelSerializer and HyperlinkedModelSerializer must include either a fields\noption, or an exclude option. The  fields = '__all__'  shortcut may be used to\nexplicitly include all fields.  Failing to set either  fields  or  exclude  raised a pending deprecation warning\nin version 3.3 and raised a deprecation warning in 3.4. Its usage is now mandatory.",
            "title": "ModelSerializer 'fields' and 'exclude'"
        },
        {
            "location": "/topics/kickstarter-announcement/",
            "text": "Kickstarting Django REST framework 3\n\n\n\n\n \n\n\n\n\n\nIn order to continue to drive the project forward, I'm launching a Kickstarter campaign to help fund the development of a major new release - Django REST framework 3.\n\n\nProject details\n\n\nThis new release will allow us to comprehensively address some of the shortcomings of the framework, and will aim to include the following:\n\n\n\n\nFaster, simpler and easier-to-use serializers.\n\n\nAn alternative admin-style interface for the browsable API.\n\n\nSearch and filtering controls made accessible in the browsable API.\n\n\nAlternative API pagination styles.\n\n\nDocumentation around API versioning.\n\n\nTriage of outstanding tickets.\n\n\nImproving the ongoing quality and maintainability of the project.\n\n\n\n\nFull details are available now on the \nproject page\n.\n\n\nIf you're interested in helping make sustainable open source development a reality please \nvisit the Kickstarter page\n and consider funding the project.\n\n\nI can't wait to see where this takes us!\n\n\nMany thanks to everyone for your support so far,\n\n\nTom Christie :)\n\n\n\n\nSponsors\n\n\nWe've now blazed way past all our goals, with a staggering \u00a330,000 (~$50,000), meaning I'll be in a position to work on the project significantly beyond what we'd originally planned for. I owe a huge debt of gratitude to all the wonderful companies and individuals who have been backing the project so generously, and making this possible.\n\n\n\n\nPlatinum sponsors\n\n\nOur platinum sponsors have each made a hugely substantial contribution to the future development of Django REST framework, and I simply can't thank them enough.\n\n\n\n\nEventbrite\n\n\n\n\n\n\n\nDivio\n\n\nLulu\n\n\nPotato\n\n\nWiredrive\n\n\nCyan\n\n\nRunscope\n\n\nSimple Energy\n\n\nVOKAL Interactive\n\n\nPurple Bit\n\n\nKuwaitNET\n\n\n\n\n\n\n\n\n\n\nGold sponsors\n\n\nOur gold sponsors include companies large and small. Many thanks for their significant funding of the project and their commitment to sustainable open-source development.\n\n\n\n\nLaterPay\n\n\nSchuberg Philis\n\n\nProReNata AB\n\n\nSGA Websites\n\n\nSirono\n\n\nVinta Software Studio\n\n\nRapasso\n\n\nMirus Research\n\n\nHipo\n\n\nByte\n\n\nLightning Kite\n\n\nOpbeat\n\n\nKoordinates\n\n\nPulsecode Inc.\n\n\nSinging Horse Studio Ltd.\n\n\nHeroku\n\n\nRheinwerk Verlag\n\n\nSecurity Compass\n\n\nDjango Software Foundation\n\n\nHipflask\n\n\nCrate\n\n\nCryptico Corp\n\n\nNextHub\n\n\nCompile\n\n\nWusaWork\n\n\nEnvision Linux\n\n\n\n\n\n\n\n\n\n\nSilver sponsors\n\n\nThe serious financial contribution that our silver sponsors have made is very much appreciated. I'd like to say a particular thank\u00a0you to individuals who have chosen to privately support the project at this level.\n\n\n\n\nIMT Computer Services\n\n\nWildfish\n\n\nThermondo GmbH\n\n\nProvidenz\n\n\nalwaysdata.com\n\n\nTriggered Messaging\n\n\nPushPull Technology Ltd\n\n\nTranscode\n\n\nGarfo\n\n\nShippo\n\n\nGizmag\n\n\nTivix\n\n\nSafari\n\n\nBright Loop\n\n\nABA Systems\n\n\nbeefarm.ru\n\n\nVzzual.com\n\n\nInfinite Code\n\n\nCrossword Tracker\n\n\nPkgFarm\n\n\nLife. The Game.\n\n\nBlimp\n\n\nPathwright\n\n\nFluxility\n\n\nTeonite\n\n\nTrackMaven\n\n\nPhurba\n\n\nNephila\n\n\nAditium\n\n\nOpenEye Scientific Software\n\n\nHolvi\n\n\nCantemo\n\n\nMakeSpace\n\n\nAX Semantics\n\n\nISL\n\n\n\n\n\n\n\n\nIndividual backers\n: Paul Hallett, \nPaul Whipp\n, Dylan Roy, Jannis Leidel, \nXavier Ordoquy\n, \nJohannes Spielmann\n, \nRob Spectre\n, \nChris Heisel\n, Marwan Alsabbagh, Haris Ali, Tuomas Toivonen.\n\n\n\n\nAdvocates\n\n\nThe following individuals made a significant financial contribution to the development of Django REST framework 3, for which I can only offer a huge, warm and sincere thank you!\n\n\nIndividual backers\n: Jure Cuhalev, Kevin Brolly, Ferenc Szalai, Dougal Matthews, Stefan Foulis, Carlos Hernando, Alen Mujezinovic, Ross Crawford-d'Heureuse, George Kappel, Alasdair Nicol, John Carr, Steve Winton, Trey, Manuel Miranda, David Horn, Vince Mi, Daniel Sears, Jamie Matthews, Ryan Currah, Marty Kemka, Scott Nixon, Moshin Elahi, Kevin Campbell, Jose Antonio Leiva Izquierdo, Kevin Stone, Andrew Godwin, Tijs Teulings, Roger Boardman, Xavier Antoviaque, Darian Moody, Lujeni, Jon Dugan, Wiley Kestner, Daniel C. Silverstein, Daniel Hahler, Subodh Nijsure, Philipp Weidenhiller, Yusuke Muraoka, Danny Roa, Reto Aebersold, Kyle Getrost, D\u00e9c\u00e9bal Hormuz, James Dacosta, Matt Long, Mauro Rocco, Tyrel Souza, Ryan Campbell, Ville Jyrkk\u00e4, Charalampos Papaloizou, Nikolai R\u00f8ed Kristiansen, Antoni Aloy L\u00f3pez, Celia Oakley, Micha\u0142 Krawczak, Ivan VenOsdel, Tim Watts, Martin Warne, Nicola Jordan, Ryan Kaskel.\n\n\nCorporate backers\n: Savannah Informatics, Prism Skylabs, Musical Operating Devices.\n\n\n\n\nSupporters\n\n\nThere were also almost 300 further individuals choosing to help fund the project at other levels or choosing to give anonymously. Again, thank you, thank you, thank you!",
            "title": "Kickstarter Announcement"
        },
        {
            "location": "/topics/kickstarter-announcement/#kickstarting-django-rest-framework-3",
            "text": "In order to continue to drive the project forward, I'm launching a Kickstarter campaign to help fund the development of a major new release - Django REST framework 3.",
            "title": "Kickstarting Django REST framework 3"
        },
        {
            "location": "/topics/kickstarter-announcement/#project-details",
            "text": "This new release will allow us to comprehensively address some of the shortcomings of the framework, and will aim to include the following:   Faster, simpler and easier-to-use serializers.  An alternative admin-style interface for the browsable API.  Search and filtering controls made accessible in the browsable API.  Alternative API pagination styles.  Documentation around API versioning.  Triage of outstanding tickets.  Improving the ongoing quality and maintainability of the project.   Full details are available now on the  project page .  If you're interested in helping make sustainable open source development a reality please  visit the Kickstarter page  and consider funding the project.  I can't wait to see where this takes us!  Many thanks to everyone for your support so far,  Tom Christie :)",
            "title": "Project details"
        },
        {
            "location": "/topics/kickstarter-announcement/#sponsors",
            "text": "We've now blazed way past all our goals, with a staggering \u00a330,000 (~$50,000), meaning I'll be in a position to work on the project significantly beyond what we'd originally planned for. I owe a huge debt of gratitude to all the wonderful companies and individuals who have been backing the project so generously, and making this possible.",
            "title": "Sponsors"
        },
        {
            "location": "/topics/kickstarter-announcement/#platinum-sponsors",
            "text": "Our platinum sponsors have each made a hugely substantial contribution to the future development of Django REST framework, and I simply can't thank them enough.   Eventbrite    Divio  Lulu  Potato  Wiredrive  Cyan  Runscope  Simple Energy  VOKAL Interactive  Purple Bit  KuwaitNET",
            "title": "Platinum sponsors"
        },
        {
            "location": "/topics/kickstarter-announcement/#gold-sponsors",
            "text": "Our gold sponsors include companies large and small. Many thanks for their significant funding of the project and their commitment to sustainable open-source development.   LaterPay  Schuberg Philis  ProReNata AB  SGA Websites  Sirono  Vinta Software Studio  Rapasso  Mirus Research  Hipo  Byte  Lightning Kite  Opbeat  Koordinates  Pulsecode Inc.  Singing Horse Studio Ltd.  Heroku  Rheinwerk Verlag  Security Compass  Django Software Foundation  Hipflask  Crate  Cryptico Corp  NextHub  Compile  WusaWork  Envision Linux",
            "title": "Gold sponsors"
        },
        {
            "location": "/topics/kickstarter-announcement/#silver-sponsors",
            "text": "The serious financial contribution that our silver sponsors have made is very much appreciated. I'd like to say a particular thank\u00a0you to individuals who have chosen to privately support the project at this level.   IMT Computer Services  Wildfish  Thermondo GmbH  Providenz  alwaysdata.com  Triggered Messaging  PushPull Technology Ltd  Transcode  Garfo  Shippo  Gizmag  Tivix  Safari  Bright Loop  ABA Systems  beefarm.ru  Vzzual.com  Infinite Code  Crossword Tracker  PkgFarm  Life. The Game.  Blimp  Pathwright  Fluxility  Teonite  TrackMaven  Phurba  Nephila  Aditium  OpenEye Scientific Software  Holvi  Cantemo  MakeSpace  AX Semantics  ISL    Individual backers : Paul Hallett,  Paul Whipp , Dylan Roy, Jannis Leidel,  Xavier Ordoquy ,  Johannes Spielmann ,  Rob Spectre ,  Chris Heisel , Marwan Alsabbagh, Haris Ali, Tuomas Toivonen.",
            "title": "Silver sponsors"
        },
        {
            "location": "/topics/kickstarter-announcement/#advocates",
            "text": "The following individuals made a significant financial contribution to the development of Django REST framework 3, for which I can only offer a huge, warm and sincere thank you!  Individual backers : Jure Cuhalev, Kevin Brolly, Ferenc Szalai, Dougal Matthews, Stefan Foulis, Carlos Hernando, Alen Mujezinovic, Ross Crawford-d'Heureuse, George Kappel, Alasdair Nicol, John Carr, Steve Winton, Trey, Manuel Miranda, David Horn, Vince Mi, Daniel Sears, Jamie Matthews, Ryan Currah, Marty Kemka, Scott Nixon, Moshin Elahi, Kevin Campbell, Jose Antonio Leiva Izquierdo, Kevin Stone, Andrew Godwin, Tijs Teulings, Roger Boardman, Xavier Antoviaque, Darian Moody, Lujeni, Jon Dugan, Wiley Kestner, Daniel C. Silverstein, Daniel Hahler, Subodh Nijsure, Philipp Weidenhiller, Yusuke Muraoka, Danny Roa, Reto Aebersold, Kyle Getrost, D\u00e9c\u00e9bal Hormuz, James Dacosta, Matt Long, Mauro Rocco, Tyrel Souza, Ryan Campbell, Ville Jyrkk\u00e4, Charalampos Papaloizou, Nikolai R\u00f8ed Kristiansen, Antoni Aloy L\u00f3pez, Celia Oakley, Micha\u0142 Krawczak, Ivan VenOsdel, Tim Watts, Martin Warne, Nicola Jordan, Ryan Kaskel.  Corporate backers : Savannah Informatics, Prism Skylabs, Musical Operating Devices.",
            "title": "Advocates"
        },
        {
            "location": "/topics/kickstarter-announcement/#supporters",
            "text": "There were also almost 300 further individuals choosing to help fund the project at other levels or choosing to give anonymously. Again, thank you, thank you, thank you!",
            "title": "Supporters"
        },
        {
            "location": "/topics/mozilla-grant/",
            "text": "Mozilla Grant\n\n\nWe have recently been \nawarded a Mozilla grant\n, in order to fund the next major releases of REST framework. This work will focus on seamless client-side integration by introducing supporting client libraries that are able to dynamically interact with REST framework APIs. The framework will provide for either hypermedia or schema endpoints, which will expose the available interface for the client libraries to interact with.\n\n\nAdditionally, we will be building on the realtime support that Django Channels provides, supporting and documenting how to build realtime APIs with REST framework. Again, this will include supporting work in the associated client libraries, making it easier to build richly interactive applications.\n\n\nThe \nCore API\n project will provide the foundations for our client library support, and will allow us to support interaction using a wide range of schemas and hypermedia formats. It's worth noting that these client libraries won't be tightly coupled to solely REST framework APIs either, and will be able to interact with \nany\n API that exposes a supported schema or hypermedia format.\n\n\nSpecifically, the work includes:\n\n\nClient libraries\n\n\nThis work will include built-in schema and hypermedia support, allowing dynamic client libraries to interact with the API. I'll also be releasing both Python and Javascript client libraries, plus a command-line client, a new tutorial section, and further documentation.\n\n\n\n\nClient library support in REST framework.\n\n\nSchema & hypermedia support for REST framework APIs.\n\n\nA test client, allowing you to write tests that emulate a client library interacting with your API.\n\n\nNew tutorial sections on using client libraries to interact with REST framework APIs.\n\n\nPython client library.\n\n\nJavaScript client library.\n\n\nCommand line client.\n\n\n\n\nRealtime APIs\n\n\nThe next goal is to build on the realtime support offered by Django Channels, adding support & documentation for building realtime API endpoints.\n\n\n\n\nSupport for API subscription endpoints, using REST framework and Django Channels.\n\n\nNew tutorial section on building realtime API endpoints with REST framework.\n\n\nRealtime support in the Python & Javascript client libraries.\n\n\n\n\nAccountability\n\n\nIn order to ensure that I can be fully focused on trying to secure a sustainable\n& well-funded open source business I will be leaving my current role at \nDabApps\n\nat the end of May 2016.\n\n\nI have formed a UK limited company, \nEncode\n, which will\nact as the business entity behind REST framework. I will be issuing monthly reports\nfrom Encode on progress both towards the Mozilla grant, and for development time\nfunded via the \nREST framework paid plans\n.\n\n\n\n\n\n\n\n\n    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }\n    /<em> Add your own MailChimp form style overrides in your site stylesheet or in this style block.\n       We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. </em>/\n\n\n\n\n\n\n    \n\n    \nStay up to date, with our monthly progress reports...\n\n\n\n    \nEmail Address \n\n    \n\n\n\n    \n\n        \n\n        \n\n    \n    \n\n    \n\n    \n\n    \n\n\n\n\n\n\n(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true);",
            "title": "Mozilla Grant"
        },
        {
            "location": "/topics/mozilla-grant/#mozilla-grant",
            "text": "We have recently been  awarded a Mozilla grant , in order to fund the next major releases of REST framework. This work will focus on seamless client-side integration by introducing supporting client libraries that are able to dynamically interact with REST framework APIs. The framework will provide for either hypermedia or schema endpoints, which will expose the available interface for the client libraries to interact with.  Additionally, we will be building on the realtime support that Django Channels provides, supporting and documenting how to build realtime APIs with REST framework. Again, this will include supporting work in the associated client libraries, making it easier to build richly interactive applications.  The  Core API  project will provide the foundations for our client library support, and will allow us to support interaction using a wide range of schemas and hypermedia formats. It's worth noting that these client libraries won't be tightly coupled to solely REST framework APIs either, and will be able to interact with  any  API that exposes a supported schema or hypermedia format.  Specifically, the work includes:",
            "title": "Mozilla Grant"
        },
        {
            "location": "/topics/mozilla-grant/#client-libraries",
            "text": "This work will include built-in schema and hypermedia support, allowing dynamic client libraries to interact with the API. I'll also be releasing both Python and Javascript client libraries, plus a command-line client, a new tutorial section, and further documentation.   Client library support in REST framework.  Schema & hypermedia support for REST framework APIs.  A test client, allowing you to write tests that emulate a client library interacting with your API.  New tutorial sections on using client libraries to interact with REST framework APIs.  Python client library.  JavaScript client library.  Command line client.",
            "title": "Client libraries"
        },
        {
            "location": "/topics/mozilla-grant/#realtime-apis",
            "text": "The next goal is to build on the realtime support offered by Django Channels, adding support & documentation for building realtime API endpoints.   Support for API subscription endpoints, using REST framework and Django Channels.  New tutorial section on building realtime API endpoints with REST framework.  Realtime support in the Python & Javascript client libraries.",
            "title": "Realtime APIs"
        },
        {
            "location": "/topics/mozilla-grant/#accountability",
            "text": "In order to ensure that I can be fully focused on trying to secure a sustainable\n& well-funded open source business I will be leaving my current role at  DabApps \nat the end of May 2016.  I have formed a UK limited company,  Encode , which will\nact as the business entity behind REST framework. I will be issuing monthly reports\nfrom Encode on progress both towards the Mozilla grant, and for development time\nfunded via the  REST framework paid plans .    \n    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }\n    /<em> Add your own MailChimp form style overrides in your site stylesheet or in this style block.\n       We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. </em>/",
            "title": "Accountability"
        },
        {
            "location": "/topics/funding/",
            "text": "// Imperfect, but easier to fit in with the existing docs build.\n// Hyperlinks should point directly to the \"fund.\" subdomain, but this'll\n// handle the nav bar links without requiring any docs build changes for the moment.\nif (window.location.hostname == \"www.django-rest-framework.org\") {\n    window.location.replace(\"https://fund.django-rest-framework.org/topics/funding/\");\n}\n\n\n\n\n\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n.chart {\n    background-color: #e3e3e3;\n    background: -webkit-linear-gradient(top, #fff 0, #e3e3e3 100%);\n    border: 1px solid #E6E6E6;\n    border-radius: 5px;\n    box-shadow: 0px 0px 2px 0px rgba(181, 181, 181, 0.3);\n    padding: 40px 0px 5px;\n    position: relative;\n    text-align: center;\n    width: 97%;\n    min-height: 255px;\n    position: relative;\n    top: 37px;\n    margin-bottom: 20px\n}\n.quantity {\n    text-align: center\n}\n.dollar {\n    font-size: 19px;\n    position: relative;\n    top: -18px;\n}\n.price {\n    font-size: 49px;\n}\n.period {\n    font-size: 17px;\n    position: relative;\n    top: -8px;\n    margin-left: 4px;\n}\n.plan-name {\n    text-align: center;\n    font-size: 20px;\n    font-weight: 400;\n    color: #777;\n    border-bottom: 1px solid #d5d5d5;\n    padding-bottom: 15px;\n    width: 90%;\n    margin: 0 auto;\n    margin-top: 8px;\n}\n.specs {\n    margin-top: 20px;\n    min-height: 130px;\n}\n.specs.freelancer {\n    min-height: 0px;\n}\n.spec {\n    font-size: 15px;\n    color: #474747;\n    text-align: center;\n    font-weight: 300;\n    margin-bottom: 13px;\n}\n.variable {\n    color: #1FBEE7;\n    font-weight: 400;\n}\nform.signup {\n    margin-top: 35px\n}\n.clear-promo {\n    padding-top: 30px\n}\n#main-content h1:first-of-type {\n    margin: 0 0 50px;\n    font-size: 60px;\n    font-weight: 200;\n    text-align: center\n}\n#main-content {\n    padding-top: 10px; line-height: 23px\n}\n#main-content li {\n    line-height: 23px\n}\n\n\n\n\nFunding\n\n\n\n\nAs a direct result of \na successful Mozilla grant application\n, I will be leaving my current role at \nDabApps\n, and attempting to secure a sustainable business model for REST framework development. I need your help in order to make this work.\n\n\n\u2014 Tom Christie\n\n\n\n\nIf you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan.\n\n\nWe believe that collaboratively funded software can offer outstanding returns on investment, by encouraging our users to collectively share the cost of development.\n\n\nSigning up for a paid plan will:\n\n\n\n\nDirectly contribute to faster releases, more features, and higher quality software.\n\n\nAllow more time to be invested in documentation, issue triage, and community support.\n\n\nSafeguard the future development of REST framework.\n\n\n\n\nREST framework continues to be open-source and permissively licensed, but we firmly believe it is in the commercial best-interest for users of the project to invest in its ongoing development.\n\n\n\n\nMaking the business case\n\n\nOur \nsuccessful Kickstarter campaign\n demonstrates the impressive cost-reward ratio of shared funding of open-source software.\n\n\nWith \ntypical corporate fundings of just \u00a3100-\u00a31000 per organization\n we successfully delivered:\n\n\n\n\nThe comprehensive serializer redesign, and \nversion 3.0 release\n.\n\n\nOngoing triage and community support, \nclosing over 1600 tickets\n.\n\n\nSubstantial improvements to the Browsable API.\n\n\nThe admin interface.\n\n\nA new pagination API including offset/limit and cursor pagination implementations, plus on-page controls.\n\n\nA versioning API, including URL-based and header-based versioning schemes.\n\n\nSupport for customizable exception handling.\n\n\nSupport for Django's PostgreSQL HStoreField, ArrayField and JSONField.\n\n\nTemplated HTML form support, including HTML forms with nested list and objects.\n\n\nInternationalization support for API responses, currently with 27 languages.\n\n\nThe metadata APIs for handling \nOPTIONS\n requests and schema endpoints.\n\n\nNumerous minor improvements and better quality throughout the codebase.\n\n\n\n\nThis incredible level of return on investment is \nonly possible through collaboratively funded models\n, which is why we believe that supporting our paid plans is in everyone's best interest.\n\n\nSign up for a paid plan today, and help ensure that REST framework becomes a sustainable, full-time funded project.\n\n\n\n\nFreelancer plan\n\n\nThis subscription is recommended for freelancers and other individuals with an interest in seeing REST framework continue to\u00a0improve.\n\n\nIf you are using REST framework as an full-time employee, consider recommending that your company takes out a \ncorporate\u00a0plan\n.\n\n\n\n                \n\n                    \n\n                        \n\n                            \n{{ symbol }}\n\n                            \n{{ rates.personal1 }}\n\n                            \n/month{% if vat %} +VAT{% endif %}\n\n                        \n\n                        \nFreelancer\n\n                        \n\n                            \n\n                                Support ongoing development\n                            \n\n                            \n\n                                Credited on the site\n                            \n\n                        \n\n                        \n\n  \n\n  \n\n\n\n                    \n\n                \n\n            \n\n\n\n\n\n\nBilling is monthly and you can cancel at any time.\n\n\n\n\nCorporate plans\n\n\nThese subscriptions are recommended for companies and organizations using REST framework either publicly or privately.\n\n\nIn exchange for funding you'll also receive advertising space on our site, allowing you to \npromote your company or product to many tens of thousands of developers worldwide\n.\n\n\nOur professional and premium plans also include \npriority support\n. At any time your engineers can escalate an issue or discussion group thread, and we'll ensure it gets a guaranteed response within the next working day.\n\n\n\n                \n\n                    \n\n                        \n\n                            \n{{ symbol }}\n\n                            \n{{ rates.corporate1 }}\n\n                            \n/month{% if vat %} +VAT{% endif %}\n\n                        \n\n                        \nBasic\n\n                        \n\n                            \n\n                                Support ongoing development\n                            \n\n                            \n\n                                \nFunding page\n ad placement\n                            \n\n                        \n\n                        \n\n  \n\n  \n\n\n\n                    \n\n                \n\n                \n\n                    \n\n                        \n\n                            \n{{ symbol }}\n\n                            \n{{ rates.corporate2 }}\n\n                            \n/month{% if vat %} +VAT{% endif %}\n\n                        \n\n                        \nProfessional\n\n                        \n\n                            \n\n                                Support ongoing development\n                            \n\n                            \n\n                                \nSidebar\n ad placement\n                            \n\n                            \n\n                                \nPriority support\n for your engineers\n                            \n\n                        \n\n                        \n\n  \n\n  \n\n\n\n                    \n\n                \n\n                \n\n                    \n\n                        \n\n                            \n{{ symbol }}\n\n                            \n{{ rates.corporate3 }}\n\n                            \n/month{% if vat %} +VAT{% endif %}\n\n                        \n\n                        \nPremium\n\n                        \n\n                        \n\n                            Support ongoing development\n                        \n\n                            \n\n                                \nHomepage\n ad placement\n                            \n\n                            \n\n                                \nSidebar\n ad placement\n                            \n\n                            \n\n                                \nPriority support\n for your engineers\n                            \n\n                        \n\n                        \n\n  \n\n  \n\n\n\n                    \n\n                \n\n            \n\n\n\n\n\n\nBilling is monthly and you can cancel at any time.\n\n\nOnce you've signed up I'll contact you via email and arrange your ad placements on the site.\n\n\nFor further enquires please contact \nfunding@django-rest-framework.org\n.\n\n\n\n\nAccountability\n\n\nIn order to ensure that I can be fully focused on trying to secure a sustainable\n& well-funded open source business I will be leaving my current role at \nDabApps\n\nat the end of May 2016.\n\n\nI have formed a UK limited company, \nEncode\n, which will\nact as the business entity behind REST framework. I will be issuing monthly reports\nfrom Encode on progress both towards the \nMozilla grant\n, and for development time\nfunded via the REST framework paid plans.\n\n\n\n\n\n\n\n\n    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }\n    /<em> Add your own MailChimp form style overrides in your site stylesheet or in this style block.\n       We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. </em>/\n\n\n\n\n\n\n    \n\n    \nStay up to date, with our monthly progress reports...\n\n\n\n    \nEmail Address \n\n    \n\n\n\n    \n\n        \n\n        \n\n    \n    \n\n    \n\n    \n\n    \n\n\n\n\n\n\n(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true);\n\n\n\n\n\n\nOur sponsors",
            "title": "Funding"
        },
        {
            "location": "/topics/funding/#funding",
            "text": "As a direct result of  a successful Mozilla grant application , I will be leaving my current role at  DabApps , and attempting to secure a sustainable business model for REST framework development. I need your help in order to make this work.  \u2014 Tom Christie   If you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan.  We believe that collaboratively funded software can offer outstanding returns on investment, by encouraging our users to collectively share the cost of development.  Signing up for a paid plan will:   Directly contribute to faster releases, more features, and higher quality software.  Allow more time to be invested in documentation, issue triage, and community support.  Safeguard the future development of REST framework.   REST framework continues to be open-source and permissively licensed, but we firmly believe it is in the commercial best-interest for users of the project to invest in its ongoing development.",
            "title": "Funding"
        },
        {
            "location": "/topics/funding/#making-the-business-case",
            "text": "Our  successful Kickstarter campaign  demonstrates the impressive cost-reward ratio of shared funding of open-source software.  With  typical corporate fundings of just \u00a3100-\u00a31000 per organization  we successfully delivered:   The comprehensive serializer redesign, and  version 3.0 release .  Ongoing triage and community support,  closing over 1600 tickets .  Substantial improvements to the Browsable API.  The admin interface.  A new pagination API including offset/limit and cursor pagination implementations, plus on-page controls.  A versioning API, including URL-based and header-based versioning schemes.  Support for customizable exception handling.  Support for Django's PostgreSQL HStoreField, ArrayField and JSONField.  Templated HTML form support, including HTML forms with nested list and objects.  Internationalization support for API responses, currently with 27 languages.  The metadata APIs for handling  OPTIONS  requests and schema endpoints.  Numerous minor improvements and better quality throughout the codebase.   This incredible level of return on investment is  only possible through collaboratively funded models , which is why we believe that supporting our paid plans is in everyone's best interest.  Sign up for a paid plan today, and help ensure that REST framework becomes a sustainable, full-time funded project.",
            "title": "Making the business case"
        },
        {
            "location": "/topics/funding/#freelancer-plan",
            "text": "This subscription is recommended for freelancers and other individuals with an interest in seeing REST framework continue to\u00a0improve.  If you are using REST framework as an full-time employee, consider recommending that your company takes out a  corporate\u00a0plan .  \n                 \n                     \n                         \n                             {{ symbol }} \n                             {{ rates.personal1 }} \n                             /month{% if vat %} +VAT{% endif %} \n                         \n                         Freelancer \n                         \n                             \n                                Support ongoing development\n                             \n                             \n                                Credited on the site\n                             \n                         \n                         \n   \n    \n                     \n                 \n               Billing is monthly and you can cancel at any time.",
            "title": "Freelancer plan"
        },
        {
            "location": "/topics/funding/#corporate-plans",
            "text": "These subscriptions are recommended for companies and organizations using REST framework either publicly or privately.  In exchange for funding you'll also receive advertising space on our site, allowing you to  promote your company or product to many tens of thousands of developers worldwide .  Our professional and premium plans also include  priority support . At any time your engineers can escalate an issue or discussion group thread, and we'll ensure it gets a guaranteed response within the next working day.  \n                 \n                     \n                         \n                             {{ symbol }} \n                             {{ rates.corporate1 }} \n                             /month{% if vat %} +VAT{% endif %} \n                         \n                         Basic \n                         \n                             \n                                Support ongoing development\n                             \n                             \n                                 Funding page  ad placement\n                             \n                         \n                         \n   \n    \n                     \n                 \n                 \n                     \n                         \n                             {{ symbol }} \n                             {{ rates.corporate2 }} \n                             /month{% if vat %} +VAT{% endif %} \n                         \n                         Professional \n                         \n                             \n                                Support ongoing development\n                             \n                             \n                                 Sidebar  ad placement\n                             \n                             \n                                 Priority support  for your engineers\n                             \n                         \n                         \n   \n    \n                     \n                 \n                 \n                     \n                         \n                             {{ symbol }} \n                             {{ rates.corporate3 }} \n                             /month{% if vat %} +VAT{% endif %} \n                         \n                         Premium \n                         \n                         \n                            Support ongoing development\n                         \n                             \n                                 Homepage  ad placement\n                             \n                             \n                                 Sidebar  ad placement\n                             \n                             \n                                 Priority support  for your engineers\n                             \n                         \n                         \n   \n    \n                     \n                 \n               Billing is monthly and you can cancel at any time.  Once you've signed up I'll contact you via email and arrange your ad placements on the site.  For further enquires please contact  funding@django-rest-framework.org .",
            "title": "Corporate plans"
        },
        {
            "location": "/topics/funding/#accountability",
            "text": "In order to ensure that I can be fully focused on trying to secure a sustainable\n& well-funded open source business I will be leaving my current role at  DabApps \nat the end of May 2016.  I have formed a UK limited company,  Encode , which will\nact as the business entity behind REST framework. I will be issuing monthly reports\nfrom Encode on progress both towards the  Mozilla grant , and for development time\nfunded via the REST framework paid plans.    \n    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }\n    /<em> Add your own MailChimp form style overrides in your site stylesheet or in this style block.\n       We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. </em>/",
            "title": "Accountability"
        },
        {
            "location": "/topics/funding/#our-sponsors",
            "text": "",
            "title": "Our sponsors"
        },
        {
            "location": "/topics/release-notes/",
            "text": "Release Notes\n\n\n\n\nRelease Early, Release Often\n\n\n\u2014 Eric S. Raymond, \nThe Cathedral and the Bazaar\n.\n\n\n\n\nVersioning\n\n\nMinor version numbers (0.0.x) are used for changes that are API compatible.  You should be able to upgrade between minor point releases without any other code changes.\n\n\nMedium version numbers (0.x.0) may include API changes, in line with the \ndeprecation policy\n.  You should read the release notes carefully before upgrading between medium point releases.\n\n\nMajor version numbers (x.0.0) are reserved for substantial project milestones.\n\n\nDeprecation policy\n\n\nREST framework releases follow a formal deprecation policy, which is in line with \nDjango's deprecation policy\n.\n\n\nThe timeline for deprecation of a feature present in version 1.0 would work as follows:\n\n\n\n\n\n\nVersion 1.1 would remain \nfully backwards compatible\n with 1.0, but would raise \nPendingDeprecationWarning\n warnings if you use the feature that are due to be deprecated.  These warnings are \nsilent by default\n, but can be explicitly enabled when you're ready to start migrating any required changes.  For example if you start running your tests using \npython -Wd manage.py test\n, you'll be warned of any API changes you need to make.\n\n\n\n\n\n\nVersion 1.2 would escalate these warnings to \nDeprecationWarning\n, which is loud by default.\n\n\n\n\n\n\nVersion 1.3 would remove the deprecated bits of API entirely.\n\n\n\n\n\n\nNote that in line with Django's policy, any parts of the framework not mentioned in the documentation should generally be considered private API, and may be subject to change.\n\n\nUpgrading\n\n\nTo upgrade Django REST framework to the latest version, use pip:\n\n\npip install -U djangorestframework\n\n\n\nYou can determine your currently installed version using \npip freeze\n:\n\n\npip freeze | grep djangorestframework\n\n\n\n\n\n3.5.x series\n\n\n3.5.3\n\n\nDate\n: \n7th November 2016\n\n\n\n\nDon't raise incorrect FilterSet deprecation warnings. (\n#4660\n, \n#4643\n, \n#4644\n)\n\n\nSchema generation should not raise 404 when a view permission class does. (\n#4645\n, \n#4646\n)\n\n\nAdd \nautofocus\n support for input controls. (\n#4650\n)\n\n\n\n\n3.5.2\n\n\nDate\n: \n1st November 2016\n\n\n\n\nRestore exception tracebacks in Python 2.7. (\n#4631\n, \n#4638\n)\n\n\nProperly display dicts in the admin console. (\n#4532\n, \n#4636\n)\n\n\nFix is_simple_callable with variable args, kwargs. (\n#4622\n, \n#4602\n)\n\n\nSupport 'on'/'off' literals with BooleanField. (\n#4640\n, \n#4624\n)\n\n\nEnable cursor pagination of value querysets. (\n#4569\n)\n\n\nFix support of get_full_details() for Throttled exceptions. (\n#4627\n)\n\n\nFix FilterSet proxy. (\n#4620\n)\n\n\nMake serializer fields import explicit. (\n#4628\n)\n\n\nDrop redundant requests adapter. (\n#4639\n)\n\n\n\n\n3.5.1\n\n\nDate\n: \n21st October 2016\n\n\n\n\nMake \nrest_framework/compat.py\n imports. (\n#4612\n, \n#4608\n, \n#4601\n)\n\n\nFix bug in schema base path generation. (\n#4611\n, \n#4605\n)\n\n\nFix broken case of ListSerializer with single item. (\n#4609\n, \n#4606\n)\n\n\nRemove bare \nraise\n for Python 3.5 compat. (\n#4600\n)\n\n\n\n\n3.5.0\n\n\nDate\n: \n20th October 2016\n\n\n\n\n3.4.x series\n\n\n3.4.7\n\n\nDate\n: \n21st September 2016\n\n\n\n\nFallback behavior for request parsing when request.POST already accessed. (\n#3951\n, \n#4500\n)\n\n\nFix regression of \nRegexField\n. (\n#4489\n, \n#4490\n, \n#2617\n)\n\n\nMissing comma in \nadmin.html\n causing CSRF error. (\n#4472\n, \n#4473\n)\n\n\nFix response rendering with empty context. (\n#4495\n)\n\n\nFix indentation regression in API listing. (\n#4493\n)\n\n\nFixed an issue where the incorrect value is set to \nResolverMatch.func_name\n of api_view decorated view. (\n#4465\n, \n#4462\n)\n\n\nFix \nAPIClient.get()\n when path contains unicode arguments (\n#4458\n)\n\n\n\n\n3.4.6\n\n\nDate\n: \n23rd August 2016\n\n\n\n\nFix malformed Javascript in browsable API. (\n#4435\n)\n\n\nSkip HiddenField from Schema fields. (\n#4425\n, \n#4429\n)\n\n\nImprove Create to show the original exception traceback. (\n#3508\n)\n\n\nFix \nAdminRenderer\n display of PK only related fields. (\n#4419\n, \n#4423\n)\n\n\n\n\n3.4.5\n\n\nDate\n: \n19th August 2016\n\n\n\n\nImprove debug error handling. (\n#4416\n, \n#4409\n)\n\n\nAllow custom CSRF_HEADER_NAME setting. (\n#4415\n, \n#4410\n)\n\n\nInclude .action attribute on viewsets when generating schemas. (\n#4408\n, \n#4398\n)\n\n\nDo not include request.FILES items in request.POST. (\n#4407\n)\n\n\nFix rendering of checkbox multiple. (\n#4403\n)\n\n\nFix docstring of Field.get_default. (\n#4404\n)\n\n\nReplace utf8 character with its ascii counterpart in README. (\n#4412\n)\n\n\n\n\n3.4.4\n\n\nDate\n: \n12th August 2016\n\n\n\n\nEnsure views are fully initialized when generating schemas. (\n#4373\n, \n#4382\n, \n#4383\n, \n#4279\n, \n#4278\n)\n\n\nAdd form field descriptions to schemas. (\n#4387\n)\n\n\nFix category generation for schema endpoints. (\n#4391\n, \n#4394\n, \n#4390\n, \n#4386\n, \n#4376\n, \n#4329\n)\n\n\nDon't strip empty query params when paginating. (\n#4392\n, \n#4393\n, \n#4260\n)\n\n\nDo not re-run query for empty results with LimitOffsetPagination. (\n#4201\n, \n#4388\n)\n\n\nStricter type validation for CharField. (\n#4380\n, \n#3394\n)\n\n\nRelatedField.choices should preserve non-string values. (\n#4111\n, \n#4379\n, \n#3365\n)\n\n\nTest case for rendering checkboxes in vertical form style. (\n#4378\n, \n#3868\n, \n#3868\n)\n\n\nShow error traceback HTML in browsable API (\n#4042\n, \n#4172\n)\n\n\nFix handling of ALLOWED_VERSIONS and no DEFAULT_VERSION. \n#4370\n\n\nAllow \nmax_digits=None\n on DecimalField. (\n#4377\n, \n#4372\n)\n\n\nLimit queryset when rendering relational choices. (\n#4375\n, \n#4122\n, \n#3329\n, \n#3330\n, \n#3877\n)\n\n\nResolve form display with ChoiceField, MultipleChoiceField and non-string choices. (\n#4374\n, \n#4119\n, \n#4121\n, \n#4137\n, \n#4120\n)\n\n\nFix call to TemplateHTMLRenderer.resolve_context() fallback method. (\n#4371\n)\n\n\n\n\n3.4.3\n\n\nDate\n: \n5th August 2016\n\n\n\n\nInclude fallaback for users of older TemplateHTMLRenderer internal API. (\n#4361\n)\n\n\n\n\n3.4.2\n\n\nDate\n: \n5th August 2016\n\n\n\n\nInclude kwargs passed to 'as_view' when generating schemas. (\n#4359\n, \n#4330\n, \n#4331\n)\n\n\nAccess \nrequest.user.is_authenticated\n as property not method, under Django 1.10+ (\n#4358\n, \n#4354\n)\n\n\nFilter HEAD out from schemas. (\n#4357\n)\n\n\nextra_kwargs takes precedence over uniqueness kwargs. (\n#4198\n, \n#4199\n, \n#4349\n)\n\n\nCorrect descriptions when tabs are used in code indentation. (\n#4345\n, \n#4347\n)*\n\n\nChange template context generation in TemplateHTMLRenderer. (\n#4236\n)\n\n\nSerializer defaults should not be included in partial updates. (\n#4346\n, \n#3565\n)\n\n\nConsistent behavior & descriptive error from FileUploadParser when filename not included. (\n#4340\n, \n#3610\n, \n#4292\n, \n#4296\n)\n\n\nDecimalField quantizes incoming digitals. (\n#4339\n, \n#4318\n)\n\n\nHandle non-string input for IP fields. (\n#4335\n, \n#4336\n, \n#4338\n)\n\n\nFix leading slash handling when Schema generation includes a root URL. (\n#4332\n)\n\n\nTest cases for DictField with allow_null options. (\n#4348\n)\n\n\nUpdate tests from Django 1.10 beta to Django 1.10. (\n#4344\n)\n\n\n\n\n3.4.1\n\n\nDate\n: \n28th July 2016\n\n\n\n\nAdded \nroot_renderers\n argument to \nDefaultRouter\n. (\n#4323\n, \n#4268\n)\n\n\nAdded \nurl\n and \nschema_url\n arguments. (\n#4321\n, \n#4308\n, \n#4305\n)\n\n\nUnique together checks should apply to read-only fields which have a default. (\n#4316\n, \n#4294\n)\n\n\nSet view.format_kwarg in schema generator. (\n#4293\n, \n#4315\n)\n\n\nFix schema generator for views with \npagination_class = None\n. (\n#4314\n, \n#4289\n)\n\n\nFix schema generator for views with no \nget_serializer_class\n. (\n#4265\n, \n#4285\n)\n\n\nFixes for media type parameters in \nAccept\n and \nContent-Type\n headers. (\n#4287\n, \n#4313\n, \n#4281\n)\n\n\nUse verbose_name instead of object_name in error messages. (\n#4299\n)\n\n\nMinor version update to Twitter Bootstrap. (\n#4307\n)\n\n\nSearchFilter raises error when using with related field. (\n#4302\n, \n#4303\n, \n#4298\n)\n\n\nAdding support for RFC 4918 status codes. (\n#4291\n)\n\n\nAdd LICENSE.md to the built wheel. (\n#4270\n)\n\n\nSerializing \"complex\" field returns None instead of the value since 3.4 (\n#4272\n, \n#4273\n, \n#4288\n)\n\n\n\n\n3.4.0\n\n\nDate\n: \n14th July 2016\n\n\n\n\nDon't strip microseconds in JSON output. (\n#4256\n)\n\n\nTwo slightly different iso 8601 datetime serialization. (\n#4255\n)\n\n\nResolve incorrect inclusion of media type parameters. (\n#4254\n)\n\n\nResponse Content-Type potentially malformed. (\n#4253\n)\n\n\nFix setup.py error on some platforms. (\n#4246\n)\n\n\nMove alternate formats in coreapi into separate packages. (\n#4244\n)\n\n\nAdd localize keyword argument to \nDecimalField\n. (\n#4233\n)\n\n\nFix issues with routers for custom list-route and detail-routes. (\n#4229\n)\n\n\nNamespace versioning with nested namespaces. (\n#4219\n)\n\n\nRobust uniqueness checks. (\n#4217\n)\n\n\nMinor refactoring of \nmust_call_distinct\n. (\n#4215\n)\n\n\nOverridable offset cutoff in CursorPagination. (\n#4212\n)\n\n\nPass through strings as-in with date/time fields. (\n#4196\n)\n\n\nAdd test confirming that required=False is valid on a relational field. (\n#4195\n)\n\n\nIn LimitOffsetPagination \nlimit=0\n should revert to default limit. (\n#4194\n)\n\n\nExclude read_only=True fields from unique_together validation & add docs. (\n#4192\n)\n\n\nHandle bytestrings in JSON. (\n#4191\n)\n\n\nJSONField(binary=True) represents using binary strings, which JSONRenderer does not support. (\n#4187\n)\n\n\nJSONField(binary=True) represents using binary strings, which JSONRenderer does not support. (\n#4185\n)\n\n\nMore robust form rendering in the browsable API. (\n#4181\n)\n\n\nEmpty cases of \n.validated_data\n and \n.errors\n as lists not dicts for ListSerializer. (\n#4180\n)\n\n\nSchemas & client libraries. (\n#4179\n)\n\n\nRemoved \nAUTH_USER_MODEL\n compat property. (\n#4176\n)\n\n\nClean up existing deprecation warnings. (\n#4166\n)\n\n\nDjango 1.10 support. (\n#4158\n)\n\n\nUpdated jQuery version to 1.12.4. (\n#4157\n)\n\n\nMore robust default behavior on OrderingFilter. (\n#4156\n)\n\n\ndescription.py codes and tests removal. (\n#4153\n)\n\n\nWrap guardian.VERSION in tuple. (\n#4149\n)\n\n\nRefine validator for fields with \n kwargs. (\n#4146\n)\n\n\nFix None values representation in childs of ListField, DictField. (\n#4118\n)\n\n\nResolve TimeField representation for midnight value. (\n#4107\n)\n\n\nSet proper status code in AdminRenderer for the redirection after POST/DELETE requests. (\n#4106\n)\n\n\nTimeField render returns None instead of 00:00:00. (\n#4105\n)\n\n\nFix incorrectly named zh-hans and zh-hant locale path. (\n#4103\n)\n\n\nPrevent raising exception when limit is 0. (\n#4098\n)\n\n\nTokenAuthentication: Allow custom keyword in the header. (\n#4097\n)\n\n\nHandle incorrectly padded HTTP basic auth header. (\n#4090\n)\n\n\nLimitOffset pagination crashes Browseable API when limit=0. (\n#4079\n)\n\n\nFixed DecimalField arbitrary precision support. (\n#4075\n)\n\n\nAdded support for custom CSRF cookie names. (\n#4049\n)\n\n\nFix regression introduced by #4035. (\n#4041\n)\n\n\nNo auth view failing permission should raise 403. (\n#4040\n)\n\n\nFix string_types / text_types confusion. (\n#4025\n)\n\n\nDo not list related field choices in OPTIONS requests. (\n#4021\n)\n\n\nFix typo. (\n#4008\n)\n\n\nReorder initializing the view. (\n#4006\n)\n\n\nType error in DjangoObjectPermissionsFilter on Python 3.4. (\n#4005\n)\n\n\nFixed use of deprecated Query.aggregates. (\n#4003\n)\n\n\nFix blank lines around docstrings. (\n#4002\n)\n\n\nFixed admin pagination when limit is 0. (\n#3990\n)\n\n\nOrderingFilter adjustments. (\n#3983\n)\n\n\nNon-required serializer related fields. (\n#3976\n)\n\n\nUsing safer calling way of \"@api_view\" in tutorial. (\n#3971\n)\n\n\nListSerializer doesn't handle unique_together constraints. (\n#3970\n)\n\n\nAdd missing migration file. (\n#3968\n)\n\n\nOrderingFilter\n should call \nget_serializer_class()\n to determine default fields. (\n#3964\n)\n\n\nRemove old django checks from tests and compat. (\n#3953\n)\n\n\nSupport callable as the value of \ninitial\n for any \nserializer.Field\n. (\n#3943\n)\n\n\nPrevented unnecessary distinct() call in SearchFilter. (\n#3938\n)\n\n\nFix None UUID ForeignKey serialization. (\n#3936\n)\n\n\nDrop EOL Django 1.7. (\n#3933\n)\n\n\nAdd missing space in serializer error message. (\n#3926\n)\n\n\nFixed _force_text_recursive typo. (\n#3908\n)\n\n\nAttempt to address Django 2.0 deprecate warnings related to \nfield.rel\n. (\n#3906\n)\n\n\nFix parsing multipart data using a nested serializer with list. (\n#3820\n)\n\n\nResolving APIs URL to different namespaces. (\n#3816\n)\n\n\nDo not HTML-escape \nhelp_text\n in Browsable API forms. (\n#3812\n)\n\n\nOPTIONS fetches and shows all possible foreign keys in choices field. (\n#3751\n)\n\n\nDjango 1.9 deprecation warnings (\n#3729\n)\n\n\nTest case for #3598 (\n#3710\n)\n\n\nAdding support for multiple values for search filter. (\n#3541\n)\n\n\nUse get_serializer_class in ordering filter. (\n#3487\n)\n\n\nSerializers with many=True should return empty list rather than empty dict. (\n#3476\n)\n\n\nLimitOffsetPagination limit=0 fix. (\n#3444\n)\n\n\nEnable Validators to defer string evaluation and handle new string format. (\n#3438\n)\n\n\nUnique validator is executed and breaks if field is invalid. (\n#3381\n)\n\n\nDo not ignore overridden View.get_view_name() in breadcrumbs. (\n#3273\n)\n\n\nRetry form rendering when rendering with serializer fails. (\n#3164\n)\n\n\nUnique constraint prevents nested serializers from updating. (\n#2996\n)\n\n\nUniqueness validators should not be run for excluded (read_only) fields. (\n#2848\n)\n\n\nUniqueValidator raises exception for nested objects. (\n#2403\n)\n\n\nlookup_type\n is deprecated in favor of \nlookup_expr\n. (\n#4259\n)\n\n\n\n\n\n\n3.3.x series\n\n\n3.3.3\n\n\nDate\n: \n14th March 2016\n.\n\n\n\n\nRemove version string from templates. Thanks to @blag for the report and fixes. (\n#3878\n, \n#3913\n, \n#3912\n)\n\n\nFixes vertical html layout for \nBooleanField\n. Thanks to Mikalai Radchuk for the fix. (\n#3910\n)\n\n\nSilenced deprecation warnings on Django 1.8. Thanks to Simon Charette for the fix. (\n#3903\n)\n\n\nInternationalization for authtoken. Thanks to Michael Nacharov for the fix. (\n#3887\n, \n#3968\n)\n\n\nFix \nToken\n model as \nabstract\n when the authtoken application isn't declared. Thanks to Adam Thomas for the report. (\n#3860\n, \n#3858\n)\n\n\nImprove Markdown version compatibility. Thanks to Michael J. Schultz for the fix. (\n#3604\n, \n#3842\n)\n\n\nQueryParameterVersioning\n does not use \nDEFAULT_VERSION\n setting. Thanks to Brad Montgomery for the fix. (\n#3833\n)\n\n\nAdd an explicit \non_delete\n on the models. Thanks to Mads Jensen for the fix. (\n#3832\n)\n\n\nFix \nDateField.to_representation\n to work with Python 2 unicode. Thanks to Mikalai Radchuk for the fix. (\n#3819\n)\n\n\nFixed \nTimeField\n not handling string times. Thanks to Areski Belaid for the fix. (\n#3809\n)\n\n\nAvoid updates of \nMeta.extra_kwargs\n. Thanks to Kevin Massey for the report and fix. (\n#3805\n, \n#3804\n)\n\n\nFix nested validation error being rendered incorrectly. Thanks to Craig de Stigter for the fix. (\n#3801\n)\n\n\nDocument how to avoid CSRF and missing button issues with \ndjango-crispy-forms\n. Thanks to Emmanuelle Delescolle, Jos\u00e9 Padilla and Luis San Pablo for the report, analysis and fix. (\n#3787\n, \n#3636\n, \n#3637\n)\n\n\nImprove Rest Framework Settings file setup time. Thanks to Miles Hutson for the report and Mads Jensen for the fix. (\n#3786\n, \n#3815\n)\n\n\nImprove authtoken compatibility with Django 1.9. Thanks to S. Andrew Sheppard for the fix. (\n#3785\n)\n\n\nFix \nMin/MaxValueValidator\n transfer from a model's \nDecimalField\n. Thanks to Kevin Brown for the fix. (\n#3774\n)\n\n\nImprove HTML title in the Browsable API. Thanks to Mike Lissner for the report and fix. (\n#3769\n)\n\n\nFix \nAutoFilterSet\n to inherit from \ndefault_filter_set\n. Thanks to Tom Linford for the fix. (\n#3753\n)\n\n\nFix transifex config to handle the new Chinese language codes. Thanks to @nypisces for the report and fix. (\n#3739\n)\n\n\nDateTimeField\n does not handle empty values correctly. Thanks to Mick Parker for the report and fix. (\n#3731\n, \n#3726\n)\n\n\nRaise error when setting a removed rest_framework setting. Thanks to Luis San Pablo for the fix. (\n#3715\n)\n\n\nAdd missing csrf_token in AdminRenderer post form. Thanks to Piotr \u015aniegowski for the fix. (\n#3703\n)\n\n\nRefactored \n_get_reverse_relationships()\n to use correct \nto_field\n. Thanks to Benjamin Phillips for the fix. (\n#3696\n)\n\n\nDocument the use of \nget_queryset\n for \nRelatedField\n. Thanks to Ryan Hiebert for the fix. (\n#3605\n)\n\n\nFix empty pk detection in HyperlinkRelatedField.get_url. Thanks to @jslang for the fix (\n#3962\n)\n\n\n\n\n3.3.2\n\n\nDate\n: \n14th December 2015\n.\n\n\n\n\nListField\n enforces input is a list. (\n#3513\n)\n\n\nFix regression hiding raw data form. (\n#3600\n, \n#3578\n)\n\n\nFix Python 3.5 compatibility. (\n#3534\n, \n#3626\n)\n\n\nAllow setting a custom Django Paginator in \npagination.PageNumberPagination\n. (\n#3631\n, \n#3684\n)\n\n\nFix relational fields without \nto_fields\n attribute. (\n#3635\n, \n#3634\n)\n\n\nFix \ntemplate.render\n deprecation warnings for Django 1.9. (\n#3654\n)\n\n\nSort response headers in browsable API renderer. (\n#3655\n)\n\n\nUse related_objects api for Django 1.9+. (\n#3656\n, \n#3252\n)\n\n\nAdd confirm modal when deleting. (\n#3228\n, \n#3662\n)\n\n\nReveal previously hidden AttributeErrors and TypeErrors while calling has_[object_]permissions. (\n#3668\n)\n\n\nMake DRF compatible with multi template engine in Django 1.8. (\n#3672\n)\n\n\nUpdate \nNestedBoundField\n to also handle empty string when rendering its form. (\n#3677\n)\n\n\nFix UUID validation to properly catch invalid input types. (\n#3687\n, \n#3679\n)\n\n\nFix caching issues. (\n#3628\n, \n#3701\n)\n\n\nFix Admin and API browser for views without a filter_class. (\n#3705\n, \n#3596\n, \n#3597\n)\n\n\nAdd app_name to rest_framework.urls. (\n#3714\n)\n\n\nImprove authtoken's views to support url versioning. (\n#3718\n, \n#3723\n)\n\n\n\n\n3.3.1\n\n\nDate\n: \n4th November 2015\n.\n\n\n\n\nResolve parsing bug when accessing \nrequest.POST\n (\n#3592\n)\n\n\nCorrectly deal with \nto_field\n referring to primary key. (\n#3593\n)\n\n\nAllow filter HTML to render when no \nfilter_class\n is defined. (\n#3560\n)\n\n\nFix admin rendering issues. (\n#3564\n, \n#3556\n)\n\n\nFix issue with DecimalValidator. (\n#3568\n)\n\n\n\n\n3.3.0\n\n\nDate\n: \n28th October 2015\n.\n\n\n\n\nHTML controls for filters. (\n#3315\n)\n\n\nForms API. (\n#3475\n)\n\n\nAJAX browsable API. (\n#3410\n)\n\n\nAdded JSONField. (\n#3454\n)\n\n\nCorrectly map \nto_field\n when creating \nModelSerializer\n relational fields. (\n#3526\n)\n\n\nInclude keyword arguments when mapping \nFilePathField\n to a serializer field. (\n#3536\n)\n\n\nMap appropriate model \nerror_messages\n on \nModelSerializer\n uniqueness constraints. (\n#3435\n)\n\n\nInclude \nmax_length\n constraint for \nModelSerializer\n fields mapped from TextField. (\n#3509\n)\n\n\nAdded support for Django 1.9. (\n#3450\n, \n#3525\n)\n\n\nRemoved support for Django 1.5 & 1.6. (\n#3421\n, \n#3429\n)\n\n\nRemoved 'south' migrations. (\n#3495\n)\n\n\n\n\n\n\n3.2.x series\n\n\n3.2.5\n\n\nDate\n: \n27th October 2015\n.\n\n\n\n\nEscape \nusername\n in optional logout tag. (\n#3550\n)\n\n\n\n\n3.2.4\n\n\nDate\n: \n21th September 2015\n.\n\n\n\n\nDon't error on missing \nViewSet.search_fields\n attribute. (\n#3324\n, \n#3323\n)\n\n\nFix \nallow_empty\n not working on serializers with \nmany=True\n. (\n#3361\n, \n#3364\n)\n\n\nLet \nDurationField\n accepts integers. (\n#3359\n)\n\n\nMulti-level dictionaries not supported in multipart requests. (\n#3314\n)\n\n\nFix \nListField\n truncation on HTTP PATCH (\n#3415\n, \n#2761\n)\n\n\n\n\n3.2.3\n\n\nDate\n: \n24th August 2015\n.\n\n\n\n\nAdded \nhtml_cutoff\n and \nhtml_cutoff_text\n for limiting select dropdowns. (\n#3313\n)\n\n\nAdded regex style to \nSearchFilter\n. (\n#3316\n)\n\n\nResolve issues with setting blank HTML fields. (\n#3318\n) (\n#3321\n)\n\n\nCorrectly display existing 'select multiple' values in browsable API forms. (\n#3290\n)\n\n\nResolve duplicated validation message for \nIPAddressField\n. ([#3249[gh3249]) (\n#3250\n)\n\n\nFix to ensure admin renderer continues to work when pagination is disabled. (\n#3275\n)\n\n\nResolve error with \nLimitOffsetPagination\n when count=0, offset=0. (\n#3303\n)\n\n\n\n\n3.2.2\n\n\nDate\n: \n13th August 2015\n.\n\n\n\n\nAdd \ndisplay_value()\n method for use when displaying relational field select inputs. (\n#3254\n)\n\n\nFix issue with \nBooleanField\n checkboxes incorrectly displaying as checked. (\n#3258\n)\n\n\nEnsure empty checkboxes properly set \nBooleanField\n to \nFalse\n in all cases. (\n#2776\n)\n\n\nAllow \nWSGIRequest.FILES\n property without raising incorrect deprecated error. (\n#3261\n)\n\n\nResolve issue with rendering nested serializers in forms. (\n#3260\n)\n\n\nRaise an error if user accidentally pass a serializer instance to a response, rather than data. (\n#3241\n)\n\n\n\n\n3.2.1\n\n\nDate\n: \n7th August 2015\n.\n\n\n\n\nFix for relational select widgets rendering without any choices. (\n#3237\n)\n\n\nFix for \n1\n, \n0\n rendering as \ntrue\n, \nfalse\n in the admin interface. \n#3227\n)\n\n\nFix for ListFields with single value in HTML form input. (\n#3238\n)\n\n\nAllow \nrequest.FILES\n for compat with Django's \nHTTPRequest\n class. (\n#3239\n)\n\n\n\n\n3.2.0\n\n\nDate\n: \n6th August 2015\n.\n\n\n\n\nAdd \nAdminRenderer\n. (\n#2926\n)\n\n\nAdd \nFilePathField\n. (\n#1854\n)\n\n\nAdd \nallow_empty\n to \nListField\n. (\n#2250\n)\n\n\nSupport django-guardian 1.3. (\n#3165\n)\n\n\nSupport grouped choices. (\n#3225\n)\n\n\nSupport error forms in browsable API. (\n#3024\n)\n\n\nAllow permission classes to customize the error message. (\n#2539\n)\n\n\nSupport \nsource=<method>\n on hyperlinked fields. (\n#2690\n)\n\n\nListField(allow_null=True)\n now allows null as the list value, not null items in the list. (\n#2766\n)\n\n\nManyToMany()\n maps to \nallow_empty=False\n, \nManyToMany(blank=True)\n maps to \nallow_empty=True\n. (\n#2804\n)\n\n\nSupport custom serialization styles for primary key fields. (\n#2789\n)\n\n\nOPTIONS\n requests support nested representations. (\n#2915\n)\n\n\nSet \nview.action == \"metadata\"\n for viewsets with \nOPTIONS\n requests. (\n#3115\n)\n\n\nSupport \nallow_blank\n on \nUUIDField\n. ([#3130][gh#3130])\n\n\nDo not display view docstrings with 401 or 403 response codes. (\n#3216\n)\n\n\nResolve Django 1.8 deprecation warnings. (\n#2886\n)\n\n\nFix for \nDecimalField\n validation. (\n#3139\n)\n\n\nFix behavior of \nallow_blank=False\n when used with \ntrim_whitespace=True\n. (\n#2712\n)\n\n\nFix issue with some field combinations incorrectly mapping to an invalid \nallow_blank\n argument. (\n#3011\n)\n\n\nFix for output representations with prefetches and modified querysets. (\n#2704\n, \n#2727\n)\n\n\nFix assertion error when CursorPagination is provided with certains invalid query parameters. (#2920)\ngh2920\n.\n\n\nFix \nUnicodeDecodeError\n when invalid characters included in header with \nTokenAuthentication\n. (\n#2928\n)\n\n\nFix transaction rollbacks with \n@non_atomic_requests\n decorator. (\n#3016\n)\n\n\nFix duplicate results issue with Oracle databases using \nSearchFilter\n. (\n#2935\n)\n\n\nFix checkbox alignment and rendering in browsable API forms. (\n#2783\n)\n\n\nFix for unsaved file objects which should use \n\"url\": null\n in the representation. (\n#2759\n)\n\n\nFix field value rendering in browsable API. (\n#2416\n)\n\n\nFix \nHStoreField\n to include \nallow_blank=True\n in \nDictField\n mapping. (\n#2659\n)\n\n\nNumerous other cleanups, improvements to error messaging, private API & minor fixes.\n\n\n\n\n\n\n3.1.x series\n\n\n3.1.3\n\n\nDate\n: \n4th June 2015\n.\n\n\n\n\nAdd \nDurationField\n. (\n#2481\n, \n#2989\n)\n\n\nAdd \nformat\n argument to \nUUIDField\n. (\n#2788\n, \n#3000\n)\n\n\nMultipleChoiceField\n empties incorrectly on a partial update using multipart/form-data (\n#2993\n, \n#2894\n)\n\n\nFix a bug in options related to read-only \nRelatedField\n. (\n#2981\n, \n#2811\n)\n\n\nFix nested serializers with \nunique_together\n relations. (\n#2975\n)\n\n\nAllow unexpected values for \nChoiceField\n/\nMultipleChoiceField\n representations. (\n#2839\n, \n#2940\n)\n\n\nRollback the transaction on error if \nATOMIC_REQUESTS\n is set. (\n#2887\n, \n#2034\n)\n\n\nSet the action on a view when override_method regardless of its None-ness. (\n#2933\n)\n\n\nDecimalField\n accepts \n2E+2\n as 200 and validates decimal place correctly. (\n#2948\n, \n#2947\n)\n\n\nSupport basic authentication with custom \nUserModel\n that change \nusername\n. (\n#2952\n)\n\n\nIPAddressField\n improvements. (\n#2747\n, \n#2618\n, \n#3008\n)\n\n\nImprove \nDecimalField\n for easier subclassing. (\n#2695\n)\n\n\n\n\n3.1.2\n\n\nDate\n: \n13rd May 2015\n.\n\n\n\n\nDateField.to_representation\n can handle str and empty values. (\n#2656\n, \n#2687\n, \n#2869\n)\n\n\nUse default reason phrases from HTTP standard. (\n#2764\n, \n#2763\n)\n\n\nRaise error when \nModelSerializer\n used with abstract model. (\n#2757\n, \n#2630\n)\n\n\nHandle reversal of non-API view_name in \nHyperLinkedRelatedField\n (\n#2724\n, \n#2711\n)\n\n\nDont require pk strictly for related fields. (\n#2745\n, \n#2754\n)\n\n\nMetadata detects null boolean field type. (\n#2762\n)\n\n\nProper handling of depth in nested serializers. (\n#2798\n)\n\n\nDisplay viewset without paginator. (\n#2807\n)\n\n\nDon't check for deprecated \n.model\n attribute in permissions (\n#2818\n)\n\n\nRestrict integer field to integers and strings. (\n#2835\n, \n#2836\n)\n\n\nImprove \nIntegerField\n to use compiled decimal regex. (\n#2853\n)\n\n\nPrevent empty \nqueryset\n to raise AssertionError. (\n#2862\n)\n\n\nDjangoModelPermissions\n rely on \nget_queryset\n. (\n#2863\n)\n\n\nCheck \nAcceptHeaderVersioning\n with content negotiation in place. (\n#2868\n)\n\n\nAllow \nDjangoObjectPermissions\n to use views that define \nget_queryset\n. (\n#2905\n)\n\n\n\n\n3.1.1\n\n\nDate\n: \n23rd March 2015\n.\n\n\n\n\nSecurity fix\n: Escape tab switching cookie name in browsable API.\n\n\nDisplay input forms in browsable API if \nserializer_class\n is used, even when \nget_serializer\n method does not exist on the view. (\n#2743\n)\n\n\nUse a password input for the AuthTokenSerializer. (\n#2741\n)\n\n\nFix missing anchor closing tag after next button. (\n#2691\n)\n\n\nFix \nlookup_url_kwarg\n handling in viewsets. (\n#2685\n, \n#2591\n)\n\n\nFix problem with importing \nrest_framework.views\n in \napps.py\n (\n#2678\n)\n\n\nLimitOffsetPagination raises \nTypeError\n if PAGE_SIZE not set (\n#2667\n, \n#2700\n)\n\n\nGerman translation for \nmin_value\n field error message references \nmax_value\n. (\n#2645\n)\n\n\nRemove \nMergeDict\n. (\n#2640\n)\n\n\nSupport serializing unsaved models with related fields. (\n#2637\n, \n#2641\n)\n\n\nAllow blank/null on radio.html choices. (\n#2631\n)\n\n\n\n\n3.1.0\n\n\nDate\n: \n5th March 2015\n.\n\n\nFor full details see the \n3.1 release announcement\n.\n\n\n\n\n3.0.x series\n\n\n3.0.5\n\n\nDate\n: \n10th February 2015\n.\n\n\n\n\nFix a bug where \n_closable_objects\n breaks pickling. (\n#1850\n, \n#2492\n)\n\n\nAllow non-standard \nUser\n models with \nThrottling\n. (\n#2524\n)\n\n\nSupport custom \nUser.db_table\n in TokenAuthentication migration. (\n#2479\n)\n\n\nFix misleading \nAttributeError\n tracebacks on \nRequest\n objects. (\n#2530\n, \n#2108\n)\n\n\nManyRelatedField.get_value\n clearing field on partial update. (\n#2475\n)\n\n\nRemoved '.model' shortcut from code. (\n#2486\n)\n\n\nFix \ndetail_route\n and \nlist_route\n mutable argument. (\n#2518\n)\n\n\nPrefetching the user object when getting the token in \nTokenAuthentication\n. (\n#2519\n)\n\n\n\n\n3.0.4\n\n\nDate\n: \n28th January 2015\n.\n\n\n\n\nDjango 1.8a1 support. (\n#2425\n, \n#2446\n, \n#2441\n)\n\n\nAdd \nDictField\n and support Django 1.8 \nHStoreField\n. (\n#2451\n, \n#2106\n)\n\n\nAdd \nUUIDField\n and support Django 1.8 \nUUIDField\n. (\n#2448\n, \n#2433\n, \n#2432\n)\n\n\nBaseRenderer.render\n now raises \nNotImplementedError\n. (\n#2434\n)\n\n\nFix timedelta JSON serialization on Python 2.6. (\n#2430\n)\n\n\nResultDict\n and \nResultList\n now appear as standard dict/list. (\n#2421\n)\n\n\nFix visible \nHiddenField\n in the HTML form of the web browsable API page. (\n#2410\n)\n\n\nUse \nOrderedDict\n for \nRelatedField.choices\n. (\n#2408\n)\n\n\nFix ident format when using \nHTTP_X_FORWARDED_FOR\n. (\n#2401\n)\n\n\nFix invalid key with memcached while using throttling. (\n#2400\n)\n\n\nFix \nFileUploadParser\n with version 3.x. (\n#2399\n)\n\n\nFix the serializer inheritance. (\n#2388\n)\n\n\nFix caching issues with \nReturnDict\n. (\n#2360\n)\n\n\n\n\n3.0.3\n\n\nDate\n: \n8th January 2015\n.\n\n\n\n\nFix \nMinValueValidator\n on \nmodels.DateField\n. (\n#2369\n)\n\n\nFix serializer missing context when pagination is used. (\n#2355\n)\n\n\nNamespaced router URLs are now supported by the \nDefaultRouter\n. (\n#2351\n)\n\n\nrequired=False\n allows omission of value for output. (\n#2342\n)\n\n\nUse textarea input for \nmodels.TextField\n. (\n#2340\n)\n\n\nUse custom \nListSerializer\n for pagination if required. (\n#2331\n, \n#2327\n)\n\n\nBetter behavior with null and '' for blank HTML fields. (\n#2330\n)\n\n\nEnsure fields in \nexclude\n are model fields. (\n#2319\n)\n\n\nFix \nIntegerField\n and \nmax_length\n argument incompatibility. (\n#2317\n)\n\n\nFix the YAML encoder for 3.0 serializers. (\n#2315\n, \n#2283\n)\n\n\nFix the behavior of empty HTML fields. (\n#2311\n, \n#1101\n)\n\n\nFix Metaclass attribute depth ignoring fields attribute. (\n#2287\n)\n\n\nFix \nformat_suffix_patterns\n to work with Django's \ni18n_patterns\n. (\n#2278\n)\n\n\nAbility to customize router URLs for custom actions, using \nurl_path\n. (\n#2010\n)\n\n\nDon't install Django REST Framework as egg. (\n#2386\n)\n\n\n\n\n3.0.2\n\n\nDate\n: \n17th December 2014\n.\n\n\n\n\nEnsure \nrequest.user\n is made available to response middleware. (\n#2155\n)\n\n\nClient.logout()\n also cancels any existing \nforce_authenticate\n. (\n#2218\n, \n#2259\n)\n\n\nExtra assertions and better checks to preventing incorrect serializer API use. (\n#2228\n, \n#2234\n, \n#2262\n, \n#2263\n, \n#2266\n, \n#2267\n, \n#2289\n, \n#2291\n)\n\n\nFixed \nmin_length\n message for \nCharField\n. (\n#2255\n)\n\n\nFix \nUnicodeDecodeError\n, which can occur on serializer \nrepr\n.  (\n#2270\n, \n#2279\n)\n\n\nFix empty HTML values when a default is provided. (\n#2280\n, \n#2294\n)\n\n\nFix \nSlugRelatedField\n raising \nUnicodeEncodeError\n when used as a multiple choice input. (\n#2290\n)\n\n\n\n\n3.0.1\n\n\nDate\n: \n11th December 2014\n.\n\n\n\n\nMore helpful error message when the default Serializer \ncreate()\n fails. (\n#2013\n)\n\n\nRaise error when attempting to save serializer if data is not valid. (\n#2098\n)\n\n\nFix \nFileUploadParser\n breaks with empty file names and multiple upload handlers. (\n#2109\n)\n\n\nImprove \nBindingDict\n to support standard dict-functions. (\n#2135\n, \n#2163\n)\n\n\nAdd \nvalidate()\n to \nListSerializer\n. (\n#2168\n, \n#2225\n, \n#2232\n)\n\n\nFix JSONP renderer failing to escape some characters. (\n#2169\n, \n#2195\n)\n\n\nAdd missing default style for \nFileField\n. (\n#2172\n)\n\n\nActions are required when calling \nViewSet.as_view()\n. (\n#2175\n)\n\n\nAdd \nallow_blank\n to \nChoiceField\n. (\n#2184\n, \n#2239\n)\n\n\nCosmetic fixes in the HTML renderer. (\n#2187\n)\n\n\nRaise error if \nfields\n on serializer is not a list of strings. (\n#2193\n, \n#2213\n)\n\n\nImprove checks for nested creates and updates. (\n#2194\n, \n#2196\n)\n\n\nvalidated_attrs\n argument renamed to \nvalidated_data\n in \nSerializer\n \ncreate()\n/\nupdate()\n. (\n#2197\n)\n\n\nRemove deprecated code to reflect the dropped Django versions. (\n#2200\n)\n\n\nBetter serializer errors for nested writes. (\n#2202\n, \n#2215\n)\n\n\nFix pagination and custom permissions incompatibility. (\n#2205\n)\n\n\nRaise error if \nfields\n on serializer is not a list of strings. (\n#2213\n)\n\n\nAdd missing translation markers for relational fields. (\n#2231\n)\n\n\nImprove field lookup behavior for dicts/mappings. (\n#2244\n, \n#2243\n)\n\n\nOptimized hyperlinked PK. (\n#2242\n)\n\n\n\n\n3.0.0\n\n\nDate\n: 1st December 2014\n\n\nFor full details see the \n3.0 release announcement\n.\n\n\n\n\nFor older release notes, \nplease see the version 2.x documentation\n.",
            "title": "Release Notes"
        },
        {
            "location": "/topics/release-notes/#release-notes",
            "text": "Release Early, Release Often  \u2014 Eric S. Raymond,  The Cathedral and the Bazaar .",
            "title": "Release Notes"
        },
        {
            "location": "/topics/release-notes/#versioning",
            "text": "Minor version numbers (0.0.x) are used for changes that are API compatible.  You should be able to upgrade between minor point releases without any other code changes.  Medium version numbers (0.x.0) may include API changes, in line with the  deprecation policy .  You should read the release notes carefully before upgrading between medium point releases.  Major version numbers (x.0.0) are reserved for substantial project milestones.",
            "title": "Versioning"
        },
        {
            "location": "/topics/release-notes/#deprecation-policy",
            "text": "REST framework releases follow a formal deprecation policy, which is in line with  Django's deprecation policy .  The timeline for deprecation of a feature present in version 1.0 would work as follows:    Version 1.1 would remain  fully backwards compatible  with 1.0, but would raise  PendingDeprecationWarning  warnings if you use the feature that are due to be deprecated.  These warnings are  silent by default , but can be explicitly enabled when you're ready to start migrating any required changes.  For example if you start running your tests using  python -Wd manage.py test , you'll be warned of any API changes you need to make.    Version 1.2 would escalate these warnings to  DeprecationWarning , which is loud by default.    Version 1.3 would remove the deprecated bits of API entirely.    Note that in line with Django's policy, any parts of the framework not mentioned in the documentation should generally be considered private API, and may be subject to change.",
            "title": "Deprecation policy"
        },
        {
            "location": "/topics/release-notes/#upgrading",
            "text": "To upgrade Django REST framework to the latest version, use pip:  pip install -U djangorestframework  You can determine your currently installed version using  pip freeze :  pip freeze | grep djangorestframework",
            "title": "Upgrading"
        },
        {
            "location": "/topics/release-notes/#35x-series",
            "text": "",
            "title": "3.5.x series"
        },
        {
            "location": "/topics/release-notes/#353",
            "text": "Date :  7th November 2016   Don't raise incorrect FilterSet deprecation warnings. ( #4660 ,  #4643 ,  #4644 )  Schema generation should not raise 404 when a view permission class does. ( #4645 ,  #4646 )  Add  autofocus  support for input controls. ( #4650 )",
            "title": "3.5.3"
        },
        {
            "location": "/topics/release-notes/#352",
            "text": "Date :  1st November 2016   Restore exception tracebacks in Python 2.7. ( #4631 ,  #4638 )  Properly display dicts in the admin console. ( #4532 ,  #4636 )  Fix is_simple_callable with variable args, kwargs. ( #4622 ,  #4602 )  Support 'on'/'off' literals with BooleanField. ( #4640 ,  #4624 )  Enable cursor pagination of value querysets. ( #4569 )  Fix support of get_full_details() for Throttled exceptions. ( #4627 )  Fix FilterSet proxy. ( #4620 )  Make serializer fields import explicit. ( #4628 )  Drop redundant requests adapter. ( #4639 )",
            "title": "3.5.2"
        },
        {
            "location": "/topics/release-notes/#351",
            "text": "Date :  21st October 2016   Make  rest_framework/compat.py  imports. ( #4612 ,  #4608 ,  #4601 )  Fix bug in schema base path generation. ( #4611 ,  #4605 )  Fix broken case of ListSerializer with single item. ( #4609 ,  #4606 )  Remove bare  raise  for Python 3.5 compat. ( #4600 )",
            "title": "3.5.1"
        },
        {
            "location": "/topics/release-notes/#350",
            "text": "Date :  20th October 2016",
            "title": "3.5.0"
        },
        {
            "location": "/topics/release-notes/#34x-series",
            "text": "",
            "title": "3.4.x series"
        },
        {
            "location": "/topics/release-notes/#347",
            "text": "Date :  21st September 2016   Fallback behavior for request parsing when request.POST already accessed. ( #3951 ,  #4500 )  Fix regression of  RegexField . ( #4489 ,  #4490 ,  #2617 )  Missing comma in  admin.html  causing CSRF error. ( #4472 ,  #4473 )  Fix response rendering with empty context. ( #4495 )  Fix indentation regression in API listing. ( #4493 )  Fixed an issue where the incorrect value is set to  ResolverMatch.func_name  of api_view decorated view. ( #4465 ,  #4462 )  Fix  APIClient.get()  when path contains unicode arguments ( #4458 )",
            "title": "3.4.7"
        },
        {
            "location": "/topics/release-notes/#346",
            "text": "Date :  23rd August 2016   Fix malformed Javascript in browsable API. ( #4435 )  Skip HiddenField from Schema fields. ( #4425 ,  #4429 )  Improve Create to show the original exception traceback. ( #3508 )  Fix  AdminRenderer  display of PK only related fields. ( #4419 ,  #4423 )",
            "title": "3.4.6"
        },
        {
            "location": "/topics/release-notes/#345",
            "text": "Date :  19th August 2016   Improve debug error handling. ( #4416 ,  #4409 )  Allow custom CSRF_HEADER_NAME setting. ( #4415 ,  #4410 )  Include .action attribute on viewsets when generating schemas. ( #4408 ,  #4398 )  Do not include request.FILES items in request.POST. ( #4407 )  Fix rendering of checkbox multiple. ( #4403 )  Fix docstring of Field.get_default. ( #4404 )  Replace utf8 character with its ascii counterpart in README. ( #4412 )",
            "title": "3.4.5"
        },
        {
            "location": "/topics/release-notes/#344",
            "text": "Date :  12th August 2016   Ensure views are fully initialized when generating schemas. ( #4373 ,  #4382 ,  #4383 ,  #4279 ,  #4278 )  Add form field descriptions to schemas. ( #4387 )  Fix category generation for schema endpoints. ( #4391 ,  #4394 ,  #4390 ,  #4386 ,  #4376 ,  #4329 )  Don't strip empty query params when paginating. ( #4392 ,  #4393 ,  #4260 )  Do not re-run query for empty results with LimitOffsetPagination. ( #4201 ,  #4388 )  Stricter type validation for CharField. ( #4380 ,  #3394 )  RelatedField.choices should preserve non-string values. ( #4111 ,  #4379 ,  #3365 )  Test case for rendering checkboxes in vertical form style. ( #4378 ,  #3868 ,  #3868 )  Show error traceback HTML in browsable API ( #4042 ,  #4172 )  Fix handling of ALLOWED_VERSIONS and no DEFAULT_VERSION.  #4370  Allow  max_digits=None  on DecimalField. ( #4377 ,  #4372 )  Limit queryset when rendering relational choices. ( #4375 ,  #4122 ,  #3329 ,  #3330 ,  #3877 )  Resolve form display with ChoiceField, MultipleChoiceField and non-string choices. ( #4374 ,  #4119 ,  #4121 ,  #4137 ,  #4120 )  Fix call to TemplateHTMLRenderer.resolve_context() fallback method. ( #4371 )",
            "title": "3.4.4"
        },
        {
            "location": "/topics/release-notes/#343",
            "text": "Date :  5th August 2016   Include fallaback for users of older TemplateHTMLRenderer internal API. ( #4361 )",
            "title": "3.4.3"
        },
        {
            "location": "/topics/release-notes/#342",
            "text": "Date :  5th August 2016   Include kwargs passed to 'as_view' when generating schemas. ( #4359 ,  #4330 ,  #4331 )  Access  request.user.is_authenticated  as property not method, under Django 1.10+ ( #4358 ,  #4354 )  Filter HEAD out from schemas. ( #4357 )  extra_kwargs takes precedence over uniqueness kwargs. ( #4198 ,  #4199 ,  #4349 )  Correct descriptions when tabs are used in code indentation. ( #4345 ,  #4347 )*  Change template context generation in TemplateHTMLRenderer. ( #4236 )  Serializer defaults should not be included in partial updates. ( #4346 ,  #3565 )  Consistent behavior & descriptive error from FileUploadParser when filename not included. ( #4340 ,  #3610 ,  #4292 ,  #4296 )  DecimalField quantizes incoming digitals. ( #4339 ,  #4318 )  Handle non-string input for IP fields. ( #4335 ,  #4336 ,  #4338 )  Fix leading slash handling when Schema generation includes a root URL. ( #4332 )  Test cases for DictField with allow_null options. ( #4348 )  Update tests from Django 1.10 beta to Django 1.10. ( #4344 )",
            "title": "3.4.2"
        },
        {
            "location": "/topics/release-notes/#341",
            "text": "Date :  28th July 2016   Added  root_renderers  argument to  DefaultRouter . ( #4323 ,  #4268 )  Added  url  and  schema_url  arguments. ( #4321 ,  #4308 ,  #4305 )  Unique together checks should apply to read-only fields which have a default. ( #4316 ,  #4294 )  Set view.format_kwarg in schema generator. ( #4293 ,  #4315 )  Fix schema generator for views with  pagination_class = None . ( #4314 ,  #4289 )  Fix schema generator for views with no  get_serializer_class . ( #4265 ,  #4285 )  Fixes for media type parameters in  Accept  and  Content-Type  headers. ( #4287 ,  #4313 ,  #4281 )  Use verbose_name instead of object_name in error messages. ( #4299 )  Minor version update to Twitter Bootstrap. ( #4307 )  SearchFilter raises error when using with related field. ( #4302 ,  #4303 ,  #4298 )  Adding support for RFC 4918 status codes. ( #4291 )  Add LICENSE.md to the built wheel. ( #4270 )  Serializing \"complex\" field returns None instead of the value since 3.4 ( #4272 ,  #4273 ,  #4288 )",
            "title": "3.4.1"
        },
        {
            "location": "/topics/release-notes/#340",
            "text": "Date :  14th July 2016   Don't strip microseconds in JSON output. ( #4256 )  Two slightly different iso 8601 datetime serialization. ( #4255 )  Resolve incorrect inclusion of media type parameters. ( #4254 )  Response Content-Type potentially malformed. ( #4253 )  Fix setup.py error on some platforms. ( #4246 )  Move alternate formats in coreapi into separate packages. ( #4244 )  Add localize keyword argument to  DecimalField . ( #4233 )  Fix issues with routers for custom list-route and detail-routes. ( #4229 )  Namespace versioning with nested namespaces. ( #4219 )  Robust uniqueness checks. ( #4217 )  Minor refactoring of  must_call_distinct . ( #4215 )  Overridable offset cutoff in CursorPagination. ( #4212 )  Pass through strings as-in with date/time fields. ( #4196 )  Add test confirming that required=False is valid on a relational field. ( #4195 )  In LimitOffsetPagination  limit=0  should revert to default limit. ( #4194 )  Exclude read_only=True fields from unique_together validation & add docs. ( #4192 )  Handle bytestrings in JSON. ( #4191 )  JSONField(binary=True) represents using binary strings, which JSONRenderer does not support. ( #4187 )  JSONField(binary=True) represents using binary strings, which JSONRenderer does not support. ( #4185 )  More robust form rendering in the browsable API. ( #4181 )  Empty cases of  .validated_data  and  .errors  as lists not dicts for ListSerializer. ( #4180 )  Schemas & client libraries. ( #4179 )  Removed  AUTH_USER_MODEL  compat property. ( #4176 )  Clean up existing deprecation warnings. ( #4166 )  Django 1.10 support. ( #4158 )  Updated jQuery version to 1.12.4. ( #4157 )  More robust default behavior on OrderingFilter. ( #4156 )  description.py codes and tests removal. ( #4153 )  Wrap guardian.VERSION in tuple. ( #4149 )  Refine validator for fields with   kwargs. ( #4146 )  Fix None values representation in childs of ListField, DictField. ( #4118 )  Resolve TimeField representation for midnight value. ( #4107 )  Set proper status code in AdminRenderer for the redirection after POST/DELETE requests. ( #4106 )  TimeField render returns None instead of 00:00:00. ( #4105 )  Fix incorrectly named zh-hans and zh-hant locale path. ( #4103 )  Prevent raising exception when limit is 0. ( #4098 )  TokenAuthentication: Allow custom keyword in the header. ( #4097 )  Handle incorrectly padded HTTP basic auth header. ( #4090 )  LimitOffset pagination crashes Browseable API when limit=0. ( #4079 )  Fixed DecimalField arbitrary precision support. ( #4075 )  Added support for custom CSRF cookie names. ( #4049 )  Fix regression introduced by #4035. ( #4041 )  No auth view failing permission should raise 403. ( #4040 )  Fix string_types / text_types confusion. ( #4025 )  Do not list related field choices in OPTIONS requests. ( #4021 )  Fix typo. ( #4008 )  Reorder initializing the view. ( #4006 )  Type error in DjangoObjectPermissionsFilter on Python 3.4. ( #4005 )  Fixed use of deprecated Query.aggregates. ( #4003 )  Fix blank lines around docstrings. ( #4002 )  Fixed admin pagination when limit is 0. ( #3990 )  OrderingFilter adjustments. ( #3983 )  Non-required serializer related fields. ( #3976 )  Using safer calling way of \"@api_view\" in tutorial. ( #3971 )  ListSerializer doesn't handle unique_together constraints. ( #3970 )  Add missing migration file. ( #3968 )  OrderingFilter  should call  get_serializer_class()  to determine default fields. ( #3964 )  Remove old django checks from tests and compat. ( #3953 )  Support callable as the value of  initial  for any  serializer.Field . ( #3943 )  Prevented unnecessary distinct() call in SearchFilter. ( #3938 )  Fix None UUID ForeignKey serialization. ( #3936 )  Drop EOL Django 1.7. ( #3933 )  Add missing space in serializer error message. ( #3926 )  Fixed _force_text_recursive typo. ( #3908 )  Attempt to address Django 2.0 deprecate warnings related to  field.rel . ( #3906 )  Fix parsing multipart data using a nested serializer with list. ( #3820 )  Resolving APIs URL to different namespaces. ( #3816 )  Do not HTML-escape  help_text  in Browsable API forms. ( #3812 )  OPTIONS fetches and shows all possible foreign keys in choices field. ( #3751 )  Django 1.9 deprecation warnings ( #3729 )  Test case for #3598 ( #3710 )  Adding support for multiple values for search filter. ( #3541 )  Use get_serializer_class in ordering filter. ( #3487 )  Serializers with many=True should return empty list rather than empty dict. ( #3476 )  LimitOffsetPagination limit=0 fix. ( #3444 )  Enable Validators to defer string evaluation and handle new string format. ( #3438 )  Unique validator is executed and breaks if field is invalid. ( #3381 )  Do not ignore overridden View.get_view_name() in breadcrumbs. ( #3273 )  Retry form rendering when rendering with serializer fails. ( #3164 )  Unique constraint prevents nested serializers from updating. ( #2996 )  Uniqueness validators should not be run for excluded (read_only) fields. ( #2848 )  UniqueValidator raises exception for nested objects. ( #2403 )  lookup_type  is deprecated in favor of  lookup_expr . ( #4259 )",
            "title": "3.4.0"
        },
        {
            "location": "/topics/release-notes/#33x-series",
            "text": "",
            "title": "3.3.x series"
        },
        {
            "location": "/topics/release-notes/#333",
            "text": "Date :  14th March 2016 .   Remove version string from templates. Thanks to @blag for the report and fixes. ( #3878 ,  #3913 ,  #3912 )  Fixes vertical html layout for  BooleanField . Thanks to Mikalai Radchuk for the fix. ( #3910 )  Silenced deprecation warnings on Django 1.8. Thanks to Simon Charette for the fix. ( #3903 )  Internationalization for authtoken. Thanks to Michael Nacharov for the fix. ( #3887 ,  #3968 )  Fix  Token  model as  abstract  when the authtoken application isn't declared. Thanks to Adam Thomas for the report. ( #3860 ,  #3858 )  Improve Markdown version compatibility. Thanks to Michael J. Schultz for the fix. ( #3604 ,  #3842 )  QueryParameterVersioning  does not use  DEFAULT_VERSION  setting. Thanks to Brad Montgomery for the fix. ( #3833 )  Add an explicit  on_delete  on the models. Thanks to Mads Jensen for the fix. ( #3832 )  Fix  DateField.to_representation  to work with Python 2 unicode. Thanks to Mikalai Radchuk for the fix. ( #3819 )  Fixed  TimeField  not handling string times. Thanks to Areski Belaid for the fix. ( #3809 )  Avoid updates of  Meta.extra_kwargs . Thanks to Kevin Massey for the report and fix. ( #3805 ,  #3804 )  Fix nested validation error being rendered incorrectly. Thanks to Craig de Stigter for the fix. ( #3801 )  Document how to avoid CSRF and missing button issues with  django-crispy-forms . Thanks to Emmanuelle Delescolle, Jos\u00e9 Padilla and Luis San Pablo for the report, analysis and fix. ( #3787 ,  #3636 ,  #3637 )  Improve Rest Framework Settings file setup time. Thanks to Miles Hutson for the report and Mads Jensen for the fix. ( #3786 ,  #3815 )  Improve authtoken compatibility with Django 1.9. Thanks to S. Andrew Sheppard for the fix. ( #3785 )  Fix  Min/MaxValueValidator  transfer from a model's  DecimalField . Thanks to Kevin Brown for the fix. ( #3774 )  Improve HTML title in the Browsable API. Thanks to Mike Lissner for the report and fix. ( #3769 )  Fix  AutoFilterSet  to inherit from  default_filter_set . Thanks to Tom Linford for the fix. ( #3753 )  Fix transifex config to handle the new Chinese language codes. Thanks to @nypisces for the report and fix. ( #3739 )  DateTimeField  does not handle empty values correctly. Thanks to Mick Parker for the report and fix. ( #3731 ,  #3726 )  Raise error when setting a removed rest_framework setting. Thanks to Luis San Pablo for the fix. ( #3715 )  Add missing csrf_token in AdminRenderer post form. Thanks to Piotr \u015aniegowski for the fix. ( #3703 )  Refactored  _get_reverse_relationships()  to use correct  to_field . Thanks to Benjamin Phillips for the fix. ( #3696 )  Document the use of  get_queryset  for  RelatedField . Thanks to Ryan Hiebert for the fix. ( #3605 )  Fix empty pk detection in HyperlinkRelatedField.get_url. Thanks to @jslang for the fix ( #3962 )",
            "title": "3.3.3"
        },
        {
            "location": "/topics/release-notes/#332",
            "text": "Date :  14th December 2015 .   ListField  enforces input is a list. ( #3513 )  Fix regression hiding raw data form. ( #3600 ,  #3578 )  Fix Python 3.5 compatibility. ( #3534 ,  #3626 )  Allow setting a custom Django Paginator in  pagination.PageNumberPagination . ( #3631 ,  #3684 )  Fix relational fields without  to_fields  attribute. ( #3635 ,  #3634 )  Fix  template.render  deprecation warnings for Django 1.9. ( #3654 )  Sort response headers in browsable API renderer. ( #3655 )  Use related_objects api for Django 1.9+. ( #3656 ,  #3252 )  Add confirm modal when deleting. ( #3228 ,  #3662 )  Reveal previously hidden AttributeErrors and TypeErrors while calling has_[object_]permissions. ( #3668 )  Make DRF compatible with multi template engine in Django 1.8. ( #3672 )  Update  NestedBoundField  to also handle empty string when rendering its form. ( #3677 )  Fix UUID validation to properly catch invalid input types. ( #3687 ,  #3679 )  Fix caching issues. ( #3628 ,  #3701 )  Fix Admin and API browser for views without a filter_class. ( #3705 ,  #3596 ,  #3597 )  Add app_name to rest_framework.urls. ( #3714 )  Improve authtoken's views to support url versioning. ( #3718 ,  #3723 )",
            "title": "3.3.2"
        },
        {
            "location": "/topics/release-notes/#331",
            "text": "Date :  4th November 2015 .   Resolve parsing bug when accessing  request.POST  ( #3592 )  Correctly deal with  to_field  referring to primary key. ( #3593 )  Allow filter HTML to render when no  filter_class  is defined. ( #3560 )  Fix admin rendering issues. ( #3564 ,  #3556 )  Fix issue with DecimalValidator. ( #3568 )",
            "title": "3.3.1"
        },
        {
            "location": "/topics/release-notes/#330",
            "text": "Date :  28th October 2015 .   HTML controls for filters. ( #3315 )  Forms API. ( #3475 )  AJAX browsable API. ( #3410 )  Added JSONField. ( #3454 )  Correctly map  to_field  when creating  ModelSerializer  relational fields. ( #3526 )  Include keyword arguments when mapping  FilePathField  to a serializer field. ( #3536 )  Map appropriate model  error_messages  on  ModelSerializer  uniqueness constraints. ( #3435 )  Include  max_length  constraint for  ModelSerializer  fields mapped from TextField. ( #3509 )  Added support for Django 1.9. ( #3450 ,  #3525 )  Removed support for Django 1.5 & 1.6. ( #3421 ,  #3429 )  Removed 'south' migrations. ( #3495 )",
            "title": "3.3.0"
        },
        {
            "location": "/topics/release-notes/#32x-series",
            "text": "",
            "title": "3.2.x series"
        },
        {
            "location": "/topics/release-notes/#325",
            "text": "Date :  27th October 2015 .   Escape  username  in optional logout tag. ( #3550 )",
            "title": "3.2.5"
        },
        {
            "location": "/topics/release-notes/#324",
            "text": "Date :  21th September 2015 .   Don't error on missing  ViewSet.search_fields  attribute. ( #3324 ,  #3323 )  Fix  allow_empty  not working on serializers with  many=True . ( #3361 ,  #3364 )  Let  DurationField  accepts integers. ( #3359 )  Multi-level dictionaries not supported in multipart requests. ( #3314 )  Fix  ListField  truncation on HTTP PATCH ( #3415 ,  #2761 )",
            "title": "3.2.4"
        },
        {
            "location": "/topics/release-notes/#323",
            "text": "Date :  24th August 2015 .   Added  html_cutoff  and  html_cutoff_text  for limiting select dropdowns. ( #3313 )  Added regex style to  SearchFilter . ( #3316 )  Resolve issues with setting blank HTML fields. ( #3318 ) ( #3321 )  Correctly display existing 'select multiple' values in browsable API forms. ( #3290 )  Resolve duplicated validation message for  IPAddressField . ([#3249[gh3249]) ( #3250 )  Fix to ensure admin renderer continues to work when pagination is disabled. ( #3275 )  Resolve error with  LimitOffsetPagination  when count=0, offset=0. ( #3303 )",
            "title": "3.2.3"
        },
        {
            "location": "/topics/release-notes/#322",
            "text": "Date :  13th August 2015 .   Add  display_value()  method for use when displaying relational field select inputs. ( #3254 )  Fix issue with  BooleanField  checkboxes incorrectly displaying as checked. ( #3258 )  Ensure empty checkboxes properly set  BooleanField  to  False  in all cases. ( #2776 )  Allow  WSGIRequest.FILES  property without raising incorrect deprecated error. ( #3261 )  Resolve issue with rendering nested serializers in forms. ( #3260 )  Raise an error if user accidentally pass a serializer instance to a response, rather than data. ( #3241 )",
            "title": "3.2.2"
        },
        {
            "location": "/topics/release-notes/#321",
            "text": "Date :  7th August 2015 .   Fix for relational select widgets rendering without any choices. ( #3237 )  Fix for  1 ,  0  rendering as  true ,  false  in the admin interface.  #3227 )  Fix for ListFields with single value in HTML form input. ( #3238 )  Allow  request.FILES  for compat with Django's  HTTPRequest  class. ( #3239 )",
            "title": "3.2.1"
        },
        {
            "location": "/topics/release-notes/#320",
            "text": "Date :  6th August 2015 .   Add  AdminRenderer . ( #2926 )  Add  FilePathField . ( #1854 )  Add  allow_empty  to  ListField . ( #2250 )  Support django-guardian 1.3. ( #3165 )  Support grouped choices. ( #3225 )  Support error forms in browsable API. ( #3024 )  Allow permission classes to customize the error message. ( #2539 )  Support  source=<method>  on hyperlinked fields. ( #2690 )  ListField(allow_null=True)  now allows null as the list value, not null items in the list. ( #2766 )  ManyToMany()  maps to  allow_empty=False ,  ManyToMany(blank=True)  maps to  allow_empty=True . ( #2804 )  Support custom serialization styles for primary key fields. ( #2789 )  OPTIONS  requests support nested representations. ( #2915 )  Set  view.action == \"metadata\"  for viewsets with  OPTIONS  requests. ( #3115 )  Support  allow_blank  on  UUIDField . ([#3130][gh#3130])  Do not display view docstrings with 401 or 403 response codes. ( #3216 )  Resolve Django 1.8 deprecation warnings. ( #2886 )  Fix for  DecimalField  validation. ( #3139 )  Fix behavior of  allow_blank=False  when used with  trim_whitespace=True . ( #2712 )  Fix issue with some field combinations incorrectly mapping to an invalid  allow_blank  argument. ( #3011 )  Fix for output representations with prefetches and modified querysets. ( #2704 ,  #2727 )  Fix assertion error when CursorPagination is provided with certains invalid query parameters. (#2920) gh2920 .  Fix  UnicodeDecodeError  when invalid characters included in header with  TokenAuthentication . ( #2928 )  Fix transaction rollbacks with  @non_atomic_requests  decorator. ( #3016 )  Fix duplicate results issue with Oracle databases using  SearchFilter . ( #2935 )  Fix checkbox alignment and rendering in browsable API forms. ( #2783 )  Fix for unsaved file objects which should use  \"url\": null  in the representation. ( #2759 )  Fix field value rendering in browsable API. ( #2416 )  Fix  HStoreField  to include  allow_blank=True  in  DictField  mapping. ( #2659 )  Numerous other cleanups, improvements to error messaging, private API & minor fixes.",
            "title": "3.2.0"
        },
        {
            "location": "/topics/release-notes/#31x-series",
            "text": "",
            "title": "3.1.x series"
        },
        {
            "location": "/topics/release-notes/#313",
            "text": "Date :  4th June 2015 .   Add  DurationField . ( #2481 ,  #2989 )  Add  format  argument to  UUIDField . ( #2788 ,  #3000 )  MultipleChoiceField  empties incorrectly on a partial update using multipart/form-data ( #2993 ,  #2894 )  Fix a bug in options related to read-only  RelatedField . ( #2981 ,  #2811 )  Fix nested serializers with  unique_together  relations. ( #2975 )  Allow unexpected values for  ChoiceField / MultipleChoiceField  representations. ( #2839 ,  #2940 )  Rollback the transaction on error if  ATOMIC_REQUESTS  is set. ( #2887 ,  #2034 )  Set the action on a view when override_method regardless of its None-ness. ( #2933 )  DecimalField  accepts  2E+2  as 200 and validates decimal place correctly. ( #2948 ,  #2947 )  Support basic authentication with custom  UserModel  that change  username . ( #2952 )  IPAddressField  improvements. ( #2747 ,  #2618 ,  #3008 )  Improve  DecimalField  for easier subclassing. ( #2695 )",
            "title": "3.1.3"
        },
        {
            "location": "/topics/release-notes/#312",
            "text": "Date :  13rd May 2015 .   DateField.to_representation  can handle str and empty values. ( #2656 ,  #2687 ,  #2869 )  Use default reason phrases from HTTP standard. ( #2764 ,  #2763 )  Raise error when  ModelSerializer  used with abstract model. ( #2757 ,  #2630 )  Handle reversal of non-API view_name in  HyperLinkedRelatedField  ( #2724 ,  #2711 )  Dont require pk strictly for related fields. ( #2745 ,  #2754 )  Metadata detects null boolean field type. ( #2762 )  Proper handling of depth in nested serializers. ( #2798 )  Display viewset without paginator. ( #2807 )  Don't check for deprecated  .model  attribute in permissions ( #2818 )  Restrict integer field to integers and strings. ( #2835 ,  #2836 )  Improve  IntegerField  to use compiled decimal regex. ( #2853 )  Prevent empty  queryset  to raise AssertionError. ( #2862 )  DjangoModelPermissions  rely on  get_queryset . ( #2863 )  Check  AcceptHeaderVersioning  with content negotiation in place. ( #2868 )  Allow  DjangoObjectPermissions  to use views that define  get_queryset . ( #2905 )",
            "title": "3.1.2"
        },
        {
            "location": "/topics/release-notes/#311",
            "text": "Date :  23rd March 2015 .   Security fix : Escape tab switching cookie name in browsable API.  Display input forms in browsable API if  serializer_class  is used, even when  get_serializer  method does not exist on the view. ( #2743 )  Use a password input for the AuthTokenSerializer. ( #2741 )  Fix missing anchor closing tag after next button. ( #2691 )  Fix  lookup_url_kwarg  handling in viewsets. ( #2685 ,  #2591 )  Fix problem with importing  rest_framework.views  in  apps.py  ( #2678 )  LimitOffsetPagination raises  TypeError  if PAGE_SIZE not set ( #2667 ,  #2700 )  German translation for  min_value  field error message references  max_value . ( #2645 )  Remove  MergeDict . ( #2640 )  Support serializing unsaved models with related fields. ( #2637 ,  #2641 )  Allow blank/null on radio.html choices. ( #2631 )",
            "title": "3.1.1"
        },
        {
            "location": "/topics/release-notes/#310",
            "text": "Date :  5th March 2015 .  For full details see the  3.1 release announcement .",
            "title": "3.1.0"
        },
        {
            "location": "/topics/release-notes/#30x-series",
            "text": "",
            "title": "3.0.x series"
        },
        {
            "location": "/topics/release-notes/#305",
            "text": "Date :  10th February 2015 .   Fix a bug where  _closable_objects  breaks pickling. ( #1850 ,  #2492 )  Allow non-standard  User  models with  Throttling . ( #2524 )  Support custom  User.db_table  in TokenAuthentication migration. ( #2479 )  Fix misleading  AttributeError  tracebacks on  Request  objects. ( #2530 ,  #2108 )  ManyRelatedField.get_value  clearing field on partial update. ( #2475 )  Removed '.model' shortcut from code. ( #2486 )  Fix  detail_route  and  list_route  mutable argument. ( #2518 )  Prefetching the user object when getting the token in  TokenAuthentication . ( #2519 )",
            "title": "3.0.5"
        },
        {
            "location": "/topics/release-notes/#304",
            "text": "Date :  28th January 2015 .   Django 1.8a1 support. ( #2425 ,  #2446 ,  #2441 )  Add  DictField  and support Django 1.8  HStoreField . ( #2451 ,  #2106 )  Add  UUIDField  and support Django 1.8  UUIDField . ( #2448 ,  #2433 ,  #2432 )  BaseRenderer.render  now raises  NotImplementedError . ( #2434 )  Fix timedelta JSON serialization on Python 2.6. ( #2430 )  ResultDict  and  ResultList  now appear as standard dict/list. ( #2421 )  Fix visible  HiddenField  in the HTML form of the web browsable API page. ( #2410 )  Use  OrderedDict  for  RelatedField.choices . ( #2408 )  Fix ident format when using  HTTP_X_FORWARDED_FOR . ( #2401 )  Fix invalid key with memcached while using throttling. ( #2400 )  Fix  FileUploadParser  with version 3.x. ( #2399 )  Fix the serializer inheritance. ( #2388 )  Fix caching issues with  ReturnDict . ( #2360 )",
            "title": "3.0.4"
        },
        {
            "location": "/topics/release-notes/#303",
            "text": "Date :  8th January 2015 .   Fix  MinValueValidator  on  models.DateField . ( #2369 )  Fix serializer missing context when pagination is used. ( #2355 )  Namespaced router URLs are now supported by the  DefaultRouter . ( #2351 )  required=False  allows omission of value for output. ( #2342 )  Use textarea input for  models.TextField . ( #2340 )  Use custom  ListSerializer  for pagination if required. ( #2331 ,  #2327 )  Better behavior with null and '' for blank HTML fields. ( #2330 )  Ensure fields in  exclude  are model fields. ( #2319 )  Fix  IntegerField  and  max_length  argument incompatibility. ( #2317 )  Fix the YAML encoder for 3.0 serializers. ( #2315 ,  #2283 )  Fix the behavior of empty HTML fields. ( #2311 ,  #1101 )  Fix Metaclass attribute depth ignoring fields attribute. ( #2287 )  Fix  format_suffix_patterns  to work with Django's  i18n_patterns . ( #2278 )  Ability to customize router URLs for custom actions, using  url_path . ( #2010 )  Don't install Django REST Framework as egg. ( #2386 )",
            "title": "3.0.3"
        },
        {
            "location": "/topics/release-notes/#302",
            "text": "Date :  17th December 2014 .   Ensure  request.user  is made available to response middleware. ( #2155 )  Client.logout()  also cancels any existing  force_authenticate . ( #2218 ,  #2259 )  Extra assertions and better checks to preventing incorrect serializer API use. ( #2228 ,  #2234 ,  #2262 ,  #2263 ,  #2266 ,  #2267 ,  #2289 ,  #2291 )  Fixed  min_length  message for  CharField . ( #2255 )  Fix  UnicodeDecodeError , which can occur on serializer  repr .  ( #2270 ,  #2279 )  Fix empty HTML values when a default is provided. ( #2280 ,  #2294 )  Fix  SlugRelatedField  raising  UnicodeEncodeError  when used as a multiple choice input. ( #2290 )",
            "title": "3.0.2"
        },
        {
            "location": "/topics/release-notes/#301",
            "text": "Date :  11th December 2014 .   More helpful error message when the default Serializer  create()  fails. ( #2013 )  Raise error when attempting to save serializer if data is not valid. ( #2098 )  Fix  FileUploadParser  breaks with empty file names and multiple upload handlers. ( #2109 )  Improve  BindingDict  to support standard dict-functions. ( #2135 ,  #2163 )  Add  validate()  to  ListSerializer . ( #2168 ,  #2225 ,  #2232 )  Fix JSONP renderer failing to escape some characters. ( #2169 ,  #2195 )  Add missing default style for  FileField . ( #2172 )  Actions are required when calling  ViewSet.as_view() . ( #2175 )  Add  allow_blank  to  ChoiceField . ( #2184 ,  #2239 )  Cosmetic fixes in the HTML renderer. ( #2187 )  Raise error if  fields  on serializer is not a list of strings. ( #2193 ,  #2213 )  Improve checks for nested creates and updates. ( #2194 ,  #2196 )  validated_attrs  argument renamed to  validated_data  in  Serializer   create() / update() . ( #2197 )  Remove deprecated code to reflect the dropped Django versions. ( #2200 )  Better serializer errors for nested writes. ( #2202 ,  #2215 )  Fix pagination and custom permissions incompatibility. ( #2205 )  Raise error if  fields  on serializer is not a list of strings. ( #2213 )  Add missing translation markers for relational fields. ( #2231 )  Improve field lookup behavior for dicts/mappings. ( #2244 ,  #2243 )  Optimized hyperlinked PK. ( #2242 )",
            "title": "3.0.1"
        },
        {
            "location": "/topics/release-notes/#300",
            "text": "Date : 1st December 2014  For full details see the  3.0 release announcement .   For older release notes,  please see the version 2.x documentation .",
            "title": "3.0.0"
        },
        {
            "location": "/topics/jobs/",
            "text": "Jobs\n\n\nLooking for a new Django REST Framework related role? On this site we provide a list of job resources that may be helpful. It's also worth checking out if any of \nour sponsors are hiring\n.\n\n\nPlaces to Look for Django REST Framework Jobs\n\n\n\n\nhttps://www.djangoproject.com/community/jobs/\n\n\nhttps://www.python.org/jobs/\n\n\nhttps://djangogigs.com\n\n\nhttps://djangojobs.net/jobs/\n\n\nhttp://djangojobbers.com\n\n\nhttps://www.indeed.com/q-Django-jobs.html\n\n\nhttp://stackoverflow.com/jobs/developer-jobs-using-django\n\n\nhttps://www.upwork.com/o/jobs/browse/skill/django-framework/\n\n\nhttps://www.technojobs.co.uk/django-jobs\n\n\nhttps://remoteok.io/remote-django-jobs\n\n\nhttps://www.remotepython.com/jobs/\n\n\n\n\nKnow of any other great resources for Django REST Framework jobs that are missing in our list? Please \nsubmit a pull request\n or [email us][mailto:anna@django-rest-framework.org].\n\n\nWonder how else you can help? One of the best ways you can help Django REST Framework is to ask interviewers if their company is signed up for \nREST Framework sponsorship\n yet.",
            "title": "Jobs"
        },
        {
            "location": "/topics/jobs/#jobs",
            "text": "Looking for a new Django REST Framework related role? On this site we provide a list of job resources that may be helpful. It's also worth checking out if any of  our sponsors are hiring .",
            "title": "Jobs"
        },
        {
            "location": "/topics/jobs/#places-to-look-for-django-rest-framework-jobs",
            "text": "https://www.djangoproject.com/community/jobs/  https://www.python.org/jobs/  https://djangogigs.com  https://djangojobs.net/jobs/  http://djangojobbers.com  https://www.indeed.com/q-Django-jobs.html  http://stackoverflow.com/jobs/developer-jobs-using-django  https://www.upwork.com/o/jobs/browse/skill/django-framework/  https://www.technojobs.co.uk/django-jobs  https://remoteok.io/remote-django-jobs  https://www.remotepython.com/jobs/   Know of any other great resources for Django REST Framework jobs that are missing in our list? Please  submit a pull request  or [email us][mailto:anna@django-rest-framework.org].  Wonder how else you can help? One of the best ways you can help Django REST Framework is to ask interviewers if their company is signed up for  REST Framework sponsorship  yet.",
            "title": "Places to Look for Django REST Framework Jobs"
        }
    ]
}